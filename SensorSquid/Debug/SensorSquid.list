
SensorSquid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a044  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a670  0800a670  0001a670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0800a674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000644c  200001e8  0800a858  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20006634  0800a858  00026634  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f09e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006567  00000000  00000000  0004f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001a9c6  00000000  00000000  00055819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c58  00000000  00000000  000701e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bf0  00000000  00000000  00071e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029820  00000000  00000000  00073a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030ddd  00000000  00000000  0009d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f6504  00000000  00000000  000ce025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001c4529  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005e78  00000000  00000000  001c457c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001ca3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001ca4c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1fc 	.word	0x0800a1fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a1fc 	.word	0x0800a1fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x30>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fa71 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f005 fff6 	bl	8006f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f005 ffd2 	bl	8006ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x10>)
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_IncTick+0x14>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	440b      	add	r3, r1
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000204 	.word	0x20000204
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <HAL_GetTick+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000204 	.word	0x20000204

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
 8000f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fff6 	bl	8000f38 <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f52:	d002      	beq.n	8000f5a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_Delay+0x24>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	f7ff ffed 	bl	8000f38 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	42a0      	cmp	r0, r4
 8000f62:	d3fa      	bcc.n	8000f5a <HAL_Delay+0x16>
  {
  }
}
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000

08000f6c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <ADC_Init+0x12c>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f74:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	6841      	ldr	r1, [r0, #4]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f7e:	6802      	ldr	r2, [r0, #0]
 8000f80:	6853      	ldr	r3, [r2, #4]
 8000f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f86:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f88:	6802      	ldr	r2, [r0, #0]
 8000f8a:	6853      	ldr	r3, [r2, #4]
 8000f8c:	6901      	ldr	r1, [r0, #16]
 8000f8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f92:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f94:	6802      	ldr	r2, [r0, #0]
 8000f96:	6853      	ldr	r3, [r2, #4]
 8000f98:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f9c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f9e:	6802      	ldr	r2, [r0, #0]
 8000fa0:	6853      	ldr	r3, [r2, #4]
 8000fa2:	6881      	ldr	r1, [r0, #8]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fa8:	6802      	ldr	r2, [r0, #0]
 8000faa:	6893      	ldr	r3, [r2, #8]
 8000fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fb0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fb2:	6802      	ldr	r2, [r0, #0]
 8000fb4:	6893      	ldr	r3, [r2, #8]
 8000fb6:	68c1      	ldr	r1, [r0, #12]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <ADC_Init+0x130>)
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d057      	beq.n	8001074 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fc4:	6802      	ldr	r2, [r0, #0]
 8000fc6:	6893      	ldr	r3, [r2, #8]
 8000fc8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fcc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fce:	6802      	ldr	r2, [r0, #0]
 8000fd0:	6893      	ldr	r3, [r2, #8]
 8000fd2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fd8:	6802      	ldr	r2, [r0, #0]
 8000fda:	6893      	ldr	r3, [r2, #8]
 8000fdc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fe0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fe2:	6802      	ldr	r2, [r0, #0]
 8000fe4:	6893      	ldr	r3, [r2, #8]
 8000fe6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	f023 0302 	bic.w	r3, r3, #2
 8000ff4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ff6:	6802      	ldr	r2, [r0, #0]
 8000ff8:	6893      	ldr	r3, [r2, #8]
 8000ffa:	7e01      	ldrb	r1, [r0, #24]
 8000ffc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001000:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001002:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d03f      	beq.n	800108a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800100a:	6802      	ldr	r2, [r0, #0]
 800100c:	6853      	ldr	r3, [r2, #4]
 800100e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001012:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001014:	6802      	ldr	r2, [r0, #0]
 8001016:	6853      	ldr	r3, [r2, #4]
 8001018:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800101c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800101e:	6801      	ldr	r1, [r0, #0]
 8001020:	684b      	ldr	r3, [r1, #4]
 8001022:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001024:	3a01      	subs	r2, #1
 8001026:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800102a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001030:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001034:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001036:	6801      	ldr	r1, [r0, #0]
 8001038:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800103a:	69c2      	ldr	r2, [r0, #28]
 800103c:	3a01      	subs	r2, #1
 800103e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001042:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001044:	6802      	ldr	r2, [r0, #0]
 8001046:	6893      	ldr	r3, [r2, #8]
 8001048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800104c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800104e:	6802      	ldr	r2, [r0, #0]
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001056:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800105a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800105c:	6802      	ldr	r2, [r0, #0]
 800105e:	6893      	ldr	r3, [r2, #8]
 8001060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001064:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001066:	6802      	ldr	r2, [r0, #0]
 8001068:	6893      	ldr	r3, [r2, #8]
 800106a:	6941      	ldr	r1, [r0, #20]
 800106c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001070:	6093      	str	r3, [r2, #8]
}
 8001072:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001074:	6802      	ldr	r2, [r0, #0]
 8001076:	6893      	ldr	r3, [r2, #8]
 8001078:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800107c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800107e:	6802      	ldr	r2, [r0, #0]
 8001080:	6893      	ldr	r3, [r2, #8]
 8001082:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001086:	6093      	str	r3, [r2, #8]
 8001088:	e7b0      	b.n	8000fec <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800108a:	6802      	ldr	r2, [r0, #0]
 800108c:	6853      	ldr	r3, [r2, #4]
 800108e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001092:	6053      	str	r3, [r2, #4]
 8001094:	e7ca      	b.n	800102c <ADC_Init+0xc0>
 8001096:	bf00      	nop
 8001098:	40012300 	.word	0x40012300
 800109c:	0f000001 	.word	0x0f000001

080010a0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80010a0:	b338      	cbz	r0, 80010f2 <HAL_ADC_Init+0x52>
{
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010a8:	b143      	cbz	r3, 80010bc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ac:	f013 0f10 	tst.w	r3, #16
 80010b0:	d00b      	beq.n	80010ca <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80010b4:	2300      	movs	r3, #0
 80010b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010ba:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80010bc:	f005 f9a2 	bl	8006404 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	2300      	movs	r3, #0
 80010c2:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80010c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80010c8:	e7ef      	b.n	80010aa <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d0:	f023 0302 	bic.w	r3, r3, #2
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff ff46 	bl	8000f6c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	2000      	movs	r0, #0
 80010e2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6423      	str	r3, [r4, #64]	; 0x40
 80010f0:	e7e0      	b.n	80010b4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
}
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_ADC_ConfigChannel>:
{
 80010f8:	b430      	push	{r4, r5}
 80010fa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001100:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001104:	2b01      	cmp	r3, #1
 8001106:	f000 80c0 	beq.w	800128a <HAL_ADC_ConfigChannel+0x192>
 800110a:	2301      	movs	r3, #1
 800110c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001110:	680b      	ldr	r3, [r1, #0]
 8001112:	2b09      	cmp	r3, #9
 8001114:	d941      	bls.n	800119a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001116:	6804      	ldr	r4, [r0, #0]
 8001118:	68e2      	ldr	r2, [r4, #12]
 800111a:	b29b      	uxth	r3, r3
 800111c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001120:	3b1e      	subs	r3, #30
 8001122:	f04f 0c07 	mov.w	ip, #7
 8001126:	fa0c f303 	lsl.w	r3, ip, r3
 800112a:	ea22 0303 	bic.w	r3, r2, r3
 800112e:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001130:	6804      	ldr	r4, [r0, #0]
 8001132:	68e2      	ldr	r2, [r4, #12]
 8001134:	880b      	ldrh	r3, [r1, #0]
 8001136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800113a:	3b1e      	subs	r3, #30
 800113c:	688d      	ldr	r5, [r1, #8]
 800113e:	fa05 f303 	lsl.w	r3, r5, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001146:	684b      	ldr	r3, [r1, #4]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d83d      	bhi.n	80011c8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800114c:	6804      	ldr	r4, [r0, #0]
 800114e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001150:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001154:	3b05      	subs	r3, #5
 8001156:	f04f 0c1f 	mov.w	ip, #31
 800115a:	fa0c f303 	lsl.w	r3, ip, r3
 800115e:	ea22 0303 	bic.w	r3, r2, r3
 8001162:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001164:	6804      	ldr	r4, [r0, #0]
 8001166:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001168:	684b      	ldr	r3, [r1, #4]
 800116a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800116e:	3b05      	subs	r3, #5
 8001170:	f8b1 c000 	ldrh.w	ip, [r1]
 8001174:	fa0c f303 	lsl.w	r3, ip, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800117c:	6802      	ldr	r2, [r0, #0]
 800117e:	4b44      	ldr	r3, [pc, #272]	; (8001290 <HAL_ADC_ConfigChannel+0x198>)
 8001180:	429a      	cmp	r2, r3
 8001182:	d051      	beq.n	8001228 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001184:	6802      	ldr	r2, [r0, #0]
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_ADC_ConfigChannel+0x198>)
 8001188:	429a      	cmp	r2, r3
 800118a:	d05a      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800118c:	2300      	movs	r3, #0
 800118e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001192:	4618      	mov	r0, r3
}
 8001194:	b002      	add	sp, #8
 8001196:	bc30      	pop	{r4, r5}
 8001198:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800119a:	6804      	ldr	r4, [r0, #0]
 800119c:	6922      	ldr	r2, [r4, #16]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011a4:	f04f 0c07 	mov.w	ip, #7
 80011a8:	fa0c f303 	lsl.w	r3, ip, r3
 80011ac:	ea22 0303 	bic.w	r3, r2, r3
 80011b0:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011b2:	6804      	ldr	r4, [r0, #0]
 80011b4:	6922      	ldr	r2, [r4, #16]
 80011b6:	880b      	ldrh	r3, [r1, #0]
 80011b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011bc:	688d      	ldr	r5, [r1, #8]
 80011be:	fa05 f303 	lsl.w	r3, r5, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	6123      	str	r3, [r4, #16]
 80011c6:	e7be      	b.n	8001146 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d816      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011cc:	6805      	ldr	r5, [r0, #0]
 80011ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80011d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011d4:	3b23      	subs	r3, #35	; 0x23
 80011d6:	241f      	movs	r4, #31
 80011d8:	fa04 f303 	lsl.w	r3, r4, r3
 80011dc:	ea22 0303 	bic.w	r3, r2, r3
 80011e0:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	6805      	ldr	r5, [r0, #0]
 80011e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80011e6:	684b      	ldr	r3, [r1, #4]
 80011e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	880c      	ldrh	r4, [r1, #0]
 80011f0:	fa04 f303 	lsl.w	r3, r4, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	632b      	str	r3, [r5, #48]	; 0x30
 80011f8:	e7c0      	b.n	800117c <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fa:	6805      	ldr	r5, [r0, #0]
 80011fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80011fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001202:	3b41      	subs	r3, #65	; 0x41
 8001204:	241f      	movs	r4, #31
 8001206:	fa04 f303 	lsl.w	r3, r4, r3
 800120a:	ea22 0303 	bic.w	r3, r2, r3
 800120e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001210:	6805      	ldr	r5, [r0, #0]
 8001212:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001214:	684b      	ldr	r3, [r1, #4]
 8001216:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	880c      	ldrh	r4, [r1, #0]
 800121e:	fa04 f303 	lsl.w	r3, r4, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001226:	e7a9      	b.n	800117c <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001228:	680b      	ldr	r3, [r1, #0]
 800122a:	2b12      	cmp	r3, #18
 800122c:	d1aa      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x8c>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_ConfigChannel+0x19c>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001236:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	e7a0      	b.n	8001184 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001242:	680b      	ldr	r3, [r1, #0]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_ADC_ConfigChannel+0x1a0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d001      	beq.n	800124e <HAL_ADC_ConfigChannel+0x156>
 800124a:	2b11      	cmp	r3, #17
 800124c:	d19e      	bne.n	800118c <HAL_ADC_ConfigChannel+0x94>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_ADC_ConfigChannel+0x19c>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001256:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800125e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001260:	680a      	ldr	r2, [r1, #0]
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_ADC_ConfigChannel+0x1a0>)
 8001264:	429a      	cmp	r2, r3
 8001266:	d191      	bne.n	800118c <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_ADC_ConfigChannel+0x1a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <HAL_ADC_ConfigChannel+0x1a8>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9b      	lsrs	r3, r3, #18
 8001274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d084      	beq.n	800118c <HAL_ADC_ConfigChannel+0x94>
        counter--;
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	3b01      	subs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	e7f8      	b.n	800127c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800128a:	2002      	movs	r0, #2
 800128c:	e782      	b.n	8001194 <HAL_ADC_ConfigChannel+0x9c>
 800128e:	bf00      	nop
 8001290:	40012000 	.word	0x40012000
 8001294:	40012300 	.word	0x40012300
 8001298:	10000012 	.word	0x10000012
 800129c:	20000010 	.word	0x20000010
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012a4:	2800      	cmp	r0, #0
 80012a6:	f000 80a1 	beq.w	80013ec <HAL_CAN_Init+0x148>
{
 80012aa:	b538      	push	{r3, r4, r5, lr}
 80012ac:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012b2:	b1d3      	cbz	r3, 80012ea <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012be:	f7ff fe3b 	bl	8000f38 <HAL_GetTick>
 80012c2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	f012 0f01 	tst.w	r2, #1
 80012cc:	d110      	bne.n	80012f0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ce:	f7ff fe33 	bl	8000f38 <HAL_GetTick>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	280a      	cmp	r0, #10
 80012d6:	d9f5      	bls.n	80012c4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012de:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e0:	2305      	movs	r3, #5
 80012e2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80012ea:	f005 f989 	bl	8006600 <HAL_CAN_MspInit>
 80012ee:	e7e1      	b.n	80012b4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f022 0202 	bic.w	r2, r2, #2
 80012f6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80012f8:	f7ff fe1e 	bl	8000f38 <HAL_GetTick>
 80012fc:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	f012 0f02 	tst.w	r2, #2
 8001306:	d00d      	beq.n	8001324 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001308:	f7ff fe16 	bl	8000f38 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	280a      	cmp	r0, #10
 8001310:	d9f5      	bls.n	80012fe <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800131a:	2305      	movs	r3, #5
 800131c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	e7e1      	b.n	80012e8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001324:	7e22      	ldrb	r2, [r4, #24]
 8001326:	2a01      	cmp	r2, #1
 8001328:	d03d      	beq.n	80013a6 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001330:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001332:	7e63      	ldrb	r3, [r4, #25]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d03b      	beq.n	80013b0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001340:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001342:	7ea3      	ldrb	r3, [r4, #26]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d039      	beq.n	80013bc <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001348:	6822      	ldr	r2, [r4, #0]
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f023 0320 	bic.w	r3, r3, #32
 8001350:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001352:	7ee3      	ldrb	r3, [r4, #27]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d037      	beq.n	80013c8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001362:	7f23      	ldrb	r3, [r4, #28]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d035      	beq.n	80013d4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001368:	6822      	ldr	r2, [r4, #0]
 800136a:	6813      	ldr	r3, [r2, #0]
 800136c:	f023 0308 	bic.w	r3, r3, #8
 8001370:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001372:	7f63      	ldrb	r3, [r4, #29]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d033      	beq.n	80013e0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	68e2      	ldr	r2, [r4, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	6922      	ldr	r2, [r4, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	6962      	ldr	r2, [r4, #20]
 800138e:	4313      	orrs	r3, r2
 8001390:	6862      	ldr	r2, [r4, #4]
 8001392:	3a01      	subs	r2, #1
 8001394:	6821      	ldr	r1, [r4, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800139a:	2000      	movs	r0, #0
 800139c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800139e:	2301      	movs	r3, #1
 80013a0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80013a4:	e7a0      	b.n	80012e8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e7c0      	b.n	8001332 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e7c2      	b.n	8001342 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013bc:	6822      	ldr	r2, [r4, #0]
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e7c4      	b.n	8001352 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c8:	6822      	ldr	r2, [r4, #0]
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f023 0310 	bic.w	r3, r3, #16
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e7c6      	b.n	8001362 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e7c8      	b.n	8001372 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e7ca      	b.n	8001382 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80013ec:	2001      	movs	r0, #1
}
 80013ee:	4770      	bx	lr

080013f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	0200      	lsls	r0, r0, #8
 80013fe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001402:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800140c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001414:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_NVIC_SetPriority+0x68>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141e:	f1c3 0c07 	rsb	ip, r3, #7
 8001422:	f1bc 0f04 	cmp.w	ip, #4
 8001426:	bf28      	it	cs
 8001428:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142c:	f103 0e04 	add.w	lr, r3, #4
 8001430:	f1be 0f06 	cmp.w	lr, #6
 8001434:	d918      	bls.n	8001468 <HAL_NVIC_SetPriority+0x54>
 8001436:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 3eff 	mov.w	lr, #4294967295
 800143c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001440:	ea21 010c 	bic.w	r1, r1, ip
 8001444:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001446:	fa0e f303 	lsl.w	r3, lr, r3
 800144a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001450:	2800      	cmp	r0, #0
 8001452:	db0b      	blt.n	800146c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	0109      	lsls	r1, r1, #4
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800145c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001460:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001464:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001468:	2300      	movs	r3, #0
 800146a:	e7e5      	b.n	8001438 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	f000 000f 	and.w	r0, r0, #15
 8001470:	0109      	lsls	r1, r1, #4
 8001472:	b2c9      	uxtb	r1, r1
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_NVIC_SetPriority+0x6c>)
 8001476:	5419      	strb	r1, [r3, r0]
 8001478:	e7f4      	b.n	8001464 <HAL_NVIC_SetPriority+0x50>
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed14 	.word	0xe000ed14

08001484 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001484:	2800      	cmp	r0, #0
 8001486:	db07      	blt.n	8001498 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001488:	f000 021f 	and.w	r2, r0, #31
 800148c:	0940      	lsrs	r0, r0, #5
 800148e:	2301      	movs	r3, #1
 8001490:	4093      	lsls	r3, r2
 8001492:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_NVIC_EnableIRQ+0x18>)
 8001494:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014a2:	6805      	ldr	r5, [r0, #0]
 80014a4:	682c      	ldr	r4, [r5, #0]
 80014a6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80014aa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ac:	6804      	ldr	r4, [r0, #0]
 80014ae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014b0:	6883      	ldr	r3, [r0, #8]
 80014b2:	2b40      	cmp	r3, #64	; 0x40
 80014b4:	d005      	beq.n	80014c2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80014b6:	6803      	ldr	r3, [r0, #0]
 80014b8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80014ba:	6803      	ldr	r3, [r0, #0]
 80014bc:	60da      	str	r2, [r3, #12]
  }
}
 80014be:	bc30      	pop	{r4, r5}
 80014c0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80014c2:	6803      	ldr	r3, [r0, #0]
 80014c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80014c6:	6803      	ldr	r3, [r0, #0]
 80014c8:	60d9      	str	r1, [r3, #12]
 80014ca:	e7f8      	b.n	80014be <DMA_SetConfig+0x1e>

080014cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014cc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ce:	6803      	ldr	r3, [r0, #0]
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	3910      	subs	r1, #16
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <DMA_CalcBaseAndBitshift+0x3c>)
 80014d6:	fba2 4201 	umull	r4, r2, r2, r1
 80014da:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <DMA_CalcBaseAndBitshift+0x40>)
 80014de:	5ca2      	ldrb	r2, [r4, r2]
 80014e0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014e2:	295f      	cmp	r1, #95	; 0x5f
 80014e4:	d909      	bls.n	80014fa <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ea:	f023 0303 	bic.w	r3, r3, #3
 80014ee:	3304      	adds	r3, #4
 80014f0:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80014f2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014fe:	f023 0303 	bic.w	r3, r3, #3
 8001502:	6583      	str	r3, [r0, #88]	; 0x58
 8001504:	e7f5      	b.n	80014f2 <DMA_CalcBaseAndBitshift+0x26>
 8001506:	bf00      	nop
 8001508:	aaaaaaab 	.word	0xaaaaaaab
 800150c:	0800a218 	.word	0x0800a218

08001510 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001510:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001512:	6982      	ldr	r2, [r0, #24]
 8001514:	b992      	cbnz	r2, 800153c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001516:	2b01      	cmp	r3, #1
 8001518:	d00a      	beq.n	8001530 <DMA_CheckFifoParam+0x20>
 800151a:	2b02      	cmp	r3, #2
 800151c:	d002      	beq.n	8001524 <DMA_CheckFifoParam+0x14>
 800151e:	b10b      	cbz	r3, 8001524 <DMA_CheckFifoParam+0x14>
 8001520:	2000      	movs	r0, #0
 8001522:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001524:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001526:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800152a:	d128      	bne.n	800157e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800152c:	2000      	movs	r0, #0
 800152e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001530:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001536:	d024      	beq.n	8001582 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800153c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001540:	d009      	beq.n	8001556 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001542:	2b02      	cmp	r3, #2
 8001544:	d925      	bls.n	8001592 <DMA_CheckFifoParam+0x82>
 8001546:	2b03      	cmp	r3, #3
 8001548:	d125      	bne.n	8001596 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800154a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800154c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001550:	d123      	bne.n	800159a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2000      	movs	r0, #0
 8001554:	4770      	bx	lr
    switch (tmp)
 8001556:	2b03      	cmp	r3, #3
 8001558:	d803      	bhi.n	8001562 <DMA_CheckFifoParam+0x52>
 800155a:	e8df f003 	tbb	[pc, r3]
 800155e:	0414      	.short	0x0414
 8001560:	0a14      	.short	0x0a14
 8001562:	2000      	movs	r0, #0
 8001564:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800156c:	d10d      	bne.n	800158a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2000      	movs	r0, #0
 8001570:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001578:	d009      	beq.n	800158e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	4770      	bx	lr
        status = HAL_ERROR;
 800157e:	2001      	movs	r0, #1
 8001580:	4770      	bx	lr
        status = HAL_ERROR;
 8001582:	2001      	movs	r0, #1
 8001584:	4770      	bx	lr
      status = HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	4770      	bx	lr
        status = HAL_ERROR;
 800158a:	2001      	movs	r0, #1
 800158c:	4770      	bx	lr
        status = HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	4770      	bx	lr
      status = HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	4770      	bx	lr
    switch (tmp)
 8001596:	2000      	movs	r0, #0
 8001598:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800159a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_DMA_Init>:
{
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fcc8 	bl	8000f38 <HAL_GetTick>
  if(hdma == NULL)
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d05b      	beq.n	8001664 <HAL_DMA_Init+0xc4>
 80015ac:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80015b4:	2300      	movs	r3, #0
 80015b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	f012 0f01 	tst.w	r2, #1
 80015cc:	d00a      	beq.n	80015e4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ce:	f7ff fcb3 	bl	8000f38 <HAL_GetTick>
 80015d2:	1b43      	subs	r3, r0, r5
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d9f5      	bls.n	80015c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d8:	2320      	movs	r3, #32
 80015da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015dc:	2003      	movs	r0, #3
 80015de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80015e4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <HAL_DMA_Init+0xc8>)
 80015e8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ea:	6861      	ldr	r1, [r4, #4]
 80015ec:	68a2      	ldr	r2, [r4, #8]
 80015ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	6921      	ldr	r1, [r4, #16]
 80015f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	69a1      	ldr	r1, [r4, #24]
 80015fe:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001600:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001602:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	6a21      	ldr	r1, [r4, #32]
 8001606:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001608:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800160c:	2904      	cmp	r1, #4
 800160e:	d01e      	beq.n	800164e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001610:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001612:	6826      	ldr	r6, [r4, #0]
 8001614:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001616:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800161a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800161c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161e:	2b04      	cmp	r3, #4
 8001620:	d107      	bne.n	8001632 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001624:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001628:	b11b      	cbz	r3, 8001632 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff ff70 	bl	8001510 <DMA_CheckFifoParam>
 8001630:	b990      	cbnz	r0, 8001658 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001632:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ff49 	bl	80014cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800163a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800163c:	233f      	movs	r3, #63	; 0x3f
 800163e:	4093      	lsls	r3, r2
 8001640:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001642:	2000      	movs	r0, #0
 8001644:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	2301      	movs	r3, #1
 8001648:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800164c:	e7c9      	b.n	80015e2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800164e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001650:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001652:	4301      	orrs	r1, r0
 8001654:	430a      	orrs	r2, r1
 8001656:	e7db      	b.n	8001610 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800165c:	2001      	movs	r0, #1
 800165e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001662:	e7be      	b.n	80015e2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001664:	2001      	movs	r0, #1
 8001666:	e7bc      	b.n	80015e2 <HAL_DMA_Init+0x42>
 8001668:	f010803f 	.word	0xf010803f

0800166c <HAL_DMA_Start_IT>:
{
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001670:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001672:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001676:	2801      	cmp	r0, #1
 8001678:	d02b      	beq.n	80016d2 <HAL_DMA_Start_IT+0x66>
 800167a:	2001      	movs	r0, #1
 800167c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001680:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001684:	b2c0      	uxtb	r0, r0
 8001686:	2801      	cmp	r0, #1
 8001688:	d004      	beq.n	8001694 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800168a:	2300      	movs	r3, #0
 800168c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001690:	2002      	movs	r0, #2
}
 8001692:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	2002      	movs	r0, #2
 8001696:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	2000      	movs	r0, #0
 800169c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fefe 	bl	80014a0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016a6:	233f      	movs	r3, #63	; 0x3f
 80016a8:	4093      	lsls	r3, r2
 80016aa:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016ac:	6822      	ldr	r2, [r4, #0]
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	f043 0316 	orr.w	r3, r3, #22
 80016b4:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80016b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b8:	b123      	cbz	r3, 80016c4 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2000      	movs	r0, #0
 80016d0:	e7df      	b.n	8001692 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80016d2:	2002      	movs	r0, #2
 80016d4:	e7dd      	b.n	8001692 <HAL_DMA_Start_IT+0x26>

080016d6 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
 80016e6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e8:	2305      	movs	r3, #5
 80016ea:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016ee:	6802      	ldr	r2, [r0, #0]
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80016f8:	2000      	movs	r0, #0
}
 80016fa:	4770      	bx	lr

080016fc <HAL_DMA_IRQHandler>:
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001706:	4b72      	ldr	r3, [pc, #456]	; (80018d0 <HAL_DMA_IRQHandler+0x1d4>)
 8001708:	681d      	ldr	r5, [r3, #0]
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_DMA_IRQHandler+0x1d8>)
 800170c:	fba3 3505 	umull	r3, r5, r3, r5
 8001710:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001712:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001714:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001716:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001718:	2308      	movs	r3, #8
 800171a:	4093      	lsls	r3, r2
 800171c:	4233      	tst	r3, r6
 800171e:	d010      	beq.n	8001742 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001720:	6803      	ldr	r3, [r0, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f012 0f04 	tst.w	r2, #4
 8001728:	d00b      	beq.n	8001742 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	f022 0204 	bic.w	r2, r2, #4
 8001730:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001732:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001734:	2308      	movs	r3, #8
 8001736:	4093      	lsls	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800173a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001744:	2301      	movs	r3, #1
 8001746:	4093      	lsls	r3, r2
 8001748:	4233      	tst	r3, r6
 800174a:	d009      	beq.n	8001760 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800174c:	6822      	ldr	r2, [r4, #0]
 800174e:	6952      	ldr	r2, [r2, #20]
 8001750:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001754:	d004      	beq.n	8001760 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001756:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001758:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001762:	2304      	movs	r3, #4
 8001764:	4093      	lsls	r3, r2
 8001766:	4233      	tst	r3, r6
 8001768:	d009      	beq.n	800177e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800176a:	6822      	ldr	r2, [r4, #0]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f012 0f02 	tst.w	r2, #2
 8001772:	d004      	beq.n	800177e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001774:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800177e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001780:	2310      	movs	r3, #16
 8001782:	4093      	lsls	r3, r2
 8001784:	4233      	tst	r3, r6
 8001786:	d024      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f012 0f08 	tst.w	r2, #8
 8001790:	d01f      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001792:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800179c:	d00d      	beq.n	80017ba <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80017a4:	d104      	bne.n	80017b0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80017a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017a8:	b19b      	cbz	r3, 80017d2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80017aa:	4620      	mov	r0, r4
 80017ac:	4798      	blx	r3
 80017ae:	e010      	b.n	80017d2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017b2:	b173      	cbz	r3, 80017d2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80017b4:	4620      	mov	r0, r4
 80017b6:	4798      	blx	r3
 80017b8:	e00b      	b.n	80017d2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017c0:	d103      	bne.n	80017ca <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80017ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017cc:	b10b      	cbz	r3, 80017d2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80017ce:	4620      	mov	r0, r4
 80017d0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017d4:	2320      	movs	r3, #32
 80017d6:	4093      	lsls	r3, r2
 80017d8:	4233      	tst	r3, r6
 80017da:	d055      	beq.n	8001888 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017dc:	6822      	ldr	r2, [r4, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f012 0f10 	tst.w	r2, #16
 80017e4:	d050      	beq.n	8001888 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017e6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d00e      	beq.n	8001810 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80017fa:	d033      	beq.n	8001864 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001802:	d12a      	bne.n	800185a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03e      	beq.n	8001888 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800180a:	4620      	mov	r0, r4
 800180c:	4798      	blx	r3
 800180e:	e03b      	b.n	8001888 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001810:	6822      	ldr	r2, [r4, #0]
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	f023 0316 	bic.w	r3, r3, #22
 8001818:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	6953      	ldr	r3, [r2, #20]
 800181e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001822:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001826:	b1a3      	cbz	r3, 8001852 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f023 0308 	bic.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001834:	233f      	movs	r3, #63	; 0x3f
 8001836:	4093      	lsls	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800183a:	2301      	movs	r3, #1
 800183c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001840:	2300      	movs	r3, #0
 8001842:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001846:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03f      	beq.n	80018cc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800184c:	4620      	mov	r0, r4
 800184e:	4798      	blx	r3
        return;
 8001850:	e03c      	b.n	80018cc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001852:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e7      	bne.n	8001828 <HAL_DMA_IRQHandler+0x12c>
 8001858:	e7eb      	b.n	8001832 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800185a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800185c:	b1a3      	cbz	r3, 8001888 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800185e:	4620      	mov	r0, r4
 8001860:	4798      	blx	r3
 8001862:	e011      	b.n	8001888 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f412 7f80 	tst.w	r2, #256	; 0x100
 800186a:	d109      	bne.n	8001880 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f022 0210 	bic.w	r2, r2, #16
 8001872:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001874:	2301      	movs	r3, #1
 8001876:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800187a:	2300      	movs	r3, #0
 800187c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001882:	b10b      	cbz	r3, 8001888 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001884:	4620      	mov	r0, r4
 8001886:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800188a:	b1fb      	cbz	r3, 80018cc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800188c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800188e:	f013 0f01 	tst.w	r3, #1
 8001892:	d017      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001894:	2305      	movs	r3, #5
 8001896:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	6813      	ldr	r3, [r2, #0]
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80018a4:	9b01      	ldr	r3, [sp, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	42ab      	cmp	r3, r5
 80018ac:	d804      	bhi.n	80018b8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f013 0f01 	tst.w	r3, #1
 80018b6:	d1f5      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80018be:	2300      	movs	r3, #0
 80018c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80018c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018c6:	b10b      	cbz	r3, 80018cc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80018c8:	4620      	mov	r0, r4
 80018ca:	4798      	blx	r3
}
 80018cc:	b003      	add	sp, #12
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d0:	20000010 	.word	0x20000010
 80018d4:	1b4e81b5 	.word	0x1b4e81b5

080018d8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80018d8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018dc:	2300      	movs	r3, #0
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f200 80de 	bhi.w	8001aa0 <HAL_GPIO_Init+0x1c4>
{
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	e060      	b.n	80019ac <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	005e      	lsls	r6, r3, #1
 80018ee:	2403      	movs	r4, #3
 80018f0:	40b4      	lsls	r4, r6
 80018f2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	68cc      	ldr	r4, [r1, #12]
 80018f8:	40b4      	lsls	r4, r6
 80018fa:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80018fc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	684c      	ldr	r4, [r1, #4]
 8001906:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800190e:	6042      	str	r2, [r0, #4]
 8001910:	e05a      	b.n	80019c8 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001912:	08dc      	lsrs	r4, r3, #3
 8001914:	3408      	adds	r4, #8
 8001916:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800191a:	f003 0207 	and.w	r2, r3, #7
 800191e:	0095      	lsls	r5, r2, #2
 8001920:	220f      	movs	r2, #15
 8001922:	40aa      	lsls	r2, r5
 8001924:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	690a      	ldr	r2, [r1, #16]
 800192a:	40aa      	lsls	r2, r5
 800192c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001934:	e05c      	b.n	80019f0 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	2206      	movs	r2, #6
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x60>
 800193a:	2200      	movs	r2, #0
 800193c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001940:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001942:	3402      	adds	r4, #2
 8001944:	4d57      	ldr	r5, [pc, #348]	; (8001aa4 <HAL_GPIO_Init+0x1c8>)
 8001946:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <HAL_GPIO_Init+0x1cc>)
 800194c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800194e:	ea6f 020c 	mvn.w	r2, ip
 8001952:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	684e      	ldr	r6, [r1, #4]
 8001958:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800195c:	d001      	beq.n	8001962 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800195e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001962:	4c51      	ldr	r4, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x1cc>)
 8001964:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001966:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001968:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	684e      	ldr	r6, [r1, #4]
 800196e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001972:	d001      	beq.n	8001978 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001974:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001978:	4c4b      	ldr	r4, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x1cc>)
 800197a:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800197c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800197e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001982:	684e      	ldr	r6, [r1, #4]
 8001984:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001988:	d001      	beq.n	800198e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800198a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800198e:	4c46      	ldr	r4, [pc, #280]	; (8001aa8 <HAL_GPIO_Init+0x1cc>)
 8001990:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001992:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001994:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001996:	684d      	ldr	r5, [r1, #4]
 8001998:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800199c:	d001      	beq.n	80019a2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 800199e:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80019a2:	4c41      	ldr	r4, [pc, #260]	; (8001aa8 <HAL_GPIO_Init+0x1cc>)
 80019a4:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	3301      	adds	r3, #1
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d877      	bhi.n	8001a9c <HAL_GPIO_Init+0x1c0>
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b0:	680c      	ldr	r4, [r1, #0]
 80019b2:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80019b6:	ea32 0404 	bics.w	r4, r2, r4
 80019ba:	d1f4      	bne.n	80019a6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019bc:	684c      	ldr	r4, [r1, #4]
 80019be:	f004 0403 	and.w	r4, r4, #3
 80019c2:	3c01      	subs	r4, #1
 80019c4:	2c01      	cmp	r4, #1
 80019c6:	d990      	bls.n	80018ea <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	684a      	ldr	r2, [r1, #4]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	2a03      	cmp	r2, #3
 80019d0:	d009      	beq.n	80019e6 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 80019d2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d4:	005d      	lsls	r5, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	40aa      	lsls	r2, r5
 80019da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019de:	688a      	ldr	r2, [r1, #8]
 80019e0:	40aa      	lsls	r2, r5
 80019e2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80019e4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e6:	684a      	ldr	r2, [r1, #4]
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	2a02      	cmp	r2, #2
 80019ee:	d090      	beq.n	8001912 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80019f0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80019fc:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	684a      	ldr	r2, [r1, #4]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	fa02 f20e 	lsl.w	r2, r2, lr
 8001a0a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001a0c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0e:	684a      	ldr	r2, [r1, #4]
 8001a10:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001a14:	d0c7      	beq.n	80019a6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2200      	movs	r2, #0
 8001a18:	9201      	str	r2, [sp, #4]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x1d0>)
 8001a1c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001a1e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a22:	6454      	str	r4, [r2, #68]	; 0x44
 8001a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a2a:	9201      	str	r2, [sp, #4]
 8001a2c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	089c      	lsrs	r4, r3, #2
 8001a30:	1ca5      	adds	r5, r4, #2
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_GPIO_Init+0x1c8>)
 8001a34:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f20e 	lsl.w	r2, r2, lr
 8001a46:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x1d4>)
 8001a4c:	4290      	cmp	r0, r2
 8001a4e:	f43f af74 	beq.w	800193a <HAL_GPIO_Init+0x5e>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d016      	beq.n	8001a88 <HAL_GPIO_Init+0x1ac>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d014      	beq.n	8001a8c <HAL_GPIO_Init+0x1b0>
 8001a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d012      	beq.n	8001a90 <HAL_GPIO_Init+0x1b4>
 8001a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d010      	beq.n	8001a94 <HAL_GPIO_Init+0x1b8>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d00e      	beq.n	8001a98 <HAL_GPIO_Init+0x1bc>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	f43f af59 	beq.w	8001936 <HAL_GPIO_Init+0x5a>
 8001a84:	2207      	movs	r2, #7
 8001a86:	e759      	b.n	800193c <HAL_GPIO_Init+0x60>
 8001a88:	2201      	movs	r2, #1
 8001a8a:	e757      	b.n	800193c <HAL_GPIO_Init+0x60>
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	e755      	b.n	800193c <HAL_GPIO_Init+0x60>
 8001a90:	2203      	movs	r2, #3
 8001a92:	e753      	b.n	800193c <HAL_GPIO_Init+0x60>
 8001a94:	2204      	movs	r2, #4
 8001a96:	e751      	b.n	800193c <HAL_GPIO_Init+0x60>
 8001a98:	2205      	movs	r2, #5
 8001a9a:	e74f      	b.n	800193c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40013c00 	.word	0x40013c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	6903      	ldr	r3, [r0, #16]
 8001ab6:	4219      	tst	r1, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001aba:	2001      	movs	r0, #1
 8001abc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_PWREx_EnableOverDrive+0x70>)
 8001ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_PWREx_EnableOverDrive+0x74>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae6:	f7ff fa27 	bl	8000f38 <HAL_GetTick>
 8001aea:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_PWREx_EnableOverDrive+0x78>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001af4:	d108      	bne.n	8001b08 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001af6:	f7ff fa1f 	bl	8000f38 <HAL_GetTick>
 8001afa:	1b00      	subs	r0, r0, r4
 8001afc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b00:	d9f4      	bls.n	8001aec <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001b02:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001b04:	b002      	add	sp, #8
 8001b06:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_PWREx_EnableOverDrive+0x74>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001b0e:	f7ff fa13 	bl	8000f38 <HAL_GetTick>
 8001b12:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_PWREx_EnableOverDrive+0x78>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b1c:	d107      	bne.n	8001b2e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b1e:	f7ff fa0b 	bl	8000f38 <HAL_GetTick>
 8001b22:	1b00      	subs	r0, r0, r4
 8001b24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b28:	d9f4      	bls.n	8001b14 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	e7ea      	b.n	8001b04 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7e8      	b.n	8001b04 <HAL_PWREx_EnableOverDrive+0x40>
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	420e0000 	.word	0x420e0000
 8001b3c:	40007000 	.word	0x40007000

08001b40 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b40:	2800      	cmp	r0, #0
 8001b42:	f000 809b 	beq.w	8001c7c <HAL_RCC_ClockConfig+0x13c>
{
 8001b46:	b570      	push	{r4, r5, r6, lr}
 8001b48:	460d      	mov	r5, r1
 8001b4a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCC_ClockConfig+0x14c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d208      	bcs.n	8001b6a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b58:	b2cb      	uxtb	r3, r1
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_RCC_ClockConfig+0x14c>)
 8001b5c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	428b      	cmp	r3, r1
 8001b66:	f040 808b 	bne.w	8001c80 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	f013 0f02 	tst.w	r3, #2
 8001b70:	d017      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	f013 0f04 	tst.w	r3, #4
 8001b76:	d004      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001b7a:	6893      	ldr	r3, [r2, #8]
 8001b7c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b80:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f013 0f08 	tst.w	r3, #8
 8001b88:	d004      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b8a:	4a41      	ldr	r2, [pc, #260]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001b8c:	6893      	ldr	r3, [r2, #8]
 8001b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001b96:	6893      	ldr	r3, [r2, #8]
 8001b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b9c:	68a1      	ldr	r1, [r4, #8]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	f013 0f01 	tst.w	r3, #1
 8001ba8:	d032      	beq.n	8001c10 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d021      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb0:	1e9a      	subs	r2, r3, #2
 8001bb2:	2a01      	cmp	r2, #1
 8001bb4:	d925      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	f012 0f02 	tst.w	r2, #2
 8001bbe:	d061      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc0:	4933      	ldr	r1, [pc, #204]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001bc2:	688a      	ldr	r2, [r1, #8]
 8001bc4:	f022 0203 	bic.w	r2, r2, #3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f9b4 	bl	8000f38 <HAL_GetTick>
 8001bd0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001be0:	d016      	beq.n	8001c10 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7ff f9a9 	bl	8000f38 <HAL_GetTick>
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bec:	4298      	cmp	r0, r3
 8001bee:	d9f0      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	e042      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001bfc:	d1e0      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001bfe:	2001      	movs	r0, #1
 8001c00:	e03b      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001c0a:	d1d9      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e034      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_ClockConfig+0x14c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	42ab      	cmp	r3, r5
 8001c1a:	d907      	bls.n	8001c2c <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	b2ea      	uxtb	r2, r5
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_ClockConfig+0x14c>)
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	42ab      	cmp	r3, r5
 8001c2a:	d12d      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f013 0f04 	tst.w	r3, #4
 8001c32:	d006      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001c36:	6893      	ldr	r3, [r2, #8]
 8001c38:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c3c:	68e1      	ldr	r1, [r4, #12]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f013 0f08 	tst.w	r3, #8
 8001c48:	d007      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001c4c:	6893      	ldr	r3, [r2, #8]
 8001c4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c52:	6921      	ldr	r1, [r4, #16]
 8001c54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c58:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c5a:	f000 fa9f 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_ClockConfig+0x150>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x154>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	40d8      	lsrs	r0, r3
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x158>)
 8001c6e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x15c>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f005 f944 	bl	8006f00 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c7c:	2001      	movs	r0, #1
}
 8001c7e:	4770      	bx	lr
      return HAL_ERROR;
 8001c80:	2001      	movs	r0, #1
 8001c82:	e7fa      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
 8001c86:	e7f8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
 8001c8a:	e7f6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x13a>
 8001c8c:	40023c00 	.word	0x40023c00
 8001c90:	40023800 	.word	0x40023800
 8001c94:	0800a260 	.word	0x0800a260
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000010 	.word	0x20000010

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cae:	f7ff fff7 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001cba:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cbe:	40d8      	lsrs	r0, r3
 8001cc0:	bd08      	pop	{r3, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	0800a270 	.word	0x0800a270

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cce:	f7ff ffe7 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001cda:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cde:	40d8      	lsrs	r0, r3
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	0800a270 	.word	0x0800a270

08001cec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cec:	230f      	movs	r3, #15
 8001cee:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_GetClockConfig+0x34>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d00:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001d08:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d12:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetClockConfig+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	600b      	str	r3, [r1, #0]
}
 8001d1e:	4770      	bx	lr
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d2e:	6806      	ldr	r6, [r0, #0]
 8001d30:	f016 0601 	ands.w	r6, r6, #1
 8001d34:	d00d      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d36:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d40:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001d42:	430b      	orrs	r3, r1
 8001d44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 809b 	beq.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 8001d50:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	f013 0f02 	tst.w	r3, #2
 8001d58:	d00b      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d5a:	4a8d      	ldr	r2, [pc, #564]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d5c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d60:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001d64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d66:	430b      	orrs	r3, r1
 8001d68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d6e:	b903      	cbnz	r3, 8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 8001d70:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d72:	6825      	ldr	r5, [r4, #0]
 8001d74:	f015 0504 	ands.w	r5, r5, #4
 8001d78:	d00f      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7a:	4a85      	ldr	r2, [pc, #532]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d7c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d92:	d07a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 8001d98:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f013 0f08 	tst.w	r3, #8
 8001da0:	d00e      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001da2:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001da4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001da8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dae:	430b      	orrs	r3, r1
 8001db0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dba:	d06a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dbc:	b903      	cbnz	r3, 8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 8001dbe:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f013 0f20 	tst.w	r3, #32
 8001dc6:	d166      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	f013 0f10 	tst.w	r3, #16
 8001dce:	d004      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dd0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001dd6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001de0:	d008      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001de2:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001de4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001de8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001dee:	430b      	orrs	r3, r1
 8001df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dfc:	4a64      	ldr	r2, [pc, #400]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001dfe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001e02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e14:	d00d      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e16:	4a5e      	ldr	r2, [pc, #376]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e18:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001e1c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001e20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e22:	430b      	orrs	r3, r1
 8001e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001e28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e2e:	f000 809b 	beq.w	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e38:	d008      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e3a:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e3c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e46:	430b      	orrs	r3, r1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e52:	d00c      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e54:	4a4e      	ldr	r2, [pc, #312]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e56:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001e5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001e5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001e60:	430b      	orrs	r3, r1
 8001e62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e6c:	d07e      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e6e:	2e00      	cmp	r6, #0
 8001e70:	d17c      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e78:	d078      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e7a:	2d01      	cmp	r5, #1
 8001e7c:	f000 8125 	beq.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e80:	2000      	movs	r0, #0
}
 8001e82:	b003      	add	sp, #12
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 8001e86:	2601      	movs	r6, #1
 8001e88:	e763      	b.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 8001e8a:	2601      	movs	r6, #1
 8001e8c:	e782      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 8001e8e:	2501      	movs	r5, #1
 8001e90:	e783      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 8001e92:	2601      	movs	r6, #1
 8001e94:	e792      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f83e 	bl	8000f38 <HAL_GetTick>
 8001ebc:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7ff f836 	bl	8000f38 <HAL_GetTick>
 8001ecc:	1bc0      	subs	r0, r0, r7
 8001ece:	2802      	cmp	r0, #2
 8001ed0:	d9f5      	bls.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	e7d5      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eda:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ede:	d014      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001ee0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ee2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d00f      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	492a      	ldr	r1, [pc, #168]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efa:	2000      	movs	r0, #0
 8001efc:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8001f00:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	f013 0f01 	tst.w	r3, #1
 8001f08:	d112      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f0c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f10:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f14:	d01d      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f18:	6893      	ldr	r3, [r2, #8]
 8001f1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f1e:	6093      	str	r3, [r2, #8]
 8001f20:	491b      	ldr	r1, [pc, #108]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f22:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001f24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f26:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	670b      	str	r3, [r1, #112]	; 0x70
 8001f2e:	e74b      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 8001f30:	f7ff f802 	bl	8000f38 <HAL_GetTick>
 8001f34:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	f013 0f02 	tst.w	r3, #2
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7fe fffa 	bl	8000f38 <HAL_GetTick>
 8001f44:	1bc0      	subs	r0, r0, r7
 8001f46:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f4a:	4298      	cmp	r0, r3
 8001f4c:	d9f3      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 8001f4e:	2003      	movs	r0, #3
 8001f50:	e797      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	490f      	ldr	r1, [pc, #60]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f54:	688a      	ldr	r2, [r1, #8]
 8001f56:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
 8001f66:	e7db      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 8001f68:	2501      	movs	r5, #1
 8001f6a:	e762      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8001f72:	f7fe ffe1 	bl	8000f38 <HAL_GetTick>
 8001f76:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f80:	d00e      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f82:	f7fe ffd9 	bl	8000f38 <HAL_GetTick>
 8001f86:	1b80      	subs	r0, r0, r6
 8001f88:	2802      	cmp	r0, #2
 8001f8a:	d9f5      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	e778      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42471000 	.word	0x42471000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	f013 0f01 	tst.w	r3, #1
 8001fa6:	d001      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001fa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001faa:	b122      	cbz	r2, 8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8001fac:	f013 0f02 	tst.w	r3, #2
 8001fb0:	d015      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fb4:	b99b      	cbnz	r3, 8001fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fb6:	4a77      	ldr	r2, [pc, #476]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001fb8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fbc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	68a6      	ldr	r6, [r4, #8]
 8001fc4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001fc8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001fcc:	4303      	orrs	r3, r0
 8001fce:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	6961      	ldr	r1, [r4, #20]
 8001fd6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001fda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	f013 0f04 	tst.w	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8001fe6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fe8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001fec:	d006      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001fee:	f013 0f08 	tst.w	r3, #8
 8001ff2:	d020      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d11c      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ffc:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001ffe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002002:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	68a6      	ldr	r6, [r4, #8]
 800200a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800200e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002012:	4303      	orrs	r3, r0
 8002014:	6920      	ldr	r0, [r4, #16]
 8002016:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800201a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800201e:	430b      	orrs	r3, r1
 8002020:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002024:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002028:	f023 031f 	bic.w	r3, r3, #31
 800202c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800202e:	3901      	subs	r1, #1
 8002030:	430b      	orrs	r3, r1
 8002032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800203c:	d003      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800203e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002044:	d028      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800204c:	d011      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800204e:	6863      	ldr	r3, [r4, #4]
 8002050:	68a2      	ldr	r2, [r4, #8]
 8002052:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002056:	68e2      	ldr	r2, [r4, #12]
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002060:	6922      	ldr	r2, [r4, #16]
 8002062:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002066:	6962      	ldr	r2, [r4, #20]
 8002068:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800206e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002074:	2201      	movs	r2, #1
 8002076:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002078:	f7fe ff5e 	bl	8000f38 <HAL_GetTick>
 800207c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002086:	f47f aef8 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800208a:	f7fe ff55 	bl	8000f38 <HAL_GetTick>
 800208e:	1b80      	subs	r0, r0, r6
 8002090:	2802      	cmp	r0, #2
 8002092:	d9f4      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 8002094:	2003      	movs	r0, #3
 8002096:	e6f4      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002098:	483e      	ldr	r0, [pc, #248]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800209a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800209e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020a2:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020a4:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	68a1      	ldr	r1, [r4, #8]
 80020ac:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80020b0:	68e1      	ldr	r1, [r4, #12]
 80020b2:	0849      	lsrs	r1, r1, #1
 80020b4:	3901      	subs	r1, #1
 80020b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80020ba:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80020be:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80020c8:	e7bd      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80020d0:	f7fe ff32 	bl	8000f38 <HAL_GetTick>
 80020d4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80020de:	d006      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020e0:	f7fe ff2a 	bl	8000f38 <HAL_GetTick>
 80020e4:	1b40      	subs	r0, r0, r5
 80020e6:	2802      	cmp	r0, #2
 80020e8:	d9f5      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
 80020ec:	e6c9      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	f013 0f04 	tst.w	r3, #4
 80020f4:	d001      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80020f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020f8:	b122      	cbz	r2, 8002104 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80020fa:	f013 0f08 	tst.w	r3, #8
 80020fe:	d01a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002102:	b9c3      	cbnz	r3, 8002136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002106:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800210a:	69a3      	ldr	r3, [r4, #24]
 800210c:	69e0      	ldr	r0, [r4, #28]
 800210e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002112:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8002116:	430b      	orrs	r3, r1
 8002118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800211a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800211e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002122:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002126:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800212a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800212c:	3901      	subs	r1, #1
 800212e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002132:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f413 7f80 	tst.w	r3, #256	; 0x100
 800213c:	d003      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800213e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002144:	d011      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002148:	2201      	movs	r2, #1
 800214a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800214c:	f7fe fef4 	bl	8000f38 <HAL_GetTick>
 8002150:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800215a:	d118      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800215c:	f7fe feec 	bl	8000f38 <HAL_GetTick>
 8002160:	1b00      	subs	r0, r0, r4
 8002162:	2802      	cmp	r0, #2
 8002164:	d9f5      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e68b      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800216a:	480a      	ldr	r0, [pc, #40]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800216c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002170:	69a3      	ldr	r3, [r4, #24]
 8002172:	69e2      	ldr	r2, [r4, #28]
 8002174:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002178:	6a22      	ldr	r2, [r4, #32]
 800217a:	0852      	lsrs	r2, r2, #1
 800217c:	3a01      	subs	r2, #1
 800217e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002182:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800218c:	e7db      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 800218e:	2000      	movs	r0, #0
 8002190:	e677      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d007      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x1e>
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d05b      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0xca>
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80021b2:	4858      	ldr	r0, [pc, #352]	; (8002314 <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021b6:	4858      	ldr	r0, [pc, #352]	; (8002318 <HAL_RCC_GetSysClockFreq+0x17c>)
 80021b8:	e7fc      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ba:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021c8:	d02a      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ca:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80021d2:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80021d6:	ebb1 000c 	subs.w	r0, r1, ip
 80021da:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80021de:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80021e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021e6:	0181      	lsls	r1, r0, #6
 80021e8:	1a09      	subs	r1, r1, r0
 80021ea:	eb63 030e 	sbc.w	r3, r3, lr
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f4:	00c9      	lsls	r1, r1, #3
 80021f6:	eb11 0c0c 	adds.w	ip, r1, ip
 80021fa:	f143 0300 	adc.w	r3, r3, #0
 80021fe:	0259      	lsls	r1, r3, #9
 8002200:	2300      	movs	r3, #0
 8002202:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002206:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800220a:	f7fe fced 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800221a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800221e:	e7c9      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002228:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800222c:	ebb1 000c 	subs.w	r0, r1, ip
 8002230:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002234:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002238:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800223c:	0181      	lsls	r1, r0, #6
 800223e:	1a09      	subs	r1, r1, r0
 8002240:	eb63 030e 	sbc.w	r3, r3, lr
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224a:	00c9      	lsls	r1, r1, #3
 800224c:	eb11 0c0c 	adds.w	ip, r1, ip
 8002250:	f143 0300 	adc.w	r3, r3, #0
 8002254:	0299      	lsls	r1, r3, #10
 8002256:	2300      	movs	r3, #0
 8002258:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800225c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002260:	f7fe fcc2 	bl	8000be8 <__aeabi_uldivmod>
 8002264:	e7d3      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002274:	d028      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800227e:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002282:	ebb1 000c 	subs.w	r0, r1, ip
 8002286:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800228a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800228e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002292:	0181      	lsls	r1, r0, #6
 8002294:	1a09      	subs	r1, r1, r0
 8002296:	eb63 030e 	sbc.w	r3, r3, lr
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a0:	00c9      	lsls	r1, r1, #3
 80022a2:	eb11 0c0c 	adds.w	ip, r1, ip
 80022a6:	f143 0300 	adc.w	r3, r3, #0
 80022aa:	0259      	lsls	r1, r3, #9
 80022ac:	2300      	movs	r3, #0
 80022ae:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80022b2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80022b6:	f7fe fc97 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80022c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80022c6:	e775      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_GetSysClockFreq+0x174>)
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80022d0:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80022d4:	ebb1 000c 	subs.w	r0, r1, ip
 80022d8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80022dc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80022e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022e4:	0181      	lsls	r1, r0, #6
 80022e6:	1a09      	subs	r1, r1, r0
 80022e8:	eb63 030e 	sbc.w	r3, r3, lr
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f2:	00c9      	lsls	r1, r1, #3
 80022f4:	eb11 0c0c 	adds.w	ip, r1, ip
 80022f8:	f143 0300 	adc.w	r3, r3, #0
 80022fc:	0299      	lsls	r1, r3, #10
 80022fe:	2300      	movs	r3, #0
 8002300:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002304:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002308:	f7fe fc6e 	bl	8000be8 <__aeabi_uldivmod>
 800230c:	e7d5      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x11e>
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231c:	2800      	cmp	r0, #0
 800231e:	f000 8201 	beq.w	8002724 <HAL_RCC_OscConfig+0x408>
{
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002328:	6803      	ldr	r3, [r0, #0]
 800232a:	f013 0f01 	tst.w	r3, #1
 800232e:	d041      	beq.n	80023b4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002330:	4b99      	ldr	r3, [pc, #612]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d032      	beq.n	80023a2 <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002344:	2b08      	cmp	r3, #8
 8002346:	d027      	beq.n	8002398 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002348:	4b93      	ldr	r3, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d059      	beq.n	8002408 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	6863      	ldr	r3, [r4, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d05b      	beq.n	8002414 <HAL_RCC_OscConfig+0xf8>
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d05e      	beq.n	8002420 <HAL_RCC_OscConfig+0x104>
 8002362:	4b8d      	ldr	r3, [pc, #564]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002372:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002374:	6863      	ldr	r3, [r4, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d05c      	beq.n	8002434 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fddd 	bl	8000f38 <HAL_GetTick>
 800237e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002388:	d114      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238a:	f7fe fdd5 	bl	8000f38 <HAL_GetTick>
 800238e:	1b40      	subs	r0, r0, r5
 8002390:	2864      	cmp	r0, #100	; 0x64
 8002392:	d9f5      	bls.n	8002380 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8002394:	2003      	movs	r0, #3
 8002396:	e1cc      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002398:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023a0:	d0d2      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023aa:	d003      	beq.n	80023b4 <HAL_RCC_OscConfig+0x98>
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 81ba 	beq.w	8002728 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f013 0f02 	tst.w	r3, #2
 80023ba:	d060      	beq.n	800247e <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023bc:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f013 0f0c 	tst.w	r3, #12
 80023c4:	d04a      	beq.n	800245c <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c6:	4b74      	ldr	r3, [pc, #464]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d03f      	beq.n	8002452 <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d069      	beq.n	80024b2 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023de:	68e3      	ldr	r3, [r4, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d075      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fda5 	bl	8000f38 <HAL_GetTick>
 80023ee:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f013 0f02 	tst.w	r3, #2
 80023f8:	d161      	bne.n	80024be <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fd9d 	bl	8000f38 <HAL_GetTick>
 80023fe:	1b40      	subs	r0, r0, r5
 8002400:	2802      	cmp	r0, #2
 8002402:	d9f5      	bls.n	80023f0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002404:	2003      	movs	r0, #3
 8002406:	e194      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002410:	d0a0      	beq.n	8002354 <HAL_RCC_OscConfig+0x38>
 8002412:	e7c6      	b.n	80023a2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e7a9      	b.n	8002374 <HAL_RCC_OscConfig+0x58>
 8002420:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e79f      	b.n	8002374 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8002434:	f7fe fd80 	bl	8000f38 <HAL_GetTick>
 8002438:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002442:	d0b7      	beq.n	80023b4 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fd78 	bl	8000f38 <HAL_GetTick>
 8002448:	1b40      	subs	r0, r0, r5
 800244a:	2864      	cmp	r0, #100	; 0x64
 800244c:	d9f5      	bls.n	800243a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800244e:	2003      	movs	r0, #3
 8002450:	e16f      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800245a:	d1ba      	bne.n	80023d2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f013 0f02 	tst.w	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_OscConfig+0x152>
 8002466:	68e3      	ldr	r3, [r4, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 815f 	bne.w	800272c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4a4a      	ldr	r2, [pc, #296]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002470:	6813      	ldr	r3, [r2, #0]
 8002472:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002476:	6921      	ldr	r1, [r4, #16]
 8002478:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800247c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f013 0f08 	tst.w	r3, #8
 8002484:	d049      	beq.n	800251a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002486:	6963      	ldr	r3, [r4, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d033      	beq.n	80024f4 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0x280>)
 800248e:	2201      	movs	r2, #1
 8002490:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fd50 	bl	8000f38 <HAL_GetTick>
 8002498:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	f013 0f02 	tst.w	r3, #2
 80024a2:	d13a      	bne.n	800251a <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fd48 	bl	8000f38 <HAL_GetTick>
 80024a8:	1b40      	subs	r0, r0, r5
 80024aa:	2802      	cmp	r0, #2
 80024ac:	d9f5      	bls.n	800249a <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80024ae:	2003      	movs	r0, #3
 80024b0:	e13f      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024ba:	d190      	bne.n	80023de <HAL_RCC_OscConfig+0xc2>
 80024bc:	e7ce      	b.n	800245c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024c6:	6921      	ldr	r1, [r4, #16]
 80024c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e7d6      	b.n	800247e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024d6:	f7fe fd2f 	bl	8000f38 <HAL_GetTick>
 80024da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f013 0f02 	tst.w	r3, #2
 80024e4:	d0cb      	beq.n	800247e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fd27 	bl	8000f38 <HAL_GetTick>
 80024ea:	1b40      	subs	r0, r0, r5
 80024ec:	2802      	cmp	r0, #2
 80024ee:	d9f5      	bls.n	80024dc <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80024f0:	2003      	movs	r0, #3
 80024f2:	e11e      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x280>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fd1c 	bl	8000f38 <HAL_GetTick>
 8002500:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002506:	f013 0f02 	tst.w	r3, #2
 800250a:	d006      	beq.n	800251a <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fd14 	bl	8000f38 <HAL_GetTick>
 8002510:	1b40      	subs	r0, r0, r5
 8002512:	2802      	cmp	r0, #2
 8002514:	d9f5      	bls.n	8002502 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8002516:	2003      	movs	r0, #3
 8002518:	e10b      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f013 0f04 	tst.w	r3, #4
 8002520:	d076      	beq.n	8002610 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800252a:	d133      	bne.n	8002594 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 8002532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002534:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002544:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_RCC_OscConfig+0x284>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800254e:	d029      	beq.n	80025a4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	68a3      	ldr	r3, [r4, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d03a      	beq.n	80025cc <HAL_RCC_OscConfig+0x2b0>
 8002556:	2b05      	cmp	r3, #5
 8002558:	d03e      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2bc>
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800255c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	671a      	str	r2, [r3, #112]	; 0x70
 8002564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03c      	beq.n	80025ec <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fce1 	bl	8000f38 <HAL_GetTick>
 8002576:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x27c>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	f013 0f02 	tst.w	r3, #2
 8002580:	d145      	bne.n	800260e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fcd9 	bl	8000f38 <HAL_GetTick>
 8002586:	1b80      	subs	r0, r0, r6
 8002588:	f241 3388 	movw	r3, #5000	; 0x1388
 800258c:	4298      	cmp	r0, r3
 800258e:	d9f3      	bls.n	8002578 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002590:	2003      	movs	r0, #3
 8002592:	e0ce      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002594:	2500      	movs	r5, #0
 8002596:	e7d6      	b.n	8002546 <HAL_RCC_OscConfig+0x22a>
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a4:	4a6b      	ldr	r2, [pc, #428]	; (8002754 <HAL_RCC_OscConfig+0x438>)
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80025ae:	f7fe fcc3 	bl	8000f38 <HAL_GetTick>
 80025b2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x438>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025bc:	d1c8      	bne.n	8002550 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe fcbb 	bl	8000f38 <HAL_GetTick>
 80025c2:	1b80      	subs	r0, r0, r6
 80025c4:	2802      	cmp	r0, #2
 80025c6:	d9f5      	bls.n	80025b4 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 80025c8:	2003      	movs	r0, #3
 80025ca:	e0b2      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	4a62      	ldr	r2, [pc, #392]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80025ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e7c9      	b.n	800256c <HAL_RCC_OscConfig+0x250>
 80025d8:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80025da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025dc:	f042 0204 	orr.w	r2, r2, #4
 80025e0:	671a      	str	r2, [r3, #112]	; 0x70
 80025e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	671a      	str	r2, [r3, #112]	; 0x70
 80025ea:	e7bf      	b.n	800256c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fca4 	bl	8000f38 <HAL_GetTick>
 80025f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	f013 0f02 	tst.w	r3, #2
 80025fa:	d008      	beq.n	800260e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fc9c 	bl	8000f38 <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	f241 3388 	movw	r3, #5000	; 0x1388
 8002606:	4298      	cmp	r0, r3
 8002608:	d9f3      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800260a:	2003      	movs	r0, #3
 800260c:	e091      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	b9ed      	cbnz	r5, 800264c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002610:	69a3      	ldr	r3, [r4, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808c 	beq.w	8002730 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	f002 020c 	and.w	r2, r2, #12
 8002620:	2a08      	cmp	r2, #8
 8002622:	d054      	beq.n	80026ce <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	2b02      	cmp	r3, #2
 8002626:	d017      	beq.n	8002658 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b4c      	ldr	r3, [pc, #304]	; (800275c <HAL_RCC_OscConfig+0x440>)
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fc83 	bl	8000f38 <HAL_GetTick>
 8002632:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800263c:	d045      	beq.n	80026ca <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fc7b 	bl	8000f38 <HAL_GetTick>
 8002642:	1b00      	subs	r0, r0, r4
 8002644:	2802      	cmp	r0, #2
 8002646:	d9f5      	bls.n	8002634 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e072      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4a42      	ldr	r2, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 800264e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	e7db      	b.n	8002610 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x440>)
 800265a:	2200      	movs	r2, #0
 800265c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800265e:	f7fe fc6b 	bl	8000f38 <HAL_GetTick>
 8002662:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800266c:	d006      	beq.n	800267c <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fc63 	bl	8000f38 <HAL_GetTick>
 8002672:	1b40      	subs	r0, r0, r5
 8002674:	2802      	cmp	r0, #2
 8002676:	d9f5      	bls.n	8002664 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8002678:	2003      	movs	r0, #3
 800267a:	e05a      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267c:	69e3      	ldr	r3, [r4, #28]
 800267e:	6a22      	ldr	r2, [r4, #32]
 8002680:	4313      	orrs	r3, r2
 8002682:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002684:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002688:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002692:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002694:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002698:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800269a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800269e:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80026a0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80026a2:	4b2e      	ldr	r3, [pc, #184]	; (800275c <HAL_RCC_OscConfig+0x440>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc46 	bl	8000f38 <HAL_GetTick>
 80026ac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fc3e 	bl	8000f38 <HAL_GetTick>
 80026bc:	1b00      	subs	r0, r0, r4
 80026be:	2802      	cmp	r0, #2
 80026c0:	d9f5      	bls.n	80026ae <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80026c2:	2003      	movs	r0, #3
 80026c4:	e035      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80026c6:	2000      	movs	r0, #0
 80026c8:	e033      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 80026ca:	2000      	movs	r0, #0
 80026cc:	e031      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d031      	beq.n	8002736 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCC_OscConfig+0x43c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80026da:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026dc:	4291      	cmp	r1, r2
 80026de:	d12c      	bne.n	800273a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	428a      	cmp	r2, r1
 80026e8:	d129      	bne.n	800273e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80026f0:	401a      	ands	r2, r3
 80026f2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80026f6:	d124      	bne.n	8002742 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80026fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002702:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002706:	d11e      	bne.n	8002746 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800270c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800270e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002712:	d11a      	bne.n	800274a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002714:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002718:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800271a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800271e:	d116      	bne.n	800274e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8002720:	2000      	movs	r0, #0
 8002722:	e006      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
}
 8002726:	4770      	bx	lr
        return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e002      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002730:	2000      	movs	r0, #0
}
 8002732:	b002      	add	sp, #8
 8002734:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7fb      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800273a:	2001      	movs	r0, #1
 800273c:	e7f9      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 800273e:	2001      	movs	r0, #1
 8002740:	e7f7      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 8002742:	2001      	movs	r0, #1
 8002744:	e7f5      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 8002746:	2001      	movs	r0, #1
 8002748:	e7f3      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 800274a:	2001      	movs	r0, #1
 800274c:	e7f1      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 800274e:	2001      	movs	r0, #1
 8002750:	e7ef      	b.n	8002732 <HAL_RCC_OscConfig+0x416>
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000
 8002758:	40023800 	.word	0x40023800
 800275c:	42470000 	.word	0x42470000

08002760 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002764:	6802      	ldr	r2, [r0, #0]
 8002766:	68d3      	ldr	r3, [r2, #12]
 8002768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276c:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800276e:	f7fe fbe3 	bl	8000f38 <HAL_GetTick>
 8002772:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f013 0f20 	tst.w	r3, #32
 800277c:	d107      	bne.n	800278e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800277e:	f7fe fbdb 	bl	8000f38 <HAL_GetTick>
 8002782:	1b40      	subs	r0, r0, r5
 8002784:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002788:	d9f4      	bls.n	8002774 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800278a:	2003      	movs	r0, #3
 800278c:	e000      	b.n	8002790 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	bd38      	pop	{r3, r4, r5, pc}

08002792 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002792:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002794:	6803      	ldr	r3, [r0, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	f012 0f40 	tst.w	r2, #64	; 0x40
 800279c:	d002      	beq.n	80027a4 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80027a0:	4628      	mov	r0, r5
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ac:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80027ae:	f7fe fbc3 	bl	8000f38 <HAL_GetTick>
 80027b2:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027be:	d1ef      	bne.n	80027a0 <RTC_EnterInitMode+0xe>
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	d1ed      	bne.n	80027a0 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027c4:	f7fe fbb8 	bl	8000f38 <HAL_GetTick>
 80027c8:	1b83      	subs	r3, r0, r6
 80027ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ce:	d9f2      	bls.n	80027b6 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027d0:	2304      	movs	r3, #4
 80027d2:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80027d4:	2501      	movs	r5, #1
 80027d6:	e7ee      	b.n	80027b6 <RTC_EnterInitMode+0x24>

080027d8 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	68d3      	ldr	r3, [r2, #12]
 80027dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e0:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f013 0f20 	tst.w	r3, #32
 80027ea:	d001      	beq.n	80027f0 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80027ee:	4770      	bx	lr
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027f4:	f7ff ffb4 	bl	8002760 <HAL_RTC_WaitForSynchro>
 80027f8:	b110      	cbz	r0, 8002800 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80027fa:	2304      	movs	r3, #4
 80027fc:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80027fe:	2001      	movs	r0, #1
}
 8002800:	bd10      	pop	{r4, pc}

08002802 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002802:	2800      	cmp	r0, #0
 8002804:	d041      	beq.n	800288a <HAL_RTC_Init+0x88>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800280a:	7f43      	ldrb	r3, [r0, #29]
 800280c:	b1e3      	cbz	r3, 8002848 <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	22ca      	movs	r2, #202	; 0xca
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	2253      	movs	r2, #83	; 0x53
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff ffb7 	bl	8002792 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002824:	b1a0      	cbz	r0, 8002850 <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 8002826:	b958      	cbnz	r0, 8002840 <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800282c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002836:	69a1      	ldr	r1, [r4, #24]
 8002838:	430b      	orrs	r3, r1
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 800283c:	2301      	movs	r3, #1
 800283e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002846:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002848:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800284a:	f004 f8c9 	bl	80069e0 <HAL_RTC_MspInit>
 800284e:	e7de      	b.n	800280e <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6893      	ldr	r3, [r2, #8]
 8002854:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	688a      	ldr	r2, [r1, #8]
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	6920      	ldr	r0, [r4, #16]
 8002866:	4303      	orrs	r3, r0
 8002868:	6960      	ldr	r0, [r4, #20]
 800286a:	4303      	orrs	r3, r0
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	68e2      	ldr	r2, [r4, #12]
 8002874:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	6913      	ldr	r3, [r2, #16]
 800287a:	68a1      	ldr	r1, [r4, #8]
 800287c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002880:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff ffa8 	bl	80027d8 <RTC_ExitInitMode>
 8002888:	e7cd      	b.n	8002826 <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 800288a:	2001      	movs	r0, #1
}
 800288c:	4770      	bx	lr

0800288e <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 800288e:	2300      	movs	r3, #0

  while (number >= 10U)
 8002890:	e003      	b.n	800289a <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8002892:	3301      	adds	r3, #1
 8002894:	b2db      	uxtb	r3, r3
    number -= 10U;
 8002896:	380a      	subs	r0, #10
 8002898:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 800289a:	2809      	cmp	r0, #9
 800289c:	d8f9      	bhi.n	8002892 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	b2db      	uxtb	r3, r3
}
 80028a2:	4318      	orrs	r0, r3
 80028a4:	4770      	bx	lr

080028a6 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80028a6:	7f03      	ldrb	r3, [r0, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d059      	beq.n	8002960 <HAL_RTC_SetTime+0xba>
{
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 80028b2:	2301      	movs	r3, #1
 80028b4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80028ba:	bb4a      	cbnz	r2, 8002910 <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028bc:	6803      	ldr	r3, [r0, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028c4:	d101      	bne.n	80028ca <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028ca:	7830      	ldrb	r0, [r6, #0]
 80028cc:	f7ff ffdf 	bl	800288e <RTC_ByteToBcd2>
 80028d0:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028d2:	7870      	ldrb	r0, [r6, #1]
 80028d4:	f7ff ffdb 	bl	800288e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028d8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80028dc:	78b0      	ldrb	r0, [r6, #2]
 80028de:	f7ff ffd6 	bl	800288e <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028e2:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80028e4:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028e6:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	22ca      	movs	r2, #202	; 0xca
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	2253      	movs	r2, #83	; 0x53
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff ff4b 	bl	8002792 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80028fc:	b1d0      	cbz	r0, 8002934 <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 80028fe:	b908      	cbnz	r0, 8002904 <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8002900:	2301      	movs	r3, #1
 8002902:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800290a:	2300      	movs	r3, #0
 800290c:	7723      	strb	r3, [r4, #28]
}
 800290e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002910:	6803      	ldr	r3, [r0, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002918:	d101      	bne.n	800291e <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800291e:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002920:	7875      	ldrb	r5, [r6, #1]
 8002922:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002924:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8002928:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800292a:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800292c:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800292e:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 8002932:	e7da      	b.n	80028ea <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 800293a:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 800293e:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	6893      	ldr	r3, [r2, #8]
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800294a:	6821      	ldr	r1, [r4, #0]
 800294c:	688b      	ldr	r3, [r1, #8]
 800294e:	68f2      	ldr	r2, [r6, #12]
 8002950:	6930      	ldr	r0, [r6, #16]
 8002952:	4302      	orrs	r2, r0
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff ff3d 	bl	80027d8 <RTC_ExitInitMode>
 800295e:	e7ce      	b.n	80028fe <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8002960:	2002      	movs	r0, #2
}
 8002962:	4770      	bx	lr

08002964 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8002964:	7f03      	ldrb	r3, [r0, #28]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d048      	beq.n	80029fc <HAL_RTC_SetDate+0x98>
{
 800296a:	b570      	push	{r4, r5, r6, lr}
 800296c:	4604      	mov	r4, r0
 800296e:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002970:	2301      	movs	r3, #1
 8002972:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002978:	b93a      	cbnz	r2, 800298a <HAL_RTC_SetDate+0x26>
 800297a:	784b      	ldrb	r3, [r1, #1]
 800297c:	f013 0f10 	tst.w	r3, #16
 8002980:	d003      	beq.n	800298a <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002982:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002986:	330a      	adds	r3, #10
 8002988:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 800298a:	bb12      	cbnz	r2, 80029d2 <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800298c:	78f0      	ldrb	r0, [r6, #3]
 800298e:	f7ff ff7e 	bl	800288e <RTC_ByteToBcd2>
 8002992:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002994:	7870      	ldrb	r0, [r6, #1]
 8002996:	f7ff ff7a 	bl	800288e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800299a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800299e:	78b0      	ldrb	r0, [r6, #2]
 80029a0:	f7ff ff75 	bl	800288e <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029a4:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80029a6:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029a8:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	22ca      	movs	r2, #202	; 0xca
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	2253      	movs	r2, #83	; 0x53
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7ff feea 	bl	8002792 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80029be:	b198      	cbz	r0, 80029e8 <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 80029c0:	b908      	cbnz	r0, 80029c6 <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80029cc:	2300      	movs	r3, #0
 80029ce:	7723      	strb	r3, [r4, #28]
}
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029d2:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029d4:	7875      	ldrb	r5, [r6, #1]
 80029d6:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 80029dc:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029de:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029e0:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029e2:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 80029e6:	e7e1      	b.n	80029ac <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80029ee:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80029f2:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff feef 	bl	80027d8 <RTC_ExitInitMode>
 80029fa:	e7e1      	b.n	80029c0 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80029fc:	2002      	movs	r0, #2
}
 80029fe:	4770      	bx	lr

08002a00 <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a00:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002a0c:	4770      	bx	lr
	...

08002a10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a1a:	6800      	ldr	r0, [r0, #0]
 8002a1c:	f001 fc25 	bl	800426a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a20:	4605      	mov	r5, r0
 8002a22:	b110      	cbz	r0, 8002a2a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002a24:	4628      	mov	r0, r5
 8002a26:	b002      	add	sp, #8
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	f001 ff16 	bl	800485c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a30:	b938      	cbnz	r0, 8002a42 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002a32:	2301      	movs	r3, #1
 8002a34:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002a36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d00b      	beq.n	8002a54 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002a3c:	462e      	mov	r6, r5
 8002a3e:	4628      	mov	r0, r5
 8002a40:	e014      	b.n	8002a6c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002a42:	2300      	movs	r3, #0
 8002a44:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	f001 fc0f 	bl	800426a <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d0f2      	beq.n	8002a36 <SD_PowerON+0x26>
      return errorstate;
 8002a50:	4605      	mov	r5, r0
 8002a52:	e7e7      	b.n	8002a24 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002a54:	2100      	movs	r1, #0
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	f001 fd6e 	bl	8004538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d0ed      	beq.n	8002a3c <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002a64:	e7de      	b.n	8002a24 <SD_PowerON+0x14>
    count++;
 8002a66:	9b01      	ldr	r3, [sp, #4]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002a6c:	9a01      	ldr	r2, [sp, #4]
 8002a6e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d813      	bhi.n	8002a9e <SD_PowerON+0x8e>
 8002a76:	b996      	cbnz	r6, 8002a9e <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002a78:	2100      	movs	r1, #0
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	f001 fd5c 	bl	8004538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a80:	b9e0      	cbnz	r0, 8002abc <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002a82:	4912      	ldr	r1, [pc, #72]	; (8002acc <SD_PowerON+0xbc>)
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	f001 fe35 	bl	80046f4 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	b9c0      	cbnz	r0, 8002ac0 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a8e:	2100      	movs	r1, #0
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	f001 fbd5 	bl	8004240 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002a96:	0fc3      	lsrs	r3, r0, #31
 8002a98:	d0e5      	beq.n	8002a66 <SD_PowerON+0x56>
 8002a9a:	461e      	mov	r6, r3
 8002a9c:	e7e3      	b.n	8002a66 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002a9e:	9a01      	ldr	r2, [sp, #4]
 8002aa0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d80e      	bhi.n	8002ac6 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002aa8:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8002aac:	d002      	beq.n	8002ab4 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	6463      	str	r3, [r4, #68]	; 0x44
 8002ab2:	e7b7      	b.n	8002a24 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8002ab8:	461d      	mov	r5, r3
 8002aba:	e7b3      	b.n	8002a24 <SD_PowerON+0x14>
      return errorstate;
 8002abc:	4605      	mov	r5, r0
 8002abe:	e7b1      	b.n	8002a24 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ac0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002ac4:	e7ae      	b.n	8002a24 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002ac6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002aca:	e7ab      	b.n	8002a24 <SD_PowerON+0x14>
 8002acc:	c1100000 	.word	0xc1100000

08002ad0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002ad2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8002ad4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8002ad6:	b9a6      	cbnz	r6, 8002b02 <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8002ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	f001 fb8b 	bl	80041f6 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8002ae0:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002ae2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002ae6:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002ae8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002aec:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002aee:	0e00      	lsrs	r0, r0, #24
 8002af0:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8002af2:	3404      	adds	r4, #4
      dataremaining--;
 8002af4:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8002af6:	3501      	adds	r5, #1
 8002af8:	2d07      	cmp	r5, #7
 8002afa:	d9ee      	bls.n	8002ada <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 8002afc:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002afe:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 8002b00:	e7ea      	b.n	8002ad8 <SD_Read_IT+0x8>
 8002b02:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002b04:	2500      	movs	r5, #0
 8002b06:	e7f7      	b.n	8002af8 <SD_Read_IT+0x28>

08002b08 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0a:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002b0c:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 8002b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 8002b10:	b9de      	cbnz	r6, 8002b4a <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 8002b12:	b003      	add	sp, #12
 8002b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8002b16:	7823      	ldrb	r3, [r4, #0]
 8002b18:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8002b1a:	7862      	ldrb	r2, [r4, #1]
 8002b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b20:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8002b22:	78a2      	ldrb	r2, [r4, #2]
 8002b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b28:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002b2a:	78e2      	ldrb	r2, [r4, #3]
 8002b2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b30:	9301      	str	r3, [sp, #4]
      tmp++;
 8002b32:	3404      	adds	r4, #4
      dataremaining--;
 8002b34:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002b36:	a901      	add	r1, sp, #4
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f001 fb5f 	bl	80041fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002b3e:	3501      	adds	r5, #1
 8002b40:	2d07      	cmp	r5, #7
 8002b42:	d9e8      	bls.n	8002b16 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8002b44:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8002b46:	627e      	str	r6, [r7, #36]	; 0x24
}
 8002b48:	e7e3      	b.n	8002b12 <SD_Write_IT+0xa>
 8002b4a:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	e7f7      	b.n	8002b40 <SD_Write_IT+0x38>

08002b50 <SD_FindSCR>:
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	4604      	mov	r4, r0
 8002b56:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7fe f9ee 	bl	8000f38 <HAL_GetTick>
 8002b5c:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002b64:	2108      	movs	r1, #8
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	f001 fc3c 	bl	80043e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	b110      	cbz	r0, 8002b76 <SD_FindSCR+0x26>
}
 8002b70:	4628      	mov	r0, r5
 8002b72:	b009      	add	sp, #36	; 0x24
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002b76:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002b78:	0409      	lsls	r1, r1, #16
 8002b7a:	6820      	ldr	r0, [r4, #0]
 8002b7c:	f001 fcdc 	bl	8004538 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b80:	4605      	mov	r5, r0
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d1f4      	bne.n	8002b70 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002b90:	2330      	movs	r3, #48	; 0x30
 8002b92:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002b94:	2302      	movs	r3, #2
 8002b96:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ba0:	a902      	add	r1, sp, #8
 8002ba2:	6820      	ldr	r0, [r4, #0]
 8002ba4:	f001 fb4f 	bl	8004246 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	f001 fcf5 	bl	8004598 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bae:	4605      	mov	r5, r0
 8002bb0:	b158      	cbz	r0, 8002bca <SD_FindSCR+0x7a>
 8002bb2:	e7dd      	b.n	8002b70 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002bb4:	f001 fb1f 	bl	80041f6 <SDIO_ReadFIFO>
 8002bb8:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8002bbc:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002bbe:	f7fe f9bb 	bl	8000f38 <HAL_GetTick>
 8002bc2:	1b83      	subs	r3, r0, r6
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d03f      	beq.n	8002c4a <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002bca:	6820      	ldr	r0, [r4, #0]
 8002bcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bce:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8002bd2:	d107      	bne.n	8002be4 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bd6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002bda:	d1eb      	bne.n	8002bb4 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bde:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002be2:	d1ec      	bne.n	8002bbe <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002be4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002be6:	f013 0f08 	tst.w	r3, #8
 8002bea:	d125      	bne.n	8002c38 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002bec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bee:	f013 0f02 	tst.w	r3, #2
 8002bf2:	d124      	bne.n	8002c3e <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002bf4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002bf6:	f015 0520 	ands.w	r5, r5, #32
 8002bfa:	d123      	bne.n	8002c44 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bfc:	f240 533a 	movw	r3, #1338	; 0x53a
 8002c00:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c02:	9a01      	ldr	r2, [sp, #4]
 8002c04:	0213      	lsls	r3, r2, #8
 8002c06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002c0e:	0a11      	lsrs	r1, r2, #8
 8002c10:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c14:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002c16:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c1a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002c1c:	9a00      	ldr	r2, [sp, #0]
 8002c1e:	0213      	lsls	r3, r2, #8
 8002c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002c28:	0a11      	lsrs	r1, r2, #8
 8002c2a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002c2e:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002c34:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8002c36:	e79b      	b.n	8002b70 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002c38:	2508      	movs	r5, #8
 8002c3a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002c3c:	e798      	b.n	8002b70 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002c3e:	2502      	movs	r5, #2
 8002c40:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c42:	e795      	b.n	8002b70 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002c44:	2520      	movs	r5, #32
 8002c46:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8002c48:	e792      	b.n	8002b70 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8002c4a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8002c4e:	e78f      	b.n	8002b70 <SD_FindSCR+0x20>

08002c50 <SD_WideBus_Enable>:
{
 8002c50:	b510      	push	{r4, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002c56:	2100      	movs	r1, #0
 8002c58:	9100      	str	r1, [sp, #0]
 8002c5a:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f001 faef 	bl	8004240 <SDIO_GetResponse>
 8002c62:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002c66:	d113      	bne.n	8002c90 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8002c68:	4669      	mov	r1, sp
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff ff70 	bl	8002b50 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c70:	b980      	cbnz	r0, 8002c94 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002c78:	d00e      	beq.n	8002c98 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002c7c:	0409      	lsls	r1, r1, #16
 8002c7e:	6820      	ldr	r0, [r4, #0]
 8002c80:	f001 fc5a 	bl	8004538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c84:	b930      	cbnz	r0, 8002c94 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002c86:	2102      	movs	r1, #2
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	f001 fc6d 	bl	8004568 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c8e:	e001      	b.n	8002c94 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002c94:	b002      	add	sp, #8
 8002c96:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c98:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c9c:	e7fa      	b.n	8002c94 <SD_WideBus_Enable+0x44>

08002c9e <SD_WideBus_Disable>:
{
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	9100      	str	r1, [sp, #0]
 8002ca8:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	f001 fac8 	bl	8004240 <SDIO_GetResponse>
 8002cb0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002cb4:	d113      	bne.n	8002cde <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8002cb6:	4669      	mov	r1, sp
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff ff49 	bl	8002b50 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cbe:	b980      	cbnz	r0, 8002ce2 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002cc0:	9b01      	ldr	r3, [sp, #4]
 8002cc2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002cc6:	d00e      	beq.n	8002ce6 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cc8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002cca:	0409      	lsls	r1, r1, #16
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	f001 fc33 	bl	8004538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cd2:	b930      	cbnz	r0, 8002ce2 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	f001 fc46 	bl	8004568 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cdc:	e001      	b.n	8002ce2 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002cde:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ce6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002cea:	e7fa      	b.n	8002ce2 <SD_WideBus_Disable+0x44>

08002cec <SD_SendStatus>:
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8002cee:	b181      	cbz	r1, 8002d12 <SD_SendStatus+0x26>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cf4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002cf6:	0409      	lsls	r1, r1, #16
 8002cf8:	6800      	ldr	r0, [r0, #0]
 8002cfa:	f001 fc65 	bl	80045c8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cfe:	4605      	mov	r5, r0
 8002d00:	b108      	cbz	r0, 8002d06 <SD_SendStatus+0x1a>
}
 8002d02:	4628      	mov	r0, r5
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d06:	2100      	movs	r1, #0
 8002d08:	6820      	ldr	r0, [r4, #0]
 8002d0a:	f001 fa99 	bl	8004240 <SDIO_GetResponse>
 8002d0e:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8002d10:	e7f7      	b.n	8002d02 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8002d12:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8002d16:	e7f4      	b.n	8002d02 <SD_SendStatus+0x16>

08002d18 <HAL_SD_ReadBlocks_DMA>:
{
 8002d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	4604      	mov	r4, r0
  if(NULL == pData)
 8002d20:	b191      	cbz	r1, 8002d48 <HAL_SD_ReadBlocks_DMA+0x30>
 8002d22:	4616      	mov	r6, r2
 8002d24:	461f      	mov	r7, r3
 8002d26:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002d28:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8002d2c:	b2ed      	uxtb	r5, r5
 8002d2e:	2d01      	cmp	r5, #1
 8002d30:	d17d      	bne.n	8002e2e <HAL_SD_ReadBlocks_DMA+0x116>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d36:	19f0      	adds	r0, r6, r7
 8002d38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d3a:	4298      	cmp	r0, r3
 8002d3c:	d90a      	bls.n	8002d54 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d44:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002d46:	e073      	b.n	8002e30 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d4e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8002d50:	2501      	movs	r5, #1
 8002d52:	e06d      	b.n	8002e30 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->State = HAL_SD_STATE_BUSY;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002d5a:	6821      	ldr	r1, [r4, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d64:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 8002d68:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002d6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d6c:	4833      	ldr	r0, [pc, #204]	; (8002e3c <HAL_SD_ReadBlocks_DMA+0x124>)
 8002d6e:	63c8      	str	r0, [r1, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002d70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d72:	4833      	ldr	r0, [pc, #204]	; (8002e40 <HAL_SD_ReadBlocks_DMA+0x128>)
 8002d74:	64c8      	str	r0, [r1, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8002d76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d78:	650b      	str	r3, [r1, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002d7c:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002d7e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002d80:	6801      	ldr	r1, [r0, #0]
 8002d82:	680b      	ldr	r3, [r1, #0]
 8002d84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d88:	6880      	ldr	r0, [r0, #8]
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002d8e:	6821      	ldr	r1, [r4, #0]
 8002d90:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8002d94:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8002d98:	3180      	adds	r1, #128	; 0x80
 8002d9a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002d9c:	f7fe fc66 	bl	800166c <HAL_DMA_Start_IT>
 8002da0:	4680      	mov	r8, r0
 8002da2:	bb68      	cbnz	r0, 8002e00 <HAL_SD_ReadBlocks_DMA+0xe8>
      __HAL_SD_DMA_ENABLE(hsd);
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d000      	beq.n	8002db4 <HAL_SD_ReadBlocks_DMA+0x9c>
        add *= 512U;
 8002db2:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002dba:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dbe:	2390      	movs	r3, #144	; 0x90
 8002dc0:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002dce:	4669      	mov	r1, sp
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	f001 fa38 	bl	8004246 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8002dd6:	2f01      	cmp	r7, #1
 8002dd8:	d922      	bls.n	8002e20 <HAL_SD_ReadBlocks_DMA+0x108>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002dda:	2382      	movs	r3, #130	; 0x82
 8002ddc:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002dde:	4631      	mov	r1, r6
 8002de0:	6820      	ldr	r0, [r4, #0]
 8002de2:	f001 fb2f 	bl	8004444 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002de6:	b338      	cbz	r0, 8002e38 <HAL_SD_ReadBlocks_DMA+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_SD_ReadBlocks_DMA+0x130>)
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002df0:	4318      	orrs	r0, r3
 8002df2:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8002dfe:	e017      	b.n	8002e30 <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002e04:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8002e08:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_SD_ReadBlocks_DMA+0x130>)
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e16:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002e1e:	e007      	b.n	8002e30 <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e20:	2381      	movs	r3, #129	; 0x81
 8002e22:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e24:	4631      	mov	r1, r6
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	f001 faf4 	bl	8004414 <SDMMC_CmdReadSingleBlock>
 8002e2c:	e7db      	b.n	8002de6 <HAL_SD_ReadBlocks_DMA+0xce>
    return HAL_BUSY;
 8002e2e:	2502      	movs	r5, #2
}
 8002e30:	4628      	mov	r0, r5
 8002e32:	b007      	add	sp, #28
 8002e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8002e38:	4645      	mov	r5, r8
 8002e3a:	e7f9      	b.n	8002e30 <HAL_SD_ReadBlocks_DMA+0x118>
 8002e3c:	08002f7f 	.word	0x08002f7f
 8002e40:	08003469 	.word	0x08003469
 8002e44:	42258000 	.word	0x42258000
 8002e48:	004005ff 	.word	0x004005ff

08002e4c <HAL_SD_WriteBlocks_DMA>:
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	4604      	mov	r4, r0
  if(NULL == pData)
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d038      	beq.n	8002ec8 <HAL_SD_WriteBlocks_DMA+0x7c>
 8002e56:	461e      	mov	r6, r3
 8002e58:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002e5a:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8002e5e:	b2ed      	uxtb	r5, r5
 8002e60:	2d01      	cmp	r5, #1
 8002e62:	d17f      	bne.n	8002f64 <HAL_SD_WriteBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e68:	1993      	adds	r3, r2, r6
 8002e6a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d831      	bhi.n	8002ed4 <HAL_SD_WriteBlocks_DMA+0x88>
    hsd->State = HAL_SD_STATE_BUSY;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002e80:	f043 031a 	orr.w	r3, r3, #26
 8002e84:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002e86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e88:	4838      	ldr	r0, [pc, #224]	; (8002f6c <HAL_SD_WriteBlocks_DMA+0x120>)
 8002e8a:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e8e:	4838      	ldr	r0, [pc, #224]	; (8002f70 <HAL_SD_WriteBlocks_DMA+0x124>)
 8002e90:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8002e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e94:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d000      	beq.n	8002e9e <HAL_SD_WriteBlocks_DMA+0x52>
      add *= 512U;
 8002e9c:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8002e9e:	2e01      	cmp	r6, #1
 8002ea0:	d91d      	bls.n	8002ede <HAL_SD_WriteBlocks_DMA+0x92>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ea2:	23a0      	movs	r3, #160	; 0xa0
 8002ea4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	f001 fafb 	bl	80044a4 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eae:	b1e8      	cbz	r0, 8002eec <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_SD_WriteBlocks_DMA+0x128>)
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eb8:	4318      	orrs	r0, r3
 8002eba:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002ec6:	e04e      	b.n	8002f66 <HAL_SD_WriteBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ece:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8002ed0:	2501      	movs	r5, #1
 8002ed2:	e048      	b.n	8002f66 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ed4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eda:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8002edc:	e043      	b.n	8002f66 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ede:	2390      	movs	r3, #144	; 0x90
 8002ee0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	6820      	ldr	r0, [r4, #0]
 8002ee6:	f001 fac5 	bl	8004474 <SDMMC_CmdWriteSingleBlock>
 8002eea:	e7e0      	b.n	8002eae <HAL_SD_WriteBlocks_DMA+0x62>
    __HAL_SD_DMA_ENABLE(hsd);
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002efa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f04:	6889      	ldr	r1, [r1, #8]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	0276      	lsls	r6, r6, #9
 8002f0e:	08b3      	lsrs	r3, r6, #2
 8002f10:	3280      	adds	r2, #128	; 0x80
 8002f12:	4639      	mov	r1, r7
 8002f14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f16:	f7fe fba9 	bl	800166c <HAL_DMA_Start_IT>
 8002f1a:	4607      	mov	r7, r0
 8002f1c:	b188      	cbz	r0, 8002f42 <HAL_SD_WriteBlocks_DMA+0xf6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002f22:	f023 031a 	bic.w	r3, r3, #26
 8002f26:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_SD_WriteBlocks_DMA+0x128>)
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f34:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002f40:	e011      	b.n	8002f66 <HAL_SD_WriteBlocks_DMA+0x11a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002f48:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f4a:	2390      	movs	r3, #144	; 0x90
 8002f4c:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f52:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f58:	4669      	mov	r1, sp
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	f001 f973 	bl	8004246 <SDIO_ConfigData>
      return HAL_OK;
 8002f60:	463d      	mov	r5, r7
 8002f62:	e000      	b.n	8002f66 <HAL_SD_WriteBlocks_DMA+0x11a>
    return HAL_BUSY;
 8002f64:	2502      	movs	r5, #2
}
 8002f66:	4628      	mov	r0, r5
 8002f68:	b007      	add	sp, #28
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f6c:	08002a01 	.word	0x08002a01
 8002f70:	08003469 	.word	0x08003469
 8002f74:	004005ff 	.word	0x004005ff
 8002f78:	42258000 	.word	0x42258000

08002f7c <HAL_SD_ErrorCallback>:
}
 8002f7c:	4770      	bx	lr

08002f7e <SD_DMAReceiveCplt>:
{
 8002f7e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f80:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f84:	2b82      	cmp	r3, #130	; 0x82
 8002f86:	d011      	beq.n	8002fac <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002f88:	6822      	ldr	r2, [r4, #0]
 8002f8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f8c:	f023 0308 	bic.w	r3, r3, #8
 8002f90:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f003 fae0 	bl	800656a <HAL_SD_RxCpltCallback>
}
 8002faa:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002fac:	6820      	ldr	r0, [r4, #0]
 8002fae:	f001 fa91 	bl	80044d4 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0e7      	beq.n	8002f88 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8002fb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_SD_ErrorCallback>
 8002fc4:	e7e0      	b.n	8002f88 <SD_DMAReceiveCplt+0xa>
	...

08002fc8 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002fc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002fca:	0f9b      	lsrs	r3, r3, #30
 8002fcc:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002fce:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002fd0:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8002fd4:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fd6:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fe0:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8002fe4:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fe6:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8002fea:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002fec:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8002ff0:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ff2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002ff4:	0d1b      	lsrs	r3, r3, #20
 8002ff6:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ff8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003002:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003004:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003008:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800300a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800300c:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003010:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003012:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003014:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8003018:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800301a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800301c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8003020:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003022:	2300      	movs	r3, #0
 8003024:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003026:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 8086 	bne.w	800313a <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800302e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003034:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8003038:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800303a:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800303e:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003040:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003042:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8003046:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003048:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003052:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003054:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003058:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800305a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800305c:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8003060:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003062:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003064:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003068:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800306a:	690b      	ldr	r3, [r1, #16]
 800306c:	3301      	adds	r3, #1
 800306e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003070:	7e0a      	ldrb	r2, [r1, #24]
 8003072:	f002 0207 	and.w	r2, r2, #7
 8003076:	3202      	adds	r2, #2
 8003078:	4093      	lsls	r3, r2
 800307a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800307c:	7a0a      	ldrb	r2, [r1, #8]
 800307e:	f002 0c0f 	and.w	ip, r2, #15
 8003082:	2201      	movs	r2, #1
 8003084:	fa02 f20c 	lsl.w	r2, r2, ip
 8003088:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800308a:	0a52      	lsrs	r2, r2, #9
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003096:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003098:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800309a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800309e:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80030a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80030a2:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80030a6:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80030a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80030aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ae:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80030b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030b2:	0fdb      	lsrs	r3, r3, #31
 80030b4:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80030b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030b8:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80030bc:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80030be:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030c0:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80030c4:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80030c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030c8:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80030cc:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80030ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80030d0:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80030d4:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80030de:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 80030e2:	f002 0201 	and.w	r2, r2, #1
 80030e6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80030ea:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80030ec:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80030f0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80030f4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80030f6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80030fa:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80030fe:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003100:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003104:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003108:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800310a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800310e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003112:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003114:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003118:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800311c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800311e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8003122:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003126:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003128:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800312c:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003130:	2201      	movs	r2, #1
 8003132:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8003136:	4618      	mov	r0, r3
}
 8003138:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800313a:	2b01      	cmp	r3, #1
 800313c:	d111      	bne.n	8003162 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800313e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003146:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800314e:	690b      	ldr	r3, [r1, #16]
 8003150:	3301      	adds	r3, #1
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003156:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315c:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800315e:	6603      	str	r3, [r0, #96]	; 0x60
 8003160:	e79a      	b.n	8003098 <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003162:	6803      	ldr	r3, [r0, #0]
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <HAL_SD_GetCardCSD+0x1b4>)
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003168:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003170:	2301      	movs	r3, #1
 8003172:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003176:	4618      	mov	r0, r3
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	004005ff 	.word	0x004005ff

08003180 <SD_InitCard>:
{
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	b090      	sub	sp, #64	; 0x40
 8003184:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003186:	2301      	movs	r3, #1
 8003188:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800318c:	6800      	ldr	r0, [r0, #0]
 800318e:	f001 f83e 	bl	800420e <SDIO_GetPowerState>
 8003192:	2800      	cmp	r0, #0
 8003194:	d06c      	beq.n	8003270 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003196:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003198:	2b03      	cmp	r3, #3
 800319a:	d145      	bne.n	8003228 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800319c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d15d      	bne.n	800325e <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80031a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d01d      	beq.n	80031e4 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80031a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80031ac:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80031ae:	0409      	lsls	r1, r1, #16
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	f001 fa64 	bl	800467e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031b6:	4605      	mov	r5, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d15b      	bne.n	8003274 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031bc:	2100      	movs	r1, #0
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	f001 f83e 	bl	8004240 <SDIO_GetResponse>
 80031c4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031c6:	2104      	movs	r1, #4
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	f001 f839 	bl	8004240 <SDIO_GetResponse>
 80031ce:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031d0:	2108      	movs	r1, #8
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f001 f834 	bl	8004240 <SDIO_GetResponse>
 80031d8:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031da:	210c      	movs	r1, #12
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	f001 f82f 	bl	8004240 <SDIO_GetResponse>
 80031e2:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031e4:	2104      	movs	r1, #4
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	f001 f82a 	bl	8004240 <SDIO_GetResponse>
 80031ec:	0d00      	lsrs	r0, r0, #20
 80031ee:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80031f0:	a905      	add	r1, sp, #20
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fee8 	bl	8002fc8 <HAL_SD_GetCardCSD>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d13e      	bne.n	800327a <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80031fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80031fe:	0412      	lsls	r2, r2, #16
 8003200:	2300      	movs	r3, #0
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	f001 f980 	bl	8004508 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003208:	4605      	mov	r5, r0
 800320a:	bb98      	cbnz	r0, 8003274 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800320c:	4623      	mov	r3, r4
 800320e:	f853 6b10 	ldr.w	r6, [r3], #16
 8003212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003216:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800321a:	3404      	adds	r4, #4
 800321c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003220:	4630      	mov	r0, r6
 8003222:	f000 ffcf 	bl	80041c4 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8003226:	e025      	b.n	8003274 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	f001 fa13 	bl	8004654 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800322e:	4605      	mov	r5, r0
 8003230:	bb00      	cbnz	r0, 8003274 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003232:	2100      	movs	r1, #0
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	f001 f803 	bl	8004240 <SDIO_GetResponse>
 800323a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800323c:	2104      	movs	r1, #4
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f000 fffe 	bl	8004240 <SDIO_GetResponse>
 8003244:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003246:	2108      	movs	r1, #8
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	f000 fff9 	bl	8004240 <SDIO_GetResponse>
 800324e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003250:	210c      	movs	r1, #12
 8003252:	6820      	ldr	r0, [r4, #0]
 8003254:	f000 fff4 	bl	8004240 <SDIO_GetResponse>
 8003258:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800325c:	e79e      	b.n	800319c <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800325e:	f10d 0112 	add.w	r1, sp, #18
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	f001 fab0 	bl	80047c8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003268:	4605      	mov	r5, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	d099      	beq.n	80031a2 <SD_InitCard+0x22>
 800326e:	e001      	b.n	8003274 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003270:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003274:	4628      	mov	r0, r5
 8003276:	b010      	add	sp, #64	; 0x40
 8003278:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800327a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800327e:	e7f9      	b.n	8003274 <SD_InitCard+0xf4>

08003280 <HAL_SD_InitCard>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003286:	2300      	movs	r3, #0
 8003288:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800328a:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800328c:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800328e:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003290:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003292:	2376      	movs	r3, #118	; 0x76
 8003294:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8003296:	ab0a      	add	r3, sp, #40	; 0x28
 8003298:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800329c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80032a0:	ab04      	add	r3, sp, #16
 80032a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	f000 ff8d 	bl	80041c4 <SDIO_Init>
  if(status != HAL_OK)
 80032aa:	b118      	cbz	r0, 80032b4 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80032ac:	2501      	movs	r5, #1
}
 80032ae:	4628      	mov	r0, r5
 80032b0:	b00a      	add	sp, #40	; 0x28
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80032b6:	4e1a      	ldr	r6, [pc, #104]	; (8003320 <HAL_SD_InitCard+0xa0>)
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032be:	6820      	ldr	r0, [r4, #0]
 80032c0:	f000 ffa1 	bl	8004206 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  HAL_Delay(2);
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7fd fe3a 	bl	8000f44 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff fb9d 	bl	8002a10 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032d6:	b130      	cbz	r0, 80032e6 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80032d8:	2501      	movs	r5, #1
 80032da:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032e0:	4303      	orrs	r3, r0
 80032e2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80032e4:	e7e3      	b.n	80032ae <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff ff4a 	bl	8003180 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ec:	b130      	cbz	r0, 80032fc <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80032ee:	2501      	movs	r5, #1
 80032f0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032f6:	4303      	orrs	r3, r0
 80032f8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80032fa:	e7d8      	b.n	80032ae <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80032fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	f001 f86f 	bl	80043e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003306:	2800      	cmp	r0, #0
 8003308:	d0d1      	beq.n	80032ae <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	4905      	ldr	r1, [pc, #20]	; (8003324 <HAL_SD_InitCard+0xa4>)
 800330e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003312:	4303      	orrs	r3, r0
 8003314:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003316:	2501      	movs	r5, #1
 8003318:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800331c:	e7c7      	b.n	80032ae <HAL_SD_InitCard+0x2e>
 800331e:	bf00      	nop
 8003320:	42258000 	.word	0x42258000
 8003324:	004005ff 	.word	0x004005ff

08003328 <HAL_SD_Init>:
  if(hsd == NULL)
 8003328:	b1a8      	cbz	r0, 8003356 <HAL_SD_Init+0x2e>
{
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800332e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003332:	b163      	cbz	r3, 800334e <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8003334:	2303      	movs	r3, #3
 8003336:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800333a:	4620      	mov	r0, r4
 800333c:	f7ff ffa0 	bl	8003280 <HAL_SD_InitCard>
 8003340:	b958      	cbnz	r0, 800335a <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003342:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003344:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003346:	2301      	movs	r3, #1
 8003348:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800334c:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800334e:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003350:	f003 fcb6 	bl	8006cc0 <HAL_SD_MspInit>
 8003354:	e7ee      	b.n	8003334 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
}
 8003358:	4770      	bx	lr
    return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
 800335c:	e7f6      	b.n	800334c <HAL_SD_Init+0x24>

0800335e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800335e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003360:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003362:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003364:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003366:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003368:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800336a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800336c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800336e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003370:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003372:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003374:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003376:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003378:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800337a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800337c:	61cb      	str	r3, [r1, #28]
}
 800337e:	2000      	movs	r0, #0
 8003380:	4770      	bx	lr
	...

08003384 <HAL_SD_ConfigWideBusOperation>:
{
 8003384:	b530      	push	{r4, r5, lr}
 8003386:	b08b      	sub	sp, #44	; 0x2c
 8003388:	4604      	mov	r4, r0
 800338a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800338c:	2303      	movs	r3, #3
 800338e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003392:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003394:	2b03      	cmp	r3, #3
 8003396:	d01c      	beq.n	80033d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003398:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800339c:	d008      	beq.n	80033b0 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800339e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80033a2:	d00a      	beq.n	80033ba <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80033a4:	b179      	cbz	r1, 80033c6 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ac:	6383      	str	r3, [r0, #56]	; 0x38
 80033ae:	e014      	b.n	80033da <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6383      	str	r3, [r0, #56]	; 0x38
 80033b8:	e00f      	b.n	80033da <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80033ba:	f7ff fc49 	bl	8002c50 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80033be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033c0:	4303      	orrs	r3, r0
 80033c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80033c4:	e009      	b.n	80033da <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80033c6:	f7ff fc6a 	bl	8002c9e <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80033ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033cc:	4303      	orrs	r3, r0
 80033ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80033d0:	e003      	b.n	80033da <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033dc:	b1c3      	cbz	r3, 8003410 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_SD_ConfigWideBusOperation+0xbc>)
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033e4:	2501      	movs	r5, #1
 80033e6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	f000 fff8 	bl	80043e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80033f4:	b130      	cbz	r0, 8003404 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	4911      	ldr	r1, [pc, #68]	; (8003440 <HAL_SD_ConfigWideBusOperation+0xbc>)
 80033fa:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033fe:	4303      	orrs	r3, r0
 8003400:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003402:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800340a:	4628      	mov	r0, r5
 800340c:	b00b      	add	sp, #44	; 0x2c
 800340e:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003418:	68e3      	ldr	r3, [r4, #12]
 800341a:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 800341c:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800341e:	6963      	ldr	r3, [r4, #20]
 8003420:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003422:	69a3      	ldr	r3, [r4, #24]
 8003424:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8003426:	ab0a      	add	r3, sp, #40	; 0x28
 8003428:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800342c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003430:	ab04      	add	r3, sp, #16
 8003432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	f000 fec5 	bl	80041c4 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2500      	movs	r5, #0
 800343c:	e7d5      	b.n	80033ea <HAL_SD_ConfigWideBusOperation+0x66>
 800343e:	bf00      	nop
 8003440:	004005ff 	.word	0x004005ff

08003444 <HAL_SD_GetCardState>:
{
 8003444:	b510      	push	{r4, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800344e:	a901      	add	r1, sp, #4
 8003450:	f7ff fc4c 	bl	8002cec <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003454:	b110      	cbz	r0, 800345c <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8003456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003458:	4303      	orrs	r3, r0
 800345a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800345c:	9801      	ldr	r0, [sp, #4]
 800345e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003462:	b002      	add	sp, #8
 8003464:	bd10      	pop	{r4, pc}
	...

08003468 <SD_DMAError>:
{
 8003468:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800346a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800346c:	f7fe fa34 	bl	80018d8 <HAL_DMA_GetError>
 8003470:	2802      	cmp	r0, #2
 8003472:	d00a      	beq.n	800348a <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003478:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800347a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800347c:	2b01      	cmp	r3, #1
 800347e:	d005      	beq.n	800348c <SD_DMAError+0x24>
 8003480:	2a01      	cmp	r2, #1
 8003482:	d003      	beq.n	800348c <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff fd79 	bl	8002f7c <HAL_SD_ErrorCallback>
}
 800348a:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <SD_DMAError+0x64>)
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003496:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800349a:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800349c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800349e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7ff ffcd 	bl	8003444 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80034aa:	3805      	subs	r0, #5
 80034ac:	2801      	cmp	r0, #1
 80034ae:	d905      	bls.n	80034bc <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	6323      	str	r3, [r4, #48]	; 0x30
 80034ba:	e7e3      	b.n	8003484 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	f001 f809 	bl	80044d4 <SDMMC_CmdStopTransfer>
 80034c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034c4:	4303      	orrs	r3, r0
 80034c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80034c8:	e7f2      	b.n	80034b0 <SD_DMAError+0x48>
 80034ca:	bf00      	nop
 80034cc:	004005ff 	.word	0x004005ff

080034d0 <SD_DMATxAbort>:
{
 80034d0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff ffb1 	bl	8003444 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80034ec:	3805      	subs	r0, #5
 80034ee:	2801      	cmp	r0, #1
 80034f0:	d905      	bls.n	80034fe <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80034f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034f4:	b953      	cbnz	r3, 800350c <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80034f6:	4620      	mov	r0, r4
 80034f8:	f003 f82f 	bl	800655a <HAL_SD_AbortCallback>
}
 80034fc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034fe:	6820      	ldr	r0, [r4, #0]
 8003500:	f000 ffe8 	bl	80044d4 <SDMMC_CmdStopTransfer>
 8003504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003506:	4303      	orrs	r3, r0
 8003508:	63a3      	str	r3, [r4, #56]	; 0x38
 800350a:	e7f2      	b.n	80034f2 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff fd35 	bl	8002f7c <HAL_SD_ErrorCallback>
}
 8003512:	e7f3      	b.n	80034fc <SD_DMATxAbort+0x2c>

08003514 <SD_DMARxAbort>:
{
 8003514:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003516:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	f240 523a 	movw	r2, #1338	; 0x53a
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff ff8f 	bl	8003444 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003526:	2301      	movs	r3, #1
 8003528:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800352c:	2300      	movs	r3, #0
 800352e:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003530:	3805      	subs	r0, #5
 8003532:	2801      	cmp	r0, #1
 8003534:	d905      	bls.n	8003542 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003538:	b953      	cbnz	r3, 8003550 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800353a:	4620      	mov	r0, r4
 800353c:	f003 f80d 	bl	800655a <HAL_SD_AbortCallback>
}
 8003540:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	f000 ffc6 	bl	80044d4 <SDMMC_CmdStopTransfer>
 8003548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800354a:	4303      	orrs	r3, r0
 800354c:	63a3      	str	r3, [r4, #56]	; 0x38
 800354e:	e7f2      	b.n	8003536 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff fd13 	bl	8002f7c <HAL_SD_ErrorCallback>
}
 8003556:	e7f3      	b.n	8003540 <SD_DMARxAbort+0x2c>

08003558 <HAL_SD_IRQHandler>:
{
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800355c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003566:	d002      	beq.n	800356e <HAL_SD_IRQHandler+0x16>
 8003568:	f015 0f08 	tst.w	r5, #8
 800356c:	d128      	bne.n	80035c0 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800356e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003570:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003574:	d05a      	beq.n	800362c <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003580:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003584:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003588:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003594:	f015 0f08 	tst.w	r5, #8
 8003598:	d026      	beq.n	80035e8 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800359a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800359e:	d112      	bne.n	80035c6 <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80035b2:	f015 0f03 	tst.w	r5, #3
 80035b6:	d013      	beq.n	80035e0 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 80035b8:	4620      	mov	r0, r4
 80035ba:	f002 ffd6 	bl	800656a <HAL_SD_RxCpltCallback>
 80035be:	e001      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 80035c0:	f7ff fa86 	bl	8002ad0 <SD_Read_IT>
}
 80035c4:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035c6:	6820      	ldr	r0, [r4, #0]
 80035c8:	f000 ff84 	bl	80044d4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80035cc:	4603      	mov	r3, r0
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d0e6      	beq.n	80035a0 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 80035d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035d4:	4313      	orrs	r3, r2
 80035d6:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80035d8:	4620      	mov	r0, r4
 80035da:	f7ff fccf 	bl	8002f7c <HAL_SD_ErrorCallback>
 80035de:	e7df      	b.n	80035a0 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f002 ffbe 	bl	8006562 <HAL_SD_TxCpltCallback>
 80035e6:	e7ed      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80035e8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80035ec:	d0ea      	beq.n	80035c4 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80035ee:	f015 0f20 	tst.w	r5, #32
 80035f2:	d10e      	bne.n	8003612 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80035f4:	f015 0f03 	tst.w	r5, #3
 80035f8:	d1e4      	bne.n	80035c4 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035fe:	f023 0308 	bic.w	r3, r3, #8
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003604:	2301      	movs	r3, #1
 8003606:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800360a:	4620      	mov	r0, r4
 800360c:	f002 ffa9 	bl	8006562 <HAL_SD_TxCpltCallback>
 8003610:	e7d8      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f000 ff5e 	bl	80044d4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003618:	4603      	mov	r3, r0
 800361a:	2800      	cmp	r0, #0
 800361c:	d0ea      	beq.n	80035f4 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 800361e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003620:	4313      	orrs	r3, r2
 8003622:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff fca9 	bl	8002f7c <HAL_SD_ErrorCallback>
 800362a:	e7e3      	b.n	80035f4 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800362c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003632:	d002      	beq.n	800363a <HAL_SD_IRQHandler+0xe2>
 8003634:	f015 0f08 	tst.w	r5, #8
 8003638:	d14a      	bne.n	80036d0 <HAL_SD_IRQHandler+0x178>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800363a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363c:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8003640:	d0c0      	beq.n	80035c4 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003644:	f012 0f02 	tst.w	r2, #2
 8003648:	d003      	beq.n	8003652 <HAL_SD_IRQHandler+0xfa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800364a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800364c:	f042 0202 	orr.w	r2, r2, #2
 8003650:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003654:	f012 0f08 	tst.w	r2, #8
 8003658:	d003      	beq.n	8003662 <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800365a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003664:	f012 0f20 	tst.w	r2, #32
 8003668:	d003      	beq.n	8003672 <HAL_SD_IRQHandler+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800366a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	f012 0f10 	tst.w	r2, #16
 8003678:	d003      	beq.n	8003682 <HAL_SD_IRQHandler+0x12a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800367a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800367c:	f042 0210 	orr.w	r2, r2, #16
 8003680:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003682:	f240 523a 	movw	r2, #1338	; 0x53a
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800368c:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8003690:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	f000 ff1e 	bl	80044d4 <SDMMC_CmdStopTransfer>
 8003698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800369a:	4303      	orrs	r3, r0
 800369c:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800369e:	f015 0f08 	tst.w	r5, #8
 80036a2:	d119      	bne.n	80036d8 <HAL_SD_IRQHandler+0x180>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80036a4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80036a8:	d08c      	beq.n	80035c4 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036aa:	f015 0f30 	tst.w	r5, #48	; 0x30
 80036ae:	d11c      	bne.n	80036ea <HAL_SD_IRQHandler+0x192>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036b0:	f015 0f03 	tst.w	r5, #3
 80036b4:	d026      	beq.n	8003704 <HAL_SD_IRQHandler+0x1ac>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80036b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_SD_IRQHandler+0x1c0>)
 80036ba:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80036be:	f7fe f80a 	bl	80016d6 <HAL_DMA_Abort_IT>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f43f af7e 	beq.w	80035c4 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 80036c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80036ca:	f7ff ff23 	bl	8003514 <SD_DMARxAbort>
 80036ce:	e779      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7ff fa19 	bl	8002b08 <SD_Write_IT>
 80036d6:	e775      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 80036d8:	2301      	movs	r3, #1
 80036da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff fc4a 	bl	8002f7c <HAL_SD_ErrorCallback>
 80036e8:	e76c      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80036ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_SD_IRQHandler+0x1c4>)
 80036ee:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80036f2:	f7fd fff0 	bl	80016d6 <HAL_DMA_Abort_IT>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f43f af64 	beq.w	80035c4 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 80036fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80036fe:	f7ff fee7 	bl	80034d0 <SD_DMATxAbort>
 8003702:	e75f      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003708:	2201      	movs	r2, #1
 800370a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800370e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003710:	4620      	mov	r0, r4
 8003712:	f002 ff22 	bl	800655a <HAL_SD_AbortCallback>
}
 8003716:	e755      	b.n	80035c4 <HAL_SD_IRQHandler+0x6c>
 8003718:	08003515 	.word	0x08003515
 800371c:	080034d1 	.word	0x080034d1

08003720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003720:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003722:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003724:	6a04      	ldr	r4, [r0, #32]
 8003726:	f024 0401 	bic.w	r4, r4, #1
 800372a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003732:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800373a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800373c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800373e:	6203      	str	r3, [r0, #32]
}
 8003740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003746:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003748:	6a04      	ldr	r4, [r0, #32]
 800374a:	f024 0410 	bic.w	r4, r4, #16
 800374e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003750:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003752:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003754:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003758:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375c:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	b29b      	uxth	r3, r3
 8003764:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003768:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800376c:	0109      	lsls	r1, r1, #4
 800376e:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003772:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003774:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003776:	6201      	str	r1, [r0, #32]
}
 8003778:	bc30      	pop	{r4, r5}
 800377a:	4770      	bx	lr

0800377c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800377c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377e:	6a04      	ldr	r4, [r0, #32]
 8003780:	f024 0410 	bic.w	r4, r4, #16
 8003784:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003786:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003788:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378a:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003796:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800379a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800379c:	6203      	str	r3, [r0, #32]
}
 800379e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037a4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a6:	6a04      	ldr	r4, [r0, #32]
 80037a8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80037ac:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037ae:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80037b0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037b2:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80037b6:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037ba:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037c6:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037ca:	0209      	lsls	r1, r1, #8
 80037cc:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 80037d0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037d2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80037d4:	6201      	str	r1, [r0, #32]
}
 80037d6:	bc30      	pop	{r4, r5}
 80037d8:	4770      	bx	lr

080037da <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037da:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037dc:	6a04      	ldr	r4, [r0, #32]
 80037de:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80037e2:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037e4:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80037e6:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037e8:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037ec:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037f0:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80037fc:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003800:	0309      	lsls	r1, r1, #12
 8003802:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003806:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003808:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800380a:	6201      	str	r1, [r0, #32]
}
 800380c:	bc30      	pop	{r4, r5}
 800380e:	4770      	bx	lr

08003810 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003810:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003816:	430b      	orrs	r3, r1
 8003818:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381c:	6083      	str	r3, [r0, #8]
}
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d137      	bne.n	800389a <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003830:	6802      	ldr	r2, [r0, #0]
 8003832:	68d3      	ldr	r3, [r2, #12]
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_TIM_Base_Start_IT+0x84>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d020      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d01d      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003848:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800384c:	4293      	cmp	r3, r2
 800384e:	d019      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003854:	4293      	cmp	r3, r2
 8003856:	d015      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800385c:	4293      	cmp	r3, r2
 800385e:	d011      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003860:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003864:	4293      	cmp	r3, r2
 8003866:	d00d      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003868:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
 8003870:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003874:	4293      	cmp	r3, r2
 8003876:	d005      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	2a06      	cmp	r2, #6
 800388c:	d007      	beq.n	800389e <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003896:	2000      	movs	r0, #0
 8003898:	4770      	bx	lr
    return HAL_ERROR;
 800389a:	2001      	movs	r0, #1
 800389c:	4770      	bx	lr
  return HAL_OK;
 800389e:	2000      	movs	r0, #0
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000

080038a8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_TriggerCallback>:
}
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_IRQHandler>:
{
 80038ae:	b510      	push	{r4, lr}
 80038b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b2:	6803      	ldr	r3, [r0, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	f012 0f02 	tst.w	r2, #2
 80038ba:	d011      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	f012 0f02 	tst.w	r2, #2
 80038c2:	d00d      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c4:	f06f 0202 	mvn.w	r2, #2
 80038c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f013 0f03 	tst.w	r3, #3
 80038d6:	d070      	beq.n	80039ba <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	f003 fe22 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038dc:	2300      	movs	r3, #0
 80038de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	f012 0f04 	tst.w	r2, #4
 80038e8:	d012      	beq.n	8003910 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	f012 0f04 	tst.w	r2, #4
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f2:	f06f 0204 	mvn.w	r2, #4
 80038f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003904:	d05f      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	4620      	mov	r0, r4
 8003908:	f003 fe0a 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	2300      	movs	r3, #0
 800390e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	f012 0f08 	tst.w	r2, #8
 8003918:	d012      	beq.n	8003940 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	f012 0f08 	tst.w	r2, #8
 8003920:	d00e      	beq.n	8003940 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003922:	f06f 0208 	mvn.w	r2, #8
 8003926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003928:	2304      	movs	r3, #4
 800392a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f013 0f03 	tst.w	r3, #3
 8003934:	d04e      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	4620      	mov	r0, r4
 8003938:	f003 fdf2 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393c:	2300      	movs	r3, #0
 800393e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	f012 0f10 	tst.w	r2, #16
 8003948:	d012      	beq.n	8003970 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	f012 0f10 	tst.w	r2, #16
 8003950:	d00e      	beq.n	8003970 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003952:	f06f 0210 	mvn.w	r2, #16
 8003956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003958:	2308      	movs	r3, #8
 800395a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003964:	d03d      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	4620      	mov	r0, r4
 8003968:	f003 fdda 	bl	8007520 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396c:	2300      	movs	r3, #0
 800396e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	f012 0f01 	tst.w	r2, #1
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	f012 0f01 	tst.w	r2, #1
 8003980:	d136      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	f012 0f80 	tst.w	r2, #128	; 0x80
 800398a:	d003      	beq.n	8003994 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003992:	d134      	bne.n	80039fe <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	f012 0f40 	tst.w	r2, #64	; 0x40
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039a4:	d132      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	f012 0f20 	tst.w	r2, #32
 80039ae:	d003      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	f012 0f20 	tst.w	r2, #32
 80039b6:	d130      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x16c>
}
 80039b8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	f7ff ff75 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff ff73 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
 80039c4:	e78a      	b.n	80038dc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7ff ff6e 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff ff6c 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
 80039d2:	e79b      	b.n	800390c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff ff67 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ff65 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
 80039e0:	e7ac      	b.n	800393c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff ff60 	bl	80038a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff ff5e 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
 80039ee:	e7bd      	b.n	800396c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f0:	f06f 0201 	mvn.w	r2, #1
 80039f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f002 ff82 	bl	8006900 <HAL_TIM_PeriodElapsedCallback>
 80039fc:	e7c1      	b.n	8003982 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 fb08 	bl	800401a <HAL_TIMEx_BreakCallback>
 8003a0a:	e7c3      	b.n	8003994 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a10:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff ff4a 	bl	80038ac <HAL_TIM_TriggerCallback>
 8003a18:	e7c5      	b.n	80039a6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a1a:	f06f 0220 	mvn.w	r2, #32
 8003a1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 faf9 	bl	8004018 <HAL_TIMEx_CommutCallback>
}
 8003a26:	e7c7      	b.n	80039b8 <HAL_TIM_IRQHandler+0x10a>

08003a28 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003a28:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2a:	4a30      	ldr	r2, [pc, #192]	; (8003aec <TIM_Base_SetConfig+0xc4>)
 8003a2c:	4290      	cmp	r0, r2
 8003a2e:	d012      	beq.n	8003a56 <TIM_Base_SetConfig+0x2e>
 8003a30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x2e>
 8003a36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a3a:	4290      	cmp	r0, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x2e>
 8003a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a42:	4290      	cmp	r0, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x2e>
 8003a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x2e>
 8003a4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a52:	4290      	cmp	r0, r2
 8003a54:	d103      	bne.n	8003a5e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a5a:	684a      	ldr	r2, [r1, #4]
 8003a5c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	4a23      	ldr	r2, [pc, #140]	; (8003aec <TIM_Base_SetConfig+0xc4>)
 8003a60:	4290      	cmp	r0, r2
 8003a62:	d02a      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a76:	4290      	cmp	r0, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a7e:	4290      	cmp	r0, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a82:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a86:	4290      	cmp	r0, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a8a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a8e:	4290      	cmp	r0, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a96:	4290      	cmp	r0, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a9e:	4290      	cmp	r0, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003aa2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003aa6:	4290      	cmp	r0, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aae:	4290      	cmp	r0, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0x92>
 8003ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ab6:	4290      	cmp	r0, r2
 8003ab8:	d103      	bne.n	8003ac2 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003abe:	68ca      	ldr	r2, [r1, #12]
 8003ac0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac6:	694a      	ldr	r2, [r1, #20]
 8003ac8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003aca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	688b      	ldr	r3, [r1, #8]
 8003ace:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <TIM_Base_SetConfig+0xc4>)
 8003ad6:	4298      	cmp	r0, r3
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0xba>
 8003ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	d101      	bne.n	8003ae6 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae2:	690b      	ldr	r3, [r1, #16]
 8003ae4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6143      	str	r3, [r0, #20]
}
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000

08003af0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003af0:	b340      	cbz	r0, 8003b44 <HAL_TIM_Base_Init+0x54>
{
 8003af2:	b510      	push	{r4, lr}
 8003af4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003afa:	b1f3      	cbz	r3, 8003b3a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	2302      	movs	r3, #2
 8003afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b02:	4621      	mov	r1, r4
 8003b04:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b08:	f7ff ff8e 	bl	8003a28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
}
 8003b38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	f003 fbc5 	bl	80072cc <HAL_TIM_Base_MspInit>
 8003b42:	e7db      	b.n	8003afc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
}
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003b48:	b340      	cbz	r0, 8003b9c <HAL_TIM_IC_Init+0x54>
{
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b52:	b1f3      	cbz	r3, 8003b92 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b60:	f7ff ff62 	bl	8003a28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003b6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003b72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
}
 8003b90:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003b96:	f003 fc1f 	bl	80073d8 <HAL_TIM_IC_MspInit>
 8003b9a:	e7db      	b.n	8003b54 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
}
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_TI1_SetConfig>:
{
 8003ba0:	b470      	push	{r4, r5, r6}
 8003ba2:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba4:	6a04      	ldr	r4, [r0, #32]
 8003ba6:	f024 0401 	bic.w	r4, r4, #1
 8003baa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bac:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003bae:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bb0:	4d18      	ldr	r5, [pc, #96]	; (8003c14 <TIM_TI1_SetConfig+0x74>)
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d01c      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bb6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003bba:	d019      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <TIM_TI1_SetConfig+0x78>)
 8003bbe:	4290      	cmp	r0, r2
 8003bc0:	d016      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc6:	4290      	cmp	r0, r2
 8003bc8:	d012      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d00e      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003bd6:	4290      	cmp	r0, r2
 8003bd8:	d00a      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003bda:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003bde:	4290      	cmp	r0, r2
 8003be0:	d006      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
 8003be2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003be6:	4290      	cmp	r0, r2
 8003be8:	d002      	beq.n	8003bf0 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bea:	f044 0201 	orr.w	r2, r4, #1
 8003bee:	e003      	b.n	8003bf8 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bf0:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003bf4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c06:	f001 010a 	and.w	r1, r1, #10
 8003c0a:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003c0c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c0e:	6201      	str	r1, [r0, #32]
}
 8003c10:	bc70      	pop	{r4, r5, r6}
 8003c12:	4770      	bx	lr
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400

08003c1c <HAL_TIM_IC_ConfigChannel>:
{
 8003c1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003c1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d05a      	beq.n	8003cdc <HAL_TIM_IC_ConfigChannel+0xc0>
 8003c26:	4604      	mov	r4, r0
 8003c28:	460d      	mov	r5, r1
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003c30:	b152      	cbz	r2, 8003c48 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8003c32:	2a04      	cmp	r2, #4
 8003c34:	d01a      	beq.n	8003c6c <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8003c36:	2a08      	cmp	r2, #8
 8003c38:	d02b      	beq.n	8003c92 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8003c3a:	2a0c      	cmp	r2, #12
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003c40:	2300      	movs	r3, #0
 8003c42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003c46:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003c48:	68cb      	ldr	r3, [r1, #12]
 8003c4a:	684a      	ldr	r2, [r1, #4]
 8003c4c:	6809      	ldr	r1, [r1, #0]
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	f7ff ffa6 	bl	8003ba0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	6993      	ldr	r3, [r2, #24]
 8003c58:	f023 030c 	bic.w	r3, r3, #12
 8003c5c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6993      	ldr	r3, [r2, #24]
 8003c62:	68a9      	ldr	r1, [r5, #8]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e7e9      	b.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8003c6c:	68cb      	ldr	r3, [r1, #12]
 8003c6e:	684a      	ldr	r2, [r1, #4]
 8003c70:	6809      	ldr	r1, [r1, #0]
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	f7ff fd67 	bl	8003746 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c78:	6822      	ldr	r2, [r4, #0]
 8003c7a:	6993      	ldr	r3, [r2, #24]
 8003c7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c80:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	6993      	ldr	r3, [r2, #24]
 8003c86:	68a9      	ldr	r1, [r5, #8]
 8003c88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c8c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e7d6      	b.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8003c92:	68cb      	ldr	r3, [r1, #12]
 8003c94:	684a      	ldr	r2, [r1, #4]
 8003c96:	6809      	ldr	r1, [r1, #0]
 8003c98:	6800      	ldr	r0, [r0, #0]
 8003c9a:	f7ff fd83 	bl	80037a4 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	69d3      	ldr	r3, [r2, #28]
 8003ca2:	f023 030c 	bic.w	r3, r3, #12
 8003ca6:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ca8:	6822      	ldr	r2, [r4, #0]
 8003caa:	69d3      	ldr	r3, [r2, #28]
 8003cac:	68a9      	ldr	r1, [r5, #8]
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7c4      	b.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8003cb6:	68cb      	ldr	r3, [r1, #12]
 8003cb8:	684a      	ldr	r2, [r1, #4]
 8003cba:	6809      	ldr	r1, [r1, #0]
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	f7ff fd8c 	bl	80037da <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	69d3      	ldr	r3, [r2, #28]
 8003cc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cca:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	69d3      	ldr	r3, [r2, #28]
 8003cd0:	68a9      	ldr	r1, [r5, #8]
 8003cd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003cd6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7b1      	b.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8003cdc:	2002      	movs	r0, #2
 8003cde:	e7b2      	b.n	8003c46 <HAL_TIM_IC_ConfigChannel+0x2a>

08003ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ce2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003cec:	430a      	orrs	r2, r1
 8003cee:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	6082      	str	r2, [r0, #8]
}
 8003cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003cfa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d078      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003d06:	2301      	movs	r3, #1
 8003d08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003d12:	6802      	ldr	r2, [r0, #0]
 8003d14:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003d1e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d20:	680b      	ldr	r3, [r1, #0]
 8003d22:	2b60      	cmp	r3, #96	; 0x60
 8003d24:	d04c      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0xc6>
 8003d26:	d829      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x82>
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d054      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xdc>
 8003d2c:	d90c      	bls.n	8003d48 <HAL_TIM_ConfigClockSource+0x4e>
 8003d2e:	2b50      	cmp	r3, #80	; 0x50
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	68ca      	ldr	r2, [r1, #12]
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	6800      	ldr	r0, [r0, #0]
 8003d38:	f7ff fcf2 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3c:	2150      	movs	r1, #80	; 0x50
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	f7ff fd66 	bl	8003810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2000      	movs	r0, #0
      break;
 8003d46:	e005      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d00d      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x6e>
 8003d4c:	d909      	bls.n	8003d62 <HAL_TIM_ConfigClockSource+0x68>
 8003d4e:	2b30      	cmp	r3, #48	; 0x30
 8003d50:	d00a      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003d60:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003d62:	b10b      	cbz	r3, 8003d68 <HAL_TIM_ConfigClockSource+0x6e>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d105      	bne.n	8003d74 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6820      	ldr	r0, [r4, #0]
 8003d6c:	f7ff fd50 	bl	8003810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003d70:	2000      	movs	r0, #0
      break;
 8003d72:	e7ef      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
 8003d76:	e7ed      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
 8003d78:	2001      	movs	r0, #1
 8003d7a:	e7eb      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d034      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0xf2>
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d86:	d10c      	bne.n	8003da2 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	68cb      	ldr	r3, [r1, #12]
 8003d8a:	684a      	ldr	r2, [r1, #4]
 8003d8c:	6889      	ldr	r1, [r1, #8]
 8003d8e:	6800      	ldr	r0, [r0, #0]
 8003d90:	f7ff ffa6 	bl	8003ce0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	6893      	ldr	r3, [r2, #8]
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2000      	movs	r0, #0
      break;
 8003da0:	e7d8      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003da2:	2b70      	cmp	r3, #112	; 0x70
 8003da4:	d124      	bne.n	8003df0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	68cb      	ldr	r3, [r1, #12]
 8003da8:	684a      	ldr	r2, [r1, #4]
 8003daa:	6889      	ldr	r1, [r1, #8]
 8003dac:	6800      	ldr	r0, [r0, #0]
 8003dae:	f7ff ff97 	bl	8003ce0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003dba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2000      	movs	r0, #0
      break;
 8003dbe:	e7c9      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc0:	68ca      	ldr	r2, [r1, #12]
 8003dc2:	6849      	ldr	r1, [r1, #4]
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	f7ff fcd9 	bl	800377c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dca:	2160      	movs	r1, #96	; 0x60
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	f7ff fd1f 	bl	8003810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2000      	movs	r0, #0
      break;
 8003dd4:	e7be      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	68ca      	ldr	r2, [r1, #12]
 8003dd8:	6849      	ldr	r1, [r1, #4]
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	f7ff fca0 	bl	8003720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	f7ff fd14 	bl	8003810 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2000      	movs	r0, #0
      break;
 8003dea:	e7b3      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003dec:	2000      	movs	r0, #0
 8003dee:	e7b1      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
 8003df2:	e7af      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003df4:	2002      	movs	r0, #2
}
 8003df6:	4770      	bx	lr

08003df8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df8:	f001 011f 	and.w	r1, r1, #31
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e02:	6a03      	ldr	r3, [r0, #32]
 8003e04:	ea23 030c 	bic.w	r3, r3, ip
 8003e08:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e0a:	6a03      	ldr	r3, [r0, #32]
 8003e0c:	fa02 f101 	lsl.w	r1, r2, r1
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6203      	str	r3, [r0, #32]
}
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_TIM_IC_Start_IT>:
{
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	bb09      	cbnz	r1, 8003e64 <HAL_TIM_IC_Start_IT+0x4c>
 8003e20:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8003e24:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e26:	bb6b      	cbnz	r3, 8003e84 <HAL_TIM_IC_Start_IT+0x6c>
 8003e28:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8003e2c:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e2e:	2801      	cmp	r0, #1
 8003e30:	f040 80a4 	bne.w	8003f7c <HAL_TIM_IC_Start_IT+0x164>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e34:	2a01      	cmp	r2, #1
 8003e36:	f040 80a2 	bne.w	8003f7e <HAL_TIM_IC_Start_IT+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3a:	bb9b      	cbnz	r3, 8003ea4 <HAL_TIM_IC_Start_IT+0x8c>
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d13e      	bne.n	8003ec4 <HAL_TIM_IC_Start_IT+0xac>
 8003e46:	2102      	movs	r1, #2
 8003e48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	f200 8097 	bhi.w	8003f80 <HAL_TIM_IC_Start_IT+0x168>
 8003e52:	e8df f003 	tbb	[pc, r3]
 8003e56:	9547      	.short	0x9547
 8003e58:	95769595 	.word	0x95769595
 8003e5c:	957c9595 	.word	0x957c9595
 8003e60:	9595      	.short	0x9595
 8003e62:	82          	.byte	0x82
 8003e63:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e64:	2904      	cmp	r1, #4
 8003e66:	d005      	beq.n	8003e74 <HAL_TIM_IC_Start_IT+0x5c>
 8003e68:	2908      	cmp	r1, #8
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IC_Start_IT+0x64>
 8003e6c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8003e70:	b2c0      	uxtb	r0, r0
 8003e72:	e7d8      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xe>
 8003e74:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8003e78:	b2c0      	uxtb	r0, r0
 8003e7a:	e7d4      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xe>
 8003e7c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8003e80:	b2c0      	uxtb	r0, r0
 8003e82:	e7d0      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d005      	beq.n	8003e94 <HAL_TIM_IC_Start_IT+0x7c>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_IC_Start_IT+0x84>
 8003e8c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	e7cc      	b.n	8003e2e <HAL_TIM_IC_Start_IT+0x16>
 8003e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	e7c8      	b.n	8003e2e <HAL_TIM_IC_Start_IT+0x16>
 8003e9c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	e7c4      	b.n	8003e2e <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d005      	beq.n	8003eb4 <HAL_TIM_IC_Start_IT+0x9c>
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d007      	beq.n	8003ebc <HAL_TIM_IC_Start_IT+0xa4>
 8003eac:	2102      	movs	r1, #2
 8003eae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 8003eb2:	e7c6      	b.n	8003e42 <HAL_TIM_IC_Start_IT+0x2a>
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8003eba:	e7c2      	b.n	8003e42 <HAL_TIM_IC_Start_IT+0x2a>
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8003ec2:	e7be      	b.n	8003e42 <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d005      	beq.n	8003ed4 <HAL_TIM_IC_Start_IT+0xbc>
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IC_Start_IT+0xc4>
 8003ecc:	2102      	movs	r1, #2
 8003ece:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ed2:	e7bb      	b.n	8003e4c <HAL_TIM_IC_Start_IT+0x34>
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eda:	e7b7      	b.n	8003e4c <HAL_TIM_IC_Start_IT+0x34>
 8003edc:	2102      	movs	r1, #2
 8003ede:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8003ee2:	e7b3      	b.n	8003e4c <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ee4:	6821      	ldr	r1, [r4, #0]
 8003ee6:	68ca      	ldr	r2, [r1, #12]
 8003ee8:	f042 0202 	orr.w	r2, r2, #2
 8003eec:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	f7ff ff80 	bl	8003df8 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_TIM_IC_Start_IT+0x170>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d032      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d02f      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d027      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d023      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f26:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01b      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
 8003f2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d017      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x14e>
      __HAL_TIM_ENABLE(htim);
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e01d      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x166>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	68ca      	ldr	r2, [r1, #12]
 8003f46:	f042 0204 	orr.w	r2, r2, #4
 8003f4a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8003f4c:	e7cf      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	68ca      	ldr	r2, [r1, #12]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8003f58:	e7c9      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	68ca      	ldr	r2, [r1, #12]
 8003f5e:	f042 0210 	orr.w	r2, r2, #16
 8003f62:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8003f64:	e7c3      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	2a06      	cmp	r2, #6
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_IC_Start_IT+0x16c>
        __HAL_TIM_ENABLE(htim);
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x166>
    return HAL_ERROR;
 8003f7c:	2001      	movs	r0, #1
}
 8003f7e:	bd10      	pop	{r4, pc}
  switch (Channel)
 8003f80:	4610      	mov	r0, r2
 8003f82:	e7fc      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x166>
 8003f84:	2000      	movs	r0, #0
 8003f86:	e7fa      	b.n	8003f7e <HAL_TIM_IC_Start_IT+0x166>
 8003f88:	40010000 	.word	0x40010000

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d03d      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8003f94:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003f96:	2301      	movs	r3, #1
 8003f98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa6:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa8:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fac:	680a      	ldr	r2, [r1, #0]
 8003fae:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	6803      	ldr	r3, [r0, #0]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01a      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d017      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fc2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fe2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d104      	bne.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff6:	684a      	ldr	r2, [r1, #4]
 8003ff8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffa:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004002:	2300      	movs	r3, #0
 8004004:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004008:	4618      	mov	r0, r3
}
 800400a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800400e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004010:	2002      	movs	r0, #2
}
 8004012:	4770      	bx	lr
 8004014:	40010000 	.word	0x40010000

08004018 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004018:	4770      	bx	lr

0800401a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401a:	4770      	bx	lr

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	6913      	ldr	r3, [r2, #16]
 8004024:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004028:	68c1      	ldr	r1, [r0, #12]
 800402a:	430b      	orrs	r3, r1
 800402c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800402e:	6883      	ldr	r3, [r0, #8]
 8004030:	6902      	ldr	r2, [r0, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	6942      	ldr	r2, [r0, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	69c2      	ldr	r2, [r0, #28]
 800403a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800403c:	6801      	ldr	r1, [r0, #0]
 800403e:	68cb      	ldr	r3, [r1, #12]
 8004040:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004044:	f023 030c 	bic.w	r3, r3, #12
 8004048:	4313      	orrs	r3, r2
 800404a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	6953      	ldr	r3, [r2, #20]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	6981      	ldr	r1, [r0, #24]
 8004056:	430b      	orrs	r3, r1
 8004058:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800405a:	6803      	ldr	r3, [r0, #0]
 800405c:	4a31      	ldr	r2, [pc, #196]	; (8004124 <UART_SetConfig+0x108>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x54>
 8004062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004066:	4293      	cmp	r3, r2
 8004068:	d002      	beq.n	8004070 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406a:	f7fd fe1f 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 800406e:	e001      	b.n	8004074 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7fd fe2c 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004074:	69e3      	ldr	r3, [r4, #28]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d029      	beq.n	80040d0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407c:	2100      	movs	r1, #0
 800407e:	1803      	adds	r3, r0, r0
 8004080:	4149      	adcs	r1, r1
 8004082:	181b      	adds	r3, r3, r0
 8004084:	f141 0100 	adc.w	r1, r1, #0
 8004088:	00c9      	lsls	r1, r1, #3
 800408a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	1818      	adds	r0, r3, r0
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004098:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800409c:	f141 0100 	adc.w	r1, r1, #0
 80040a0:	f7fc fda2 	bl	8000be8 <__aeabi_uldivmod>
 80040a4:	4d20      	ldr	r5, [pc, #128]	; (8004128 <UART_SetConfig+0x10c>)
 80040a6:	fba5 3200 	umull	r3, r2, r5, r0
 80040aa:	0951      	lsrs	r1, r2, #5
 80040ac:	2364      	movs	r3, #100	; 0x64
 80040ae:	fb03 0311 	mls	r3, r3, r1, r0
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	fba5 2303 	umull	r2, r3, r5, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	6821      	ldr	r1, [r4, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }
}
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d0:	2300      	movs	r3, #0
 80040d2:	1802      	adds	r2, r0, r0
 80040d4:	eb43 0103 	adc.w	r1, r3, r3
 80040d8:	1812      	adds	r2, r2, r0
 80040da:	f141 0100 	adc.w	r1, r1, #0
 80040de:	00c9      	lsls	r1, r1, #3
 80040e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e4:	00d2      	lsls	r2, r2, #3
 80040e6:	1810      	adds	r0, r2, r0
 80040e8:	f141 0100 	adc.w	r1, r1, #0
 80040ec:	6862      	ldr	r2, [r4, #4]
 80040ee:	1892      	adds	r2, r2, r2
 80040f0:	415b      	adcs	r3, r3
 80040f2:	f7fc fd79 	bl	8000be8 <__aeabi_uldivmod>
 80040f6:	4d0c      	ldr	r5, [pc, #48]	; (8004128 <UART_SetConfig+0x10c>)
 80040f8:	fba5 3200 	umull	r3, r2, r5, r0
 80040fc:	0951      	lsrs	r1, r2, #5
 80040fe:	2364      	movs	r3, #100	; 0x64
 8004100:	fb03 0311 	mls	r3, r3, r1, r0
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	3332      	adds	r3, #50	; 0x32
 8004108:	fba5 2303 	umull	r2, r3, r5, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	005a      	lsls	r2, r3, #1
 8004110:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004114:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	6821      	ldr	r1, [r4, #0]
 800411e:	4413      	add	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
 8004122:	e7d4      	b.n	80040ce <UART_SetConfig+0xb2>
 8004124:	40011000 	.word	0x40011000
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <HAL_UART_Init>:
  if (huart == NULL)
 800412c:	b358      	cbz	r0, 8004186 <HAL_UART_Init+0x5a>
{
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004136:	b30b      	cbz	r3, 800417c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	2324      	movs	r3, #36	; 0x24
 800413a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	68d3      	ldr	r3, [r2, #12]
 8004142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004146:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff ff67 	bl	800401c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6913      	ldr	r3, [r2, #16]
 8004152:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004156:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	6953      	ldr	r3, [r2, #20]
 800415c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004160:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	68d3      	ldr	r3, [r2, #12]
 8004166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800416a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	2000      	movs	r0, #0
 800416e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004170:	2320      	movs	r3, #32
 8004172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004176:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800417a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800417c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004180:	f003 f994 	bl	80074ac <HAL_UART_MspInit>
 8004184:	e7d8      	b.n	8004138 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
}
 8004188:	4770      	bx	lr
	...

0800418c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <SDMMC_GetCmdError+0x30>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <SDMMC_GetCmdError+0x34>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0a5b      	lsrs	r3, r3, #9
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 80041a0:	461a      	mov	r2, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b13a      	cbz	r2, 80041b6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80041a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80041a8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80041ac:	d0f8      	beq.n	80041a0 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041ae:	23c5      	movs	r3, #197	; 0xc5
 80041b0:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80041b2:	2000      	movs	r0, #0
 80041b4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80041b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80041ba:	4770      	bx	lr
 80041bc:	20000010 	.word	0x20000010
 80041c0:	10624dd3 	.word	0x10624dd3

080041c4 <SDIO_Init>:
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	f10d 0c04 	add.w	ip, sp, #4
 80041ca:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80041ce:	460b      	mov	r3, r1
 80041d0:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80041d2:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 80041d4:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80041d6:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 80041d8:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80041da:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 80041dc:	4313      	orrs	r3, r2
             Init.ClockDiv
 80041de:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 80041e0:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80041e2:	6842      	ldr	r2, [r0, #4]
 80041e4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80041e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80041ec:	4313      	orrs	r3, r2
 80041ee:	6043      	str	r3, [r0, #4]
}
 80041f0:	2000      	movs	r0, #0
 80041f2:	b004      	add	sp, #16
 80041f4:	4770      	bx	lr

080041f6 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80041f6:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80041fa:	4770      	bx	lr

080041fc <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80041fc:	680b      	ldr	r3, [r1, #0]
 80041fe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8004202:	2000      	movs	r0, #0
 8004204:	4770      	bx	lr

08004206 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004206:	2303      	movs	r3, #3
 8004208:	6003      	str	r3, [r0, #0]
}
 800420a:	2000      	movs	r0, #0
 800420c:	4770      	bx	lr

0800420e <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800420e:	6800      	ldr	r0, [r0, #0]
}
 8004210:	f000 0003 	and.w	r0, r0, #3
 8004214:	4770      	bx	lr

08004216 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8004216:	680b      	ldr	r3, [r1, #0]
 8004218:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800421a:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800421c:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800421e:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8004220:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8004222:	4313      	orrs	r3, r2
                       Command->CPSM);
 8004224:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004226:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004228:	68c2      	ldr	r2, [r0, #12]
 800422a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800422e:	f022 020f 	bic.w	r2, r2, #15
 8004232:	4313      	orrs	r3, r2
 8004234:	60c3      	str	r3, [r0, #12]
}
 8004236:	2000      	movs	r0, #0
 8004238:	4770      	bx	lr

0800423a <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 800423a:	6900      	ldr	r0, [r0, #16]
}
 800423c:	b2c0      	uxtb	r0, r0
 800423e:	4770      	bx	lr

08004240 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004240:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004242:	5840      	ldr	r0, [r0, r1]
}  
 8004244:	4770      	bx	lr

08004246 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8004246:	680b      	ldr	r3, [r1, #0]
 8004248:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 800424a:	684b      	ldr	r3, [r1, #4]
 800424c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800424e:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004250:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004252:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004254:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004256:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004258:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800425a:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800425c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800425e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8004262:	4313      	orrs	r3, r2
 8004264:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004266:	2000      	movs	r0, #0
 8004268:	4770      	bx	lr

0800426a <SDMMC_CmdGoIdleState>:
{
 800426a:	b510      	push	{r4, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004274:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004276:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004278:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800427a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004280:	a901      	add	r1, sp, #4
 8004282:	f7ff ffc8 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff ff80 	bl	800418c <SDMMC_GetCmdError>
}
 800428c:	b006      	add	sp, #24
 800428e:	bd10      	pop	{r4, pc}

08004290 <SDMMC_GetCmdResp1>:
{
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4604      	mov	r4, r0
 8004294:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004296:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <SDMMC_GetCmdResp1+0x148>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4950      	ldr	r1, [pc, #320]	; (80043dc <SDMMC_GetCmdResp1+0x14c>)
 800429c:	fba1 1303 	umull	r1, r3, r1, r3
 80042a0:	0a5b      	lsrs	r3, r3, #9
 80042a2:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80042a6:	4613      	mov	r3, r2
 80042a8:	3a01      	subs	r2, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d05d      	beq.n	800436a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 80042ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80042b0:	f013 0f45 	tst.w	r3, #69	; 0x45
 80042b4:	d0f7      	beq.n	80042a6 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80042b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80042ba:	d1f4      	bne.n	80042a6 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042be:	f013 0f04 	tst.w	r3, #4
 80042c2:	d106      	bne.n	80042d2 <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042c6:	f013 0f01 	tst.w	r3, #1
 80042ca:	d005      	beq.n	80042d8 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042cc:	2001      	movs	r0, #1
 80042ce:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042d0:	e04d      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042d2:	2004      	movs	r0, #4
 80042d4:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042d6:	e04a      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042d8:	23c5      	movs	r3, #197	; 0xc5
 80042da:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ffac 	bl	800423a <SDIO_GetCommandResponse>
 80042e2:	42a8      	cmp	r0, r5
 80042e4:	d001      	beq.n	80042ea <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042e6:	2001      	movs	r0, #1
 80042e8:	e041      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042ea:	2100      	movs	r1, #0
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff ffa7 	bl	8004240 <SDIO_GetResponse>
 80042f2:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042f4:	483a      	ldr	r0, [pc, #232]	; (80043e0 <SDMMC_GetCmdResp1+0x150>)
 80042f6:	4018      	ands	r0, r3
 80042f8:	b3c8      	cbz	r0, 800436e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	db38      	blt.n	8004370 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80042fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004302:	d138      	bne.n	8004376 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004304:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004308:	d137      	bne.n	800437a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800430a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800430e:	d136      	bne.n	800437e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004310:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004314:	d136      	bne.n	8004384 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004316:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800431a:	d136      	bne.n	800438a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800431c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004320:	d136      	bne.n	8004390 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004322:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004326:	d136      	bne.n	8004396 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004328:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800432c:	d136      	bne.n	800439c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800432e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004332:	d136      	bne.n	80043a2 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004334:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004338:	d136      	bne.n	80043a8 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800433a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800433e:	d136      	bne.n	80043ae <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004340:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004344:	d136      	bne.n	80043b4 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004346:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800434a:	d136      	bne.n	80043ba <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800434c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004350:	d136      	bne.n	80043c0 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004352:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004356:	d136      	bne.n	80043c6 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004358:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800435c:	d136      	bne.n	80043cc <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800435e:	f013 0f08 	tst.w	r3, #8
 8004362:	d036      	beq.n	80043d2 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004364:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004368:	e001      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800436a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800436e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004370:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004374:	e7fb      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004376:	2040      	movs	r0, #64	; 0x40
 8004378:	e7f9      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800437a:	2080      	movs	r0, #128	; 0x80
 800437c:	e7f7      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800437e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004382:	e7f4      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004384:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004388:	e7f1      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800438a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800438e:	e7ee      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004390:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004394:	e7eb      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004396:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800439a:	e7e8      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800439c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043a0:	e7e5      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80043a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80043a6:	e7e2      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80043a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043ac:	e7df      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80043ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80043b2:	e7dc      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80043b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80043b8:	e7d9      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80043ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043be:	e7d6      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80043c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80043c4:	e7d3      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80043c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80043ca:	e7d0      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80043cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80043d0:	e7cd      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043d6:	e7ca      	b.n	800436e <SDMMC_GetCmdResp1+0xde>
 80043d8:	20000010 	.word	0x20000010
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	fdffe008 	.word	0xfdffe008

080043e4 <SDMMC_CmdBlockLength>:
{
 80043e4:	b530      	push	{r4, r5, lr}
 80043e6:	b087      	sub	sp, #28
 80043e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043ec:	2510      	movs	r5, #16
 80043ee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043f0:	2340      	movs	r3, #64	; 0x40
 80043f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f4:	2300      	movs	r3, #0
 80043f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fe:	a901      	add	r1, sp, #4
 8004400:	f7ff ff09 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4629      	mov	r1, r5
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff ff40 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004410:	b007      	add	sp, #28
 8004412:	bd30      	pop	{r4, r5, pc}

08004414 <SDMMC_CmdReadSingleBlock>:
{
 8004414:	b530      	push	{r4, r5, lr}
 8004416:	b087      	sub	sp, #28
 8004418:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800441a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800441c:	2511      	movs	r5, #17
 800441e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004420:	2340      	movs	r3, #64	; 0x40
 8004422:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004424:	2300      	movs	r3, #0
 8004426:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800442e:	a901      	add	r1, sp, #4
 8004430:	f7ff fef1 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4629      	mov	r1, r5
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff ff28 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004440:	b007      	add	sp, #28
 8004442:	bd30      	pop	{r4, r5, pc}

08004444 <SDMMC_CmdReadMultiBlock>:
{
 8004444:	b530      	push	{r4, r5, lr}
 8004446:	b087      	sub	sp, #28
 8004448:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800444a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800444c:	2512      	movs	r5, #18
 800444e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004454:	2300      	movs	r3, #0
 8004456:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800445e:	a901      	add	r1, sp, #4
 8004460:	f7ff fed9 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4629      	mov	r1, r5
 800446a:	4620      	mov	r0, r4
 800446c:	f7ff ff10 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004470:	b007      	add	sp, #28
 8004472:	bd30      	pop	{r4, r5, pc}

08004474 <SDMMC_CmdWriteSingleBlock>:
{
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	b087      	sub	sp, #28
 8004478:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800447a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800447c:	2518      	movs	r5, #24
 800447e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004484:	2300      	movs	r3, #0
 8004486:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800448e:	a901      	add	r1, sp, #4
 8004490:	f7ff fec1 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4629      	mov	r1, r5
 800449a:	4620      	mov	r0, r4
 800449c:	f7ff fef8 	bl	8004290 <SDMMC_GetCmdResp1>
}
 80044a0:	b007      	add	sp, #28
 80044a2:	bd30      	pop	{r4, r5, pc}

080044a4 <SDMMC_CmdWriteMultiBlock>:
{
 80044a4:	b530      	push	{r4, r5, lr}
 80044a6:	b087      	sub	sp, #28
 80044a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044aa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044ac:	2519      	movs	r5, #25
 80044ae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044b0:	2340      	movs	r3, #64	; 0x40
 80044b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044b4:	2300      	movs	r3, #0
 80044b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044bc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044be:	a901      	add	r1, sp, #4
 80044c0:	f7ff fea9 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80044c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c8:	4629      	mov	r1, r5
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff fee0 	bl	8004290 <SDMMC_GetCmdResp1>
}
 80044d0:	b007      	add	sp, #28
 80044d2:	bd30      	pop	{r4, r5, pc}

080044d4 <SDMMC_CmdStopTransfer>:
{
 80044d4:	b530      	push	{r4, r5, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044de:	250c      	movs	r5, #12
 80044e0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ec:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044ee:	a901      	add	r1, sp, #4
 80044f0:	f7ff fe91 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <SDMMC_CmdStopTransfer+0x30>)
 80044f6:	4629      	mov	r1, r5
 80044f8:	4620      	mov	r0, r4
 80044fa:	f7ff fec9 	bl	8004290 <SDMMC_GetCmdResp1>
}
 80044fe:	b007      	add	sp, #28
 8004500:	bd30      	pop	{r4, r5, pc}
 8004502:	bf00      	nop
 8004504:	05f5e100 	.word	0x05f5e100

08004508 <SDMMC_CmdSelDesel>:
{
 8004508:	b530      	push	{r4, r5, lr}
 800450a:	b087      	sub	sp, #28
 800450c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800450e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004510:	2507      	movs	r5, #7
 8004512:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004518:	2300      	movs	r3, #0
 800451a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800451c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004520:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004522:	a901      	add	r1, sp, #4
 8004524:	f7ff fe77 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4629      	mov	r1, r5
 800452e:	4620      	mov	r0, r4
 8004530:	f7ff feae 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004534:	b007      	add	sp, #28
 8004536:	bd30      	pop	{r4, r5, pc}

08004538 <SDMMC_CmdAppCommand>:
{
 8004538:	b530      	push	{r4, r5, lr}
 800453a:	b087      	sub	sp, #28
 800453c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800453e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004540:	2537      	movs	r5, #55	; 0x37
 8004542:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004548:	2300      	movs	r3, #0
 800454a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800454c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004550:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004552:	a901      	add	r1, sp, #4
 8004554:	f7ff fe5f 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4629      	mov	r1, r5
 800455e:	4620      	mov	r0, r4
 8004560:	f7ff fe96 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004564:	b007      	add	sp, #28
 8004566:	bd30      	pop	{r4, r5, pc}

08004568 <SDMMC_CmdBusWidth>:
{
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	b087      	sub	sp, #28
 800456c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800456e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004570:	2506      	movs	r5, #6
 8004572:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004578:	2300      	movs	r3, #0
 800457a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800457c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004580:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004582:	a901      	add	r1, sp, #4
 8004584:	f7ff fe47 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4629      	mov	r1, r5
 800458e:	4620      	mov	r0, r4
 8004590:	f7ff fe7e 	bl	8004290 <SDMMC_GetCmdResp1>
}
 8004594:	b007      	add	sp, #28
 8004596:	bd30      	pop	{r4, r5, pc}

08004598 <SDMMC_CmdSendSCR>:
{
 8004598:	b530      	push	{r4, r5, lr}
 800459a:	b087      	sub	sp, #28
 800459c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80045a2:	2533      	movs	r5, #51	; 0x33
 80045a4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045a6:	2240      	movs	r2, #64	; 0x40
 80045a8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045b2:	a901      	add	r1, sp, #4
 80045b4:	f7ff fe2f 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4629      	mov	r1, r5
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff fe66 	bl	8004290 <SDMMC_GetCmdResp1>
}
 80045c4:	b007      	add	sp, #28
 80045c6:	bd30      	pop	{r4, r5, pc}

080045c8 <SDMMC_CmdSendStatus>:
{
 80045c8:	b530      	push	{r4, r5, lr}
 80045ca:	b087      	sub	sp, #28
 80045cc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80045ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80045d0:	250d      	movs	r5, #13
 80045d2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045d8:	2300      	movs	r3, #0
 80045da:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045e2:	a901      	add	r1, sp, #4
 80045e4:	f7ff fe17 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4629      	mov	r1, r5
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff fe4e 	bl	8004290 <SDMMC_GetCmdResp1>
}
 80045f4:	b007      	add	sp, #28
 80045f6:	bd30      	pop	{r4, r5, pc}

080045f8 <SDMMC_GetCmdResp2>:
{
 80045f8:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <SDMMC_GetCmdResp2+0x54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a14      	ldr	r2, [pc, #80]	; (8004650 <SDMMC_GetCmdResp2+0x58>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0a5b      	lsrs	r3, r3, #9
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800460e:	461a      	mov	r2, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b1ba      	cbz	r2, 8004644 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004614:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004616:	f012 0f45 	tst.w	r2, #69	; 0x45
 800461a:	d0f8      	beq.n	800460e <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800461c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004620:	d1f5      	bne.n	800460e <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004622:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004624:	f013 0f04 	tst.w	r3, #4
 8004628:	d106      	bne.n	8004638 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800462a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800462c:	f010 0001 	ands.w	r0, r0, #1
 8004630:	d105      	bne.n	800463e <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004632:	23c5      	movs	r3, #197	; 0xc5
 8004634:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004636:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004638:	2004      	movs	r0, #4
 800463a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800463c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800463e:	2001      	movs	r0, #1
 8004640:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004642:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004644:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000010 	.word	0x20000010
 8004650:	10624dd3 	.word	0x10624dd3

08004654 <SDMMC_CmdSendCID>:
{
 8004654:	b510      	push	{r4, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800465e:	2202      	movs	r2, #2
 8004660:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004662:	22c0      	movs	r2, #192	; 0xc0
 8004664:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004666:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800466e:	a901      	add	r1, sp, #4
 8004670:	f7ff fdd1 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff ffbf 	bl	80045f8 <SDMMC_GetCmdResp2>
}
 800467a:	b006      	add	sp, #24
 800467c:	bd10      	pop	{r4, pc}

0800467e <SDMMC_CmdSendCSD>:
{
 800467e:	b510      	push	{r4, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004684:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004686:	2309      	movs	r3, #9
 8004688:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800468a:	23c0      	movs	r3, #192	; 0xc0
 800468c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800468e:	2300      	movs	r3, #0
 8004690:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004698:	a901      	add	r1, sp, #4
 800469a:	f7ff fdbc 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff ffaa 	bl	80045f8 <SDMMC_GetCmdResp2>
}
 80046a4:	b006      	add	sp, #24
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <SDMMC_GetCmdResp3>:
{
 80046a8:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <SDMMC_GetCmdResp3+0x44>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <SDMMC_GetCmdResp3+0x48>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	0a5b      	lsrs	r3, r3, #9
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80046be:	461a      	mov	r2, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b182      	cbz	r2, 80046e6 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 80046c4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80046c6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80046ca:	d0f8      	beq.n	80046be <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046cc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80046d0:	d1f5      	bne.n	80046be <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80046d2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80046d4:	f010 0004 	ands.w	r0, r0, #4
 80046d8:	d102      	bne.n	80046e0 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046da:	23c5      	movs	r3, #197	; 0xc5
 80046dc:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80046de:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80046e0:	2004      	movs	r0, #4
 80046e2:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80046e4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80046e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80046ea:	4770      	bx	lr
 80046ec:	20000010 	.word	0x20000010
 80046f0:	10624dd3 	.word	0x10624dd3

080046f4 <SDMMC_CmdAppOperCommand>:
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80046fa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80046fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004702:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004704:	2329      	movs	r3, #41	; 0x29
 8004706:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800470c:	2300      	movs	r3, #0
 800470e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004714:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004716:	a901      	add	r1, sp, #4
 8004718:	f7ff fd7d 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff ffc3 	bl	80046a8 <SDMMC_GetCmdResp3>
}
 8004722:	b006      	add	sp, #24
 8004724:	bd10      	pop	{r4, pc}
	...

08004728 <SDMMC_GetCmdResp6>:
{
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	4605      	mov	r5, r0
 800472c:	460e      	mov	r6, r1
 800472e:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <SDMMC_GetCmdResp6+0x98>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <SDMMC_GetCmdResp6+0x9c>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0a5b      	lsrs	r3, r3, #9
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004744:	461a      	mov	r2, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b38a      	cbz	r2, 80047ae <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 800474a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800474c:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004750:	d0f8      	beq.n	8004744 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004752:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004756:	d1f5      	bne.n	8004744 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004758:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800475a:	f013 0f04 	tst.w	r3, #4
 800475e:	d106      	bne.n	800476e <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004760:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004762:	f013 0f01 	tst.w	r3, #1
 8004766:	d005      	beq.n	8004774 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004768:	2001      	movs	r0, #1
 800476a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800476c:	e021      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800476e:	2004      	movs	r0, #4
 8004770:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004772:	e01e      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004774:	4628      	mov	r0, r5
 8004776:	f7ff fd60 	bl	800423a <SDIO_GetCommandResponse>
 800477a:	42b0      	cmp	r0, r6
 800477c:	d001      	beq.n	8004782 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800477e:	2001      	movs	r0, #1
 8004780:	e017      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004782:	23c5      	movs	r3, #197	; 0xc5
 8004784:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004786:	2100      	movs	r1, #0
 8004788:	4628      	mov	r0, r5
 800478a:	f7ff fd59 	bl	8004240 <SDIO_GetResponse>
 800478e:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004790:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8004794:	d008      	beq.n	80047a8 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004796:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800479a:	d10b      	bne.n	80047b4 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800479c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80047a0:	d00b      	beq.n	80047ba <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80047a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047a6:	e004      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 80047ac:	e001      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 80047ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80047b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047b8:	e7fb      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80047ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80047be:	e7f8      	b.n	80047b2 <SDMMC_GetCmdResp6+0x8a>
 80047c0:	20000010 	.word	0x20000010
 80047c4:	10624dd3 	.word	0x10624dd3

080047c8 <SDMMC_CmdSetRelAdd>:
{
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	4604      	mov	r4, r0
 80047ce:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047d4:	2603      	movs	r6, #3
 80047d6:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047dc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e4:	a901      	add	r1, sp, #4
 80047e6:	f7ff fd16 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047ea:	462a      	mov	r2, r5
 80047ec:	4631      	mov	r1, r6
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ff9a 	bl	8004728 <SDMMC_GetCmdResp6>
}
 80047f4:	b006      	add	sp, #24
 80047f6:	bd70      	pop	{r4, r5, r6, pc}

080047f8 <SDMMC_GetCmdResp7>:
{
 80047f8:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <SDMMC_GetCmdResp7+0x5c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <SDMMC_GetCmdResp7+0x60>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	0a5b      	lsrs	r3, r3, #9
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800480e:	461a      	mov	r2, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b1e2      	cbz	r2, 800484e <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004814:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004816:	f012 0f45 	tst.w	r2, #69	; 0x45
 800481a:	d0f8      	beq.n	800480e <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800481c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004820:	d1f5      	bne.n	800480e <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004822:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004824:	f013 0f04 	tst.w	r3, #4
 8004828:	d10b      	bne.n	8004842 <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800482a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800482c:	f013 0301 	ands.w	r3, r3, #1
 8004830:	d10a      	bne.n	8004848 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004832:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004834:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004838:	d00b      	beq.n	8004852 <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800483e:	4618      	mov	r0, r3
 8004840:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004842:	2004      	movs	r0, #4
 8004844:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004846:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004848:	2001      	movs	r0, #1
 800484a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800484c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800484e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004852:	4770      	bx	lr
 8004854:	20000010 	.word	0x20000010
 8004858:	10624dd3 	.word	0x10624dd3

0800485c <SDMMC_CmdOperCond>:
{
 800485c:	b510      	push	{r4, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004862:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004866:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004868:	2308      	movs	r3, #8
 800486a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800486c:	2340      	movs	r3, #64	; 0x40
 800486e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004870:	2300      	movs	r3, #0
 8004872:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004878:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800487a:	a901      	add	r1, sp, #4
 800487c:	f7ff fccb 	bl	8004216 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff ffb9 	bl	80047f8 <SDMMC_GetCmdResp7>
}
 8004886:	b006      	add	sp, #24
 8004888:	bd10      	pop	{r4, pc}
	...

0800488c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <FATFS_LinkDriverEx+0x50>)
 800488e:	7a5b      	ldrb	r3, [r3, #9]
 8004890:	bb13      	cbnz	r3, 80048d8 <FATFS_LinkDriverEx+0x4c>
{
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <FATFS_LinkDriverEx+0x50>)
 800489c:	f893 c009 	ldrb.w	ip, [r3, #9]
 80048a0:	fa5f fc8c 	uxtb.w	ip, ip
 80048a4:	f04f 0e00 	mov.w	lr, #0
 80048a8:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 80048ac:	f893 c009 	ldrb.w	ip, [r3, #9]
 80048b0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80048b4:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 80048b8:	7a5c      	ldrb	r4, [r3, #9]
 80048ba:	441c      	add	r4, r3
 80048bc:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80048be:	7a5a      	ldrb	r2, [r3, #9]
 80048c0:	1c54      	adds	r4, r2, #1
 80048c2:	b2e4      	uxtb	r4, r4
 80048c4:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80048c6:	3230      	adds	r2, #48	; 0x30
 80048c8:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80048ca:	233a      	movs	r3, #58	; 0x3a
 80048cc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80048ce:	232f      	movs	r3, #47	; 0x2f
 80048d0:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80048d2:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80048d6:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 80048d8:	2001      	movs	r0, #1
}
 80048da:	4770      	bx	lr
 80048dc:	20000208 	.word	0x20000208

080048e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80048e0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	f7ff ffd2 	bl	800488c <FATFS_LinkDriverEx>
}
 80048e8:	bd08      	pop	{r3, pc}

080048ea <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80048ea:	2884      	cmp	r0, #132	; 0x84
 80048ec:	d001      	beq.n	80048f2 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80048ee:	3003      	adds	r0, #3
 80048f0:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048f2:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80048f4:	4770      	bx	lr

080048f6 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f6:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80048fa:	3800      	subs	r0, #0
 80048fc:	bf18      	it	ne
 80048fe:	2001      	movne	r0, #1
 8004900:	4770      	bx	lr

08004902 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004902:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004904:	f000 feca 	bl	800569c <vTaskStartScheduler>
  
  return osOK;
}
 8004908:	2000      	movs	r0, #0
 800490a:	bd08      	pop	{r3, pc}

0800490c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800490c:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800490e:	f001 f957 	bl	8005bc0 <xTaskGetSchedulerState>
 8004912:	2801      	cmp	r0, #1
 8004914:	d001      	beq.n	800491a <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 8004916:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 8004918:	bd08      	pop	{r3, pc}
    return 0;
 800491a:	2000      	movs	r0, #0
 800491c:	e7fc      	b.n	8004918 <osKernelRunning+0xc>

0800491e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800491e:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8004920:	f7ff ffe9 	bl	80048f6 <inHandlerMode>
 8004924:	b110      	cbz	r0, 800492c <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 8004926:	f000 ff07 	bl	8005738 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 800492a:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 800492c:	f000 fefe 	bl	800572c <xTaskGetTickCount>
 8004930:	e7fb      	b.n	800492a <osKernelSysTick+0xc>

08004932 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004936:	b087      	sub	sp, #28
 8004938:	4604      	mov	r4, r0
 800493a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800493c:	6945      	ldr	r5, [r0, #20]
 800493e:	b1bd      	cbz	r5, 8004970 <osThreadCreate+0x3e>
 8004940:	6986      	ldr	r6, [r0, #24]
 8004942:	b1ae      	cbz	r6, 8004970 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004944:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004948:	f8d0 9000 	ldr.w	r9, [r0]
 800494c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004950:	f7ff ffcb 	bl	80048ea <makeFreeRtosPriority>
 8004954:	9602      	str	r6, [sp, #8]
 8004956:	9501      	str	r5, [sp, #4]
 8004958:	9000      	str	r0, [sp, #0]
 800495a:	463b      	mov	r3, r7
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	f000 fe2b 	bl	80055bc <xTaskCreateStatic>
 8004966:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004968:	9805      	ldr	r0, [sp, #20]
}
 800496a:	b007      	add	sp, #28
 800496c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004970:	6865      	ldr	r5, [r4, #4]
 8004972:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004974:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004978:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800497c:	f7ff ffb5 	bl	80048ea <makeFreeRtosPriority>
 8004980:	ab05      	add	r3, sp, #20
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	9000      	str	r0, [sp, #0]
 8004986:	463b      	mov	r3, r7
 8004988:	fa1f f288 	uxth.w	r2, r8
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fe4f 	bl	8005632 <xTaskCreate>
 8004994:	2801      	cmp	r0, #1
 8004996:	d0e7      	beq.n	8004968 <osThreadCreate+0x36>
      return NULL;
 8004998:	2000      	movs	r0, #0
 800499a:	e7e6      	b.n	800496a <osThreadCreate+0x38>

0800499c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800499c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800499e:	b900      	cbnz	r0, 80049a2 <osDelay+0x6>
 80049a0:	2001      	movs	r0, #1
 80049a2:	f000 ffd7 	bl	8005954 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049a6:	2000      	movs	r0, #0
 80049a8:	bd08      	pop	{r3, pc}

080049aa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80049aa:	b500      	push	{lr}
 80049ac:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80049ae:	6882      	ldr	r2, [r0, #8]
 80049b0:	b142      	cbz	r2, 80049c4 <osMessageCreate+0x1a>
 80049b2:	68c3      	ldr	r3, [r0, #12]
 80049b4:	b133      	cbz	r3, 80049c4 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80049b6:	2100      	movs	r1, #0
 80049b8:	9100      	str	r1, [sp, #0]
 80049ba:	6841      	ldr	r1, [r0, #4]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f000 f9b5 	bl	8004d2c <xQueueGenericCreateStatic>
 80049c2:	e004      	b.n	80049ce <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80049c4:	2200      	movs	r2, #0
 80049c6:	6841      	ldr	r1, [r0, #4]
 80049c8:	6800      	ldr	r0, [r0, #0]
 80049ca:	f000 f9f9 	bl	8004dc0 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80049ce:	b003      	add	sp, #12
 80049d0:	f85d fb04 	ldr.w	pc, [sp], #4

080049d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80049d4:	b530      	push	{r4, r5, lr}
 80049d6:	b085      	sub	sp, #20
 80049d8:	4604      	mov	r4, r0
 80049da:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80049e0:	4615      	mov	r5, r2
 80049e2:	b902      	cbnz	r2, 80049e6 <osMessagePut+0x12>
    ticks = 1;
 80049e4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80049e6:	f7ff ff86 	bl	80048f6 <inHandlerMode>
 80049ea:	b1a8      	cbz	r0, 8004a18 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	aa03      	add	r2, sp, #12
 80049f0:	a901      	add	r1, sp, #4
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 fae3 	bl	8004fbe <xQueueGenericSendFromISR>
 80049f8:	2801      	cmp	r0, #1
 80049fa:	d118      	bne.n	8004a2e <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	b1c3      	cbz	r3, 8004a32 <osMessagePut+0x5e>
 8004a00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004a14:	2000      	movs	r0, #0
 8004a16:	e008      	b.n	8004a2a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004a18:	2300      	movs	r3, #0
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	a901      	add	r1, sp, #4
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f9f2 	bl	8004e08 <xQueueGenericSend>
 8004a24:	2801      	cmp	r0, #1
 8004a26:	d106      	bne.n	8004a36 <osMessagePut+0x62>
  return osOK;
 8004a28:	2000      	movs	r0, #0
}
 8004a2a:	b005      	add	sp, #20
 8004a2c:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8004a2e:	20ff      	movs	r0, #255	; 0xff
 8004a30:	e7fb      	b.n	8004a2a <osMessagePut+0x56>
  return osOK;
 8004a32:	2000      	movs	r0, #0
 8004a34:	e7f9      	b.n	8004a2a <osMessagePut+0x56>
      return osErrorOS;
 8004a36:	20ff      	movs	r0, #255	; 0xff
 8004a38:	e7f7      	b.n	8004a2a <osMessagePut+0x56>

08004a3a <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004a3a:	b570      	push	{r4, r5, r6, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004a40:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8004a46:	b1e1      	cbz	r1, 8004a82 <osMessageGet+0x48>
 8004a48:	460d      	mov	r5, r1
 8004a4a:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004a50:	f7ff ff51 	bl	80048f6 <inHandlerMode>
 8004a54:	b300      	cbz	r0, 8004a98 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004a56:	aa03      	add	r2, sp, #12
 8004a58:	a901      	add	r1, sp, #4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f000 fbc5 	bl	80051ea <xQueueReceiveFromISR>
 8004a60:	2801      	cmp	r0, #1
 8004a62:	d016      	beq.n	8004a92 <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	b1fb      	cbz	r3, 8004aac <osMessageGet+0x72>
 8004a6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	e014      	b.n	8004aac <osMessageGet+0x72>
    event.status = osErrorParameter;
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	9300      	str	r3, [sp, #0]
    return event;
 8004a86:	466b      	mov	r3, sp
 8004a88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a90:	e011      	b.n	8004ab6 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8004a92:	2310      	movs	r3, #16
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	e7e7      	b.n	8004a68 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004a98:	4632      	mov	r2, r6
 8004a9a:	a901      	add	r1, sp, #4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 faf5 	bl	800508c <xQueueReceive>
 8004aa2:	2801      	cmp	r0, #1
 8004aa4:	d00a      	beq.n	8004abc <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004aa6:	b106      	cbz	r6, 8004aaa <osMessageGet+0x70>
 8004aa8:	2640      	movs	r6, #64	; 0x40
 8004aaa:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8004aac:	466b      	mov	r3, sp
 8004aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8004abc:	2310      	movs	r3, #16
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	e7f4      	b.n	8004aac <osMessageGet+0x72>

08004ac2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac2:	f100 0308 	add.w	r3, r0, #8
 8004ac6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ace:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ad6:	4770      	bx	lr

08004ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004adc:	4770      	bx	lr

08004ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ade:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ae0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ae8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	6003      	str	r3, [r0, #0]
}
 8004af2:	4770      	bx	lr

08004af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004af8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004afc:	d011      	beq.n	8004b22 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004afe:	f100 0308 	add.w	r3, r0, #8
 8004b02:	461c      	mov	r4, r3
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	42aa      	cmp	r2, r5
 8004b0a:	d9fa      	bls.n	8004b02 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b10:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b12:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b14:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b16:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004b18:	6803      	ldr	r3, [r0, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6003      	str	r3, [r0, #0]
}
 8004b1e:	bc30      	pop	{r4, r5}
 8004b20:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b22:	6904      	ldr	r4, [r0, #16]
 8004b24:	e7f2      	b.n	8004b0c <vListInsert+0x18>

08004b26 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b26:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b28:	6841      	ldr	r1, [r0, #4]
 8004b2a:	6882      	ldr	r2, [r0, #8]
 8004b2c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b2e:	6841      	ldr	r1, [r0, #4]
 8004b30:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4282      	cmp	r2, r0
 8004b36:	d006      	beq.n	8004b46 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b38:	2200      	movs	r2, #0
 8004b3a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b42:	6818      	ldr	r0, [r3, #0]
}
 8004b44:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b46:	6882      	ldr	r2, [r0, #8]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	e7f5      	b.n	8004b38 <uxListRemove+0x12>

08004b4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b50:	f001 f908 	bl	8005d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d004      	beq.n	8004b66 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004b5c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f001 f923 	bl	8005da8 <vPortExitCritical>

	return xReturn;
}
 8004b62:	4620      	mov	r0, r4
 8004b64:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004b66:	2401      	movs	r4, #1
 8004b68:	e7f9      	b.n	8004b5e <prvIsQueueFull+0x12>

08004b6a <prvIsQueueEmpty>:
{
 8004b6a:	b510      	push	{r4, lr}
 8004b6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004b6e:	f001 f8f9 	bl	8005d64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b74:	b923      	cbnz	r3, 8004b80 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8004b76:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004b78:	f001 f916 	bl	8005da8 <vPortExitCritical>
}
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8004b80:	2400      	movs	r4, #0
 8004b82:	e7f9      	b.n	8004b78 <prvIsQueueEmpty+0xe>

08004b84 <prvCopyDataToQueue>:
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4604      	mov	r4, r0
 8004b88:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b8a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004b8e:	b95a      	cbnz	r2, 8004ba8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	b11b      	cbz	r3, 8004b9c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004b94:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b96:	3601      	adds	r6, #1
 8004b98:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b9c:	6880      	ldr	r0, [r0, #8]
 8004b9e:	f001 f81f 	bl	8005be0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60a3      	str	r3, [r4, #8]
 8004ba6:	e7f6      	b.n	8004b96 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004ba8:	b96d      	cbnz	r5, 8004bc6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004baa:	6840      	ldr	r0, [r0, #4]
 8004bac:	f002 fe47 	bl	800783e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bb8:	68a2      	ldr	r2, [r4, #8]
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d319      	bcc.n	8004bf2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	e7e7      	b.n	8004b96 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bc6:	68c0      	ldr	r0, [r0, #12]
 8004bc8:	f002 fe39 	bl	800783e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bce:	4251      	negs	r1, r2
 8004bd0:	68e3      	ldr	r3, [r4, #12]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d202      	bcs.n	8004be2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bdc:	68a3      	ldr	r3, [r4, #8]
 8004bde:	440b      	add	r3, r1
 8004be0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004be2:	2d02      	cmp	r5, #2
 8004be4:	d001      	beq.n	8004bea <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004be6:	2000      	movs	r0, #0
 8004be8:	e7d5      	b.n	8004b96 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bea:	b126      	cbz	r6, 8004bf6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004bec:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7d1      	b.n	8004b96 <prvCopyDataToQueue+0x12>
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	e7cf      	b.n	8004b96 <prvCopyDataToQueue+0x12>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	e7cd      	b.n	8004b96 <prvCopyDataToQueue+0x12>

08004bfa <prvCopyDataFromQueue>:
{
 8004bfa:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004bfe:	b16a      	cbz	r2, 8004c1c <prvCopyDataFromQueue+0x22>
{
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	4411      	add	r1, r2
 8004c08:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c0a:	689c      	ldr	r4, [r3, #8]
 8004c0c:	42a1      	cmp	r1, r4
 8004c0e:	d301      	bcc.n	8004c14 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	f002 fe12 	bl	800783e <memcpy>
}
 8004c1a:	bd10      	pop	{r4, pc}
 8004c1c:	4770      	bx	lr

08004c1e <prvUnlockQueue>:
{
 8004c1e:	b538      	push	{r3, r4, r5, lr}
 8004c20:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004c22:	f001 f89f 	bl	8005d64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004c26:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004c2a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c2c:	e001      	b.n	8004c32 <prvUnlockQueue+0x14>
			--cTxLock;
 8004c2e:	3c01      	subs	r4, #1
 8004c30:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	dd0a      	ble.n	8004c4c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c38:	b143      	cbz	r3, 8004c4c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c3a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004c3e:	f000 ff29 	bl	8005a94 <xTaskRemoveFromEventList>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0f3      	beq.n	8004c2e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8004c46:	f000 ffb3 	bl	8005bb0 <vTaskMissedYield>
 8004c4a:	e7f0      	b.n	8004c2e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004c4c:	23ff      	movs	r3, #255	; 0xff
 8004c4e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004c52:	f001 f8a9 	bl	8005da8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004c56:	f001 f885 	bl	8005d64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004c5a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004c5e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c60:	e001      	b.n	8004c66 <prvUnlockQueue+0x48>
				--cRxLock;
 8004c62:	3c01      	subs	r4, #1
 8004c64:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	dd0a      	ble.n	8004c80 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c6a:	692b      	ldr	r3, [r5, #16]
 8004c6c:	b143      	cbz	r3, 8004c80 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6e:	f105 0010 	add.w	r0, r5, #16
 8004c72:	f000 ff0f 	bl	8005a94 <xTaskRemoveFromEventList>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d0f3      	beq.n	8004c62 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8004c7a:	f000 ff99 	bl	8005bb0 <vTaskMissedYield>
 8004c7e:	e7f0      	b.n	8004c62 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004c80:	23ff      	movs	r3, #255	; 0xff
 8004c82:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004c86:	f001 f88f 	bl	8005da8 <vPortExitCritical>
}
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}

08004c8c <xQueueGenericReset>:
{
 8004c8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004c8e:	b1e0      	cbz	r0, 8004cca <xQueueGenericReset+0x3e>
 8004c90:	460d      	mov	r5, r1
 8004c92:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004c94:	f001 f866 	bl	8005d64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c9e:	fb01 3002 	mla	r0, r1, r2, r3
 8004ca2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004caa:	3a01      	subs	r2, #1
 8004cac:	fb02 3301 	mla	r3, r2, r1, r3
 8004cb0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cb2:	23ff      	movs	r3, #255	; 0xff
 8004cb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004cbc:	b9fd      	cbnz	r5, 8004cfe <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	b963      	cbnz	r3, 8004cdc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004cc2:	f001 f871 	bl	8005da8 <vPortExitCritical>
}
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004cda:	e7fe      	b.n	8004cda <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cdc:	f104 0010 	add.w	r0, r4, #16
 8004ce0:	f000 fed8 	bl	8005a94 <xTaskRemoveFromEventList>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0ec      	beq.n	8004cc2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e7e1      	b.n	8004cc2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cfe:	f104 0010 	add.w	r0, r4, #16
 8004d02:	f7ff fede 	bl	8004ac2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d0a:	f7ff feda 	bl	8004ac2 <vListInitialise>
 8004d0e:	e7d8      	b.n	8004cc2 <xQueueGenericReset+0x36>

08004d10 <prvInitialiseNewQueue>:
{
 8004d10:	b510      	push	{r4, lr}
 8004d12:	4603      	mov	r3, r0
 8004d14:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d16:	460c      	mov	r4, r1
 8004d18:	b931      	cbnz	r1, 8004d28 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d1a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004d1c:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d1e:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d20:	2101      	movs	r1, #1
 8004d22:	f7ff ffb3 	bl	8004c8c <xQueueGenericReset>
}
 8004d26:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d28:	6002      	str	r2, [r0, #0]
 8004d2a:	e7f7      	b.n	8004d1c <prvInitialiseNewQueue+0xc>

08004d2c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d2c:	b940      	cbnz	r0, 8004d40 <xQueueGenericCreateStatic+0x14>
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	e7fe      	b.n	8004d3e <xQueueGenericCreateStatic+0x12>
	{
 8004d40:	b510      	push	{r4, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	461c      	mov	r4, r3
 8004d46:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8004d48:	b153      	cbz	r3, 8004d60 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d4a:	b192      	cbz	r2, 8004d72 <xQueueGenericCreateStatic+0x46>
 8004d4c:	b989      	cbnz	r1, 8004d72 <xQueueGenericCreateStatic+0x46>
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	e7fe      	b.n	8004d5e <xQueueGenericCreateStatic+0x32>
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004d70:	e7fe      	b.n	8004d70 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d72:	b16a      	cbz	r2, 8004d90 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d74:	2348      	movs	r3, #72	; 0x48
 8004d76:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	2b48      	cmp	r3, #72	; 0x48
 8004d7c:	d013      	beq.n	8004da6 <xQueueGenericCreateStatic+0x7a>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	e7fe      	b.n	8004d8e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d0ef      	beq.n	8004d74 <xQueueGenericCreateStatic+0x48>
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	e7fe      	b.n	8004da4 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004da6:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dae:	9400      	str	r4, [sp, #0]
 8004db0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004db4:	4660      	mov	r0, ip
 8004db6:	f7ff ffab 	bl	8004d10 <prvInitialiseNewQueue>
	}
 8004dba:	4620      	mov	r0, r4
 8004dbc:	b004      	add	sp, #16
 8004dbe:	bd10      	pop	{r4, pc}

08004dc0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dc0:	b940      	cbnz	r0, 8004dd4 <xQueueGenericCreate+0x14>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	e7fe      	b.n	8004dd2 <xQueueGenericCreate+0x12>
	{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	460d      	mov	r5, r1
 8004dda:	4614      	mov	r4, r2
 8004ddc:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dde:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004de2:	3048      	adds	r0, #72	; 0x48
 8004de4:	f001 f964 	bl	80060b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004de8:	4607      	mov	r7, r0
 8004dea:	b150      	cbz	r0, 8004e02 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df2:	9000      	str	r0, [sp, #0]
 8004df4:	4623      	mov	r3, r4
 8004df6:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff ff87 	bl	8004d10 <prvInitialiseNewQueue>
	}
 8004e02:	4638      	mov	r0, r7
 8004e04:	b003      	add	sp, #12
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e08 <xQueueGenericSend>:
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004e0e:	b188      	cbz	r0, 8004e34 <xQueueGenericSend+0x2c>
 8004e10:	460f      	mov	r7, r1
 8004e12:	461d      	mov	r5, r3
 8004e14:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e16:	b1b1      	cbz	r1, 8004e46 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e18:	2d02      	cmp	r5, #2
 8004e1a:	d120      	bne.n	8004e5e <xQueueGenericSend+0x56>
 8004e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d01d      	beq.n	8004e5e <xQueueGenericSend+0x56>
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	e7fe      	b.n	8004e32 <xQueueGenericSend+0x2a>
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004e44:	e7fe      	b.n	8004e44 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0e5      	beq.n	8004e18 <xQueueGenericSend+0x10>
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5e:	f000 feaf 	bl	8005bc0 <xTaskGetSchedulerState>
 8004e62:	4606      	mov	r6, r0
 8004e64:	b958      	cbnz	r0, 8004e7e <xQueueGenericSend+0x76>
 8004e66:	9b01      	ldr	r3, [sp, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d048      	beq.n	8004efe <xQueueGenericSend+0xf6>
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericSend+0x74>
 8004e7e:	2600      	movs	r6, #0
 8004e80:	e03d      	b.n	8004efe <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e82:	462a      	mov	r2, r5
 8004e84:	4639      	mov	r1, r7
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff fe7c 	bl	8004b84 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8e:	b97b      	cbnz	r3, 8004eb0 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8004e90:	b148      	cbz	r0, 8004ea6 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8004e92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ea6:	f000 ff7f 	bl	8005da8 <vPortExitCritical>
				return pdPASS;
 8004eaa:	2001      	movs	r0, #1
}
 8004eac:	b005      	add	sp, #20
 8004eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004eb4:	f000 fdee 	bl	8005a94 <xTaskRemoveFromEventList>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0f4      	beq.n	8004ea6 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	e7e9      	b.n	8004ea6 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8004ed2:	f000 ff69 	bl	8005da8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e7e8      	b.n	8004eac <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eda:	a802      	add	r0, sp, #8
 8004edc:	f000 fe1c 	bl	8005b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee0:	2601      	movs	r6, #1
 8004ee2:	e019      	b.n	8004f18 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004eea:	e021      	b.n	8004f30 <xQueueGenericSend+0x128>
 8004eec:	2300      	movs	r3, #0
 8004eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ef2:	e023      	b.n	8004f3c <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff fe92 	bl	8004c1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004efa:	f000 fcb3 	bl	8005864 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004efe:	f000 ff31 	bl	8005d64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d3bb      	bcc.n	8004e82 <xQueueGenericSend+0x7a>
 8004f0a:	2d02      	cmp	r5, #2
 8004f0c:	d0b9      	beq.n	8004e82 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0de      	beq.n	8004ed2 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	d0e0      	beq.n	8004eda <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8004f18:	f000 ff46 	bl	8005da8 <vPortExitCritical>
		vTaskSuspendAll();
 8004f1c:	f000 fbfc 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f20:	f000 ff20 	bl	8005d64 <vPortEnterCritical>
 8004f24:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8004f28:	b252      	sxtb	r2, r2
 8004f2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004f2e:	d0d9      	beq.n	8004ee4 <xQueueGenericSend+0xdc>
 8004f30:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004f34:	b252      	sxtb	r2, r2
 8004f36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004f3a:	d0d7      	beq.n	8004eec <xQueueGenericSend+0xe4>
 8004f3c:	f000 ff34 	bl	8005da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f40:	a901      	add	r1, sp, #4
 8004f42:	a802      	add	r0, sp, #8
 8004f44:	f000 fdf2 	bl	8005b2c <xTaskCheckForTimeOut>
 8004f48:	b9d8      	cbnz	r0, 8004f82 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7ff fdfe 	bl	8004b4c <prvIsQueueFull>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d0cf      	beq.n	8004ef4 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f54:	9901      	ldr	r1, [sp, #4]
 8004f56:	f104 0010 	add.w	r0, r4, #16
 8004f5a:	f000 fd81 	bl	8005a60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fe5d 	bl	8004c1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f64:	f000 fc7e 	bl	8005864 <xTaskResumeAll>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1c8      	bne.n	8004efe <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8004f6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	e7bd      	b.n	8004efe <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7ff fe4b 	bl	8004c1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f88:	f000 fc6c 	bl	8005864 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e78d      	b.n	8004eac <xQueueGenericSend+0xa4>

08004f90 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8004f90:	b148      	cbz	r0, 8004fa6 <prvInitialiseMutex+0x16>
	{
 8004f92:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f94:	2100      	movs	r1, #0
 8004f96:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f98:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f9a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	f7ff ff32 	bl	8004e08 <xQueueGenericSend>
	}
 8004fa4:	bd08      	pop	{r3, pc}
 8004fa6:	4770      	bx	lr

08004fa8 <xQueueCreateMutex>:
	{
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fac:	2100      	movs	r1, #0
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f7ff ff06 	bl	8004dc0 <xQueueGenericCreate>
 8004fb4:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004fb6:	f7ff ffeb 	bl	8004f90 <prvInitialiseMutex>
	}
 8004fba:	4620      	mov	r0, r4
 8004fbc:	bd10      	pop	{r4, pc}

08004fbe <xQueueGenericSendFromISR>:
{
 8004fbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004fc2:	b190      	cbz	r0, 8004fea <xQueueGenericSendFromISR+0x2c>
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	4616      	mov	r6, r2
 8004fc8:	461c      	mov	r4, r3
 8004fca:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fcc:	b1b1      	cbz	r1, 8004ffc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fce:	2c02      	cmp	r4, #2
 8004fd0:	d120      	bne.n	8005014 <xQueueGenericSendFromISR+0x56>
 8004fd2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d01d      	beq.n	8005014 <xQueueGenericSendFromISR+0x56>
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueGenericSendFromISR+0x2a>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ffa:	e7fe      	b.n	8004ffa <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0e5      	beq.n	8004fce <xQueueGenericSendFromISR+0x10>
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	e7fe      	b.n	8005012 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005014:	f000 ffca 	bl	8005fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005018:	f3ef 8911 	mrs	r9, BASEPRI
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800502c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800502e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005030:	429a      	cmp	r2, r3
 8005032:	d306      	bcc.n	8005042 <xQueueGenericSendFromISR+0x84>
 8005034:	2c02      	cmp	r4, #2
 8005036:	d004      	beq.n	8005042 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005038:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800503a:	f389 8811 	msr	BASEPRI, r9
}
 800503e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005042:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005046:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800504a:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800504c:	4622      	mov	r2, r4
 800504e:	4639      	mov	r1, r7
 8005050:	4628      	mov	r0, r5
 8005052:	f7ff fd97 	bl	8004b84 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005056:	f1b8 3fff 	cmp.w	r8, #4294967295
 800505a:	d006      	beq.n	800506a <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800505c:	f108 0301 	add.w	r3, r8, #1
 8005060:	b25b      	sxtb	r3, r3
 8005062:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005066:	2001      	movs	r0, #1
 8005068:	e7e7      	b.n	800503a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800506a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800506c:	b90b      	cbnz	r3, 8005072 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800506e:	2001      	movs	r0, #1
 8005070:	e7e3      	b.n	800503a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005072:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005076:	f000 fd0d 	bl	8005a94 <xTaskRemoveFromEventList>
 800507a:	b118      	cbz	r0, 8005084 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800507c:	b126      	cbz	r6, 8005088 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800507e:	2001      	movs	r0, #1
 8005080:	6030      	str	r0, [r6, #0]
 8005082:	e7da      	b.n	800503a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005084:	2001      	movs	r0, #1
 8005086:	e7d8      	b.n	800503a <xQueueGenericSendFromISR+0x7c>
 8005088:	2001      	movs	r0, #1
 800508a:	e7d6      	b.n	800503a <xQueueGenericSendFromISR+0x7c>

0800508c <xQueueReceive>:
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b085      	sub	sp, #20
 8005090:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005092:	b190      	cbz	r0, 80050ba <xQueueReceive+0x2e>
 8005094:	460f      	mov	r7, r1
 8005096:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005098:	b1c1      	cbz	r1, 80050cc <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509a:	f000 fd91 	bl	8005bc0 <xTaskGetSchedulerState>
 800509e:	4606      	mov	r6, r0
 80050a0:	bb00      	cbnz	r0, 80050e4 <xQueueReceive+0x58>
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05e      	beq.n	8005166 <xQueueReceive+0xda>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	e7fe      	b.n	80050b8 <xQueueReceive+0x2c>
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80050ca:	e7fe      	b.n	80050ca <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0e3      	beq.n	800509a <xQueueReceive+0xe>
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	e7fe      	b.n	80050e2 <xQueueReceive+0x56>
 80050e4:	2600      	movs	r6, #0
 80050e6:	e03e      	b.n	8005166 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e8:	4639      	mov	r1, r7
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7ff fd85 	bl	8004bfa <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050f0:	3d01      	subs	r5, #1
 80050f2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	b923      	cbnz	r3, 8005102 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80050f8:	f000 fe56 	bl	8005da8 <vPortExitCritical>
				return pdPASS;
 80050fc:	2001      	movs	r0, #1
}
 80050fe:	b005      	add	sp, #20
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005102:	f104 0010 	add.w	r0, r4, #16
 8005106:	f000 fcc5 	bl	8005a94 <xTaskRemoveFromEventList>
 800510a:	2800      	cmp	r0, #0
 800510c:	d0f4      	beq.n	80050f8 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800510e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	e7e9      	b.n	80050f8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8005124:	f000 fe40 	bl	8005da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005128:	2000      	movs	r0, #0
 800512a:	e7e8      	b.n	80050fe <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800512c:	a802      	add	r0, sp, #8
 800512e:	f000 fcf3 	bl	8005b18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005132:	2601      	movs	r6, #1
 8005134:	e021      	b.n	800517a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8005136:	2300      	movs	r3, #0
 8005138:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800513c:	e029      	b.n	8005192 <xQueueReceive+0x106>
 800513e:	2300      	movs	r3, #0
 8005140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005144:	e02b      	b.n	800519e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8005146:	4620      	mov	r0, r4
 8005148:	f7ff fd69 	bl	8004c1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800514c:	f000 fb8a 	bl	8005864 <xTaskResumeAll>
 8005150:	e009      	b.n	8005166 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff fd63 	bl	8004c1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005158:	f000 fb84 	bl	8005864 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff fd04 	bl	8004b6a <prvIsQueueEmpty>
 8005162:	2800      	cmp	r0, #0
 8005164:	d13f      	bne.n	80051e6 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8005166:	f000 fdfd 	bl	8005d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800516c:	2d00      	cmp	r5, #0
 800516e:	d1bb      	bne.n	80050e8 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005170:	9b01      	ldr	r3, [sp, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0d6      	beq.n	8005124 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8005176:	2e00      	cmp	r6, #0
 8005178:	d0d8      	beq.n	800512c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800517a:	f000 fe15 	bl	8005da8 <vPortExitCritical>
		vTaskSuspendAll();
 800517e:	f000 facb 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005182:	f000 fdef 	bl	8005d64 <vPortEnterCritical>
 8005186:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800518a:	b25b      	sxtb	r3, r3
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d0d1      	beq.n	8005136 <xQueueReceive+0xaa>
 8005192:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005196:	b25b      	sxtb	r3, r3
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d0cf      	beq.n	800513e <xQueueReceive+0xb2>
 800519e:	f000 fe03 	bl	8005da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a2:	a901      	add	r1, sp, #4
 80051a4:	a802      	add	r0, sp, #8
 80051a6:	f000 fcc1 	bl	8005b2c <xTaskCheckForTimeOut>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d1d1      	bne.n	8005152 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff fcdb 	bl	8004b6a <prvIsQueueEmpty>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0c6      	beq.n	8005146 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051b8:	9901      	ldr	r1, [sp, #4]
 80051ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051be:	f000 fc4f 	bl	8005a60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff fd2b 	bl	8004c1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051c8:	f000 fb4c 	bl	8005864 <xTaskResumeAll>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1ca      	bne.n	8005166 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80051d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80051d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	e7bf      	b.n	8005166 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80051e6:	2000      	movs	r0, #0
 80051e8:	e789      	b.n	80050fe <xQueueReceive+0x72>

080051ea <xQueueReceiveFromISR>:
{
 80051ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80051ee:	b1b0      	cbz	r0, 800521e <xQueueReceiveFromISR+0x34>
 80051f0:	460d      	mov	r5, r1
 80051f2:	4616      	mov	r6, r2
 80051f4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f6:	b1d9      	cbz	r1, 8005230 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f8:	f000 fed8 	bl	8005fac <vPortValidateInterruptPriority>
	__asm volatile
 80051fc:	f3ef 8811 	mrs	r8, BASEPRI
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005210:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005212:	b9cf      	cbnz	r7, 8005248 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005214:	2000      	movs	r0, #0
	__asm volatile
 8005216:	f388 8811 	msr	BASEPRI, r8
}
 800521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800522e:	e7fe      	b.n	800522e <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005230:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0e0      	beq.n	80051f8 <xQueueReceiveFromISR+0xe>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	e7fe      	b.n	8005246 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005248:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800524c:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005250:	4629      	mov	r1, r5
 8005252:	4620      	mov	r0, r4
 8005254:	f7ff fcd1 	bl	8004bfa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005258:	3f01      	subs	r7, #1
 800525a:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800525c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005260:	d006      	beq.n	8005270 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005262:	f109 0301 	add.w	r3, r9, #1
 8005266:	b25b      	sxtb	r3, r3
 8005268:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800526c:	2001      	movs	r0, #1
 800526e:	e7d2      	b.n	8005216 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	b90b      	cbnz	r3, 8005278 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8005274:	2001      	movs	r0, #1
 8005276:	e7ce      	b.n	8005216 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005278:	f104 0010 	add.w	r0, r4, #16
 800527c:	f000 fc0a 	bl	8005a94 <xTaskRemoveFromEventList>
 8005280:	b118      	cbz	r0, 800528a <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8005282:	b126      	cbz	r6, 800528e <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005284:	2001      	movs	r0, #1
 8005286:	6030      	str	r0, [r6, #0]
 8005288:	e7c5      	b.n	8005216 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800528a:	2001      	movs	r0, #1
 800528c:	e7c3      	b.n	8005216 <xQueueReceiveFromISR+0x2c>
 800528e:	2001      	movs	r0, #1
 8005290:	e7c1      	b.n	8005216 <xQueueReceiveFromISR+0x2c>
	...

08005294 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <prvResetNextTaskUnblockTime+0x20>)
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b923      	cbnz	r3, 80052a6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <prvResetNextTaskUnblockTime+0x20>)
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052a4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <prvResetNextTaskUnblockTime+0x20>)
 80052a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052aa:	68d2      	ldr	r2, [r2, #12]
 80052ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80052b2:	4770      	bx	lr
 80052b4:	20000214 	.word	0x20000214

080052b8 <prvInitialiseNewTask>:
{
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4607      	mov	r7, r0
 80052be:	4698      	mov	r8, r3
 80052c0:	9d08      	ldr	r5, [sp, #32]
 80052c2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80052c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80052ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80052ce:	3a01      	subs	r2, #1
 80052d0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052d4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80052d8:	2900      	cmp	r1, #0
 80052da:	d048      	beq.n	800536e <prvInitialiseNewTask+0xb6>
 80052dc:	468e      	mov	lr, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052de:	f04f 0c00 	mov.w	ip, #0
 80052e2:	f1bc 0f0f 	cmp.w	ip, #15
 80052e6:	d80b      	bhi.n	8005300 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052e8:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80052ec:	eb04 030c 	add.w	r3, r4, ip
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80052f4:	f81e 300c 	ldrb.w	r3, [lr, ip]
 80052f8:	b113      	cbz	r3, 8005300 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fa:	f10c 0c01 	add.w	ip, ip, #1
 80052fe:	e7f0      	b.n	80052e2 <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005306:	2d06      	cmp	r5, #6
 8005308:	d900      	bls.n	800530c <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800530a:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800530c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800530e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005310:	f04f 0a00 	mov.w	sl, #0
 8005314:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005318:	1d20      	adds	r0, r4, #4
 800531a:	f7ff fbdd 	bl	8004ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800531e:	f104 0018 	add.w	r0, r4, #24
 8005322:	f7ff fbd9 	bl	8004ad8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005326:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005328:	f1c5 0507 	rsb	r5, r5, #7
 800532c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800532e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005330:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8005334:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005338:	f884 a0b4 	strb.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800533c:	2260      	movs	r2, #96	; 0x60
 800533e:	4651      	mov	r1, sl
 8005340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005344:	f002 fa89 	bl	800785a <memset>
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <prvInitialiseNewTask+0xc0>)
 800534a:	6563      	str	r3, [r4, #84]	; 0x54
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <prvInitialiseNewTask+0xc4>)
 800534e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <prvInitialiseNewTask+0xc8>)
 8005352:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005354:	4642      	mov	r2, r8
 8005356:	4639      	mov	r1, r7
 8005358:	4630      	mov	r0, r6
 800535a:	f000 fcdb 	bl	8005d14 <pxPortInitialiseStack>
 800535e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	d001      	beq.n	800536a <prvInitialiseNewTask+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005366:	f8c9 4000 	str.w	r4, [r9]
}
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800536e:	2300      	movs	r3, #0
 8005370:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005374:	e7c7      	b.n	8005306 <prvInitialiseNewTask+0x4e>
 8005376:	bf00      	nop
 8005378:	0800a2ac 	.word	0x0800a2ac
 800537c:	0800a2cc 	.word	0x0800a2cc
 8005380:	0800a28c 	.word	0x0800a28c

08005384 <prvInitialiseTaskLists>:
{
 8005384:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005386:	2400      	movs	r4, #0
 8005388:	e007      	b.n	800539a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800538a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800538e:	0093      	lsls	r3, r2, #2
 8005390:	4810      	ldr	r0, [pc, #64]	; (80053d4 <prvInitialiseTaskLists+0x50>)
 8005392:	4418      	add	r0, r3
 8005394:	f7ff fb95 	bl	8004ac2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005398:	3401      	adds	r4, #1
 800539a:	2c06      	cmp	r4, #6
 800539c:	d9f5      	bls.n	800538a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800539e:	4c0e      	ldr	r4, [pc, #56]	; (80053d8 <prvInitialiseTaskLists+0x54>)
 80053a0:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80053a4:	4630      	mov	r0, r6
 80053a6:	f7ff fb8c 	bl	8004ac2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053aa:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7ff fb87 	bl	8004ac2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053b4:	f104 0014 	add.w	r0, r4, #20
 80053b8:	f7ff fb83 	bl	8004ac2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80053bc:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80053c0:	f7ff fb7f 	bl	8004ac2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7ff fb7c 	bl	8004ac2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80053ca:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053cc:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	bf00      	nop
 80053d4:	20000244 	.word	0x20000244
 80053d8:	20000214 	.word	0x20000214

080053dc <prvAddNewTaskToReadyList>:
{
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80053e0:	f000 fcc0 	bl	8005d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80053e4:	4b27      	ldr	r3, [pc, #156]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 80053e6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80053ea:	3201      	adds	r2, #1
 80053ec:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 80053f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80053f4:	b173      	cbz	r3, 8005414 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 80053f6:	4b23      	ldr	r3, [pc, #140]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 80053f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80053fc:	b98b      	cbnz	r3, 8005422 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053fe:	4b21      	ldr	r3, [pc, #132]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 8005400:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d80a      	bhi.n	8005422 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 800540e:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 8005412:	e006      	b.n	8005422 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 8005416:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800541a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800541e:	2b01      	cmp	r3, #1
 8005420:	d02c      	beq.n	800547c <prvAddNewTaskToReadyList+0xa0>
		uxTaskNumber++;
 8005422:	4c18      	ldr	r4, [pc, #96]	; (8005484 <prvAddNewTaskToReadyList+0xa8>)
 8005424:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005428:	3301      	adds	r3, #1
 800542a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 800542e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8005438:	430a      	orrs	r2, r1
 800543a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800543e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005446:	1d29      	adds	r1, r5, #4
 8005448:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800544c:	f7ff fb47 	bl	8004ade <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005450:	f000 fcaa 	bl	8005da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005454:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005458:	b17b      	cbz	r3, 800547a <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800545a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005462:	429a      	cmp	r2, r3
 8005464:	d209      	bcs.n	800547a <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 8005466:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	f3bf 8f6f 	isb	sy
}
 800547a:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 800547c:	f7ff ff82 	bl	8005384 <prvInitialiseTaskLists>
 8005480:	e7cf      	b.n	8005422 <prvAddNewTaskToReadyList+0x46>
 8005482:	bf00      	nop
 8005484:	20000214 	.word	0x20000214

08005488 <prvDeleteTCB>:
	{
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800548c:	3050      	adds	r0, #80	; 0x50
 800548e:	f002 fef9 	bl	8008284 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005492:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8005496:	b163      	cbz	r3, 80054b2 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005498:	2b01      	cmp	r3, #1
 800549a:	d011      	beq.n	80054c0 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800549c:	2b02      	cmp	r3, #2
 800549e:	d00e      	beq.n	80054be <prvDeleteTCB+0x36>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	e7fe      	b.n	80054b0 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80054b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80054b4:	f000 fe6e 	bl	8006194 <vPortFree>
				vPortFree( pxTCB );
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fe6b 	bl	8006194 <vPortFree>
	}
 80054be:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fe67 	bl	8006194 <vPortFree>
 80054c6:	e7fa      	b.n	80054be <prvDeleteTCB+0x36>

080054c8 <prvCheckTasksWaitingTermination>:
{
 80054c8:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ca:	e017      	b.n	80054fc <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 80054cc:	f000 fc4a 	bl	8005d64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <prvCheckTasksWaitingTermination+0x40>)
 80054d2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80054d6:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d8:	1d28      	adds	r0, r5, #4
 80054da:	f7ff fb24 	bl	8004b26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054de:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 80054e8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80054ec:	3b01      	subs	r3, #1
 80054ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 80054f2:	f000 fc59 	bl	8005da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80054f6:	4628      	mov	r0, r5
 80054f8:	f7ff ffc6 	bl	8005488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054fc:	4b02      	ldr	r3, [pc, #8]	; (8005508 <prvCheckTasksWaitingTermination+0x40>)
 80054fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e2      	bne.n	80054cc <prvCheckTasksWaitingTermination+0x4>
}
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20000214 	.word	0x20000214

0800550c <prvIdleTask>:
{
 800550c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800550e:	f7ff ffdb 	bl	80054c8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvIdleTask+0x24>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	2b01      	cmp	r3, #1
 8005518:	d9f9      	bls.n	800550e <prvIdleTask+0x2>
				taskYIELD();
 800551a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	e7ee      	b.n	800550e <prvIdleTask+0x2>
 8005530:	20000214 	.word	0x20000214

08005534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800553a:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 800553c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005540:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8005544:	3004      	adds	r0, #4
 8005546:	f7ff faee 	bl	8004b26 <uxListRemove>
 800554a:	b960      	cbnz	r0, 8005566 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 800554e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005552:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005554:	2201      	movs	r2, #1
 8005556:	fa02 f101 	lsl.w	r1, r2, r1
 800555a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800555e:	ea22 0201 	bic.w	r2, r2, r1
 8005562:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005566:	f1b4 3fff 	cmp.w	r4, #4294967295
 800556a:	d00f      	beq.n	800558c <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800556c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 8005570:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005574:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005576:	42a6      	cmp	r6, r4
 8005578:	d911      	bls.n	800559e <prvAddCurrentTaskToDelayedList+0x6a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 800557c:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8005580:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005584:	3104      	adds	r1, #4
 8005586:	f7ff fab5 	bl	8004af4 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800558a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800558c:	2d00      	cmp	r5, #0
 800558e:	d0ed      	beq.n	800556c <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005590:	4809      	ldr	r0, [pc, #36]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 8005592:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005596:	3104      	adds	r1, #4
 8005598:	f7ff faa1 	bl	8004ade <vListInsertEnd>
 800559c:	e7f5      	b.n	800558a <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x84>)
 80055a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80055a2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80055a6:	3104      	adds	r1, #4
 80055a8:	f7ff faa4 	bl	8004af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	d9eb      	bls.n	800558a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80055b2:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 80055b4:	e7e9      	b.n	800558a <prvAddCurrentTaskToDelayedList+0x56>
 80055b6:	bf00      	nop
 80055b8:	20000214 	.word	0x20000214

080055bc <xTaskCreateStatic>:
	{
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	b087      	sub	sp, #28
 80055c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80055c2:	b17c      	cbz	r4, 80055e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055c6:	b1b5      	cbz	r5, 80055f6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80055c8:	25b8      	movs	r5, #184	; 0xb8
 80055ca:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055cc:	9d04      	ldr	r5, [sp, #16]
 80055ce:	2db8      	cmp	r5, #184	; 0xb8
 80055d0:	d01a      	beq.n	8005608 <xTaskCreateStatic+0x4c>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	e7fe      	b.n	80055e2 <xTaskCreateStatic+0x26>
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80055f4:	e7fe      	b.n	80055f4 <xTaskCreateStatic+0x38>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005606:	e7fe      	b.n	8005606 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005608:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800560a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800560c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800560e:	2402      	movs	r4, #2
 8005610:	f885 40b5 	strb.w	r4, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005614:	2400      	movs	r4, #0
 8005616:	9403      	str	r4, [sp, #12]
 8005618:	9502      	str	r5, [sp, #8]
 800561a:	ac05      	add	r4, sp, #20
 800561c:	9401      	str	r4, [sp, #4]
 800561e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005620:	9400      	str	r4, [sp, #0]
 8005622:	f7ff fe49 	bl	80052b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005626:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005628:	f7ff fed8 	bl	80053dc <prvAddNewTaskToReadyList>
	}
 800562c:	9805      	ldr	r0, [sp, #20]
 800562e:	b007      	add	sp, #28
 8005630:	bd30      	pop	{r4, r5, pc}

08005632 <xTaskCreate>:
	{
 8005632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005636:	b085      	sub	sp, #20
 8005638:	4607      	mov	r7, r0
 800563a:	4688      	mov	r8, r1
 800563c:	4614      	mov	r4, r2
 800563e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005640:	0090      	lsls	r0, r2, #2
 8005642:	f000 fd35 	bl	80060b0 <pvPortMalloc>
			if( pxStack != NULL )
 8005646:	b300      	cbz	r0, 800568a <xTaskCreate+0x58>
 8005648:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800564a:	20b8      	movs	r0, #184	; 0xb8
 800564c:	f000 fd30 	bl	80060b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005650:	4605      	mov	r5, r0
 8005652:	b1b0      	cbz	r0, 8005682 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005654:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005658:	b1e5      	cbz	r5, 8005694 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800565a:	2300      	movs	r3, #0
 800565c:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005660:	9303      	str	r3, [sp, #12]
 8005662:	9502      	str	r5, [sp, #8]
 8005664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	4633      	mov	r3, r6
 800566e:	4622      	mov	r2, r4
 8005670:	4641      	mov	r1, r8
 8005672:	4638      	mov	r0, r7
 8005674:	f7ff fe20 	bl	80052b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff feaf 	bl	80053dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800567e:	2001      	movs	r0, #1
 8005680:	e005      	b.n	800568e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8005682:	4648      	mov	r0, r9
 8005684:	f000 fd86 	bl	8006194 <vPortFree>
 8005688:	e7e6      	b.n	8005658 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800568a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800568e:	b005      	add	sp, #20
 8005690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005698:	e7f9      	b.n	800568e <xTaskCreate+0x5c>
	...

0800569c <vTaskStartScheduler>:
{
 800569c:	b510      	push	{r4, lr}
 800569e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056a0:	2400      	movs	r4, #0
 80056a2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056a4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056a6:	aa07      	add	r2, sp, #28
 80056a8:	a906      	add	r1, sp, #24
 80056aa:	a805      	add	r0, sp, #20
 80056ac:	f001 f82c 	bl	8006708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	9400      	str	r4, [sp, #0]
 80056ba:	4623      	mov	r3, r4
 80056bc:	9a07      	ldr	r2, [sp, #28]
 80056be:	4912      	ldr	r1, [pc, #72]	; (8005708 <vTaskStartScheduler+0x6c>)
 80056c0:	4812      	ldr	r0, [pc, #72]	; (800570c <vTaskStartScheduler+0x70>)
 80056c2:	f7ff ff7b 	bl	80055bc <xTaskCreateStatic>
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <vTaskStartScheduler+0x74>)
 80056c8:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
		if( xIdleTaskHandle != NULL )
 80056cc:	b1c8      	cbz	r0, 8005702 <vTaskStartScheduler+0x66>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <vTaskStartScheduler+0x74>)
 80056e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80056e4:	3250      	adds	r2, #80	; 0x50
 80056e6:	490b      	ldr	r1, [pc, #44]	; (8005714 <vTaskStartScheduler+0x78>)
 80056e8:	600a      	str	r2, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80056f0:	2201      	movs	r2, #1
 80056f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056f6:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80056fa:	f001 f802 	bl	8006702 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80056fe:	f000 fbcb 	bl	8005e98 <xPortStartScheduler>
}
 8005702:	b008      	add	sp, #32
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	0800a278 	.word	0x0800a278
 800570c:	0800550d 	.word	0x0800550d
 8005710:	20000214 	.word	0x20000214
 8005714:	20000014 	.word	0x20000014

08005718 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005718:	4a03      	ldr	r2, [pc, #12]	; (8005728 <vTaskSuspendAll+0x10>)
 800571a:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 800571e:	3301      	adds	r3, #1
 8005720:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000214 	.word	0x20000214

0800572c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <xTaskGetTickCount+0x8>)
 800572e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 8005732:	4770      	bx	lr
 8005734:	20000214 	.word	0x20000214

08005738 <xTaskGetTickCountFromISR>:
{
 8005738:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800573a:	f000 fc37 	bl	8005fac <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800573e:	4b02      	ldr	r3, [pc, #8]	; (8005748 <xTaskGetTickCountFromISR+0x10>)
 8005740:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 8005744:	bd08      	pop	{r3, pc}
 8005746:	bf00      	nop
 8005748:	20000214 	.word	0x20000214

0800574c <xTaskIncrementTick>:
{
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <xTaskIncrementTick+0x114>)
 8005752:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005756:	2b00      	cmp	r3, #0
 8005758:	d176      	bne.n	8005848 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800575a:	4b41      	ldr	r3, [pc, #260]	; (8005860 <xTaskIncrementTick+0x114>)
 800575c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
 8005760:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005762:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005766:	b9ce      	cbnz	r6, 800579c <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b143      	cbz	r3, 8005780 <xTaskIncrementTick+0x34>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	e7fe      	b.n	800577e <xTaskIncrementTick+0x32>
 8005780:	4b37      	ldr	r3, [pc, #220]	; (8005860 <xTaskIncrementTick+0x114>)
 8005782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005784:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8005788:	6299      	str	r1, [r3, #40]	; 0x28
 800578a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800578e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8005792:	3201      	adds	r2, #1
 8005794:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8005798:	f7ff fd7c 	bl	8005294 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579c:	4b30      	ldr	r3, [pc, #192]	; (8005860 <xTaskIncrementTick+0x114>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	42b3      	cmp	r3, r6
 80057a2:	d946      	bls.n	8005832 <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
 80057a4:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <xTaskIncrementTick+0x114>)
 80057aa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057b4:	0099      	lsls	r1, r3, #2
 80057b6:	440a      	add	r2, r1
 80057b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d901      	bls.n	80057c2 <xTaskIncrementTick+0x76>
				xSwitchRequired = pdTRUE;
 80057be:	f04f 0801 	mov.w	r8, #1
			if( xYieldPending != pdFALSE )
 80057c2:	4b27      	ldr	r3, [pc, #156]	; (8005860 <xTaskIncrementTick+0x114>)
 80057c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d045      	beq.n	8005858 <xTaskIncrementTick+0x10c>
				xSwitchRequired = pdTRUE;
 80057cc:	f04f 0801 	mov.w	r8, #1
	return xSwitchRequired;
 80057d0:	e042      	b.n	8005858 <xTaskIncrementTick+0x10c>
							xSwitchRequired = pdTRUE;
 80057d2:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <xTaskIncrementTick+0x114>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	b363      	cbz	r3, 8005838 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <xTaskIncrementTick+0x114>)
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057e6:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80057e8:	429e      	cmp	r6, r3
 80057ea:	d32a      	bcc.n	8005842 <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ec:	1d27      	adds	r7, r4, #4
 80057ee:	4638      	mov	r0, r7
 80057f0:	f7ff f999 	bl	8004b26 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057f6:	b11b      	cbz	r3, 8005800 <xTaskIncrementTick+0xb4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f8:	f104 0018 	add.w	r0, r4, #24
 80057fc:	f7ff f993 	bl	8004b26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005802:	2201      	movs	r2, #1
 8005804:	409a      	lsls	r2, r3
 8005806:	4d16      	ldr	r5, [pc, #88]	; (8005860 <xTaskIncrementTick+0x114>)
 8005808:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 800580c:	430a      	orrs	r2, r1
 800580e:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8005812:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8005816:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	4639      	mov	r1, r7
 800581e:	4410      	add	r0, r2
 8005820:	f7ff f95d 	bl	8004ade <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005824:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005826:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	429a      	cmp	r2, r3
 800582e:	d2d0      	bcs.n	80057d2 <xTaskIncrementTick+0x86>
 8005830:	e7d1      	b.n	80057d6 <xTaskIncrementTick+0x8a>
BaseType_t xSwitchRequired = pdFALSE;
 8005832:	f04f 0800 	mov.w	r8, #0
 8005836:	e7ce      	b.n	80057d6 <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <xTaskIncrementTick+0x114>)
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8005840:	e7b2      	b.n	80057a8 <xTaskIncrementTick+0x5c>
						xNextTaskUnblockTime = xItemValue;
 8005842:	4a07      	ldr	r2, [pc, #28]	; (8005860 <xTaskIncrementTick+0x114>)
 8005844:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005846:	e7af      	b.n	80057a8 <xTaskIncrementTick+0x5c>
		++xPendedTicks;
 8005848:	4a05      	ldr	r2, [pc, #20]	; (8005860 <xTaskIncrementTick+0x114>)
 800584a:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
 800584e:	3301      	adds	r3, #1
 8005850:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
BaseType_t xSwitchRequired = pdFALSE;
 8005854:	f04f 0800 	mov.w	r8, #0
}
 8005858:	4640      	mov	r0, r8
 800585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585e:	bf00      	nop
 8005860:	20000214 	.word	0x20000214

08005864 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005864:	4b3a      	ldr	r3, [pc, #232]	; (8005950 <xTaskResumeAll+0xec>)
 8005866:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800586a:	b943      	cbnz	r3, 800587e <xTaskResumeAll+0x1a>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	e7fe      	b.n	800587c <xTaskResumeAll+0x18>
{
 800587e:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8005880:	f000 fa70 	bl	8005d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <xTaskResumeAll+0xec>)
 8005886:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800588a:	3a01      	subs	r2, #1
 800588c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005894:	2b00      	cmp	r3, #0
 8005896:	d156      	bne.n	8005946 <xTaskResumeAll+0xe2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <xTaskResumeAll+0xec>)
 800589a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800589e:	b90b      	cbnz	r3, 80058a4 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 80058a0:	2400      	movs	r4, #0
 80058a2:	e051      	b.n	8005948 <xTaskResumeAll+0xe4>
TCB_t *pxTCB = NULL;
 80058a4:	2500      	movs	r5, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <xTaskResumeAll+0xec>)
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	b32b      	cbz	r3, 80058f8 <xTaskResumeAll+0x94>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ac:	4c28      	ldr	r4, [pc, #160]	; (8005950 <xTaskResumeAll+0xec>)
 80058ae:	6a23      	ldr	r3, [r4, #32]
 80058b0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058b2:	f105 0018 	add.w	r0, r5, #24
 80058b6:	f7ff f936 	bl	8004b26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ba:	1d2e      	adds	r6, r5, #4
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff f932 	bl	8004b26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80058c4:	2201      	movs	r2, #1
 80058c6:	409a      	lsls	r2, r3
 80058c8:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80058cc:	430a      	orrs	r2, r1
 80058ce:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 80058d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80058d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80058da:	4631      	mov	r1, r6
 80058dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80058e0:	f7ff f8fd 	bl	8004ade <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80058e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d3da      	bcc.n	80058a6 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 80058f0:	2201      	movs	r2, #1
 80058f2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80058f6:	e7d6      	b.n	80058a6 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 80058f8:	b10d      	cbz	r5, 80058fe <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 80058fa:	f7ff fccb 	bl	8005294 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <xTaskResumeAll+0xec>)
 8005900:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
					if( xPendedCounts > ( TickType_t ) 0U )
 8005904:	b98c      	cbnz	r4, 800592a <xTaskResumeAll+0xc6>
				if( xYieldPending != pdFALSE )
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <xTaskResumeAll+0xec>)
 8005908:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 800590c:	b1e4      	cbz	r4, 8005948 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 800590e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005922:	2401      	movs	r4, #1
 8005924:	e010      	b.n	8005948 <xTaskResumeAll+0xe4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005926:	3c01      	subs	r4, #1
 8005928:	d008      	beq.n	800593c <xTaskResumeAll+0xd8>
							if( xTaskIncrementTick() != pdFALSE )
 800592a:	f7ff ff0f 	bl	800574c <xTaskIncrementTick>
 800592e:	2800      	cmp	r0, #0
 8005930:	d0f9      	beq.n	8005926 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <xTaskResumeAll+0xec>)
 8005934:	2201      	movs	r2, #1
 8005936:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 800593a:	e7f4      	b.n	8005926 <xTaskResumeAll+0xc2>
						xPendedTicks = 0;
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <xTaskResumeAll+0xec>)
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8005944:	e7df      	b.n	8005906 <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 8005946:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005948:	f000 fa2e 	bl	8005da8 <vPortExitCritical>
}
 800594c:	4620      	mov	r0, r4
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	20000214 	.word	0x20000214

08005954 <vTaskDelay>:
	{
 8005954:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005956:	b1b0      	cbz	r0, 8005986 <vTaskDelay+0x32>
 8005958:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <vTaskDelay+0x48>)
 800595c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005960:	b143      	cbz	r3, 8005974 <vTaskDelay+0x20>
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	e7fe      	b.n	8005972 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8005974:	f7ff fed0 	bl	8005718 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005978:	2100      	movs	r1, #0
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fdda 	bl	8005534 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005980:	f7ff ff70 	bl	8005864 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005984:	b948      	cbnz	r0, 800599a <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 8005986:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
	}
 800599a:	bd10      	pop	{r4, pc}
 800599c:	20000214 	.word	0x20000214

080059a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059a0:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <vTaskSwitchContext+0xb8>)
 80059a2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80059a6:	b123      	cbz	r3, 80059b2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <vTaskSwitchContext+0xb8>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80059b0:	4770      	bx	lr
{
 80059b2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80059b4:	4c28      	ldr	r4, [pc, #160]	; (8005a58 <vTaskSwitchContext+0xb8>)
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80059bc:	f000 fea2 	bl	8006704 <getRunTimeCounterValue>
 80059c0:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80059c4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80059c8:	4298      	cmp	r0, r3
 80059ca:	d905      	bls.n	80059d8 <vTaskSwitchContext+0x38>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80059cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80059d0:	1ac3      	subs	r3, r0, r3
 80059d2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80059d4:	4413      	add	r3, r2
 80059d6:	64cb      	str	r3, [r1, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <vTaskSwitchContext+0xb8>)
 80059da:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059de:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f1c3 031f 	rsb	r3, r3, #31
 80059ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80059f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80059f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059f6:	b942      	cbnz	r2, 8005a0a <vTaskSwitchContext+0x6a>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	e7fe      	b.n	8005a08 <vTaskSwitchContext+0x68>
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <vTaskSwitchContext+0xb8>)
 8005a0c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a10:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005a14:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005a16:	6840      	ldr	r0, [r0, #4]
 8005a18:	6348      	str	r0, [r1, #52]	; 0x34
 8005a1a:	3230      	adds	r2, #48	; 0x30
 8005a1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a20:	0089      	lsls	r1, r1, #2
 8005a22:	3108      	adds	r1, #8
 8005a24:	440a      	add	r2, r1
 8005a26:	4290      	cmp	r0, r2
 8005a28:	d00e      	beq.n	8005a48 <vTaskSwitchContext+0xa8>
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <vTaskSwitchContext+0xb8>)
 8005a2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a3c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8005a40:	3350      	adds	r3, #80	; 0x50
 8005a42:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <vTaskSwitchContext+0xbc>)
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a48:	6840      	ldr	r0, [r0, #4]
 8005a4a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a4e:	4a02      	ldr	r2, [pc, #8]	; (8005a58 <vTaskSwitchContext+0xb8>)
 8005a50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005a54:	6350      	str	r0, [r2, #52]	; 0x34
 8005a56:	e7e8      	b.n	8005a2a <vTaskSwitchContext+0x8a>
 8005a58:	20000214 	.word	0x20000214
 8005a5c:	20000014 	.word	0x20000014

08005a60 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005a60:	b160      	cbz	r0, 8005a7c <vTaskPlaceOnEventList+0x1c>
{
 8005a62:	b510      	push	{r4, lr}
 8005a64:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <vTaskPlaceOnEventList+0x30>)
 8005a68:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8005a6c:	3118      	adds	r1, #24
 8005a6e:	f7ff f841 	bl	8004af4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a72:	2101      	movs	r1, #1
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7ff fd5d 	bl	8005534 <prvAddCurrentTaskToDelayedList>
}
 8005a7a:	bd10      	pop	{r4, pc}
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005a8c:	e7fe      	b.n	8005a8c <vTaskPlaceOnEventList+0x2c>
 8005a8e:	bf00      	nop
 8005a90:	20000214 	.word	0x20000214

08005a94 <xTaskRemoveFromEventList>:
{
 8005a94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a96:	68c3      	ldr	r3, [r0, #12]
 8005a98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005a9a:	b34c      	cbz	r4, 8005af0 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	f104 0518 	add.w	r5, r4, #24
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f7ff f840 	bl	8004b26 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <xTaskRemoveFromEventList+0x7c>)
 8005aa8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005aac:	bb4b      	cbnz	r3, 8005b02 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aae:	1d25      	adds	r5, r4, #4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f7ff f838 	bl	8004b26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4082      	lsls	r2, r0
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <xTaskRemoveFromEventList+0x7c>)
 8005abe:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8005ac8:	3330      	adds	r3, #48	; 0x30
 8005aca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ace:	4629      	mov	r1, r5
 8005ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ad4:	f7ff f803 	bl	8004ade <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <xTaskRemoveFromEventList+0x7c>)
 8005adc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d912      	bls.n	8005b0c <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <xTaskRemoveFromEventList+0x7c>)
 8005aea:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005b00:	e7fe      	b.n	8005b00 <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b02:	4629      	mov	r1, r5
 8005b04:	4803      	ldr	r0, [pc, #12]	; (8005b14 <xTaskRemoveFromEventList+0x80>)
 8005b06:	f7fe ffea 	bl	8004ade <vListInsertEnd>
 8005b0a:	e7e5      	b.n	8005ad8 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8005b0c:	2000      	movs	r0, #0
	return xReturn;
 8005b0e:	e7ee      	b.n	8005aee <xTaskRemoveFromEventList+0x5a>
 8005b10:	20000214 	.word	0x20000214
 8005b14:	20000228 	.word	0x20000228

08005b18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <vTaskInternalSetTimeOutState+0x10>)
 8005b1a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8005b1e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005b24:	6043      	str	r3, [r0, #4]
}
 8005b26:	4770      	bx	lr
 8005b28:	20000214 	.word	0x20000214

08005b2c <xTaskCheckForTimeOut>:
{
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005b2e:	b1d8      	cbz	r0, 8005b68 <xTaskCheckForTimeOut+0x3c>
 8005b30:	460c      	mov	r4, r1
 8005b32:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005b34:	b309      	cbz	r1, 8005b7a <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8005b36:	f000 f915 	bl	8005d64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005b3a:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <xTaskCheckForTimeOut+0x80>)
 8005b3c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b40:	686b      	ldr	r3, [r5, #4]
 8005b42:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b4a:	d027      	beq.n	8005b9c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b4c:	4e17      	ldr	r6, [pc, #92]	; (8005bac <xTaskCheckForTimeOut+0x80>)
 8005b4e:	f8d6 6120 	ldr.w	r6, [r6, #288]	; 0x120
 8005b52:	682f      	ldr	r7, [r5, #0]
 8005b54:	42b7      	cmp	r7, r6
 8005b56:	d001      	beq.n	8005b5c <xTaskCheckForTimeOut+0x30>
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d924      	bls.n	8005ba6 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b5c:	4282      	cmp	r2, r0
 8005b5e:	d815      	bhi.n	8005b8c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005b64:	2401      	movs	r4, #1
 8005b66:	e01a      	b.n	8005b9e <xTaskCheckForTimeOut+0x72>
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005b78:	e7fe      	b.n	8005b78 <xTaskCheckForTimeOut+0x4c>
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005b8a:	e7fe      	b.n	8005b8a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8005b8c:	1a5b      	subs	r3, r3, r1
 8005b8e:	4413      	add	r3, r2
 8005b90:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7ff ffc0 	bl	8005b18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b98:	2400      	movs	r4, #0
 8005b9a:	e000      	b.n	8005b9e <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8005b9c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005b9e:	f000 f903 	bl	8005da8 <vPortExitCritical>
}
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8005ba6:	2401      	movs	r4, #1
 8005ba8:	e7f9      	b.n	8005b9e <xTaskCheckForTimeOut+0x72>
 8005baa:	bf00      	nop
 8005bac:	20000214 	.word	0x20000214

08005bb0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <vTaskMissedYield+0xc>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000214 	.word	0x20000214

08005bc0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <xTaskGetSchedulerState+0x1c>)
 8005bc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005bc6:	b13b      	cbz	r3, 8005bd8 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <xTaskGetSchedulerState+0x1c>)
 8005bca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005bce:	b10b      	cbz	r3, 8005bd4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bd0:	2000      	movs	r0, #0
	}
 8005bd2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005bd4:	2002      	movs	r0, #2
 8005bd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bd8:	2001      	movs	r0, #1
 8005bda:	4770      	bx	lr
 8005bdc:	20000214 	.word	0x20000214

08005be0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d052      	beq.n	8005c8a <xTaskPriorityDisinherit+0xaa>
	{
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005be8:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <xTaskPriorityDisinherit+0xb4>)
 8005bea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	d008      	beq.n	8005c04 <xTaskPriorityDisinherit+0x24>
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	e7fe      	b.n	8005c02 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c04:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005c06:	b943      	cbnz	r3, 8005c1a <xTaskPriorityDisinherit+0x3a>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	e7fe      	b.n	8005c18 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005c20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c22:	4291      	cmp	r1, r2
 8005c24:	d033      	beq.n	8005c8e <xTaskPriorityDisinherit+0xae>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c26:	b10b      	cbz	r3, 8005c2c <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8005c28:	2000      	movs	r0, #0
	}
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2c:	1d05      	adds	r5, r0, #4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7fe ff79 	bl	8004b26 <uxListRemove>
 8005c34:	b988      	cbnz	r0, 8005c5a <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c38:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005c3c:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <xTaskPriorityDisinherit+0xb4>)
 8005c3e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	b94b      	cbnz	r3, 8005c5a <xTaskPriorityDisinherit+0x7a>
 8005c46:	2301      	movs	r3, #1
 8005c48:	fa03 f202 	lsl.w	r2, r3, r2
 8005c4c:	4911      	ldr	r1, [pc, #68]	; (8005c94 <xTaskPriorityDisinherit+0xb4>)
 8005c4e:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8005c52:	ea23 0302 	bic.w	r3, r3, r2
 8005c56:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	f1c3 0207 	rsb	r2, r3, #7
 8005c62:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c64:	2401      	movs	r4, #1
 8005c66:	fa04 f103 	lsl.w	r1, r4, r3
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <xTaskPriorityDisinherit+0xb4>)
 8005c6c:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8005c70:	4301      	orrs	r1, r0
 8005c72:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8005c76:	3230      	adds	r2, #48	; 0x30
 8005c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8005c82:	f7fe ff2c 	bl	8004ade <vListInsertEnd>
					xReturn = pdTRUE;
 8005c86:	4620      	mov	r0, r4
 8005c88:	e7cf      	b.n	8005c2a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005c8a:	2000      	movs	r0, #0
	}
 8005c8c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e7cb      	b.n	8005c2a <xTaskPriorityDisinherit+0x4a>
 8005c92:	bf00      	nop
 8005c94:	20000214 	.word	0x20000214

08005c98 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c98:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <prvTaskExitError+0x3c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d008      	beq.n	8005cba <prvTaskExitError+0x22>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	e7fe      	b.n	8005cb8 <prvTaskExitError+0x20>
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0fc      	beq.n	8005cca <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cd0:	b002      	add	sp, #8
 8005cd2:	4770      	bx	lr
 8005cd4:	20000008 	.word	0x20000008

08005cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cd8:	4808      	ldr	r0, [pc, #32]	; (8005cfc <prvPortStartFirstTask+0x24>)
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	6800      	ldr	r0, [r0, #0]
 8005cde:	f380 8808 	msr	MSP, r0
 8005ce2:	f04f 0000 	mov.w	r0, #0
 8005ce6:	f380 8814 	msr	CONTROL, r0
 8005cea:	b662      	cpsie	i
 8005cec:	b661      	cpsie	f
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	df00      	svc	0
 8005cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cfa:	0000      	.short	0x0000
 8005cfc:	e000ed08 	.word	0xe000ed08

08005d00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d10 <vPortEnableVFP+0x10>
 8005d04:	6801      	ldr	r1, [r0, #0]
 8005d06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d0a:	6001      	str	r1, [r0, #0]
 8005d0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d0e:	0000      	.short	0x0000
 8005d10:	e000ed88 	.word	0xe000ed88

08005d14 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d18:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d1c:	f021 0101 	bic.w	r1, r1, #1
 8005d20:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <pxPortInitialiseStack+0x28>)
 8005d26:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d2a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d2e:	f06f 0302 	mvn.w	r3, #2
 8005d32:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005d36:	3844      	subs	r0, #68	; 0x44
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	08005c99 	.word	0x08005c99

08005d40 <SVC_Handler>:
	__asm volatile (
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <pxCurrentTCBConst2>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	f380 8809 	msr	PSP, r0
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	4770      	bx	lr
 8005d5c:	f3af 8000 	nop.w

08005d60 <pxCurrentTCBConst2>:
 8005d60:	20000314 	.word	0x20000314

08005d64 <vPortEnterCritical>:
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005d74:	4a0b      	ldr	r2, [pc, #44]	; (8005da4 <vPortEnterCritical+0x40>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d000      	beq.n	8005d82 <vPortEnterCritical+0x1e>
}
 8005d80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005d8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d8e:	d0f7      	beq.n	8005d80 <vPortEnterCritical+0x1c>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	e7fe      	b.n	8005da0 <vPortEnterCritical+0x3c>
 8005da2:	bf00      	nop
 8005da4:	20000008 	.word	0x20000008

08005da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <vPortExitCritical+0x28>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b943      	cbnz	r3, 8005dc0 <vPortExitCritical+0x18>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	e7fe      	b.n	8005dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	4a03      	ldr	r2, [pc, #12]	; (8005dd0 <vPortExitCritical+0x28>)
 8005dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dc6:	b90b      	cbnz	r3, 8005dcc <vPortExitCritical+0x24>
	__asm volatile
 8005dc8:	f383 8811 	msr	BASEPRI, r3
}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000008 	.word	0x20000008
	...

08005de0 <PendSV_Handler>:
	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f01e 0f10 	tst.w	lr, #16
 8005df0:	bf08      	it	eq
 8005df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e04:	f380 8811 	msr	BASEPRI, r0
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f7ff fdc6 	bl	80059a0 <vTaskSwitchContext>
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f380 8811 	msr	BASEPRI, r0
 8005e1c:	bc09      	pop	{r0, r3}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f01e 0f10 	tst.w	lr, #16
 8005e2a:	bf08      	it	eq
 8005e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e30:	f380 8809 	msr	PSP, r0
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst>:
 8005e40:	20000314 	.word	0x20000314

08005e44 <SysTick_Handler>:
{
 8005e44:	b508      	push	{r3, lr}
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005e56:	f7ff fc79 	bl	800574c <xTaskIncrementTick>
 8005e5a:	b128      	cbz	r0, 8005e68 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bd08      	pop	{r3, pc}

08005e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005e74:	2300      	movs	r3, #0
 8005e76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <vPortSetupTimerInterrupt+0x20>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4905      	ldr	r1, [pc, #20]	; (8005e94 <vPortSetupTimerInterrupt+0x24>)
 8005e80:	fba1 1303 	umull	r1, r3, r1, r3
 8005e84:	099b      	lsrs	r3, r3, #6
 8005e86:	3b01      	subs	r3, #1
 8005e88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e8a:	2307      	movs	r3, #7
 8005e8c:	6113      	str	r3, [r2, #16]
}
 8005e8e:	4770      	bx	lr
 8005e90:	20000010 	.word	0x20000010
 8005e94:	10624dd3 	.word	0x10624dd3

08005e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005ea0:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <xPortStartScheduler+0x100>)
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d01b      	beq.n	8005ede <xPortStartScheduler+0x46>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ea6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005eaa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005eae:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <xPortStartScheduler+0x104>)
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d01d      	beq.n	8005ef0 <xPortStartScheduler+0x58>
{
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eb8:	4b39      	ldr	r3, [pc, #228]	; (8005fa0 <xPortStartScheduler+0x108>)
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ecc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ed0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ed4:	4a33      	ldr	r2, [pc, #204]	; (8005fa4 <xPortStartScheduler+0x10c>)
 8005ed6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005edc:	e01b      	b.n	8005f16 <xPortStartScheduler+0x7e>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005eee:	e7fe      	b.n	8005eee <xPortStartScheduler+0x56>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f00:	e7fe      	b.n	8005f00 <xPortStartScheduler+0x68>
			ulMaxPRIGROUPValue--;
 8005f02:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <xPortStartScheduler+0x10c>)
 8005f04:	6853      	ldr	r3, [r2, #4]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f1e:	d1f0      	bne.n	8005f02 <xPortStartScheduler+0x6a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f20:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <xPortStartScheduler+0x10c>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d008      	beq.n	8005f3a <xPortStartScheduler+0xa2>
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	e7fe      	b.n	8005f38 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <xPortStartScheduler+0x10c>)
 8005f3e:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f44:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <xPortStartScheduler+0x108>)
 8005f4c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8005f52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f5e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f66:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005f6a:	f7ff ff81 	bl	8005e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005f6e:	2500      	movs	r5, #0
 8005f70:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <xPortStartScheduler+0x110>)
 8005f72:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005f74:	f7ff fec4 	bl	8005d00 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f78:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f80:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005f84:	f7ff fea8 	bl	8005cd8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005f88:	f7ff fd0a 	bl	80059a0 <vTaskSwitchContext>
	prvTaskExitError();
 8005f8c:	f7ff fe84 	bl	8005c98 <prvTaskExitError>
}
 8005f90:	4628      	mov	r0, r5
 8005f92:	b003      	add	sp, #12
 8005f94:	bd30      	pop	{r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	20000348 	.word	0x20000348
 8005fa8:	20000008 	.word	0x20000008

08005fac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fb0:	2b0f      	cmp	r3, #15
 8005fb2:	d90f      	bls.n	8005fd4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fb4:	4a11      	ldr	r2, [pc, #68]	; (8005ffc <vPortValidateInterruptPriority+0x50>)
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fba:	4a11      	ldr	r2, [pc, #68]	; (8006000 <vPortValidateInterruptPriority+0x54>)
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d908      	bls.n	8005fd4 <vPortValidateInterruptPriority+0x28>
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	e7fe      	b.n	8005fd2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005fd8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe0:	4a07      	ldr	r2, [pc, #28]	; (8006000 <vPortValidateInterruptPriority+0x54>)
 8005fe2:	6852      	ldr	r2, [r2, #4]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d908      	bls.n	8005ffa <vPortValidateInterruptPriority+0x4e>
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	e7fe      	b.n	8005ff8 <vPortValidateInterruptPriority+0x4c>
	}
 8005ffa:	4770      	bx	lr
 8005ffc:	e000e3f0 	.word	0xe000e3f0
 8006000:	20000348 	.word	0x20000348

08006004 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006004:	4a10      	ldr	r2, [pc, #64]	; (8006048 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006006:	f012 0f07 	tst.w	r2, #7
 800600a:	d01a      	beq.n	8006042 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800600c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800600e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006012:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8006016:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006018:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800601a:	490c      	ldr	r1, [pc, #48]	; (800604c <prvHeapInit+0x48>)
 800601c:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800601e:	2000      	movs	r0, #0
 8006020:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006022:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006024:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006026:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800602a:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800602c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800602e:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006030:	1a98      	subs	r0, r3, r2
 8006032:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006034:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006036:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006038:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800603a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800603e:	614b      	str	r3, [r1, #20]
}
 8006040:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006042:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006046:	e7e8      	b.n	800601a <prvHeapInit+0x16>
 8006048:	20000370 	.word	0x20000370
 800604c:	20000350 	.word	0x20000350

08006050 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006050:	4b16      	ldr	r3, [pc, #88]	; (80060ac <prvInsertBlockIntoFreeList+0x5c>)
 8006052:	461a      	mov	r2, r3
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4283      	cmp	r3, r0
 8006058:	d3fb      	bcc.n	8006052 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800605a:	6851      	ldr	r1, [r2, #4]
 800605c:	eb02 0c01 	add.w	ip, r2, r1
 8006060:	4584      	cmp	ip, r0
 8006062:	d009      	beq.n	8006078 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006064:	6841      	ldr	r1, [r0, #4]
 8006066:	eb00 0c01 	add.w	ip, r0, r1
 800606a:	4563      	cmp	r3, ip
 800606c:	d009      	beq.n	8006082 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800606e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006070:	4290      	cmp	r0, r2
 8006072:	d019      	beq.n	80060a8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006074:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006076:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006078:	6840      	ldr	r0, [r0, #4]
 800607a:	4401      	add	r1, r0
 800607c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800607e:	4610      	mov	r0, r2
 8006080:	e7f0      	b.n	8006064 <prvInsertBlockIntoFreeList+0x14>
{
 8006082:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006084:	4c09      	ldr	r4, [pc, #36]	; (80060ac <prvInsertBlockIntoFreeList+0x5c>)
 8006086:	68a4      	ldr	r4, [r4, #8]
 8006088:	42a3      	cmp	r3, r4
 800608a:	d00b      	beq.n	80060a4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4419      	add	r1, r3
 8006090:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006098:	4290      	cmp	r0, r2
 800609a:	d000      	beq.n	800609e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800609c:	6010      	str	r0, [r2, #0]
	}
}
 800609e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060a4:	6004      	str	r4, [r0, #0]
 80060a6:	e7f7      	b.n	8006098 <prvInsertBlockIntoFreeList+0x48>
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000350 	.word	0x20000350

080060b0 <pvPortMalloc>:
{
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80060b4:	f7ff fb30 	bl	8005718 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80060b8:	4b35      	ldr	r3, [pc, #212]	; (8006190 <pvPortMalloc+0xe0>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	b1a3      	cbz	r3, 80060e8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060be:	4b34      	ldr	r3, [pc, #208]	; (8006190 <pvPortMalloc+0xe0>)
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	421d      	tst	r5, r3
 80060c4:	d14c      	bne.n	8006160 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 80060c6:	b135      	cbz	r5, 80060d6 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80060c8:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060ca:	f015 0f07 	tst.w	r5, #7
 80060ce:	d002      	beq.n	80060d6 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060d0:	f025 0507 	bic.w	r5, r5, #7
 80060d4:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	d044      	beq.n	8006164 <pvPortMalloc+0xb4>
 80060da:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <pvPortMalloc+0xe0>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	42ab      	cmp	r3, r5
 80060e0:	d34f      	bcc.n	8006182 <pvPortMalloc+0xd2>
				pxBlock = xStart.pxNextFreeBlock;
 80060e2:	4a2b      	ldr	r2, [pc, #172]	; (8006190 <pvPortMalloc+0xe0>)
 80060e4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e6:	e004      	b.n	80060f2 <pvPortMalloc+0x42>
			prvHeapInit();
 80060e8:	f7ff ff8c 	bl	8006004 <prvHeapInit>
 80060ec:	e7e7      	b.n	80060be <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80060ee:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80060f0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	42ab      	cmp	r3, r5
 80060f6:	d202      	bcs.n	80060fe <pvPortMalloc+0x4e>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f7      	bne.n	80060ee <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80060fe:	4b24      	ldr	r3, [pc, #144]	; (8006190 <pvPortMalloc+0xe0>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	42a3      	cmp	r3, r4
 8006104:	d03f      	beq.n	8006186 <pvPortMalloc+0xd6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006106:	6816      	ldr	r6, [r2, #0]
 8006108:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	1b5b      	subs	r3, r3, r5
 8006112:	2b10      	cmp	r3, #16
 8006114:	d910      	bls.n	8006138 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006116:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006118:	f010 0f07 	tst.w	r0, #7
 800611c:	d008      	beq.n	8006130 <pvPortMalloc+0x80>
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	e7fe      	b.n	800612e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006130:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006132:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006134:	f7ff ff8c 	bl	8006050 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006138:	6861      	ldr	r1, [r4, #4]
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <pvPortMalloc+0xe0>)
 800613c:	6913      	ldr	r3, [r2, #16]
 800613e:	1a5b      	subs	r3, r3, r1
 8006140:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006142:	68d2      	ldr	r2, [r2, #12]
 8006144:	4293      	cmp	r3, r2
 8006146:	d201      	bcs.n	800614c <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006148:	4a11      	ldr	r2, [pc, #68]	; (8006190 <pvPortMalloc+0xe0>)
 800614a:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <pvPortMalloc+0xe0>)
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	430a      	orrs	r2, r1
 8006152:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006154:	2200      	movs	r2, #0
 8006156:	6022      	str	r2, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	3201      	adds	r2, #1
 800615c:	619a      	str	r2, [r3, #24]
 800615e:	e002      	b.n	8006166 <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 8006160:	2600      	movs	r6, #0
 8006162:	e000      	b.n	8006166 <pvPortMalloc+0xb6>
 8006164:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8006166:	f7ff fb7d 	bl	8005864 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800616a:	f016 0f07 	tst.w	r6, #7
 800616e:	d00c      	beq.n	800618a <pvPortMalloc+0xda>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	e7fe      	b.n	8006180 <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 8006182:	2600      	movs	r6, #0
 8006184:	e7ef      	b.n	8006166 <pvPortMalloc+0xb6>
 8006186:	2600      	movs	r6, #0
 8006188:	e7ed      	b.n	8006166 <pvPortMalloc+0xb6>
}
 800618a:	4630      	mov	r0, r6
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	bf00      	nop
 8006190:	20000350 	.word	0x20000350

08006194 <vPortFree>:
	if( pv != NULL )
 8006194:	b398      	cbz	r0, 80061fe <vPortFree+0x6a>
{
 8006196:	b538      	push	{r3, r4, r5, lr}
 8006198:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800619a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800619e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80061a2:	4a17      	ldr	r2, [pc, #92]	; (8006200 <vPortFree+0x6c>)
 80061a4:	6952      	ldr	r2, [r2, #20]
 80061a6:	4213      	tst	r3, r2
 80061a8:	d108      	bne.n	80061bc <vPortFree+0x28>
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	e7fe      	b.n	80061ba <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80061c0:	b141      	cbz	r1, 80061d4 <vPortFree+0x40>
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	e7fe      	b.n	80061d2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061d4:	ea23 0302 	bic.w	r3, r3, r2
 80061d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80061dc:	f7ff fa9c 	bl	8005718 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061e0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80061e4:	4c06      	ldr	r4, [pc, #24]	; (8006200 <vPortFree+0x6c>)
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	6123      	str	r3, [r4, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7ff ff2f 	bl	8006050 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f2:	69e3      	ldr	r3, [r4, #28]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61e3      	str	r3, [r4, #28]
				( void ) xTaskResumeAll();
 80061f8:	f7ff fb34 	bl	8005864 <xTaskResumeAll>
}
 80061fc:	bd38      	pop	{r3, r4, r5, pc}
 80061fe:	4770      	bx	lr
 8006200:	20000350 	.word	0x20000350

08006204 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006204:	b500      	push	{lr}
 8006206:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006208:	2300      	movs	r3, #0
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006212:	4879      	ldr	r0, [pc, #484]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006214:	4a79      	ldr	r2, [pc, #484]	; (80063fc <MX_ADC1_Init+0x1f8>)
 8006216:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006218:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800621c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800621e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006220:	2201      	movs	r2, #1
 8006222:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006224:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006226:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800622a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800622c:	4974      	ldr	r1, [pc, #464]	; (8006400 <MX_ADC1_Init+0x1fc>)
 800622e:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006230:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 16;
 8006232:	2110      	movs	r1, #16
 8006234:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006236:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800623a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800623c:	f7fa ff30 	bl	80010a0 <HAL_ADC_Init>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 80a6 	bne.w	8006392 <MX_ADC1_Init+0x18e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800624a:	2201      	movs	r2, #1
 800624c:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800624e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006250:	4669      	mov	r1, sp
 8006252:	4869      	ldr	r0, [pc, #420]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006254:	f7fa ff50 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006258:	2800      	cmp	r0, #0
 800625a:	f040 809d 	bne.w	8006398 <MX_ADC1_Init+0x194>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800625e:	2301      	movs	r3, #1
 8006260:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8006262:	2302      	movs	r3, #2
 8006264:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006266:	4669      	mov	r1, sp
 8006268:	4863      	ldr	r0, [pc, #396]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 800626a:	f7fa ff45 	bl	80010f8 <HAL_ADC_ConfigChannel>
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 8095 	bne.w	800639e <MX_ADC1_Init+0x19a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006274:	2302      	movs	r3, #2
 8006276:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8006278:	2303      	movs	r3, #3
 800627a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800627c:	4669      	mov	r1, sp
 800627e:	485e      	ldr	r0, [pc, #376]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006280:	f7fa ff3a 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006284:	2800      	cmp	r0, #0
 8006286:	f040 808d 	bne.w	80063a4 <MX_ADC1_Init+0x1a0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800628a:	2303      	movs	r3, #3
 800628c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800628e:	2304      	movs	r3, #4
 8006290:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006292:	4669      	mov	r1, sp
 8006294:	4858      	ldr	r0, [pc, #352]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006296:	f7fa ff2f 	bl	80010f8 <HAL_ADC_ConfigChannel>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 8085 	bne.w	80063aa <MX_ADC1_Init+0x1a6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80062a0:	2304      	movs	r3, #4
 80062a2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 80062a4:	2305      	movs	r3, #5
 80062a6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062a8:	4669      	mov	r1, sp
 80062aa:	4853      	ldr	r0, [pc, #332]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 80062ac:	f7fa ff24 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d17d      	bne.n	80063b0 <MX_ADC1_Init+0x1ac>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80062b4:	2305      	movs	r3, #5
 80062b6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 80062b8:	2306      	movs	r3, #6
 80062ba:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062bc:	4669      	mov	r1, sp
 80062be:	484e      	ldr	r0, [pc, #312]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 80062c0:	f7fa ff1a 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d176      	bne.n	80063b6 <MX_ADC1_Init+0x1b2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80062c8:	2306      	movs	r3, #6
 80062ca:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 80062cc:	2307      	movs	r3, #7
 80062ce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062d0:	4669      	mov	r1, sp
 80062d2:	4849      	ldr	r0, [pc, #292]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 80062d4:	f7fa ff10 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d16f      	bne.n	80063bc <MX_ADC1_Init+0x1b8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80062dc:	2307      	movs	r3, #7
 80062de:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 80062e0:	2308      	movs	r3, #8
 80062e2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062e4:	4669      	mov	r1, sp
 80062e6:	4844      	ldr	r0, [pc, #272]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 80062e8:	f7fa ff06 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d168      	bne.n	80063c2 <MX_ADC1_Init+0x1be>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062f0:	2308      	movs	r3, #8
 80062f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80062f4:	2309      	movs	r3, #9
 80062f6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062f8:	4669      	mov	r1, sp
 80062fa:	483f      	ldr	r0, [pc, #252]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 80062fc:	f7fa fefc 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006300:	2800      	cmp	r0, #0
 8006302:	d161      	bne.n	80063c8 <MX_ADC1_Init+0x1c4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006304:	2309      	movs	r3, #9
 8006306:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 8006308:	230a      	movs	r3, #10
 800630a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800630c:	4669      	mov	r1, sp
 800630e:	483a      	ldr	r0, [pc, #232]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006310:	f7fa fef2 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006314:	2800      	cmp	r0, #0
 8006316:	d15a      	bne.n	80063ce <MX_ADC1_Init+0x1ca>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006318:	230a      	movs	r3, #10
 800631a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 800631c:	230b      	movs	r3, #11
 800631e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006320:	4669      	mov	r1, sp
 8006322:	4835      	ldr	r0, [pc, #212]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006324:	f7fa fee8 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006328:	2800      	cmp	r0, #0
 800632a:	d153      	bne.n	80063d4 <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800632c:	230b      	movs	r3, #11
 800632e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 8006330:	230c      	movs	r3, #12
 8006332:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006334:	4669      	mov	r1, sp
 8006336:	4830      	ldr	r0, [pc, #192]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006338:	f7fa fede 	bl	80010f8 <HAL_ADC_ConfigChannel>
 800633c:	2800      	cmp	r0, #0
 800633e:	d14c      	bne.n	80063da <MX_ADC1_Init+0x1d6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006340:	230c      	movs	r3, #12
 8006342:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 8006344:	230d      	movs	r3, #13
 8006346:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006348:	4669      	mov	r1, sp
 800634a:	482b      	ldr	r0, [pc, #172]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 800634c:	f7fa fed4 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006350:	2800      	cmp	r0, #0
 8006352:	d145      	bne.n	80063e0 <MX_ADC1_Init+0x1dc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006354:	230d      	movs	r3, #13
 8006356:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 14;
 8006358:	230e      	movs	r3, #14
 800635a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800635c:	4669      	mov	r1, sp
 800635e:	4826      	ldr	r0, [pc, #152]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006360:	f7fa feca 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006364:	2800      	cmp	r0, #0
 8006366:	d13e      	bne.n	80063e6 <MX_ADC1_Init+0x1e2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006368:	230e      	movs	r3, #14
 800636a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 15;
 800636c:	230f      	movs	r3, #15
 800636e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006370:	4669      	mov	r1, sp
 8006372:	4821      	ldr	r0, [pc, #132]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006374:	f7fa fec0 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8006378:	bbc0      	cbnz	r0, 80063ec <MX_ADC1_Init+0x1e8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800637a:	230f      	movs	r3, #15
 800637c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 16;
 800637e:	2310      	movs	r3, #16
 8006380:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006382:	4669      	mov	r1, sp
 8006384:	481c      	ldr	r0, [pc, #112]	; (80063f8 <MX_ADC1_Init+0x1f4>)
 8006386:	f7fa feb7 	bl	80010f8 <HAL_ADC_ConfigChannel>
 800638a:	bb90      	cbnz	r0, 80063f2 <MX_ADC1_Init+0x1ee>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800638c:	b005      	add	sp, #20
 800638e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006392:	f000 fadb 	bl	800694c <Error_Handler>
 8006396:	e756      	b.n	8006246 <MX_ADC1_Init+0x42>
    Error_Handler();
 8006398:	f000 fad8 	bl	800694c <Error_Handler>
 800639c:	e75f      	b.n	800625e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800639e:	f000 fad5 	bl	800694c <Error_Handler>
 80063a2:	e767      	b.n	8006274 <MX_ADC1_Init+0x70>
    Error_Handler();
 80063a4:	f000 fad2 	bl	800694c <Error_Handler>
 80063a8:	e76f      	b.n	800628a <MX_ADC1_Init+0x86>
    Error_Handler();
 80063aa:	f000 facf 	bl	800694c <Error_Handler>
 80063ae:	e777      	b.n	80062a0 <MX_ADC1_Init+0x9c>
    Error_Handler();
 80063b0:	f000 facc 	bl	800694c <Error_Handler>
 80063b4:	e77e      	b.n	80062b4 <MX_ADC1_Init+0xb0>
    Error_Handler();
 80063b6:	f000 fac9 	bl	800694c <Error_Handler>
 80063ba:	e785      	b.n	80062c8 <MX_ADC1_Init+0xc4>
    Error_Handler();
 80063bc:	f000 fac6 	bl	800694c <Error_Handler>
 80063c0:	e78c      	b.n	80062dc <MX_ADC1_Init+0xd8>
    Error_Handler();
 80063c2:	f000 fac3 	bl	800694c <Error_Handler>
 80063c6:	e793      	b.n	80062f0 <MX_ADC1_Init+0xec>
    Error_Handler();
 80063c8:	f000 fac0 	bl	800694c <Error_Handler>
 80063cc:	e79a      	b.n	8006304 <MX_ADC1_Init+0x100>
    Error_Handler();
 80063ce:	f000 fabd 	bl	800694c <Error_Handler>
 80063d2:	e7a1      	b.n	8006318 <MX_ADC1_Init+0x114>
    Error_Handler();
 80063d4:	f000 faba 	bl	800694c <Error_Handler>
 80063d8:	e7a8      	b.n	800632c <MX_ADC1_Init+0x128>
    Error_Handler();
 80063da:	f000 fab7 	bl	800694c <Error_Handler>
 80063de:	e7af      	b.n	8006340 <MX_ADC1_Init+0x13c>
    Error_Handler();
 80063e0:	f000 fab4 	bl	800694c <Error_Handler>
 80063e4:	e7b6      	b.n	8006354 <MX_ADC1_Init+0x150>
    Error_Handler();
 80063e6:	f000 fab1 	bl	800694c <Error_Handler>
 80063ea:	e7bd      	b.n	8006368 <MX_ADC1_Init+0x164>
    Error_Handler();
 80063ec:	f000 faae 	bl	800694c <Error_Handler>
 80063f0:	e7c3      	b.n	800637a <MX_ADC1_Init+0x176>
    Error_Handler();
 80063f2:	f000 faab 	bl	800694c <Error_Handler>
}
 80063f6:	e7c9      	b.n	800638c <MX_ADC1_Init+0x188>
 80063f8:	20003f70 	.word	0x20003f70
 80063fc:	40012000 	.word	0x40012000
 8006400:	0f000001 	.word	0x0f000001

08006404 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006408:	2300      	movs	r3, #0
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	9306      	str	r3, [sp, #24]
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	9308      	str	r3, [sp, #32]
 8006412:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800641a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800641e:	429a      	cmp	r2, r3
 8006420:	d001      	beq.n	8006426 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006422:	b00a      	add	sp, #40	; 0x28
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006428:	2500      	movs	r5, #0
 800642a:	9501      	str	r5, [sp, #4]
 800642c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006442:	9502      	str	r5, [sp, #8]
 8006444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006446:	f042 0204 	orr.w	r2, r2, #4
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
 800644c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644e:	f002 0204 	and.w	r2, r2, #4
 8006452:	9202      	str	r2, [sp, #8]
 8006454:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006456:	9503      	str	r5, [sp, #12]
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
 8006460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006462:	f002 0201 	and.w	r2, r2, #1
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800646a:	9504      	str	r5, [sp, #16]
 800646c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646e:	f042 0202 	orr.w	r2, r2, #2
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800647e:	233f      	movs	r3, #63	; 0x3f
 8006480:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006482:	2603      	movs	r6, #3
 8006484:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006486:	a905      	add	r1, sp, #20
 8006488:	4819      	ldr	r0, [pc, #100]	; (80064f0 <HAL_ADC_MspInit+0xec>)
 800648a:	f7fb fa27 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800648e:	23ff      	movs	r3, #255	; 0xff
 8006490:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006492:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006496:	a905      	add	r1, sp, #20
 8006498:	4816      	ldr	r0, [pc, #88]	; (80064f4 <HAL_ADC_MspInit+0xf0>)
 800649a:	f7fb fa1f 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800649e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064a0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a4:	a905      	add	r1, sp, #20
 80064a6:	4814      	ldr	r0, [pc, #80]	; (80064f8 <HAL_ADC_MspInit+0xf4>)
 80064a8:	f7fb fa18 	bl	80018dc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80064ac:	4813      	ldr	r0, [pc, #76]	; (80064fc <HAL_ADC_MspInit+0xf8>)
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <HAL_ADC_MspInit+0xfc>)
 80064b0:	6483      	str	r3, [r0, #72]	; 0x48
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064b2:	64c5      	str	r5, [r0, #76]	; 0x4c
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064b4:	6505      	str	r5, [r0, #80]	; 0x50
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064b6:	6545      	str	r5, [r0, #84]	; 0x54
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064bc:	6583      	str	r3, [r0, #88]	; 0x58
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064c2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064c8:	6603      	str	r3, [r0, #96]	; 0x60
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ce:	6643      	str	r3, [r0, #100]	; 0x64
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064d0:	6685      	str	r5, [r0, #104]	; 0x68
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064d2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80064d4:	3048      	adds	r0, #72	; 0x48
 80064d6:	f7fb f863 	bl	80015a0 <HAL_DMA_Init>
 80064da:	b930      	cbnz	r0, 80064ea <HAL_ADC_MspInit+0xe6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <HAL_ADC_MspInit+0xf8>)
 80064de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80064e2:	63a2      	str	r2, [r4, #56]	; 0x38
 80064e4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
}
 80064e8:	e79b      	b.n	8006422 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80064ea:	f000 fa2f 	bl	800694c <Error_Handler>
 80064ee:	e7f5      	b.n	80064dc <HAL_ADC_MspInit+0xd8>
 80064f0:	40020800 	.word	0x40020800
 80064f4:	40020000 	.word	0x40020000
 80064f8:	40020400 	.word	0x40020400
 80064fc:	20003f70 	.word	0x20003f70
 8006500:	40026410 	.word	0x40026410

08006504 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006504:	b508      	push	{r3, lr}
 8006506:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006508:	460a      	mov	r2, r1
 800650a:	4601      	mov	r1, r0
 800650c:	4802      	ldr	r0, [pc, #8]	; (8006518 <BSP_SD_ReadBlocks_DMA+0x14>)
 800650e:	f7fc fc03 	bl	8002d18 <HAL_SD_ReadBlocks_DMA>
 8006512:	b100      	cbz	r0, 8006516 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8006514:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006516:	bd08      	pop	{r3, pc}
 8006518:	20005e08 	.word	0x20005e08

0800651c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800651c:	b508      	push	{r3, lr}
 800651e:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006520:	460a      	mov	r2, r1
 8006522:	4601      	mov	r1, r0
 8006524:	4802      	ldr	r0, [pc, #8]	; (8006530 <BSP_SD_WriteBlocks_DMA+0x14>)
 8006526:	f7fc fc91 	bl	8002e4c <HAL_SD_WriteBlocks_DMA>
 800652a:	b100      	cbz	r0, 800652e <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 800652c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800652e:	bd08      	pop	{r3, pc}
 8006530:	20005e08 	.word	0x20005e08

08006534 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006534:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006536:	4803      	ldr	r0, [pc, #12]	; (8006544 <BSP_SD_GetCardState+0x10>)
 8006538:	f7fc ff84 	bl	8003444 <HAL_SD_GetCardState>
}
 800653c:	3804      	subs	r0, #4
 800653e:	bf18      	it	ne
 8006540:	2001      	movne	r0, #1
 8006542:	bd08      	pop	{r3, pc}
 8006544:	20005e08 	.word	0x20005e08

08006548 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006548:	b508      	push	{r3, lr}
 800654a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <BSP_SD_GetCardInfo+0xc>)
 800654e:	f7fc ff06 	bl	800335e <HAL_SD_GetCardInfo>
}
 8006552:	bd08      	pop	{r3, pc}
 8006554:	20005e08 	.word	0x20005e08

08006558 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006558:	4770      	bx	lr

0800655a <HAL_SD_AbortCallback>:
{
 800655a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800655c:	f7ff fffc 	bl	8006558 <BSP_SD_AbortCallback>
}
 8006560:	bd08      	pop	{r3, pc}

08006562 <HAL_SD_TxCpltCallback>:
{
 8006562:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006564:	f000 fb86 	bl	8006c74 <BSP_SD_WriteCpltCallback>
}
 8006568:	bd08      	pop	{r3, pc}

0800656a <HAL_SD_RxCpltCallback>:
{
 800656a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800656c:	f000 fb8c 	bl	8006c88 <BSP_SD_ReadCpltCallback>
}
 8006570:	bd08      	pop	{r3, pc}

08006572 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006572:	b500      	push	{lr}
 8006574:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8006576:	2301      	movs	r3, #1
 8006578:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800657c:	f000 f8ae 	bl	80066dc <BSP_PlatformIsDetected>
 8006580:	b910      	cbnz	r0, 8006588 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8006582:	2300      	movs	r3, #0
 8006584:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8006588:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800658c:	b003      	add	sp, #12
 800658e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006594 <BSP_SD_Init>:
{
 8006594:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006596:	f7ff ffec 	bl	8006572 <BSP_SD_IsDetected>
 800659a:	2801      	cmp	r0, #1
 800659c:	d002      	beq.n	80065a4 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800659e:	2501      	movs	r5, #1
}
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 80065a6:	4807      	ldr	r0, [pc, #28]	; (80065c4 <BSP_SD_Init+0x30>)
 80065a8:	f7fc febe 	bl	8003328 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80065ac:	4605      	mov	r5, r0
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d1f6      	bne.n	80065a0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80065b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065b6:	4803      	ldr	r0, [pc, #12]	; (80065c4 <BSP_SD_Init+0x30>)
 80065b8:	f7fc fee4 	bl	8003384 <HAL_SD_ConfigWideBusOperation>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d0ef      	beq.n	80065a0 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80065c0:	4625      	mov	r5, r4
 80065c2:	e7ed      	b.n	80065a0 <BSP_SD_Init+0xc>
 80065c4:	20005e08 	.word	0x20005e08

080065c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80065c8:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80065ca:	480b      	ldr	r0, [pc, #44]	; (80065f8 <MX_CAN1_Init+0x30>)
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <MX_CAN1_Init+0x34>)
 80065ce:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80065d0:	2310      	movs	r3, #16
 80065d2:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80065d8:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80065da:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80065dc:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80065de:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80065e0:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80065e2:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80065e4:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80065e6:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80065e8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80065ea:	f7fa fe5b 	bl	80012a4 <HAL_CAN_Init>
 80065ee:	b900      	cbnz	r0, 80065f2 <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80065f0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80065f2:	f000 f9ab 	bl	800694c <Error_Handler>
}
 80065f6:	e7fb      	b.n	80065f0 <MX_CAN1_Init+0x28>
 80065f8:	20004018 	.word	0x20004018
 80065fc:	40006400 	.word	0x40006400

08006600 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006600:	b500      	push	{lr}
 8006602:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006604:	2300      	movs	r3, #0
 8006606:	9303      	str	r3, [sp, #12]
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	9306      	str	r3, [sp, #24]
 800660e:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8006610:	6802      	ldr	r2, [r0, #0]
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <HAL_CAN_MspInit+0x68>)
 8006614:	429a      	cmp	r2, r3
 8006616:	d002      	beq.n	800661e <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006618:	b009      	add	sp, #36	; 0x24
 800661a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800661e:	2100      	movs	r1, #0
 8006620:	9101      	str	r1, [sp, #4]
 8006622:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8006626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006628:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
 800662e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006630:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006638:	9102      	str	r1, [sp, #8]
 800663a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800664c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006650:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006652:	2302      	movs	r3, #2
 8006654:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006656:	2303      	movs	r3, #3
 8006658:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800665a:	2309      	movs	r3, #9
 800665c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800665e:	a903      	add	r1, sp, #12
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <HAL_CAN_MspInit+0x6c>)
 8006662:	f7fb f93b 	bl	80018dc <HAL_GPIO_Init>
}
 8006666:	e7d7      	b.n	8006618 <HAL_CAN_MspInit+0x18>
 8006668:	40006400 	.word	0x40006400
 800666c:	40020000 	.word	0x40020000

08006670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006670:	b510      	push	{r4, lr}
 8006672:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006674:	2400      	movs	r4, #0
 8006676:	9401      	str	r4, [sp, #4]
 8006678:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <MX_DMA_Init+0x50>)
 800667a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800668c:	4622      	mov	r2, r4
 800668e:	2105      	movs	r1, #5
 8006690:	2038      	movs	r0, #56	; 0x38
 8006692:	f7fa febf 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006696:	2038      	movs	r0, #56	; 0x38
 8006698:	f7fa fef4 	bl	8001484 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800669c:	4622      	mov	r2, r4
 800669e:	2105      	movs	r1, #5
 80066a0:	203b      	movs	r0, #59	; 0x3b
 80066a2:	f7fa feb7 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80066a6:	203b      	movs	r0, #59	; 0x3b
 80066a8:	f7fa feec 	bl	8001484 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80066ac:	4622      	mov	r2, r4
 80066ae:	2105      	movs	r1, #5
 80066b0:	2045      	movs	r0, #69	; 0x45
 80066b2:	f7fa feaf 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80066b6:	2045      	movs	r0, #69	; 0x45
 80066b8:	f7fa fee4 	bl	8001484 <HAL_NVIC_EnableIRQ>

}
 80066bc:	b002      	add	sp, #8
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	40023800 	.word	0x40023800

080066c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066c4:	b510      	push	{r4, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80066c6:	4c03      	ldr	r4, [pc, #12]	; (80066d4 <MX_FATFS_Init+0x10>)
 80066c8:	4621      	mov	r1, r4
 80066ca:	4803      	ldr	r0, [pc, #12]	; (80066d8 <MX_FATFS_Init+0x14>)
 80066cc:	f7fe f908 	bl	80048e0 <FATFS_LinkDriver>
 80066d0:	7120      	strb	r0, [r4, #4]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	20004040 	.word	0x20004040
 80066d8:	0800a24c 	.word	0x0800a24c

080066dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80066dc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80066de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066e2:	4804      	ldr	r0, [pc, #16]	; (80066f4 <BSP_PlatformIsDetected+0x18>)
 80066e4:	f7fb f9e6 	bl	8001ab4 <HAL_GPIO_ReadPin>
 80066e8:	b908      	cbnz	r0, 80066ee <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 80066ea:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80066ec:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 80066ee:	2000      	movs	r0, #0
 80066f0:	e7fc      	b.n	80066ec <BSP_PlatformIsDetected+0x10>
 80066f2:	bf00      	nop
 80066f4:	40020800 	.word	0x40020800

080066f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80066f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80066fa:	2001      	movs	r0, #1
 80066fc:	f7fe f94e 	bl	800499c <osDelay>
  for(;;)
 8006700:	e7fb      	b.n	80066fa <StartDefaultTask+0x2>

08006702 <configureTimerForRunTimeStats>:
}
 8006702:	4770      	bx	lr

08006704 <getRunTimeCounterValue>:
}
 8006704:	2000      	movs	r0, #0
 8006706:	4770      	bx	lr

08006708 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <vApplicationGetIdleTaskMemory+0x10>)
 800670a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800670c:	33b8      	adds	r3, #184	; 0xb8
 800670e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	6013      	str	r3, [r2, #0]
}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	200044b4 	.word	0x200044b4

0800671c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800671c:	b510      	push	{r4, lr}
 800671e:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006720:	f10d 0c04 	add.w	ip, sp, #4
 8006724:	4c08      	ldr	r4, [pc, #32]	; (8006748 <MX_FREERTOS_Init+0x2c>)
 8006726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800672c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006730:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006734:	2100      	movs	r1, #0
 8006736:	a801      	add	r0, sp, #4
 8006738:	f7fe f8fb 	bl	8004932 <osThreadCreate>
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <MX_FREERTOS_Init+0x30>)
 800673e:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
}
 8006742:	b008      	add	sp, #32
 8006744:	bd10      	pop	{r4, pc}
 8006746:	bf00      	nop
 8006748:	0800a220 	.word	0x0800a220
 800674c:	200044b4 	.word	0x200044b4

08006750 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006750:	b530      	push	{r4, r5, lr}
 8006752:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006754:	2400      	movs	r4, #0
 8006756:	9405      	str	r4, [sp, #20]
 8006758:	9406      	str	r4, [sp, #24]
 800675a:	9407      	str	r4, [sp, #28]
 800675c:	9408      	str	r4, [sp, #32]
 800675e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006760:	9401      	str	r4, [sp, #4]
 8006762:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <MX_GPIO_Init+0x90>)
 8006764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006766:	f042 0204 	orr.w	r2, r2, #4
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
 800676c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676e:	f002 0204 	and.w	r2, r2, #4
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006776:	9402      	str	r4, [sp, #8]
 8006778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	f002 0201 	and.w	r2, r2, #1
 8006786:	9202      	str	r2, [sp, #8]
 8006788:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800678a:	9403      	str	r4, [sp, #12]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	f042 0202 	orr.w	r2, r2, #2
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	f002 0202 	and.w	r2, r2, #2
 800679a:	9203      	str	r2, [sp, #12]
 800679c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800679e:	9404      	str	r4, [sp, #16]
 80067a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80067b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80067b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80067bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80067be:	4d09      	ldr	r5, [pc, #36]	; (80067e4 <MX_GPIO_Init+0x94>)
 80067c0:	a905      	add	r1, sp, #20
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7fb f88a 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 80067c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 80067d2:	a905      	add	r1, sp, #20
 80067d4:	4628      	mov	r0, r5
 80067d6:	f7fb f881 	bl	80018dc <HAL_GPIO_Init>

}
 80067da:	b00b      	add	sp, #44	; 0x2c
 80067dc:	bd30      	pop	{r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40020800 	.word	0x40020800

080067e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067e8:	b530      	push	{r4, r5, lr}
 80067ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067ec:	2234      	movs	r2, #52	; 0x34
 80067ee:	2100      	movs	r1, #0
 80067f0:	a807      	add	r0, sp, #28
 80067f2:	f001 f832 	bl	800785a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067f6:	2400      	movs	r4, #0
 80067f8:	9402      	str	r4, [sp, #8]
 80067fa:	9403      	str	r4, [sp, #12]
 80067fc:	9404      	str	r4, [sp, #16]
 80067fe:	9405      	str	r4, [sp, #20]
 8006800:	9406      	str	r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	9400      	str	r4, [sp, #0]
 8006804:	4b1d      	ldr	r3, [pc, #116]	; (800687c <SystemClock_Config+0x94>)
 8006806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006818:	9401      	str	r4, [sp, #4]
 800681a:	4b19      	ldr	r3, [pc, #100]	; (8006880 <SystemClock_Config+0x98>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	9b01      	ldr	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800682e:	230a      	movs	r3, #10
 8006830:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8006832:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006834:	2301      	movs	r3, #1
 8006836:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006838:	2210      	movs	r2, #16
 800683a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800683c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800683e:	2502      	movs	r5, #2
 8006840:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006842:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006844:	2308      	movs	r3, #8
 8006846:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006848:	22b4      	movs	r2, #180	; 0xb4
 800684a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800684c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800684e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006850:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006852:	a807      	add	r0, sp, #28
 8006854:	f7fb fd62 	bl	800231c <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006858:	f7fb f934 	bl	8001ac4 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800685c:	230f      	movs	r3, #15
 800685e:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006860:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006862:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006868:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800686a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686e:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006870:	2105      	movs	r1, #5
 8006872:	a802      	add	r0, sp, #8
 8006874:	f7fb f964 	bl	8001b40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8006878:	b015      	add	sp, #84	; 0x54
 800687a:	bd30      	pop	{r4, r5, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	40007000 	.word	0x40007000

08006884 <main>:
{
 8006884:	b508      	push	{r3, lr}
  HAL_Init();
 8006886:	f7fa fb31 	bl	8000eec <HAL_Init>
  SystemClock_Config();
 800688a:	f7ff ffad 	bl	80067e8 <SystemClock_Config>
  MX_GPIO_Init();
 800688e:	f7ff ff5f 	bl	8006750 <MX_GPIO_Init>
  MX_DMA_Init();
 8006892:	f7ff feed 	bl	8006670 <MX_DMA_Init>
  MX_ADC1_Init();
 8006896:	f7ff fcb5 	bl	8006204 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800689a:	f000 fded 	bl	8007478 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800689e:	f7ff fe93 	bl	80065c8 <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 80068a2:	f000 f9fb 	bl	8006c9c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80068a6:	f7ff ff0d 	bl	80066c4 <MX_FATFS_Init>
  MX_RTC_Init();
 80068aa:	f000 f851 	bl	8006950 <MX_RTC_Init>
  MX_TIM1_Init();
 80068ae:	f000 fbe3 	bl	8007078 <MX_TIM1_Init>
  MX_TIM2_Init();
 80068b2:	f000 fc1b 	bl	80070ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80068b6:	f000 fc6d 	bl	8007194 <MX_TIM3_Init>
  MX_TIM4_Init();
 80068ba:	f000 fcc5 	bl	8007248 <MX_TIM4_Init>
  Init_SD_Card();
 80068be:	f000 f8b3 	bl	8006a28 <Init_SD_Card>
  HAL_TIM_Base_Start_IT(&htim1);
 80068c2:	480c      	ldr	r0, [pc, #48]	; (80068f4 <main+0x70>)
 80068c4:	f7fc ffac 	bl	8003820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80068c8:	4d0b      	ldr	r5, [pc, #44]	; (80068f8 <main+0x74>)
 80068ca:	4628      	mov	r0, r5
 80068cc:	f7fc ffa8 	bl	8003820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80068d0:	4c0a      	ldr	r4, [pc, #40]	; (80068fc <main+0x78>)
 80068d2:	4620      	mov	r0, r4
 80068d4:	f7fc ffa4 	bl	8003820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); 		// Start input capture
 80068d8:	2100      	movs	r1, #0
 80068da:	4628      	mov	r0, r5
 80068dc:	f7fd fa9c 	bl	8003e18 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 80068e0:	2100      	movs	r1, #0
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7fd fa98 	bl	8003e18 <HAL_TIM_IC_Start_IT>
  MX_FREERTOS_Init();
 80068e8:	f7ff ff18 	bl	800671c <MX_FREERTOS_Init>
  osKernelStart();
 80068ec:	f7fe f809 	bl	8004902 <osKernelStart>
  while (1)
 80068f0:	e7fe      	b.n	80068f0 <main+0x6c>
 80068f2:	bf00      	nop
 80068f4:	20005f94 	.word	0x20005f94
 80068f8:	20005fdc 	.word	0x20005fdc
 80068fc:	20006024 	.word	0x20006024

08006900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b510      	push	{r4, lr}
 8006902:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8006904:	6802      	ldr	r2, [r0, #0]
 8006906:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006908:	429a      	cmp	r2, r3
 800690a:	d00c      	beq.n	8006926 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM1)
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006910:	429a      	cmp	r2, r3
 8006912:	d00b      	beq.n	800692c <HAL_TIM_PeriodElapsedCallback+0x2c>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp

  if(htim->Instance == TIM2)
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00b      	beq.n	8006934 <HAL_TIM_PeriodElapsedCallback+0x34>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens

  if(htim->Instance == TIM3)
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006920:	429a      	cmp	r2, r3
 8006922:	d00a      	beq.n	800693a <HAL_TIM_PeriodElapsedCallback+0x3a>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens


  /* USER CODE END Callback 1 */
}
 8006924:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8006926:	f7fa fafb 	bl	8000f20 <HAL_IncTick>
 800692a:	e7ef      	b.n	800690c <HAL_TIM_PeriodElapsedCallback+0xc>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fd8f 	bl	8007450 <HAL_TimestampUpdate_Callback>
 8006932:	e7ef      	b.n	8006914 <HAL_TIM_PeriodElapsedCallback+0x14>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 8006934:	f000 fe28 	bl	8007588 <HAL_FR_Wheelspeed_Overflow_Callback>
 8006938:	e7f0      	b.n	800691c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 800693a:	f000 fe2f 	bl	800759c <HAL_FL_Wheelspeed_Overflow_Callback>
}
 800693e:	e7f1      	b.n	8006924 <HAL_TIM_PeriodElapsedCallback+0x24>
 8006940:	40014400 	.word	0x40014400
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400

0800694c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800694c:	4770      	bx	lr
	...

08006950 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006950:	b500      	push	{lr}
 8006952:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006954:	2300      	movs	r3, #0
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	9302      	str	r3, [sp, #8]
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8006960:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006962:	481d      	ldr	r0, [pc, #116]	; (80069d8 <MX_RTC_Init+0x88>)
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <MX_RTC_Init+0x8c>)
 8006966:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006968:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800696a:	227f      	movs	r2, #127	; 0x7f
 800696c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800696e:	22ff      	movs	r2, #255	; 0xff
 8006970:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006972:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006974:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006976:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006978:	f7fb ff43 	bl	8002802 <HAL_RTC_Init>
 800697c:	bb18      	cbnz	r0, 80069c6 <MX_RTC_Init+0x76>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800697e:	2312      	movs	r3, #18
 8006980:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8006984:	2300      	movs	r3, #0
 8006986:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 800698a:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800698e:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006990:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006992:	2201      	movs	r2, #1
 8006994:	a901      	add	r1, sp, #4
 8006996:	4810      	ldr	r0, [pc, #64]	; (80069d8 <MX_RTC_Init+0x88>)
 8006998:	f7fb ff85 	bl	80028a6 <HAL_RTC_SetTime>
 800699c:	b9b0      	cbnz	r0, 80069cc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800699e:	2307      	movs	r3, #7
 80069a0:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 80069a4:	2208      	movs	r2, #8
 80069a6:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x7;
 80069aa:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80069b4:	2201      	movs	r2, #1
 80069b6:	4669      	mov	r1, sp
 80069b8:	4807      	ldr	r0, [pc, #28]	; (80069d8 <MX_RTC_Init+0x88>)
 80069ba:	f7fb ffd3 	bl	8002964 <HAL_RTC_SetDate>
 80069be:	b940      	cbnz	r0, 80069d2 <MX_RTC_Init+0x82>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80069c0:	b007      	add	sp, #28
 80069c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80069c6:	f7ff ffc1 	bl	800694c <Error_Handler>
 80069ca:	e7d8      	b.n	800697e <MX_RTC_Init+0x2e>
    Error_Handler();
 80069cc:	f7ff ffbe 	bl	800694c <Error_Handler>
 80069d0:	e7e5      	b.n	800699e <MX_RTC_Init+0x4e>
    Error_Handler();
 80069d2:	f7ff ffbb 	bl	800694c <Error_Handler>
}
 80069d6:	e7f3      	b.n	80069c0 <MX_RTC_Init+0x70>
 80069d8:	20004770 	.word	0x20004770
 80069dc:	40002800 	.word	0x40002800

080069e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80069e0:	b510      	push	{r4, lr}
 80069e2:	b098      	sub	sp, #96	; 0x60
 80069e4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069e6:	225c      	movs	r2, #92	; 0x5c
 80069e8:	2100      	movs	r1, #0
 80069ea:	a801      	add	r0, sp, #4
 80069ec:	f000 ff35 	bl	800785a <memset>
  if(rtcHandle->Instance==RTC)
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RTC_MspInit+0x40>)
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d001      	beq.n	80069fc <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80069f8:	b018      	add	sp, #96	; 0x60
 80069fa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80069fc:	2320      	movs	r3, #32
 80069fe:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a04:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a06:	a801      	add	r0, sp, #4
 8006a08:	f7fb f98e 	bl	8001d28 <HAL_RCCEx_PeriphCLKConfig>
 8006a0c:	b920      	cbnz	r0, 8006a18 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <HAL_RTC_MspInit+0x44>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 8006a16:	e7ef      	b.n	80069f8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8006a18:	f7ff ff98 	bl	800694c <Error_Handler>
 8006a1c:	e7f7      	b.n	8006a0e <HAL_RTC_MspInit+0x2e>
 8006a1e:	bf00      	nop
 8006a20:	40002800 	.word	0x40002800
 8006a24:	42470000 	.word	0x42470000

08006a28 <Init_SD_Card>:



//	Initializes the SD card
// 	Creates the static objects related to the RTOS task's queue.
void Init_SD_Card(){
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	b082      	sub	sp, #8

	//creates our mutex for resource management
	xMutex = xSemaphoreCreateMutex();
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	f7fe fabb 	bl	8004fa8 <xQueueCreateMutex>
 8006a32:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <Init_SD_Card+0x40>)
 8006a34:	f8c4 090c 	str.w	r0, [r4, #2316]	; 0x90c

	// Create a Queue for the SD Card logging RTOS Task before the scheduler starts
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LEN,
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	f504 6311 	add.w	r3, r4, #2320	; 0x910
 8006a40:	f604 1258 	addw	r2, r4, #2392	; 0x958
 8006a44:	210c      	movs	r1, #12
 8006a46:	2014      	movs	r0, #20
 8006a48:	f7fe f970 	bl	8004d2c <xQueueGenericCreateStatic>
 8006a4c:	f8c4 08e0 	str.w	r0, [r4, #2272]	; 0x8e0
										SD_QUEUE_SIZE,
										xSD_Card_Queue_Storage,
										&xSD_Card_Queue_Static);

	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 8006a50:	b108      	cbz	r0, 8006a56 <Init_SD_Card+0x2e>

}// Init_SD_Card
 8006a52:	b002      	add	sp, #8
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 8006a66:	e7fe      	b.n	8006a66 <Init_SD_Card+0x3e>
 8006a68:	20004790 	.word	0x20004790

08006a6c <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a6c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <SD_CheckStatus+0x20>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a74:	f7ff fd5e 	bl	8006534 <BSP_SD_GetCardState>
 8006a78:	b920      	cbnz	r0, 8006a84 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006a7a:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <SD_CheckStatus+0x20>)
 8006a7c:	7813      	ldrb	r3, [r2, #0]
 8006a7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006a82:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <SD_CheckStatus+0x20>)
 8006a86:	7818      	ldrb	r0, [r3, #0]
}
 8006a88:	bd08      	pop	{r3, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c

08006a90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a90:	b510      	push	{r4, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <SD_initialize+0x68>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006a9c:	f7fd ff36 	bl	800490c <osKernelRunning>
 8006aa0:	b918      	cbnz	r0, 8006aaa <SD_initialize+0x1a>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <SD_initialize+0x68>)
 8006aa4:	7818      	ldrb	r0, [r3, #0]
}
 8006aa6:	b004      	add	sp, #16
 8006aa8:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8006aaa:	f7ff fd73 	bl	8006594 <BSP_SD_Init>
 8006aae:	b188      	cbz	r0, 8006ad4 <SD_initialize+0x44>
    if (Stat != STA_NOINIT)
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <SD_initialize+0x68>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d0f3      	beq.n	8006aa2 <SD_initialize+0x12>
      if (SDQueueID == NULL)
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <SD_initialize+0x6c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	b17b      	cbz	r3, 8006ae0 <SD_initialize+0x50>
      if (SDQueueID == NULL)
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <SD_initialize+0x6c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ec      	bne.n	8006aa2 <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 8006ac8:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <SD_initialize+0x68>)
 8006aca:	7813      	ldrb	r3, [r2, #0]
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	7013      	strb	r3, [r2, #0]
 8006ad2:	e7e6      	b.n	8006aa2 <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7ff ffc9 	bl	8006a6c <SD_CheckStatus>
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <SD_initialize+0x68>)
 8006adc:	7018      	strb	r0, [r3, #0]
 8006ade:	e7e7      	b.n	8006ab0 <SD_initialize+0x20>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <SD_initialize+0x70>)
 8006ae2:	466c      	mov	r4, sp
 8006ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006aea:	2100      	movs	r1, #0
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7fd ff5c 	bl	80049aa <osMessageCreate>
 8006af2:	4b02      	ldr	r3, [pc, #8]	; (8006afc <SD_initialize+0x6c>)
 8006af4:	6018      	str	r0, [r3, #0]
 8006af6:	e7e3      	b.n	8006ac0 <SD_initialize+0x30>
 8006af8:	2000000c 	.word	0x2000000c
 8006afc:	20005e04 	.word	0x20005e04
 8006b00:	0800a23c 	.word	0x0800a23c

08006b04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b04:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8006b06:	f7ff ffb1 	bl	8006a6c <SD_CheckStatus>
}
 8006b0a:	bd08      	pop	{r3, pc}

08006b0c <SD_CheckStatusWithTimeout>:
{
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4605      	mov	r5, r0
  timer = osKernelSysTick();
 8006b10:	f7fd ff05 	bl	800491e <osKernelSysTick>
 8006b14:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 8006b16:	f7fd ff02 	bl	800491e <osKernelSysTick>
 8006b1a:	1b00      	subs	r0, r0, r4
 8006b1c:	42a8      	cmp	r0, r5
 8006b1e:	d205      	bcs.n	8006b2c <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b20:	f7ff fd08 	bl	8006534 <BSP_SD_GetCardState>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1f6      	bne.n	8006b16 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e001      	b.n	8006b30 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b30:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	460c      	mov	r4, r1
 8006b3a:	4615      	mov	r5, r2
 8006b3c:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006b3e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b42:	f7ff ffe3 	bl	8006b0c <SD_CheckStatusWithTimeout>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	db29      	blt.n	8006b9e <SD_read+0x6a>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff fcd8 	bl	8006504 <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 8006b54:	b108      	cbz	r0, 8006b5a <SD_read+0x26>
  DRESULT res = RES_ERROR;
 8006b56:	2001      	movs	r0, #1
 8006b58:	e022      	b.n	8006ba0 <SD_read+0x6c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006b5a:	f247 5230 	movw	r2, #30000	; 0x7530
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <SD_read+0x70>)
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	a801      	add	r0, sp, #4
 8006b64:	f7fd ff69 	bl	8004a3a <osMessageGet>

    if (event.status == osEventMessage)
 8006b68:	9b01      	ldr	r3, [sp, #4]
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d001      	beq.n	8006b72 <SD_read+0x3e>
  DRESULT res = RES_ERROR;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e016      	b.n	8006ba0 <SD_read+0x6c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d001      	beq.n	8006b7c <SD_read+0x48>
  DRESULT res = RES_ERROR;
 8006b78:	2001      	movs	r0, #1
 8006b7a:	e011      	b.n	8006ba0 <SD_read+0x6c>
      {
        timer = osKernelSysTick();
 8006b7c:	f7fd fecf 	bl	800491e <osKernelSysTick>
 8006b80:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006b82:	f7fd fecc 	bl	800491e <osKernelSysTick>
 8006b86:	1b00      	subs	r0, r0, r4
 8006b88:	f247 532f 	movw	r3, #29999	; 0x752f
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	d804      	bhi.n	8006b9a <SD_read+0x66>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b90:	f7ff fcd0 	bl	8006534 <BSP_SD_GetCardState>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d1f4      	bne.n	8006b82 <SD_read+0x4e>
 8006b98:	e002      	b.n	8006ba0 <SD_read+0x6c>
  DRESULT res = RES_ERROR;
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e000      	b.n	8006ba0 <SD_read+0x6c>
    return res;
 8006b9e:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 8006ba0:	b004      	add	sp, #16
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	20005e04 	.word	0x20005e04

08006ba8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	460c      	mov	r4, r1
 8006bae:	4615      	mov	r5, r2
 8006bb0:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006bb2:	f247 5030 	movw	r0, #30000	; 0x7530
 8006bb6:	f7ff ffa9 	bl	8006b0c <SD_CheckStatusWithTimeout>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	db29      	blt.n	8006c12 <SD_write+0x6a>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006bbe:	4632      	mov	r2, r6
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff fcaa 	bl	800651c <BSP_SD_WriteBlocks_DMA>
 8006bc8:	b108      	cbz	r0, 8006bce <SD_write+0x26>
  DRESULT res = RES_ERROR;
 8006bca:	2001      	movs	r0, #1
 8006bcc:	e022      	b.n	8006c14 <SD_write+0x6c>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006bce:	f247 5230 	movw	r2, #30000	; 0x7530
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <SD_write+0x70>)
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	a801      	add	r0, sp, #4
 8006bd8:	f7fd ff2f 	bl	8004a3a <osMessageGet>

    if (event.status == osEventMessage)
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d001      	beq.n	8006be6 <SD_write+0x3e>
  DRESULT res = RES_ERROR;
 8006be2:	2001      	movs	r0, #1
 8006be4:	e016      	b.n	8006c14 <SD_write+0x6c>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d001      	beq.n	8006bf0 <SD_write+0x48>
  DRESULT res = RES_ERROR;
 8006bec:	2001      	movs	r0, #1
 8006bee:	e011      	b.n	8006c14 <SD_write+0x6c>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8006bf0:	f7fd fe95 	bl	800491e <osKernelSysTick>
 8006bf4:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006bf6:	f7fd fe92 	bl	800491e <osKernelSysTick>
 8006bfa:	1b00      	subs	r0, r0, r4
 8006bfc:	f247 532f 	movw	r3, #29999	; 0x752f
 8006c00:	4298      	cmp	r0, r3
 8006c02:	d804      	bhi.n	8006c0e <SD_write+0x66>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c04:	f7ff fc96 	bl	8006534 <BSP_SD_GetCardState>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d1f4      	bne.n	8006bf6 <SD_write+0x4e>
 8006c0c:	e002      	b.n	8006c14 <SD_write+0x6c>
  DRESULT res = RES_ERROR;
 8006c0e:	2001      	movs	r0, #1
 8006c10:	e000      	b.n	8006c14 <SD_write+0x6c>
    return res;
 8006c12:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 8006c14:	b004      	add	sp, #16
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	20005e04 	.word	0x20005e04

08006c1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c1c:	b530      	push	{r4, r5, lr}
 8006c1e:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c20:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <SD_ioctl+0x54>)
 8006c22:	7818      	ldrb	r0, [r3, #0]
 8006c24:	f010 0401 	ands.w	r4, r0, #1
 8006c28:	d11b      	bne.n	8006c62 <SD_ioctl+0x46>
 8006c2a:	4615      	mov	r5, r2

  switch (cmd)
 8006c2c:	2903      	cmp	r1, #3
 8006c2e:	d81c      	bhi.n	8006c6a <SD_ioctl+0x4e>
 8006c30:	e8df f001 	tbb	[pc, r1]
 8006c34:	100a0402 	.word	0x100a0402
 8006c38:	460c      	mov	r4, r1
 8006c3a:	e013      	b.n	8006c64 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c3c:	4668      	mov	r0, sp
 8006c3e:	f7ff fc83 	bl	8006548 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c42:	9b06      	ldr	r3, [sp, #24]
 8006c44:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006c46:	e00d      	b.n	8006c64 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c48:	4668      	mov	r0, sp
 8006c4a:	f7ff fc7d 	bl	8006548 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c4e:	9b07      	ldr	r3, [sp, #28]
 8006c50:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8006c52:	e007      	b.n	8006c64 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c54:	4668      	mov	r0, sp
 8006c56:	f7ff fc77 	bl	8006548 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	0a5b      	lsrs	r3, r3, #9
 8006c5e:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8006c60:	e000      	b.n	8006c64 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c62:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006c64:	4620      	mov	r0, r4
 8006c66:	b009      	add	sp, #36	; 0x24
 8006c68:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8006c6a:	2404      	movs	r4, #4
 8006c6c:	e7fa      	b.n	8006c64 <SD_ioctl+0x48>
 8006c6e:	bf00      	nop
 8006c70:	2000000c 	.word	0x2000000c

08006c74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006c74:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <BSP_SD_WriteCpltCallback+0x10>)
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	f7fd fea9 	bl	80049d4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006c82:	bd08      	pop	{r3, pc}
 8006c84:	20005e04 	.word	0x20005e04

08006c88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006c88:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4b02      	ldr	r3, [pc, #8]	; (8006c98 <BSP_SD_ReadCpltCallback+0x10>)
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f7fd fe9f 	bl	80049d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006c96:	bd08      	pop	{r3, pc}
 8006c98:	20005e04 	.word	0x20005e04

08006c9c <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <MX_SDIO_SD_Init+0x1c>)
 8006c9e:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <MX_SDIO_SD_Init+0x20>)
 8006ca0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006ca6:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ca8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8006caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006cae:	6119      	str	r1, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006cb0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8006cb2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20005e08 	.word	0x20005e08
 8006cbc:	40012c00 	.word	0x40012c00

08006cc0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8006cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	b0a1      	sub	sp, #132	; 0x84
 8006cc6:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc8:	2100      	movs	r1, #0
 8006cca:	911b      	str	r1, [sp, #108]	; 0x6c
 8006ccc:	911c      	str	r1, [sp, #112]	; 0x70
 8006cce:	911d      	str	r1, [sp, #116]	; 0x74
 8006cd0:	911e      	str	r1, [sp, #120]	; 0x78
 8006cd2:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006cd4:	225c      	movs	r2, #92	; 0x5c
 8006cd6:	a804      	add	r0, sp, #16
 8006cd8:	f000 fdbf 	bl	800785a <memset>
  if(sdHandle->Instance==SDIO)
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	4b6f      	ldr	r3, [pc, #444]	; (8006e9c <HAL_SD_MspInit+0x1dc>)
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d002      	beq.n	8006cea <HAL_SD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8006ce4:	b021      	add	sp, #132	; 0x84
 8006ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cee:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cf0:	a804      	add	r0, sp, #16
 8006cf2:	f7fb f819 	bl	8001d28 <HAL_RCCEx_PeriphCLKConfig>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 80c6 	bne.w	8006e88 <HAL_SD_MspInit+0x1c8>
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006cfc:	2500      	movs	r5, #0
 8006cfe:	9500      	str	r5, [sp, #0]
 8006d00:	4b67      	ldr	r3, [pc, #412]	; (8006ea0 <HAL_SD_MspInit+0x1e0>)
 8006d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
 8006d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d10:	9200      	str	r2, [sp, #0]
 8006d12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d14:	9501      	str	r5, [sp, #4]
 8006d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d18:	f042 0202 	orr.w	r2, r2, #2
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d20:	f002 0202 	and.w	r2, r2, #2
 8006d24:	9201      	str	r2, [sp, #4]
 8006d26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d28:	9502      	str	r5, [sp, #8]
 8006d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2c:	f042 0204 	orr.w	r2, r2, #4
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
 8006d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d34:	f002 0204 	and.w	r2, r2, #4
 8006d38:	9202      	str	r2, [sp, #8]
 8006d3a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d3c:	9503      	str	r5, [sp, #12]
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	9303      	str	r3, [sp, #12]
 8006d4e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d50:	2704      	movs	r7, #4
 8006d52:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d54:	f04f 0902 	mov.w	r9, #2
 8006d58:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5c:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d5e:	2603      	movs	r6, #3
 8006d60:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d62:	f04f 080c 	mov.w	r8, #12
 8006d66:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d6a:	a91b      	add	r1, sp, #108	; 0x6c
 8006d6c:	484d      	ldr	r0, [pc, #308]	; (8006ea4 <HAL_SD_MspInit+0x1e4>)
 8006d6e:	f7fa fdb5 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8006d72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006d76:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d78:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7c:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d7e:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d80:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d84:	a91b      	add	r1, sp, #108	; 0x6c
 8006d86:	4848      	ldr	r0, [pc, #288]	; (8006ea8 <HAL_SD_MspInit+0x1e8>)
 8006d88:	f7fa fda8 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d8c:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8e:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d94:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d96:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d9a:	a91b      	add	r1, sp, #108	; 0x6c
 8006d9c:	4843      	ldr	r0, [pc, #268]	; (8006eac <HAL_SD_MspInit+0x1ec>)
 8006d9e:	f7fa fd9d 	bl	80018dc <HAL_GPIO_Init>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8006da2:	4843      	ldr	r0, [pc, #268]	; (8006eb0 <HAL_SD_MspInit+0x1f0>)
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_SD_MspInit+0x1f4>)
 8006da6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006daa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006db8:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dc8:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dd0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006dda:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006dde:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006de2:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006de6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006dea:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006dee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006df2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006df6:	3084      	adds	r0, #132	; 0x84
 8006df8:	f7fa fbd2 	bl	80015a0 <HAL_DMA_Init>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d146      	bne.n	8006e8e <HAL_SD_MspInit+0x1ce>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8006e00:	482b      	ldr	r0, [pc, #172]	; (8006eb0 <HAL_SD_MspInit+0x1f0>)
 8006e02:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8006e06:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006e08:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <HAL_SD_MspInit+0x1f8>)
 8006e0e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006e12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e16:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e20:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e28:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e30:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e38:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e42:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e46:	2304      	movs	r3, #4
 8006e48:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e56:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e5e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e62:	30e4      	adds	r0, #228	; 0xe4
 8006e64:	f7fa fb9c 	bl	80015a0 <HAL_DMA_Init>
 8006e68:	b9a0      	cbnz	r0, 8006e94 <HAL_SD_MspInit+0x1d4>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <HAL_SD_MspInit+0x1f0>)
 8006e6c:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8006e70:	6422      	str	r2, [r4, #64]	; 0x40
 8006e72:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2105      	movs	r1, #5
 8006e7a:	2031      	movs	r0, #49	; 0x31
 8006e7c:	f7fa faca 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006e80:	2031      	movs	r0, #49	; 0x31
 8006e82:	f7fa faff 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 8006e86:	e72d      	b.n	8006ce4 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8006e88:	f7ff fd60 	bl	800694c <Error_Handler>
 8006e8c:	e736      	b.n	8006cfc <HAL_SD_MspInit+0x3c>
      Error_Handler();
 8006e8e:	f7ff fd5d 	bl	800694c <Error_Handler>
 8006e92:	e7b5      	b.n	8006e00 <HAL_SD_MspInit+0x140>
      Error_Handler();
 8006e94:	f7ff fd5a 	bl	800694c <Error_Handler>
 8006e98:	e7e7      	b.n	8006e6a <HAL_SD_MspInit+0x1aa>
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40020400 	.word	0x40020400
 8006ea8:	40020800 	.word	0x40020800
 8006eac:	40020c00 	.word	0x40020c00
 8006eb0:	20005e08 	.word	0x20005e08
 8006eb4:	40026458 	.word	0x40026458
 8006eb8:	400264a0 	.word	0x400264a0

08006ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ebc:	b500      	push	{lr}
 8006ebe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	9200      	str	r2, [sp, #0]
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <HAL_MspInit+0x40>)
 8006ec6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006ec8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006ecc:	6459      	str	r1, [r3, #68]	; 0x44
 8006ece:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006ed0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8006ed4:	9100      	str	r1, [sp, #0]
 8006ed6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006edc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006ee0:	6419      	str	r1, [r3, #64]	; 0x40
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006eec:	210f      	movs	r1, #15
 8006eee:	f06f 0001 	mvn.w	r0, #1
 8006ef2:	f7fa fa8f 	bl	8001414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ef6:	b003      	add	sp, #12
 8006ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006efc:	40023800 	.word	0x40023800

08006f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f00:	b530      	push	{r4, r5, lr}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8006f06:	2400      	movs	r4, #0
 8006f08:	9401      	str	r4, [sp, #4]
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <HAL_InitTick+0x84>)
 8006f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f12:	645a      	str	r2, [r3, #68]	; 0x44
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f1e:	a902      	add	r1, sp, #8
 8006f20:	a803      	add	r0, sp, #12
 8006f22:	f7fa fee3 	bl	8001cec <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006f26:	f7fa fed1 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8006f2a:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006f2c:	4816      	ldr	r0, [pc, #88]	; (8006f88 <HAL_InitTick+0x88>)
 8006f2e:	fba0 2303 	umull	r2, r3, r0, r3
 8006f32:	0c9b      	lsrs	r3, r3, #18
 8006f34:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8006f36:	4815      	ldr	r0, [pc, #84]	; (8006f8c <HAL_InitTick+0x8c>)
 8006f38:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <HAL_InitTick+0x90>)
 8006f3a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8006f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f40:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8006f42:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8006f44:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f46:	6084      	str	r4, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f48:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8006f4a:	f7fc fdd1 	bl	8003af0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8006f4e:	4604      	mov	r4, r0
 8006f50:	b110      	cbz	r0, 8006f58 <HAL_InitTick+0x58>
    }
  }

 /* Return function status */
  return status;
}
 8006f52:	4620      	mov	r0, r4
 8006f54:	b009      	add	sp, #36	; 0x24
 8006f56:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 8006f58:	480c      	ldr	r0, [pc, #48]	; (8006f8c <HAL_InitTick+0x8c>)
 8006f5a:	f7fc fc61 	bl	8003820 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8006f5e:	4604      	mov	r4, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1f6      	bne.n	8006f52 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006f64:	2019      	movs	r0, #25
 8006f66:	f7fa fa8d 	bl	8001484 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f6a:	2d0f      	cmp	r5, #15
 8006f6c:	d901      	bls.n	8006f72 <HAL_InitTick+0x72>
        status = HAL_ERROR;
 8006f6e:	2401      	movs	r4, #1
 8006f70:	e7ef      	b.n	8006f52 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006f72:	2200      	movs	r2, #0
 8006f74:	4629      	mov	r1, r5
 8006f76:	2019      	movs	r0, #25
 8006f78:	f7fa fa4c 	bl	8001414 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <HAL_InitTick+0x94>)
 8006f7e:	601d      	str	r5, [r3, #0]
 8006f80:	e7e7      	b.n	8006f52 <HAL_InitTick+0x52>
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800
 8006f88:	431bde83 	.word	0x431bde83
 8006f8c:	20005f4c 	.word	0x20005f4c
 8006f90:	40014400 	.word	0x40014400
 8006f94:	20000004 	.word	0x20000004

08006f98 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f98:	4770      	bx	lr

08006f9a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f9a:	e7fe      	b.n	8006f9a <HardFault_Handler>

08006f9c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f9c:	e7fe      	b.n	8006f9c <MemManage_Handler>

08006f9e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f9e:	e7fe      	b.n	8006f9e <BusFault_Handler>

08006fa0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fa0:	e7fe      	b.n	8006fa0 <UsageFault_Handler>

08006fa2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fa2:	4770      	bx	lr

08006fa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006fa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006fa6:	4803      	ldr	r0, [pc, #12]	; (8006fb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006fa8:	f7fc fc81 	bl	80038ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8006fac:	4802      	ldr	r0, [pc, #8]	; (8006fb8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8006fae:	f7fc fc7e 	bl	80038ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006fb2:	bd08      	pop	{r3, pc}
 8006fb4:	20005f94 	.word	0x20005f94
 8006fb8:	20005f4c 	.word	0x20005f4c

08006fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006fbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006fbe:	4802      	ldr	r0, [pc, #8]	; (8006fc8 <TIM2_IRQHandler+0xc>)
 8006fc0:	f7fc fc75 	bl	80038ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006fc4:	bd08      	pop	{r3, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20005fdc 	.word	0x20005fdc

08006fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006fcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006fce:	4802      	ldr	r0, [pc, #8]	; (8006fd8 <TIM3_IRQHandler+0xc>)
 8006fd0:	f7fc fc6d 	bl	80038ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006fd4:	bd08      	pop	{r3, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20006024 	.word	0x20006024

08006fdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006fdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006fde:	4802      	ldr	r0, [pc, #8]	; (8006fe8 <TIM4_IRQHandler+0xc>)
 8006fe0:	f7fc fc65 	bl	80038ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006fe4:	bd08      	pop	{r3, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000606c 	.word	0x2000606c

08006fec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006fee:	4802      	ldr	r0, [pc, #8]	; (8006ff8 <SDIO_IRQHandler+0xc>)
 8006ff0:	f7fc fab2 	bl	8003558 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006ff4:	bd08      	pop	{r3, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20005e08 	.word	0x20005e08

08006ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ffe:	4802      	ldr	r0, [pc, #8]	; (8007008 <DMA2_Stream0_IRQHandler+0xc>)
 8007000:	f7fa fb7c 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007004:	bd08      	pop	{r3, pc}
 8007006:	bf00      	nop
 8007008:	20003fb8 	.word	0x20003fb8

0800700c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800700c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800700e:	4802      	ldr	r0, [pc, #8]	; (8007018 <DMA2_Stream3_IRQHandler+0xc>)
 8007010:	f7fa fb74 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007014:	bd08      	pop	{r3, pc}
 8007016:	bf00      	nop
 8007018:	20005e8c 	.word	0x20005e8c

0800701c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800701c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800701e:	4802      	ldr	r0, [pc, #8]	; (8007028 <DMA2_Stream6_IRQHandler+0xc>)
 8007020:	f7fa fb6c 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007024:	bd08      	pop	{r3, pc}
 8007026:	bf00      	nop
 8007028:	20005eec 	.word	0x20005eec

0800702c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800702c:	490f      	ldr	r1, [pc, #60]	; (800706c <SystemInit+0x40>)
 800702e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007032:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <SystemInit+0x44>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007044:	2000      	movs	r0, #0
 8007046:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800704e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007052:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007054:	4a07      	ldr	r2, [pc, #28]	; (8007074 <SystemInit+0x48>)
 8007056:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800705e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007060:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007066:	608b      	str	r3, [r1, #8]
#endif
}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	e000ed00 	.word	0xe000ed00
 8007070:	40023800 	.word	0x40023800
 8007074:	24003010 	.word	0x24003010

08007078 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007078:	b500      	push	{lr}
 800707a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800707c:	2300      	movs	r3, #0
 800707e:	9302      	str	r3, [sp, #8]
 8007080:	9303      	str	r3, [sp, #12]
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800708a:	4816      	ldr	r0, [pc, #88]	; (80070e4 <MX_TIM1_Init+0x6c>)
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <MX_TIM1_Init+0x70>)
 800708e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 1500;
 8007090:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007094:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007096:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8007098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800709c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800709e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80070a0:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80070a6:	f7fc fd23 	bl	8003af0 <HAL_TIM_Base_Init>
 80070aa:	b990      	cbnz	r0, 80070d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070b0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80070b2:	a902      	add	r1, sp, #8
 80070b4:	480b      	ldr	r0, [pc, #44]	; (80070e4 <MX_TIM1_Init+0x6c>)
 80070b6:	f7fc fe20 	bl	8003cfa <HAL_TIM_ConfigClockSource>
 80070ba:	b968      	cbnz	r0, 80070d8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070bc:	2300      	movs	r3, #0
 80070be:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070c0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80070c2:	4669      	mov	r1, sp
 80070c4:	4807      	ldr	r0, [pc, #28]	; (80070e4 <MX_TIM1_Init+0x6c>)
 80070c6:	f7fc ff61 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 80070ca:	b940      	cbnz	r0, 80070de <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80070cc:	b007      	add	sp, #28
 80070ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80070d2:	f7ff fc3b 	bl	800694c <Error_Handler>
 80070d6:	e7e9      	b.n	80070ac <MX_TIM1_Init+0x34>
    Error_Handler();
 80070d8:	f7ff fc38 	bl	800694c <Error_Handler>
 80070dc:	e7ee      	b.n	80070bc <MX_TIM1_Init+0x44>
    Error_Handler();
 80070de:	f7ff fc35 	bl	800694c <Error_Handler>
}
 80070e2:	e7f3      	b.n	80070cc <MX_TIM1_Init+0x54>
 80070e4:	20005f94 	.word	0x20005f94
 80070e8:	40010000 	.word	0x40010000

080070ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80070ec:	b500      	push	{lr}
 80070ee:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070f0:	2300      	movs	r3, #0
 80070f2:	9306      	str	r3, [sp, #24]
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007106:	4821      	ldr	r0, [pc, #132]	; (800718c <MX_TIM2_Init+0xa0>)
 8007108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800710c:	6482      	str	r2, [r0, #72]	; 0x48
  htim2.Init.Prescaler = 55;
 800710e:	2237      	movs	r2, #55	; 0x37
 8007110:	64c2      	str	r2, [r0, #76]	; 0x4c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007112:	6503      	str	r3, [r0, #80]	; 0x50
  htim2.Init.Period = 65535;
 8007114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007118:	6542      	str	r2, [r0, #84]	; 0x54
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800711a:	6583      	str	r3, [r0, #88]	; 0x58
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800711c:	2380      	movs	r3, #128	; 0x80
 800711e:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007120:	3048      	adds	r0, #72	; 0x48
 8007122:	f7fc fce5 	bl	8003af0 <HAL_TIM_Base_Init>
 8007126:	bb08      	cbnz	r0, 800716c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800712e:	a906      	add	r1, sp, #24
 8007130:	4817      	ldr	r0, [pc, #92]	; (8007190 <MX_TIM2_Init+0xa4>)
 8007132:	f7fc fde2 	bl	8003cfa <HAL_TIM_ConfigClockSource>
 8007136:	b9e0      	cbnz	r0, 8007172 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8007138:	4815      	ldr	r0, [pc, #84]	; (8007190 <MX_TIM2_Init+0xa4>)
 800713a:	f7fc fd05 	bl	8003b48 <HAL_TIM_IC_Init>
 800713e:	b9d8      	cbnz	r0, 8007178 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007140:	2300      	movs	r3, #0
 8007142:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007144:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007146:	a904      	add	r1, sp, #16
 8007148:	4811      	ldr	r0, [pc, #68]	; (8007190 <MX_TIM2_Init+0xa4>)
 800714a:	f7fc ff1f 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 800714e:	b9b0      	cbnz	r0, 800717e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007150:	2200      	movs	r2, #0
 8007152:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007154:	2301      	movs	r3, #1
 8007156:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007158:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800715a:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800715c:	4669      	mov	r1, sp
 800715e:	480c      	ldr	r0, [pc, #48]	; (8007190 <MX_TIM2_Init+0xa4>)
 8007160:	f7fc fd5c 	bl	8003c1c <HAL_TIM_IC_ConfigChannel>
 8007164:	b970      	cbnz	r0, 8007184 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007166:	b00b      	add	sp, #44	; 0x2c
 8007168:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800716c:	f7ff fbee 	bl	800694c <Error_Handler>
 8007170:	e7da      	b.n	8007128 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8007172:	f7ff fbeb 	bl	800694c <Error_Handler>
 8007176:	e7df      	b.n	8007138 <MX_TIM2_Init+0x4c>
    Error_Handler();
 8007178:	f7ff fbe8 	bl	800694c <Error_Handler>
 800717c:	e7e0      	b.n	8007140 <MX_TIM2_Init+0x54>
    Error_Handler();
 800717e:	f7ff fbe5 	bl	800694c <Error_Handler>
 8007182:	e7e5      	b.n	8007150 <MX_TIM2_Init+0x64>
    Error_Handler();
 8007184:	f7ff fbe2 	bl	800694c <Error_Handler>
}
 8007188:	e7ed      	b.n	8007166 <MX_TIM2_Init+0x7a>
 800718a:	bf00      	nop
 800718c:	20005f94 	.word	0x20005f94
 8007190:	20005fdc 	.word	0x20005fdc

08007194 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007194:	b500      	push	{lr}
 8007196:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007198:	2300      	movs	r3, #0
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	9308      	str	r3, [sp, #32]
 80071a0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	9302      	str	r3, [sp, #8]
 80071ac:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071ae:	4823      	ldr	r0, [pc, #140]	; (800723c <MX_TIM3_Init+0xa8>)
 80071b0:	4a23      	ldr	r2, [pc, #140]	; (8007240 <MX_TIM3_Init+0xac>)
 80071b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  htim3.Init.Prescaler = 55;
 80071b6:	2237      	movs	r2, #55	; 0x37
 80071b8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071bc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim3.Init.Period = 65535;
 80071c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071c4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071c8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071cc:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80071d0:	3090      	adds	r0, #144	; 0x90
 80071d2:	f7fc fc8d 	bl	8003af0 <HAL_TIM_Base_Init>
 80071d6:	bb08      	cbnz	r0, 800721c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071dc:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80071de:	a906      	add	r1, sp, #24
 80071e0:	4818      	ldr	r0, [pc, #96]	; (8007244 <MX_TIM3_Init+0xb0>)
 80071e2:	f7fc fd8a 	bl	8003cfa <HAL_TIM_ConfigClockSource>
 80071e6:	b9e0      	cbnz	r0, 8007222 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80071e8:	4816      	ldr	r0, [pc, #88]	; (8007244 <MX_TIM3_Init+0xb0>)
 80071ea:	f7fc fcad 	bl	8003b48 <HAL_TIM_IC_Init>
 80071ee:	b9d8      	cbnz	r0, 8007228 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071f0:	2300      	movs	r3, #0
 80071f2:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071f4:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80071f6:	a904      	add	r1, sp, #16
 80071f8:	4812      	ldr	r0, [pc, #72]	; (8007244 <MX_TIM3_Init+0xb0>)
 80071fa:	f7fc fec7 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 80071fe:	b9b0      	cbnz	r0, 800722e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007200:	2200      	movs	r2, #0
 8007202:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007204:	2301      	movs	r3, #1
 8007206:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007208:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800720a:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800720c:	4669      	mov	r1, sp
 800720e:	480d      	ldr	r0, [pc, #52]	; (8007244 <MX_TIM3_Init+0xb0>)
 8007210:	f7fc fd04 	bl	8003c1c <HAL_TIM_IC_ConfigChannel>
 8007214:	b970      	cbnz	r0, 8007234 <MX_TIM3_Init+0xa0>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007216:	b00b      	add	sp, #44	; 0x2c
 8007218:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800721c:	f7ff fb96 	bl	800694c <Error_Handler>
 8007220:	e7da      	b.n	80071d8 <MX_TIM3_Init+0x44>
    Error_Handler();
 8007222:	f7ff fb93 	bl	800694c <Error_Handler>
 8007226:	e7df      	b.n	80071e8 <MX_TIM3_Init+0x54>
    Error_Handler();
 8007228:	f7ff fb90 	bl	800694c <Error_Handler>
 800722c:	e7e0      	b.n	80071f0 <MX_TIM3_Init+0x5c>
    Error_Handler();
 800722e:	f7ff fb8d 	bl	800694c <Error_Handler>
 8007232:	e7e5      	b.n	8007200 <MX_TIM3_Init+0x6c>
    Error_Handler();
 8007234:	f7ff fb8a 	bl	800694c <Error_Handler>
}
 8007238:	e7ed      	b.n	8007216 <MX_TIM3_Init+0x82>
 800723a:	bf00      	nop
 800723c:	20005f94 	.word	0x20005f94
 8007240:	40000400 	.word	0x40000400
 8007244:	20006024 	.word	0x20006024

08007248 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007248:	b500      	push	{lr}
 800724a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800724c:	2300      	movs	r3, #0
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800725a:	4819      	ldr	r0, [pc, #100]	; (80072c0 <MX_TIM4_Init+0x78>)
 800725c:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <MX_TIM4_Init+0x7c>)
 800725e:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  htim4.Init.Prescaler = 0;
 8007262:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007266:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  htim4.Init.Period = 65535;
 800726a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800726e:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007272:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007276:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800727a:	30d8      	adds	r0, #216	; 0xd8
 800727c:	f7fc fc64 	bl	8003b48 <HAL_TIM_IC_Init>
 8007280:	b9a8      	cbnz	r0, 80072ae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007282:	2300      	movs	r3, #0
 8007284:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007286:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007288:	a904      	add	r1, sp, #16
 800728a:	480f      	ldr	r0, [pc, #60]	; (80072c8 <MX_TIM4_Init+0x80>)
 800728c:	f7fc fe7e 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8007290:	b980      	cbnz	r0, 80072b4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007292:	2200      	movs	r2, #0
 8007294:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007296:	2301      	movs	r3, #1
 8007298:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800729a:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800729c:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800729e:	4669      	mov	r1, sp
 80072a0:	4809      	ldr	r0, [pc, #36]	; (80072c8 <MX_TIM4_Init+0x80>)
 80072a2:	f7fc fcbb 	bl	8003c1c <HAL_TIM_IC_ConfigChannel>
 80072a6:	b940      	cbnz	r0, 80072ba <MX_TIM4_Init+0x72>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80072a8:	b007      	add	sp, #28
 80072aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80072ae:	f7ff fb4d 	bl	800694c <Error_Handler>
 80072b2:	e7e6      	b.n	8007282 <MX_TIM4_Init+0x3a>
    Error_Handler();
 80072b4:	f7ff fb4a 	bl	800694c <Error_Handler>
 80072b8:	e7eb      	b.n	8007292 <MX_TIM4_Init+0x4a>
    Error_Handler();
 80072ba:	f7ff fb47 	bl	800694c <Error_Handler>
}
 80072be:	e7f3      	b.n	80072a8 <MX_TIM4_Init+0x60>
 80072c0:	20005f94 	.word	0x20005f94
 80072c4:	40000800 	.word	0x40000800
 80072c8:	2000606c 	.word	0x2000606c

080072cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80072cc:	b510      	push	{r4, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d0:	2300      	movs	r3, #0
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	9306      	str	r3, [sp, #24]
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 80072dc:	6803      	ldr	r3, [r0, #0]
 80072de:	4a39      	ldr	r2, [pc, #228]	; (80073c4 <HAL_TIM_Base_MspInit+0xf8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e8:	d018      	beq.n	800731c <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80072ea:	4a37      	ldr	r2, [pc, #220]	; (80073c8 <HAL_TIM_Base_MspInit+0xfc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d040      	beq.n	8007372 <HAL_TIM_Base_MspInit+0xa6>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80072f0:	b00a      	add	sp, #40	; 0x28
 80072f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072f4:	2200      	movs	r2, #0
 80072f6:	9200      	str	r2, [sp, #0]
 80072f8:	4b34      	ldr	r3, [pc, #208]	; (80073cc <HAL_TIM_Base_MspInit+0x100>)
 80072fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80072fc:	f041 0101 	orr.w	r1, r1, #1
 8007300:	6459      	str	r1, [r3, #68]	; 0x44
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800730c:	2105      	movs	r1, #5
 800730e:	2019      	movs	r0, #25
 8007310:	f7fa f880 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007314:	2019      	movs	r0, #25
 8007316:	f7fa f8b5 	bl	8001484 <HAL_NVIC_EnableIRQ>
 800731a:	e7e9      	b.n	80072f0 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800731c:	2400      	movs	r4, #0
 800731e:	9401      	str	r4, [sp, #4]
 8007320:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	641a      	str	r2, [r3, #64]	; 0x40
 800732c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732e:	f002 0201 	and.w	r2, r2, #1
 8007332:	9201      	str	r2, [sp, #4]
 8007334:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007336:	9402      	str	r4, [sp, #8]
 8007338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800734a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800734e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007350:	2302      	movs	r3, #2
 8007352:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007354:	2301      	movs	r3, #1
 8007356:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007358:	a905      	add	r1, sp, #20
 800735a:	481d      	ldr	r0, [pc, #116]	; (80073d0 <HAL_TIM_Base_MspInit+0x104>)
 800735c:	f7fa fabe 	bl	80018dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007360:	4622      	mov	r2, r4
 8007362:	2105      	movs	r1, #5
 8007364:	201c      	movs	r0, #28
 8007366:	f7fa f855 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800736a:	201c      	movs	r0, #28
 800736c:	f7fa f88a 	bl	8001484 <HAL_NVIC_EnableIRQ>
 8007370:	e7be      	b.n	80072f0 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007372:	2400      	movs	r4, #0
 8007374:	9403      	str	r4, [sp, #12]
 8007376:	4b15      	ldr	r3, [pc, #84]	; (80073cc <HAL_TIM_Base_MspInit+0x100>)
 8007378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737a:	f042 0202 	orr.w	r2, r2, #2
 800737e:	641a      	str	r2, [r3, #64]	; 0x40
 8007380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007382:	f002 0202 	and.w	r2, r2, #2
 8007386:	9203      	str	r2, [sp, #12]
 8007388:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800738a:	9404      	str	r4, [sp, #16]
 800738c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738e:	f042 0204 	orr.w	r2, r2, #4
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800739e:	2340      	movs	r3, #64	; 0x40
 80073a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a2:	2302      	movs	r3, #2
 80073a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073a8:	a905      	add	r1, sp, #20
 80073aa:	480a      	ldr	r0, [pc, #40]	; (80073d4 <HAL_TIM_Base_MspInit+0x108>)
 80073ac:	f7fa fa96 	bl	80018dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80073b0:	4622      	mov	r2, r4
 80073b2:	2105      	movs	r1, #5
 80073b4:	201d      	movs	r0, #29
 80073b6:	f7fa f82d 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80073ba:	201d      	movs	r0, #29
 80073bc:	f7fa f862 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 80073c0:	e796      	b.n	80072f0 <HAL_TIM_Base_MspInit+0x24>
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40023800 	.word	0x40023800
 80073d0:	40020000 	.word	0x40020000
 80073d4:	40020800 	.word	0x40020800

080073d8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80073d8:	b510      	push	{r4, lr}
 80073da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073dc:	2300      	movs	r3, #0
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	9306      	str	r3, [sp, #24]
 80073e6:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM4)
 80073e8:	6802      	ldr	r2, [r0, #0]
 80073ea:	4b17      	ldr	r3, [pc, #92]	; (8007448 <HAL_TIM_IC_MspInit+0x70>)
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80073f0:	b008      	add	sp, #32
 80073f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80073f4:	2400      	movs	r4, #0
 80073f6:	9401      	str	r4, [sp, #4]
 80073f8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80073fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073fe:	f042 0204 	orr.w	r2, r2, #4
 8007402:	641a      	str	r2, [r3, #64]	; 0x40
 8007404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007406:	f002 0204 	and.w	r2, r2, #4
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800740e:	9402      	str	r4, [sp, #8]
 8007410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007412:	f042 0202 	orr.w	r2, r2, #2
 8007416:	631a      	str	r2, [r3, #48]	; 0x30
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007422:	2340      	movs	r3, #64	; 0x40
 8007424:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007426:	2302      	movs	r3, #2
 8007428:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800742a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800742c:	a903      	add	r1, sp, #12
 800742e:	4807      	ldr	r0, [pc, #28]	; (800744c <HAL_TIM_IC_MspInit+0x74>)
 8007430:	f7fa fa54 	bl	80018dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8007434:	4622      	mov	r2, r4
 8007436:	2105      	movs	r1, #5
 8007438:	201e      	movs	r0, #30
 800743a:	f7f9 ffeb 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800743e:	201e      	movs	r0, #30
 8007440:	f7fa f820 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 8007444:	e7d4      	b.n	80073f0 <HAL_TIM_IC_MspInit+0x18>
 8007446:	bf00      	nop
 8007448:	40000800 	.word	0x40000800
 800744c:	40020400 	.word	0x40020400

08007450 <HAL_TimestampUpdate_Callback>:

// Update the seconds
// We Elapse a Period at a frequency of 1Hz
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){

	if(htim == &htim1){
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <HAL_TimestampUpdate_Callback+0x20>)
 8007452:	4283      	cmp	r3, r0
 8007454:	d000      	beq.n	8007458 <HAL_TimestampUpdate_Callback+0x8>
 8007456:	4770      	bx	lr
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){
 8007458:	b410      	push	{r4}
		time_delta_var.seconds++;
 800745a:	4c06      	ldr	r4, [pc, #24]	; (8007474 <HAL_TimestampUpdate_Callback+0x24>)
 800745c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007460:	1c50      	adds	r0, r2, #1
 8007462:	f143 0100 	adc.w	r1, r3, #0
 8007466:	e9c4 0100 	strd	r0, r1, [r4]
	}

}
 800746a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20005f94 	.word	0x20005f94
 8007474:	200060b8 	.word	0x200060b8

08007478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007478:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800747a:	480a      	ldr	r0, [pc, #40]	; (80074a4 <MX_USART1_UART_Init+0x2c>)
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <MX_USART1_UART_Init+0x30>)
 800747e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8007480:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007484:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007486:	2300      	movs	r3, #0
 8007488:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800748a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800748c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800748e:	220c      	movs	r2, #12
 8007490:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007492:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007494:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007496:	f7fc fe49 	bl	800412c <HAL_UART_Init>
 800749a:	b900      	cbnz	r0, 800749e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800749c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800749e:	f7ff fa55 	bl	800694c <Error_Handler>
}
 80074a2:	e7fb      	b.n	800749c <MX_USART1_UART_Init+0x24>
 80074a4:	200060d8 	.word	0x200060d8
 80074a8:	40011000 	.word	0x40011000

080074ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80074ac:	b500      	push	{lr}
 80074ae:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b0:	2300      	movs	r3, #0
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	9306      	str	r3, [sp, #24]
 80074ba:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 80074bc:	6802      	ldr	r2, [r0, #0]
 80074be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074c2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80074ca:	b009      	add	sp, #36	; 0x24
 80074cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80074d0:	2100      	movs	r1, #0
 80074d2:	9101      	str	r1, [sp, #4]
 80074d4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	f042 0210 	orr.w	r2, r2, #16
 80074de:	645a      	str	r2, [r3, #68]	; 0x44
 80074e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e2:	f002 0210 	and.w	r2, r2, #16
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ea:	9102      	str	r1, [sp, #8]
 80074ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	9302      	str	r3, [sp, #8]
 80074fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80074fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007502:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007504:	2302      	movs	r3, #2
 8007506:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007508:	2303      	movs	r3, #3
 800750a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800750c:	2307      	movs	r3, #7
 800750e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007510:	a903      	add	r1, sp, #12
 8007512:	4802      	ldr	r0, [pc, #8]	; (800751c <HAL_UART_MspInit+0x70>)
 8007514:	f7fa f9e2 	bl	80018dc <HAL_GPIO_Init>
}
 8007518:	e7d7      	b.n	80074ca <HAL_UART_MspInit+0x1e>
 800751a:	bf00      	nop
 800751c:	40020000 	.word	0x40020000

08007520 <HAL_TIM_IC_CaptureCallback>:
 * @brief interrupt on rising edge of wheel speed pins. Puts most recently captred value in circular buffer
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	// Timer Channel 1, PA8 -> Rear Right Wheel

	if(htim->Instance == TIM2){
 8007520:	6803      	ldr	r3, [r0, #0]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d003      	beq.n	8007530 <HAL_TIM_IC_CaptureCallback+0x10>
		periodFRprev = periodFRcurr;						// Save the old value
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
		overflow_cnt_FR = 0;								// Reset the overflow counter.
	}
	if(htim->Instance == TIM3){
 8007528:	4a13      	ldr	r2, [pc, #76]	; (8007578 <HAL_TIM_IC_CaptureCallback+0x58>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d012      	beq.n	8007554 <HAL_TIM_IC_CaptureCallback+0x34>
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
		overflow_cnt_FL = 0;								// Reset the overflow counter.
	}

}
 800752e:	4770      	bx	lr
		periodFRprev = periodFRcurr;						// Save the old value
 8007530:	4a12      	ldr	r2, [pc, #72]	; (800757c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8007532:	f8d2 14cc 	ldr.w	r1, [r2, #1228]	; 0x4cc
 8007536:	f8c2 14d0 	str.w	r1, [r2, #1232]	; 0x4d0
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
 800753a:	4911      	ldr	r1, [pc, #68]	; (8007580 <HAL_TIM_IC_CaptureCallback+0x60>)
 800753c:	6809      	ldr	r1, [r1, #0]
 800753e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007540:	f8c2 14cc 	str.w	r1, [r2, #1228]	; 0x4cc
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
 8007544:	f8d2 14ec 	ldr.w	r1, [r2, #1260]	; 0x4ec
 8007548:	f8c2 14c8 	str.w	r1, [r2, #1224]	; 0x4c8
		overflow_cnt_FR = 0;								// Reset the overflow counter.
 800754c:	2100      	movs	r1, #0
 800754e:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8007552:	e7e9      	b.n	8007528 <HAL_TIM_IC_CaptureCallback+0x8>
		periodFLprev = periodFLcurr;						// Save the old value
 8007554:	4b09      	ldr	r3, [pc, #36]	; (800757c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8007556:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 800755a:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <HAL_TIM_IC_CaptureCallback+0x64>)
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007564:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
 8007568:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800756c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
		overflow_cnt_FL = 0;								// Reset the overflow counter.
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 8007576:	e7da      	b.n	800752e <HAL_TIM_IC_CaptureCallback+0xe>
 8007578:	40000400 	.word	0x40000400
 800757c:	2000611c 	.word	0x2000611c
 8007580:	20005fdc 	.word	0x20005fdc
 8007584:	20006024 	.word	0x20006024

08007588 <HAL_FR_Wheelspeed_Overflow_Callback>:


//timer 2 interrupt handler
void HAL_FR_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FR++;
 8007588:	4a03      	ldr	r2, [pc, #12]	; (8007598 <HAL_FR_Wheelspeed_Overflow_Callback+0x10>)
 800758a:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800758e:	3301      	adds	r3, #1
 8007590:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2000611c 	.word	0x2000611c

0800759c <HAL_FL_Wheelspeed_Overflow_Callback>:

// Timer 3 interrupt handler
void HAL_FL_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FL++;										// increment the overflow
 800759c:	4a03      	ldr	r2, [pc, #12]	; (80075ac <HAL_FL_Wheelspeed_Overflow_Callback+0x10>)
 800759e:	f8d2 34f0 	ldr.w	r3, [r2, #1264]	; 0x4f0
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	2000611c 	.word	0x2000611c

080075b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80075b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075b6:	e003      	b.n	80075c0 <LoopCopyDataInit>

080075b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075be:	3104      	adds	r1, #4

080075c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075c0:	480b      	ldr	r0, [pc, #44]	; (80075f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075c2:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075c8:	d3f6      	bcc.n	80075b8 <CopyDataInit>
  ldr  r2, =_sbss
 80075ca:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075cc:	e002      	b.n	80075d4 <LoopFillZerobss>

080075ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075d0:	f842 3b04 	str.w	r3, [r2], #4

080075d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075d4:	4b09      	ldr	r3, [pc, #36]	; (80075fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075d8:	d3f9      	bcc.n	80075ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80075da:	f7ff fd27 	bl	800702c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075de:	f000 f907 	bl	80077f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075e2:	f7ff f94f 	bl	8006884 <main>
  bx  lr    
 80075e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80075ec:	0800a674 	.word	0x0800a674
  ldr  r0, =_sdata
 80075f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80075f4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80075f8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80075fc:	20006634 	.word	0x20006634

08007600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007600:	e7fe      	b.n	8007600 <ADC_IRQHandler>
	...

08007604 <std>:
 8007604:	2300      	movs	r3, #0
 8007606:	b510      	push	{r4, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	e9c0 3300 	strd	r3, r3, [r0]
 800760e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007612:	6083      	str	r3, [r0, #8]
 8007614:	8181      	strh	r1, [r0, #12]
 8007616:	6643      	str	r3, [r0, #100]	; 0x64
 8007618:	81c2      	strh	r2, [r0, #14]
 800761a:	6183      	str	r3, [r0, #24]
 800761c:	4619      	mov	r1, r3
 800761e:	2208      	movs	r2, #8
 8007620:	305c      	adds	r0, #92	; 0x5c
 8007622:	f000 f91a 	bl	800785a <memset>
 8007626:	4b05      	ldr	r3, [pc, #20]	; (800763c <std+0x38>)
 8007628:	6263      	str	r3, [r4, #36]	; 0x24
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <std+0x3c>)
 800762c:	62a3      	str	r3, [r4, #40]	; 0x28
 800762e:	4b05      	ldr	r3, [pc, #20]	; (8007644 <std+0x40>)
 8007630:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <std+0x44>)
 8007634:	6224      	str	r4, [r4, #32]
 8007636:	6323      	str	r3, [r4, #48]	; 0x30
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	0800835d 	.word	0x0800835d
 8007640:	0800837f 	.word	0x0800837f
 8007644:	080083b7 	.word	0x080083b7
 8007648:	080083db 	.word	0x080083db

0800764c <_cleanup_r>:
 800764c:	4901      	ldr	r1, [pc, #4]	; (8007654 <_cleanup_r+0x8>)
 800764e:	f000 b8af 	b.w	80077b0 <_fwalk_reent>
 8007652:	bf00      	nop
 8007654:	08009229 	.word	0x08009229

08007658 <__sfmoreglue>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	2268      	movs	r2, #104	; 0x68
 800765c:	1e4d      	subs	r5, r1, #1
 800765e:	4355      	muls	r5, r2
 8007660:	460e      	mov	r6, r1
 8007662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007666:	f000 f921 	bl	80078ac <_malloc_r>
 800766a:	4604      	mov	r4, r0
 800766c:	b140      	cbz	r0, 8007680 <__sfmoreglue+0x28>
 800766e:	2100      	movs	r1, #0
 8007670:	e9c0 1600 	strd	r1, r6, [r0]
 8007674:	300c      	adds	r0, #12
 8007676:	60a0      	str	r0, [r4, #8]
 8007678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800767c:	f000 f8ed 	bl	800785a <memset>
 8007680:	4620      	mov	r0, r4
 8007682:	bd70      	pop	{r4, r5, r6, pc}

08007684 <__sfp_lock_acquire>:
 8007684:	4801      	ldr	r0, [pc, #4]	; (800768c <__sfp_lock_acquire+0x8>)
 8007686:	f000 b8d8 	b.w	800783a <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	20006621 	.word	0x20006621

08007690 <__sfp_lock_release>:
 8007690:	4801      	ldr	r0, [pc, #4]	; (8007698 <__sfp_lock_release+0x8>)
 8007692:	f000 b8d3 	b.w	800783c <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	20006621 	.word	0x20006621

0800769c <__sinit_lock_acquire>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__sinit_lock_acquire+0x8>)
 800769e:	f000 b8cc 	b.w	800783a <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	20006622 	.word	0x20006622

080076a8 <__sinit_lock_release>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sinit_lock_release+0x8>)
 80076aa:	f000 b8c7 	b.w	800783c <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	20006622 	.word	0x20006622

080076b4 <__sinit>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	f7ff fff0 	bl	800769c <__sinit_lock_acquire>
 80076bc:	69a3      	ldr	r3, [r4, #24]
 80076be:	b11b      	cbz	r3, 80076c8 <__sinit+0x14>
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	f7ff bff0 	b.w	80076a8 <__sinit_lock_release>
 80076c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076cc:	6523      	str	r3, [r4, #80]	; 0x50
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <__sinit+0x68>)
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <__sinit+0x6c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	bf04      	itt	eq
 80076da:	2301      	moveq	r3, #1
 80076dc:	61a3      	streq	r3, [r4, #24]
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 f820 	bl	8007724 <__sfp>
 80076e4:	6060      	str	r0, [r4, #4]
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 f81c 	bl	8007724 <__sfp>
 80076ec:	60a0      	str	r0, [r4, #8]
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 f818 	bl	8007724 <__sfp>
 80076f4:	2200      	movs	r2, #0
 80076f6:	60e0      	str	r0, [r4, #12]
 80076f8:	2104      	movs	r1, #4
 80076fa:	6860      	ldr	r0, [r4, #4]
 80076fc:	f7ff ff82 	bl	8007604 <std>
 8007700:	68a0      	ldr	r0, [r4, #8]
 8007702:	2201      	movs	r2, #1
 8007704:	2109      	movs	r1, #9
 8007706:	f7ff ff7d 	bl	8007604 <std>
 800770a:	68e0      	ldr	r0, [r4, #12]
 800770c:	2202      	movs	r2, #2
 800770e:	2112      	movs	r1, #18
 8007710:	f7ff ff78 	bl	8007604 <std>
 8007714:	2301      	movs	r3, #1
 8007716:	61a3      	str	r3, [r4, #24]
 8007718:	e7d2      	b.n	80076c0 <__sinit+0xc>
 800771a:	bf00      	nop
 800771c:	0800a2ec 	.word	0x0800a2ec
 8007720:	0800764d 	.word	0x0800764d

08007724 <__sfp>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	4607      	mov	r7, r0
 8007728:	f7ff ffac 	bl	8007684 <__sfp_lock_acquire>
 800772c:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <__sfp+0x84>)
 800772e:	681e      	ldr	r6, [r3, #0]
 8007730:	69b3      	ldr	r3, [r6, #24]
 8007732:	b913      	cbnz	r3, 800773a <__sfp+0x16>
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff ffbd 	bl	80076b4 <__sinit>
 800773a:	3648      	adds	r6, #72	; 0x48
 800773c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	d503      	bpl.n	800774c <__sfp+0x28>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	b30b      	cbz	r3, 800778c <__sfp+0x68>
 8007748:	6836      	ldr	r6, [r6, #0]
 800774a:	e7f7      	b.n	800773c <__sfp+0x18>
 800774c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007750:	b9d5      	cbnz	r5, 8007788 <__sfp+0x64>
 8007752:	4b16      	ldr	r3, [pc, #88]	; (80077ac <__sfp+0x88>)
 8007754:	60e3      	str	r3, [r4, #12]
 8007756:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800775a:	6665      	str	r5, [r4, #100]	; 0x64
 800775c:	f000 f86c 	bl	8007838 <__retarget_lock_init_recursive>
 8007760:	f7ff ff96 	bl	8007690 <__sfp_lock_release>
 8007764:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007768:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800776c:	6025      	str	r5, [r4, #0]
 800776e:	61a5      	str	r5, [r4, #24]
 8007770:	2208      	movs	r2, #8
 8007772:	4629      	mov	r1, r5
 8007774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007778:	f000 f86f 	bl	800785a <memset>
 800777c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007784:	4620      	mov	r0, r4
 8007786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007788:	3468      	adds	r4, #104	; 0x68
 800778a:	e7d9      	b.n	8007740 <__sfp+0x1c>
 800778c:	2104      	movs	r1, #4
 800778e:	4638      	mov	r0, r7
 8007790:	f7ff ff62 	bl	8007658 <__sfmoreglue>
 8007794:	4604      	mov	r4, r0
 8007796:	6030      	str	r0, [r6, #0]
 8007798:	2800      	cmp	r0, #0
 800779a:	d1d5      	bne.n	8007748 <__sfp+0x24>
 800779c:	f7ff ff78 	bl	8007690 <__sfp_lock_release>
 80077a0:	230c      	movs	r3, #12
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	e7ee      	b.n	8007784 <__sfp+0x60>
 80077a6:	bf00      	nop
 80077a8:	0800a2ec 	.word	0x0800a2ec
 80077ac:	ffff0001 	.word	0xffff0001

080077b0 <_fwalk_reent>:
 80077b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	4688      	mov	r8, r1
 80077b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077bc:	2700      	movs	r7, #0
 80077be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077c2:	f1b9 0901 	subs.w	r9, r9, #1
 80077c6:	d505      	bpl.n	80077d4 <_fwalk_reent+0x24>
 80077c8:	6824      	ldr	r4, [r4, #0]
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d1f7      	bne.n	80077be <_fwalk_reent+0xe>
 80077ce:	4638      	mov	r0, r7
 80077d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d907      	bls.n	80077ea <_fwalk_reent+0x3a>
 80077da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077de:	3301      	adds	r3, #1
 80077e0:	d003      	beq.n	80077ea <_fwalk_reent+0x3a>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	47c0      	blx	r8
 80077e8:	4307      	orrs	r7, r0
 80077ea:	3568      	adds	r5, #104	; 0x68
 80077ec:	e7e9      	b.n	80077c2 <_fwalk_reent+0x12>
	...

080077f0 <__libc_init_array>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	4d0d      	ldr	r5, [pc, #52]	; (8007828 <__libc_init_array+0x38>)
 80077f4:	4c0d      	ldr	r4, [pc, #52]	; (800782c <__libc_init_array+0x3c>)
 80077f6:	1b64      	subs	r4, r4, r5
 80077f8:	10a4      	asrs	r4, r4, #2
 80077fa:	2600      	movs	r6, #0
 80077fc:	42a6      	cmp	r6, r4
 80077fe:	d109      	bne.n	8007814 <__libc_init_array+0x24>
 8007800:	4d0b      	ldr	r5, [pc, #44]	; (8007830 <__libc_init_array+0x40>)
 8007802:	4c0c      	ldr	r4, [pc, #48]	; (8007834 <__libc_init_array+0x44>)
 8007804:	f002 fcfa 	bl	800a1fc <_init>
 8007808:	1b64      	subs	r4, r4, r5
 800780a:	10a4      	asrs	r4, r4, #2
 800780c:	2600      	movs	r6, #0
 800780e:	42a6      	cmp	r6, r4
 8007810:	d105      	bne.n	800781e <__libc_init_array+0x2e>
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	f855 3b04 	ldr.w	r3, [r5], #4
 8007818:	4798      	blx	r3
 800781a:	3601      	adds	r6, #1
 800781c:	e7ee      	b.n	80077fc <__libc_init_array+0xc>
 800781e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007822:	4798      	blx	r3
 8007824:	3601      	adds	r6, #1
 8007826:	e7f2      	b.n	800780e <__libc_init_array+0x1e>
 8007828:	0800a66c 	.word	0x0800a66c
 800782c:	0800a66c 	.word	0x0800a66c
 8007830:	0800a66c 	.word	0x0800a66c
 8007834:	0800a670 	.word	0x0800a670

08007838 <__retarget_lock_init_recursive>:
 8007838:	4770      	bx	lr

0800783a <__retarget_lock_acquire_recursive>:
 800783a:	4770      	bx	lr

0800783c <__retarget_lock_release_recursive>:
 800783c:	4770      	bx	lr

0800783e <memcpy>:
 800783e:	440a      	add	r2, r1
 8007840:	4291      	cmp	r1, r2
 8007842:	f100 33ff 	add.w	r3, r0, #4294967295
 8007846:	d100      	bne.n	800784a <memcpy+0xc>
 8007848:	4770      	bx	lr
 800784a:	b510      	push	{r4, lr}
 800784c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007854:	4291      	cmp	r1, r2
 8007856:	d1f9      	bne.n	800784c <memcpy+0xe>
 8007858:	bd10      	pop	{r4, pc}

0800785a <memset>:
 800785a:	4402      	add	r2, r0
 800785c:	4603      	mov	r3, r0
 800785e:	4293      	cmp	r3, r2
 8007860:	d100      	bne.n	8007864 <memset+0xa>
 8007862:	4770      	bx	lr
 8007864:	f803 1b01 	strb.w	r1, [r3], #1
 8007868:	e7f9      	b.n	800785e <memset+0x4>
	...

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0e      	ldr	r6, [pc, #56]	; (80078a8 <sbrk_aligned+0x3c>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f000 fd60 	bl	800833c <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 fd5b 	bl	800833c <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d00a      	beq.n	80078a0 <sbrk_aligned+0x34>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d007      	beq.n	80078a4 <sbrk_aligned+0x38>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fd50 	bl	800833c <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d101      	bne.n	80078a4 <sbrk_aligned+0x38>
 80078a0:	f04f 34ff 	mov.w	r4, #4294967295
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	20006628 	.word	0x20006628

080078ac <_malloc_r>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	1ccd      	adds	r5, r1, #3
 80078b2:	f025 0503 	bic.w	r5, r5, #3
 80078b6:	3508      	adds	r5, #8
 80078b8:	2d0c      	cmp	r5, #12
 80078ba:	bf38      	it	cc
 80078bc:	250c      	movcc	r5, #12
 80078be:	2d00      	cmp	r5, #0
 80078c0:	4607      	mov	r7, r0
 80078c2:	db01      	blt.n	80078c8 <_malloc_r+0x1c>
 80078c4:	42a9      	cmp	r1, r5
 80078c6:	d905      	bls.n	80078d4 <_malloc_r+0x28>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	2600      	movs	r6, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d4:	4e2e      	ldr	r6, [pc, #184]	; (8007990 <_malloc_r+0xe4>)
 80078d6:	f001 fd01 	bl	80092dc <__malloc_lock>
 80078da:	6833      	ldr	r3, [r6, #0]
 80078dc:	461c      	mov	r4, r3
 80078de:	bb34      	cbnz	r4, 800792e <_malloc_r+0x82>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff ffc2 	bl	800786c <sbrk_aligned>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	4604      	mov	r4, r0
 80078ec:	d14d      	bne.n	800798a <_malloc_r+0xde>
 80078ee:	6834      	ldr	r4, [r6, #0]
 80078f0:	4626      	mov	r6, r4
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d140      	bne.n	8007978 <_malloc_r+0xcc>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	4631      	mov	r1, r6
 80078fa:	4638      	mov	r0, r7
 80078fc:	eb04 0803 	add.w	r8, r4, r3
 8007900:	f000 fd1c 	bl	800833c <_sbrk_r>
 8007904:	4580      	cmp	r8, r0
 8007906:	d13a      	bne.n	800797e <_malloc_r+0xd2>
 8007908:	6821      	ldr	r1, [r4, #0]
 800790a:	3503      	adds	r5, #3
 800790c:	1a6d      	subs	r5, r5, r1
 800790e:	f025 0503 	bic.w	r5, r5, #3
 8007912:	3508      	adds	r5, #8
 8007914:	2d0c      	cmp	r5, #12
 8007916:	bf38      	it	cc
 8007918:	250c      	movcc	r5, #12
 800791a:	4629      	mov	r1, r5
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ffa5 	bl	800786c <sbrk_aligned>
 8007922:	3001      	adds	r0, #1
 8007924:	d02b      	beq.n	800797e <_malloc_r+0xd2>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	442b      	add	r3, r5
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	e00e      	b.n	800794c <_malloc_r+0xa0>
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	1b52      	subs	r2, r2, r5
 8007932:	d41e      	bmi.n	8007972 <_malloc_r+0xc6>
 8007934:	2a0b      	cmp	r2, #11
 8007936:	d916      	bls.n	8007966 <_malloc_r+0xba>
 8007938:	1961      	adds	r1, r4, r5
 800793a:	42a3      	cmp	r3, r4
 800793c:	6025      	str	r5, [r4, #0]
 800793e:	bf18      	it	ne
 8007940:	6059      	strne	r1, [r3, #4]
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	bf08      	it	eq
 8007946:	6031      	streq	r1, [r6, #0]
 8007948:	5162      	str	r2, [r4, r5]
 800794a:	604b      	str	r3, [r1, #4]
 800794c:	4638      	mov	r0, r7
 800794e:	f104 060b 	add.w	r6, r4, #11
 8007952:	f001 fcc9 	bl	80092e8 <__malloc_unlock>
 8007956:	f026 0607 	bic.w	r6, r6, #7
 800795a:	1d23      	adds	r3, r4, #4
 800795c:	1af2      	subs	r2, r6, r3
 800795e:	d0b6      	beq.n	80078ce <_malloc_r+0x22>
 8007960:	1b9b      	subs	r3, r3, r6
 8007962:	50a3      	str	r3, [r4, r2]
 8007964:	e7b3      	b.n	80078ce <_malloc_r+0x22>
 8007966:	6862      	ldr	r2, [r4, #4]
 8007968:	42a3      	cmp	r3, r4
 800796a:	bf0c      	ite	eq
 800796c:	6032      	streq	r2, [r6, #0]
 800796e:	605a      	strne	r2, [r3, #4]
 8007970:	e7ec      	b.n	800794c <_malloc_r+0xa0>
 8007972:	4623      	mov	r3, r4
 8007974:	6864      	ldr	r4, [r4, #4]
 8007976:	e7b2      	b.n	80078de <_malloc_r+0x32>
 8007978:	4634      	mov	r4, r6
 800797a:	6876      	ldr	r6, [r6, #4]
 800797c:	e7b9      	b.n	80078f2 <_malloc_r+0x46>
 800797e:	230c      	movs	r3, #12
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	4638      	mov	r0, r7
 8007984:	f001 fcb0 	bl	80092e8 <__malloc_unlock>
 8007988:	e7a1      	b.n	80078ce <_malloc_r+0x22>
 800798a:	6025      	str	r5, [r4, #0]
 800798c:	e7de      	b.n	800794c <_malloc_r+0xa0>
 800798e:	bf00      	nop
 8007990:	20006624 	.word	0x20006624

08007994 <__cvt>:
 8007994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	ec55 4b10 	vmov	r4, r5, d0
 800799c:	2d00      	cmp	r5, #0
 800799e:	460e      	mov	r6, r1
 80079a0:	4619      	mov	r1, r3
 80079a2:	462b      	mov	r3, r5
 80079a4:	bfbb      	ittet	lt
 80079a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079aa:	461d      	movlt	r5, r3
 80079ac:	2300      	movge	r3, #0
 80079ae:	232d      	movlt	r3, #45	; 0x2d
 80079b0:	700b      	strb	r3, [r1, #0]
 80079b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079b8:	4691      	mov	r9, r2
 80079ba:	f023 0820 	bic.w	r8, r3, #32
 80079be:	bfbc      	itt	lt
 80079c0:	4622      	movlt	r2, r4
 80079c2:	4614      	movlt	r4, r2
 80079c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079c8:	d005      	beq.n	80079d6 <__cvt+0x42>
 80079ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079ce:	d100      	bne.n	80079d2 <__cvt+0x3e>
 80079d0:	3601      	adds	r6, #1
 80079d2:	2102      	movs	r1, #2
 80079d4:	e000      	b.n	80079d8 <__cvt+0x44>
 80079d6:	2103      	movs	r1, #3
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	ab02      	add	r3, sp, #8
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	ec45 4b10 	vmov	d0, r4, r5
 80079e4:	4653      	mov	r3, sl
 80079e6:	4632      	mov	r2, r6
 80079e8:	f000 fdaa 	bl	8008540 <_dtoa_r>
 80079ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079f0:	4607      	mov	r7, r0
 80079f2:	d102      	bne.n	80079fa <__cvt+0x66>
 80079f4:	f019 0f01 	tst.w	r9, #1
 80079f8:	d022      	beq.n	8007a40 <__cvt+0xac>
 80079fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079fe:	eb07 0906 	add.w	r9, r7, r6
 8007a02:	d110      	bne.n	8007a26 <__cvt+0x92>
 8007a04:	783b      	ldrb	r3, [r7, #0]
 8007a06:	2b30      	cmp	r3, #48	; 0x30
 8007a08:	d10a      	bne.n	8007a20 <__cvt+0x8c>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f9 f879 	bl	8000b08 <__aeabi_dcmpeq>
 8007a16:	b918      	cbnz	r0, 8007a20 <__cvt+0x8c>
 8007a18:	f1c6 0601 	rsb	r6, r6, #1
 8007a1c:	f8ca 6000 	str.w	r6, [sl]
 8007a20:	f8da 3000 	ldr.w	r3, [sl]
 8007a24:	4499      	add	r9, r3
 8007a26:	2200      	movs	r2, #0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f9 f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a32:	b108      	cbz	r0, 8007a38 <__cvt+0xa4>
 8007a34:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a38:	2230      	movs	r2, #48	; 0x30
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	454b      	cmp	r3, r9
 8007a3e:	d307      	bcc.n	8007a50 <__cvt+0xbc>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a44:	1bdb      	subs	r3, r3, r7
 8007a46:	4638      	mov	r0, r7
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	b004      	add	sp, #16
 8007a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a50:	1c59      	adds	r1, r3, #1
 8007a52:	9103      	str	r1, [sp, #12]
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e7f0      	b.n	8007a3a <__cvt+0xa6>

08007a58 <__exponent>:
 8007a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	bfb8      	it	lt
 8007a60:	4249      	neglt	r1, r1
 8007a62:	f803 2b02 	strb.w	r2, [r3], #2
 8007a66:	bfb4      	ite	lt
 8007a68:	222d      	movlt	r2, #45	; 0x2d
 8007a6a:	222b      	movge	r2, #43	; 0x2b
 8007a6c:	2909      	cmp	r1, #9
 8007a6e:	7042      	strb	r2, [r0, #1]
 8007a70:	dd2a      	ble.n	8007ac8 <__exponent+0x70>
 8007a72:	f10d 0407 	add.w	r4, sp, #7
 8007a76:	46a4      	mov	ip, r4
 8007a78:	270a      	movs	r7, #10
 8007a7a:	46a6      	mov	lr, r4
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a82:	fb07 1516 	mls	r5, r7, r6, r1
 8007a86:	3530      	adds	r5, #48	; 0x30
 8007a88:	2a63      	cmp	r2, #99	; 0x63
 8007a8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a92:	4631      	mov	r1, r6
 8007a94:	dcf1      	bgt.n	8007a7a <__exponent+0x22>
 8007a96:	3130      	adds	r1, #48	; 0x30
 8007a98:	f1ae 0502 	sub.w	r5, lr, #2
 8007a9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007aa0:	1c44      	adds	r4, r0, #1
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4561      	cmp	r1, ip
 8007aa6:	d30a      	bcc.n	8007abe <__exponent+0x66>
 8007aa8:	f10d 0209 	add.w	r2, sp, #9
 8007aac:	eba2 020e 	sub.w	r2, r2, lr
 8007ab0:	4565      	cmp	r5, ip
 8007ab2:	bf88      	it	hi
 8007ab4:	2200      	movhi	r2, #0
 8007ab6:	4413      	add	r3, r2
 8007ab8:	1a18      	subs	r0, r3, r0
 8007aba:	b003      	add	sp, #12
 8007abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ac6:	e7ed      	b.n	8007aa4 <__exponent+0x4c>
 8007ac8:	2330      	movs	r3, #48	; 0x30
 8007aca:	3130      	adds	r1, #48	; 0x30
 8007acc:	7083      	strb	r3, [r0, #2]
 8007ace:	70c1      	strb	r1, [r0, #3]
 8007ad0:	1d03      	adds	r3, r0, #4
 8007ad2:	e7f1      	b.n	8007ab8 <__exponent+0x60>

08007ad4 <_printf_float>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	ed2d 8b02 	vpush	{d8}
 8007adc:	b08d      	sub	sp, #52	; 0x34
 8007ade:	460c      	mov	r4, r1
 8007ae0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ae4:	4616      	mov	r6, r2
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	4605      	mov	r5, r0
 8007aea:	f001 fbd9 	bl	80092a0 <_localeconv_r>
 8007aee:	f8d0 a000 	ldr.w	sl, [r0]
 8007af2:	4650      	mov	r0, sl
 8007af4:	f7f8 fb8c 	bl	8000210 <strlen>
 8007af8:	2300      	movs	r3, #0
 8007afa:	930a      	str	r3, [sp, #40]	; 0x28
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	f8d8 3000 	ldr.w	r3, [r8]
 8007b04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b08:	3307      	adds	r3, #7
 8007b0a:	f023 0307 	bic.w	r3, r3, #7
 8007b0e:	f103 0208 	add.w	r2, r3, #8
 8007b12:	f8c8 2000 	str.w	r2, [r8]
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b2c:	ee08 0a10 	vmov	s16, r0
 8007b30:	4b9f      	ldr	r3, [pc, #636]	; (8007db0 <_printf_float+0x2dc>)
 8007b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	f7f9 f817 	bl	8000b6c <__aeabi_dcmpun>
 8007b3e:	bb88      	cbnz	r0, 8007ba4 <_printf_float+0xd0>
 8007b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b44:	4b9a      	ldr	r3, [pc, #616]	; (8007db0 <_printf_float+0x2dc>)
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	f7f8 fff1 	bl	8000b30 <__aeabi_dcmple>
 8007b4e:	bb48      	cbnz	r0, 8007ba4 <_printf_float+0xd0>
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	f7f8 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8007b5c:	b110      	cbz	r0, 8007b64 <_printf_float+0x90>
 8007b5e:	232d      	movs	r3, #45	; 0x2d
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b64:	4b93      	ldr	r3, [pc, #588]	; (8007db4 <_printf_float+0x2e0>)
 8007b66:	4894      	ldr	r0, [pc, #592]	; (8007db8 <_printf_float+0x2e4>)
 8007b68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b6c:	bf94      	ite	ls
 8007b6e:	4698      	movls	r8, r3
 8007b70:	4680      	movhi	r8, r0
 8007b72:	2303      	movs	r3, #3
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	9b05      	ldr	r3, [sp, #20]
 8007b78:	f023 0204 	bic.w	r2, r3, #4
 8007b7c:	6022      	str	r2, [r4, #0]
 8007b7e:	f04f 0900 	mov.w	r9, #0
 8007b82:	9700      	str	r7, [sp, #0]
 8007b84:	4633      	mov	r3, r6
 8007b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 f9d8 	bl	8007f40 <_printf_common>
 8007b90:	3001      	adds	r0, #1
 8007b92:	f040 8090 	bne.w	8007cb6 <_printf_float+0x1e2>
 8007b96:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9a:	b00d      	add	sp, #52	; 0x34
 8007b9c:	ecbd 8b02 	vpop	{d8}
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 ffde 	bl	8000b6c <__aeabi_dcmpun>
 8007bb0:	b140      	cbz	r0, 8007bc4 <_printf_float+0xf0>
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfbc      	itt	lt
 8007bb8:	232d      	movlt	r3, #45	; 0x2d
 8007bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bbe:	487f      	ldr	r0, [pc, #508]	; (8007dbc <_printf_float+0x2e8>)
 8007bc0:	4b7f      	ldr	r3, [pc, #508]	; (8007dc0 <_printf_float+0x2ec>)
 8007bc2:	e7d1      	b.n	8007b68 <_printf_float+0x94>
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bca:	9206      	str	r2, [sp, #24]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	d13f      	bne.n	8007c50 <_printf_float+0x17c>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	9b05      	ldr	r3, [sp, #20]
 8007bd6:	6861      	ldr	r1, [r4, #4]
 8007bd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	ab0a      	add	r3, sp, #40	; 0x28
 8007be2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007be6:	ab09      	add	r3, sp, #36	; 0x24
 8007be8:	ec49 8b10 	vmov	d0, r8, r9
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	6022      	str	r2, [r4, #0]
 8007bf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7ff fecd 	bl	8007994 <__cvt>
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bfe:	2b47      	cmp	r3, #71	; 0x47
 8007c00:	4680      	mov	r8, r0
 8007c02:	d108      	bne.n	8007c16 <_printf_float+0x142>
 8007c04:	1cc8      	adds	r0, r1, #3
 8007c06:	db02      	blt.n	8007c0e <_printf_float+0x13a>
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	dd41      	ble.n	8007c92 <_printf_float+0x1be>
 8007c0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c12:	fa5f fb8b 	uxtb.w	fp, fp
 8007c16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c1a:	d820      	bhi.n	8007c5e <_printf_float+0x18a>
 8007c1c:	3901      	subs	r1, #1
 8007c1e:	465a      	mov	r2, fp
 8007c20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c24:	9109      	str	r1, [sp, #36]	; 0x24
 8007c26:	f7ff ff17 	bl	8007a58 <__exponent>
 8007c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2c:	1813      	adds	r3, r2, r0
 8007c2e:	2a01      	cmp	r2, #1
 8007c30:	4681      	mov	r9, r0
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	dc02      	bgt.n	8007c3c <_printf_float+0x168>
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	07d2      	lsls	r2, r2, #31
 8007c3a:	d501      	bpl.n	8007c40 <_printf_float+0x16c>
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	6123      	str	r3, [r4, #16]
 8007c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d09c      	beq.n	8007b82 <_printf_float+0xae>
 8007c48:	232d      	movs	r3, #45	; 0x2d
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4e:	e798      	b.n	8007b82 <_printf_float+0xae>
 8007c50:	9a06      	ldr	r2, [sp, #24]
 8007c52:	2a47      	cmp	r2, #71	; 0x47
 8007c54:	d1be      	bne.n	8007bd4 <_printf_float+0x100>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1bc      	bne.n	8007bd4 <_printf_float+0x100>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7b9      	b.n	8007bd2 <_printf_float+0xfe>
 8007c5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c62:	d118      	bne.n	8007c96 <_printf_float+0x1c2>
 8007c64:	2900      	cmp	r1, #0
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	dd0b      	ble.n	8007c82 <_printf_float+0x1ae>
 8007c6a:	6121      	str	r1, [r4, #16]
 8007c6c:	b913      	cbnz	r3, 8007c74 <_printf_float+0x1a0>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	07d0      	lsls	r0, r2, #31
 8007c72:	d502      	bpl.n	8007c7a <_printf_float+0x1a6>
 8007c74:	3301      	adds	r3, #1
 8007c76:	440b      	add	r3, r1
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c7c:	f04f 0900 	mov.w	r9, #0
 8007c80:	e7de      	b.n	8007c40 <_printf_float+0x16c>
 8007c82:	b913      	cbnz	r3, 8007c8a <_printf_float+0x1b6>
 8007c84:	6822      	ldr	r2, [r4, #0]
 8007c86:	07d2      	lsls	r2, r2, #31
 8007c88:	d501      	bpl.n	8007c8e <_printf_float+0x1ba>
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	e7f4      	b.n	8007c78 <_printf_float+0x1a4>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7f2      	b.n	8007c78 <_printf_float+0x1a4>
 8007c92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	db05      	blt.n	8007ca8 <_printf_float+0x1d4>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	6121      	str	r1, [r4, #16]
 8007ca0:	07d8      	lsls	r0, r3, #31
 8007ca2:	d5ea      	bpl.n	8007c7a <_printf_float+0x1a6>
 8007ca4:	1c4b      	adds	r3, r1, #1
 8007ca6:	e7e7      	b.n	8007c78 <_printf_float+0x1a4>
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	bfd4      	ite	le
 8007cac:	f1c1 0202 	rsble	r2, r1, #2
 8007cb0:	2201      	movgt	r2, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	e7e0      	b.n	8007c78 <_printf_float+0x1a4>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	055a      	lsls	r2, r3, #21
 8007cba:	d407      	bmi.n	8007ccc <_printf_float+0x1f8>
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	4642      	mov	r2, r8
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d12c      	bne.n	8007d24 <_printf_float+0x250>
 8007cca:	e764      	b.n	8007b96 <_printf_float+0xc2>
 8007ccc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cd0:	f240 80e0 	bls.w	8007e94 <_printf_float+0x3c0>
 8007cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f7f8 ff14 	bl	8000b08 <__aeabi_dcmpeq>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d034      	beq.n	8007d4e <_printf_float+0x27a>
 8007ce4:	4a37      	ldr	r2, [pc, #220]	; (8007dc4 <_printf_float+0x2f0>)
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f af51 	beq.w	8007b96 <_printf_float+0xc2>
 8007cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	db02      	blt.n	8007d02 <_printf_float+0x22e>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	07d8      	lsls	r0, r3, #31
 8007d00:	d510      	bpl.n	8007d24 <_printf_float+0x250>
 8007d02:	ee18 3a10 	vmov	r3, s16
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af41 	beq.w	8007b96 <_printf_float+0xc2>
 8007d14:	f04f 0800 	mov.w	r8, #0
 8007d18:	f104 091a 	add.w	r9, r4, #26
 8007d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4543      	cmp	r3, r8
 8007d22:	dc09      	bgt.n	8007d38 <_printf_float+0x264>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	079b      	lsls	r3, r3, #30
 8007d28:	f100 8105 	bmi.w	8007f36 <_printf_float+0x462>
 8007d2c:	68e0      	ldr	r0, [r4, #12]
 8007d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d30:	4298      	cmp	r0, r3
 8007d32:	bfb8      	it	lt
 8007d34:	4618      	movlt	r0, r3
 8007d36:	e730      	b.n	8007b9a <_printf_float+0xc6>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	464a      	mov	r2, r9
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	f43f af27 	beq.w	8007b96 <_printf_float+0xc2>
 8007d48:	f108 0801 	add.w	r8, r8, #1
 8007d4c:	e7e6      	b.n	8007d1c <_printf_float+0x248>
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc39      	bgt.n	8007dc8 <_printf_float+0x2f4>
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <_printf_float+0x2f0>)
 8007d56:	2301      	movs	r3, #1
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b8      	blx	r7
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f43f af19 	beq.w	8007b96 <_printf_float+0xc2>
 8007d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d102      	bne.n	8007d72 <_printf_float+0x29e>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07d9      	lsls	r1, r3, #31
 8007d70:	d5d8      	bpl.n	8007d24 <_printf_float+0x250>
 8007d72:	ee18 3a10 	vmov	r3, s16
 8007d76:	4652      	mov	r2, sl
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f af09 	beq.w	8007b96 <_printf_float+0xc2>
 8007d84:	f04f 0900 	mov.w	r9, #0
 8007d88:	f104 0a1a 	add.w	sl, r4, #26
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	425b      	negs	r3, r3
 8007d90:	454b      	cmp	r3, r9
 8007d92:	dc01      	bgt.n	8007d98 <_printf_float+0x2c4>
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	e792      	b.n	8007cbe <_printf_float+0x1ea>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f aef7 	beq.w	8007b96 <_printf_float+0xc2>
 8007da8:	f109 0901 	add.w	r9, r9, #1
 8007dac:	e7ee      	b.n	8007d8c <_printf_float+0x2b8>
 8007dae:	bf00      	nop
 8007db0:	7fefffff 	.word	0x7fefffff
 8007db4:	0800a2f0 	.word	0x0800a2f0
 8007db8:	0800a2f4 	.word	0x0800a2f4
 8007dbc:	0800a2fc 	.word	0x0800a2fc
 8007dc0:	0800a2f8 	.word	0x0800a2f8
 8007dc4:	0800a300 	.word	0x0800a300
 8007dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	bfa8      	it	ge
 8007dd0:	461a      	movge	r2, r3
 8007dd2:	2a00      	cmp	r2, #0
 8007dd4:	4691      	mov	r9, r2
 8007dd6:	dc37      	bgt.n	8007e48 <_printf_float+0x374>
 8007dd8:	f04f 0b00 	mov.w	fp, #0
 8007ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007de0:	f104 021a 	add.w	r2, r4, #26
 8007de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	eba3 0309 	sub.w	r3, r3, r9
 8007dec:	455b      	cmp	r3, fp
 8007dee:	dc33      	bgt.n	8007e58 <_printf_float+0x384>
 8007df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007df4:	429a      	cmp	r2, r3
 8007df6:	db3b      	blt.n	8007e70 <_printf_float+0x39c>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07da      	lsls	r2, r3, #31
 8007dfc:	d438      	bmi.n	8007e70 <_printf_float+0x39c>
 8007dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e00:	9a05      	ldr	r2, [sp, #20]
 8007e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e04:	1a9a      	subs	r2, r3, r2
 8007e06:	eba3 0901 	sub.w	r9, r3, r1
 8007e0a:	4591      	cmp	r9, r2
 8007e0c:	bfa8      	it	ge
 8007e0e:	4691      	movge	r9, r2
 8007e10:	f1b9 0f00 	cmp.w	r9, #0
 8007e14:	dc35      	bgt.n	8007e82 <_printf_float+0x3ae>
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e1e:	f104 0a1a 	add.w	sl, r4, #26
 8007e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	eba3 0309 	sub.w	r3, r3, r9
 8007e2c:	4543      	cmp	r3, r8
 8007e2e:	f77f af79 	ble.w	8007d24 <_printf_float+0x250>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4652      	mov	r2, sl
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f aeaa 	beq.w	8007b96 <_printf_float+0xc2>
 8007e42:	f108 0801 	add.w	r8, r8, #1
 8007e46:	e7ec      	b.n	8007e22 <_printf_float+0x34e>
 8007e48:	4613      	mov	r3, r2
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	d1c0      	bne.n	8007dd8 <_printf_float+0x304>
 8007e56:	e69e      	b.n	8007b96 <_printf_float+0xc2>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	9205      	str	r2, [sp, #20]
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	f43f ae97 	beq.w	8007b96 <_printf_float+0xc2>
 8007e68:	9a05      	ldr	r2, [sp, #20]
 8007e6a:	f10b 0b01 	add.w	fp, fp, #1
 8007e6e:	e7b9      	b.n	8007de4 <_printf_float+0x310>
 8007e70:	ee18 3a10 	vmov	r3, s16
 8007e74:	4652      	mov	r2, sl
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d1be      	bne.n	8007dfe <_printf_float+0x32a>
 8007e80:	e689      	b.n	8007b96 <_printf_float+0xc2>
 8007e82:	9a05      	ldr	r2, [sp, #20]
 8007e84:	464b      	mov	r3, r9
 8007e86:	4442      	add	r2, r8
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d1c1      	bne.n	8007e16 <_printf_float+0x342>
 8007e92:	e680      	b.n	8007b96 <_printf_float+0xc2>
 8007e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	dc01      	bgt.n	8007e9e <_printf_float+0x3ca>
 8007e9a:	07db      	lsls	r3, r3, #31
 8007e9c:	d538      	bpl.n	8007f10 <_printf_float+0x43c>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b8      	blx	r7
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	f43f ae74 	beq.w	8007b96 <_printf_float+0xc2>
 8007eae:	ee18 3a10 	vmov	r3, s16
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f ae6b 	beq.w	8007b96 <_printf_float+0xc2>
 8007ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f7f8 fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 8007ecc:	b9d8      	cbnz	r0, 8007f06 <_printf_float+0x432>
 8007ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed0:	f108 0201 	add.w	r2, r8, #1
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	d10e      	bne.n	8007efe <_printf_float+0x42a>
 8007ee0:	e659      	b.n	8007b96 <_printf_float+0xc2>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f ae52 	beq.w	8007b96 <_printf_float+0xc2>
 8007ef2:	f108 0801 	add.w	r8, r8, #1
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	4543      	cmp	r3, r8
 8007efc:	dcf1      	bgt.n	8007ee2 <_printf_float+0x40e>
 8007efe:	464b      	mov	r3, r9
 8007f00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f04:	e6dc      	b.n	8007cc0 <_printf_float+0x1ec>
 8007f06:	f04f 0800 	mov.w	r8, #0
 8007f0a:	f104 0a1a 	add.w	sl, r4, #26
 8007f0e:	e7f2      	b.n	8007ef6 <_printf_float+0x422>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4642      	mov	r2, r8
 8007f14:	e7df      	b.n	8007ed6 <_printf_float+0x402>
 8007f16:	2301      	movs	r3, #1
 8007f18:	464a      	mov	r2, r9
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	f43f ae38 	beq.w	8007b96 <_printf_float+0xc2>
 8007f26:	f108 0801 	add.w	r8, r8, #1
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f2e:	1a5b      	subs	r3, r3, r1
 8007f30:	4543      	cmp	r3, r8
 8007f32:	dcf0      	bgt.n	8007f16 <_printf_float+0x442>
 8007f34:	e6fa      	b.n	8007d2c <_printf_float+0x258>
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	f104 0919 	add.w	r9, r4, #25
 8007f3e:	e7f4      	b.n	8007f2a <_printf_float+0x456>

08007f40 <_printf_common>:
 8007f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	4616      	mov	r6, r2
 8007f46:	4699      	mov	r9, r3
 8007f48:	688a      	ldr	r2, [r1, #8]
 8007f4a:	690b      	ldr	r3, [r1, #16]
 8007f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	bfb8      	it	lt
 8007f54:	4613      	movlt	r3, r2
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b10a      	cbz	r2, 8007f66 <_printf_common+0x26>
 8007f62:	3301      	adds	r3, #1
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	0699      	lsls	r1, r3, #26
 8007f6a:	bf42      	ittt	mi
 8007f6c:	6833      	ldrmi	r3, [r6, #0]
 8007f6e:	3302      	addmi	r3, #2
 8007f70:	6033      	strmi	r3, [r6, #0]
 8007f72:	6825      	ldr	r5, [r4, #0]
 8007f74:	f015 0506 	ands.w	r5, r5, #6
 8007f78:	d106      	bne.n	8007f88 <_printf_common+0x48>
 8007f7a:	f104 0a19 	add.w	sl, r4, #25
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	6832      	ldr	r2, [r6, #0]
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dc26      	bgt.n	8007fd6 <_printf_common+0x96>
 8007f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f8c:	1e13      	subs	r3, r2, #0
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	bf18      	it	ne
 8007f92:	2301      	movne	r3, #1
 8007f94:	0692      	lsls	r2, r2, #26
 8007f96:	d42b      	bmi.n	8007ff0 <_printf_common+0xb0>
 8007f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d01e      	beq.n	8007fe4 <_printf_common+0xa4>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	68e5      	ldr	r5, [r4, #12]
 8007faa:	6832      	ldr	r2, [r6, #0]
 8007fac:	f003 0306 	and.w	r3, r3, #6
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	bf08      	it	eq
 8007fb4:	1aad      	subeq	r5, r5, r2
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	6922      	ldr	r2, [r4, #16]
 8007fba:	bf0c      	ite	eq
 8007fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc0:	2500      	movne	r5, #0
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	bfc4      	itt	gt
 8007fc6:	1a9b      	subgt	r3, r3, r2
 8007fc8:	18ed      	addgt	r5, r5, r3
 8007fca:	2600      	movs	r6, #0
 8007fcc:	341a      	adds	r4, #26
 8007fce:	42b5      	cmp	r5, r6
 8007fd0:	d11a      	bne.n	8008008 <_printf_common+0xc8>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e008      	b.n	8007fe8 <_printf_common+0xa8>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4652      	mov	r2, sl
 8007fda:	4649      	mov	r1, r9
 8007fdc:	4638      	mov	r0, r7
 8007fde:	47c0      	blx	r8
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d103      	bne.n	8007fec <_printf_common+0xac>
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fec:	3501      	adds	r5, #1
 8007fee:	e7c6      	b.n	8007f7e <_printf_common+0x3e>
 8007ff0:	18e1      	adds	r1, r4, r3
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	2030      	movs	r0, #48	; 0x30
 8007ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ffa:	4422      	add	r2, r4
 8007ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008004:	3302      	adds	r3, #2
 8008006:	e7c7      	b.n	8007f98 <_printf_common+0x58>
 8008008:	2301      	movs	r3, #1
 800800a:	4622      	mov	r2, r4
 800800c:	4649      	mov	r1, r9
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	3001      	adds	r0, #1
 8008014:	d0e6      	beq.n	8007fe4 <_printf_common+0xa4>
 8008016:	3601      	adds	r6, #1
 8008018:	e7d9      	b.n	8007fce <_printf_common+0x8e>
	...

0800801c <_printf_i>:
 800801c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	7e0f      	ldrb	r7, [r1, #24]
 8008022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008024:	2f78      	cmp	r7, #120	; 0x78
 8008026:	4691      	mov	r9, r2
 8008028:	4680      	mov	r8, r0
 800802a:	460c      	mov	r4, r1
 800802c:	469a      	mov	sl, r3
 800802e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008032:	d807      	bhi.n	8008044 <_printf_i+0x28>
 8008034:	2f62      	cmp	r7, #98	; 0x62
 8008036:	d80a      	bhi.n	800804e <_printf_i+0x32>
 8008038:	2f00      	cmp	r7, #0
 800803a:	f000 80d8 	beq.w	80081ee <_printf_i+0x1d2>
 800803e:	2f58      	cmp	r7, #88	; 0x58
 8008040:	f000 80a3 	beq.w	800818a <_printf_i+0x16e>
 8008044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800804c:	e03a      	b.n	80080c4 <_printf_i+0xa8>
 800804e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008052:	2b15      	cmp	r3, #21
 8008054:	d8f6      	bhi.n	8008044 <_printf_i+0x28>
 8008056:	a101      	add	r1, pc, #4	; (adr r1, 800805c <_printf_i+0x40>)
 8008058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080c9 	.word	0x080080c9
 8008064:	08008045 	.word	0x08008045
 8008068:	08008045 	.word	0x08008045
 800806c:	08008045 	.word	0x08008045
 8008070:	08008045 	.word	0x08008045
 8008074:	080080c9 	.word	0x080080c9
 8008078:	08008045 	.word	0x08008045
 800807c:	08008045 	.word	0x08008045
 8008080:	08008045 	.word	0x08008045
 8008084:	08008045 	.word	0x08008045
 8008088:	080081d5 	.word	0x080081d5
 800808c:	080080f9 	.word	0x080080f9
 8008090:	080081b7 	.word	0x080081b7
 8008094:	08008045 	.word	0x08008045
 8008098:	08008045 	.word	0x08008045
 800809c:	080081f7 	.word	0x080081f7
 80080a0:	08008045 	.word	0x08008045
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008045 	.word	0x08008045
 80080ac:	08008045 	.word	0x08008045
 80080b0:	080081bf 	.word	0x080081bf
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	602a      	str	r2, [r5, #0]
 80080bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0a3      	b.n	8008210 <_printf_i+0x1f4>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	0606      	lsls	r6, r0, #24
 80080ce:	f101 0304 	add.w	r3, r1, #4
 80080d2:	d50a      	bpl.n	80080ea <_printf_i+0xce>
 80080d4:	680e      	ldr	r6, [r1, #0]
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	2e00      	cmp	r6, #0
 80080da:	da03      	bge.n	80080e4 <_printf_i+0xc8>
 80080dc:	232d      	movs	r3, #45	; 0x2d
 80080de:	4276      	negs	r6, r6
 80080e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e4:	485e      	ldr	r0, [pc, #376]	; (8008260 <_printf_i+0x244>)
 80080e6:	230a      	movs	r3, #10
 80080e8:	e019      	b.n	800811e <_printf_i+0x102>
 80080ea:	680e      	ldr	r6, [r1, #0]
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080f2:	bf18      	it	ne
 80080f4:	b236      	sxthne	r6, r6
 80080f6:	e7ef      	b.n	80080d8 <_printf_i+0xbc>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	6029      	str	r1, [r5, #0]
 8008100:	0601      	lsls	r1, r0, #24
 8008102:	d501      	bpl.n	8008108 <_printf_i+0xec>
 8008104:	681e      	ldr	r6, [r3, #0]
 8008106:	e002      	b.n	800810e <_printf_i+0xf2>
 8008108:	0646      	lsls	r6, r0, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0xe8>
 800810c:	881e      	ldrh	r6, [r3, #0]
 800810e:	4854      	ldr	r0, [pc, #336]	; (8008260 <_printf_i+0x244>)
 8008110:	2f6f      	cmp	r7, #111	; 0x6f
 8008112:	bf0c      	ite	eq
 8008114:	2308      	moveq	r3, #8
 8008116:	230a      	movne	r3, #10
 8008118:	2100      	movs	r1, #0
 800811a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800811e:	6865      	ldr	r5, [r4, #4]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	2d00      	cmp	r5, #0
 8008124:	bfa2      	ittt	ge
 8008126:	6821      	ldrge	r1, [r4, #0]
 8008128:	f021 0104 	bicge.w	r1, r1, #4
 800812c:	6021      	strge	r1, [r4, #0]
 800812e:	b90e      	cbnz	r6, 8008134 <_printf_i+0x118>
 8008130:	2d00      	cmp	r5, #0
 8008132:	d04d      	beq.n	80081d0 <_printf_i+0x1b4>
 8008134:	4615      	mov	r5, r2
 8008136:	fbb6 f1f3 	udiv	r1, r6, r3
 800813a:	fb03 6711 	mls	r7, r3, r1, r6
 800813e:	5dc7      	ldrb	r7, [r0, r7]
 8008140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008144:	4637      	mov	r7, r6
 8008146:	42bb      	cmp	r3, r7
 8008148:	460e      	mov	r6, r1
 800814a:	d9f4      	bls.n	8008136 <_printf_i+0x11a>
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10b      	bne.n	8008168 <_printf_i+0x14c>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	07de      	lsls	r6, r3, #31
 8008154:	d508      	bpl.n	8008168 <_printf_i+0x14c>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6861      	ldr	r1, [r4, #4]
 800815a:	4299      	cmp	r1, r3
 800815c:	bfde      	ittt	le
 800815e:	2330      	movle	r3, #48	; 0x30
 8008160:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008164:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008168:	1b52      	subs	r2, r2, r5
 800816a:	6122      	str	r2, [r4, #16]
 800816c:	f8cd a000 	str.w	sl, [sp]
 8008170:	464b      	mov	r3, r9
 8008172:	aa03      	add	r2, sp, #12
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fee2 	bl	8007f40 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	d14c      	bne.n	800821a <_printf_i+0x1fe>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	b004      	add	sp, #16
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	4835      	ldr	r0, [pc, #212]	; (8008260 <_printf_i+0x244>)
 800818c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008190:	6829      	ldr	r1, [r5, #0]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	f851 6b04 	ldr.w	r6, [r1], #4
 8008198:	6029      	str	r1, [r5, #0]
 800819a:	061d      	lsls	r5, r3, #24
 800819c:	d514      	bpl.n	80081c8 <_printf_i+0x1ac>
 800819e:	07df      	lsls	r7, r3, #31
 80081a0:	bf44      	itt	mi
 80081a2:	f043 0320 	orrmi.w	r3, r3, #32
 80081a6:	6023      	strmi	r3, [r4, #0]
 80081a8:	b91e      	cbnz	r6, 80081b2 <_printf_i+0x196>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f023 0320 	bic.w	r3, r3, #32
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	2310      	movs	r3, #16
 80081b4:	e7b0      	b.n	8008118 <_printf_i+0xfc>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	f043 0320 	orr.w	r3, r3, #32
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	2378      	movs	r3, #120	; 0x78
 80081c0:	4828      	ldr	r0, [pc, #160]	; (8008264 <_printf_i+0x248>)
 80081c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081c6:	e7e3      	b.n	8008190 <_printf_i+0x174>
 80081c8:	0659      	lsls	r1, r3, #25
 80081ca:	bf48      	it	mi
 80081cc:	b2b6      	uxthmi	r6, r6
 80081ce:	e7e6      	b.n	800819e <_printf_i+0x182>
 80081d0:	4615      	mov	r5, r2
 80081d2:	e7bb      	b.n	800814c <_printf_i+0x130>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	6826      	ldr	r6, [r4, #0]
 80081d8:	6961      	ldr	r1, [r4, #20]
 80081da:	1d18      	adds	r0, r3, #4
 80081dc:	6028      	str	r0, [r5, #0]
 80081de:	0635      	lsls	r5, r6, #24
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0x1cc>
 80081e4:	6019      	str	r1, [r3, #0]
 80081e6:	e002      	b.n	80081ee <_printf_i+0x1d2>
 80081e8:	0670      	lsls	r0, r6, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0x1c8>
 80081ec:	8019      	strh	r1, [r3, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	4615      	mov	r5, r2
 80081f4:	e7ba      	b.n	800816c <_printf_i+0x150>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	681d      	ldr	r5, [r3, #0]
 80081fe:	6862      	ldr	r2, [r4, #4]
 8008200:	2100      	movs	r1, #0
 8008202:	4628      	mov	r0, r5
 8008204:	f7f8 f80c 	bl	8000220 <memchr>
 8008208:	b108      	cbz	r0, 800820e <_printf_i+0x1f2>
 800820a:	1b40      	subs	r0, r0, r5
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	6863      	ldr	r3, [r4, #4]
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	2300      	movs	r3, #0
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008218:	e7a8      	b.n	800816c <_printf_i+0x150>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	462a      	mov	r2, r5
 800821e:	4649      	mov	r1, r9
 8008220:	4640      	mov	r0, r8
 8008222:	47d0      	blx	sl
 8008224:	3001      	adds	r0, #1
 8008226:	d0ab      	beq.n	8008180 <_printf_i+0x164>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	079b      	lsls	r3, r3, #30
 800822c:	d413      	bmi.n	8008256 <_printf_i+0x23a>
 800822e:	68e0      	ldr	r0, [r4, #12]
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	4298      	cmp	r0, r3
 8008234:	bfb8      	it	lt
 8008236:	4618      	movlt	r0, r3
 8008238:	e7a4      	b.n	8008184 <_printf_i+0x168>
 800823a:	2301      	movs	r3, #1
 800823c:	4632      	mov	r2, r6
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d09b      	beq.n	8008180 <_printf_i+0x164>
 8008248:	3501      	adds	r5, #1
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	9903      	ldr	r1, [sp, #12]
 800824e:	1a5b      	subs	r3, r3, r1
 8008250:	42ab      	cmp	r3, r5
 8008252:	dcf2      	bgt.n	800823a <_printf_i+0x21e>
 8008254:	e7eb      	b.n	800822e <_printf_i+0x212>
 8008256:	2500      	movs	r5, #0
 8008258:	f104 0619 	add.w	r6, r4, #25
 800825c:	e7f5      	b.n	800824a <_printf_i+0x22e>
 800825e:	bf00      	nop
 8008260:	0800a302 	.word	0x0800a302
 8008264:	0800a313 	.word	0x0800a313

08008268 <cleanup_glue>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	6809      	ldr	r1, [r1, #0]
 800826e:	4605      	mov	r5, r0
 8008270:	b109      	cbz	r1, 8008276 <cleanup_glue+0xe>
 8008272:	f7ff fff9 	bl	8008268 <cleanup_glue>
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800827e:	f001 bbd3 	b.w	8009a28 <_free_r>
	...

08008284 <_reclaim_reent>:
 8008284:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <_reclaim_reent+0xb4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4283      	cmp	r3, r0
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	d051      	beq.n	8008334 <_reclaim_reent+0xb0>
 8008290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008292:	b143      	cbz	r3, 80082a6 <_reclaim_reent+0x22>
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d14a      	bne.n	8008330 <_reclaim_reent+0xac>
 800829a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829c:	6819      	ldr	r1, [r3, #0]
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x22>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f001 fbc1 	bl	8009a28 <_free_r>
 80082a6:	6961      	ldr	r1, [r4, #20]
 80082a8:	b111      	cbz	r1, 80082b0 <_reclaim_reent+0x2c>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f001 fbbc 	bl	8009a28 <_free_r>
 80082b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80082b2:	b111      	cbz	r1, 80082ba <_reclaim_reent+0x36>
 80082b4:	4620      	mov	r0, r4
 80082b6:	f001 fbb7 	bl	8009a28 <_free_r>
 80082ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082bc:	b111      	cbz	r1, 80082c4 <_reclaim_reent+0x40>
 80082be:	4620      	mov	r0, r4
 80082c0:	f001 fbb2 	bl	8009a28 <_free_r>
 80082c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80082c6:	b111      	cbz	r1, 80082ce <_reclaim_reent+0x4a>
 80082c8:	4620      	mov	r0, r4
 80082ca:	f001 fbad 	bl	8009a28 <_free_r>
 80082ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80082d0:	b111      	cbz	r1, 80082d8 <_reclaim_reent+0x54>
 80082d2:	4620      	mov	r0, r4
 80082d4:	f001 fba8 	bl	8009a28 <_free_r>
 80082d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80082da:	b111      	cbz	r1, 80082e2 <_reclaim_reent+0x5e>
 80082dc:	4620      	mov	r0, r4
 80082de:	f001 fba3 	bl	8009a28 <_free_r>
 80082e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80082e4:	b111      	cbz	r1, 80082ec <_reclaim_reent+0x68>
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fb9e 	bl	8009a28 <_free_r>
 80082ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ee:	b111      	cbz	r1, 80082f6 <_reclaim_reent+0x72>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 fb99 	bl	8009a28 <_free_r>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	b1e3      	cbz	r3, 8008334 <_reclaim_reent+0xb0>
 80082fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082fc:	4620      	mov	r0, r4
 80082fe:	4798      	blx	r3
 8008300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008302:	b1b9      	cbz	r1, 8008334 <_reclaim_reent+0xb0>
 8008304:	4620      	mov	r0, r4
 8008306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800830a:	f7ff bfad 	b.w	8008268 <cleanup_glue>
 800830e:	5949      	ldr	r1, [r1, r5]
 8008310:	b941      	cbnz	r1, 8008324 <_reclaim_reent+0xa0>
 8008312:	3504      	adds	r5, #4
 8008314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008316:	2d80      	cmp	r5, #128	; 0x80
 8008318:	68d9      	ldr	r1, [r3, #12]
 800831a:	d1f8      	bne.n	800830e <_reclaim_reent+0x8a>
 800831c:	4620      	mov	r0, r4
 800831e:	f001 fb83 	bl	8009a28 <_free_r>
 8008322:	e7ba      	b.n	800829a <_reclaim_reent+0x16>
 8008324:	680e      	ldr	r6, [r1, #0]
 8008326:	4620      	mov	r0, r4
 8008328:	f001 fb7e 	bl	8009a28 <_free_r>
 800832c:	4631      	mov	r1, r6
 800832e:	e7ef      	b.n	8008310 <_reclaim_reent+0x8c>
 8008330:	2500      	movs	r5, #0
 8008332:	e7ef      	b.n	8008314 <_reclaim_reent+0x90>
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	bf00      	nop
 8008338:	20000014 	.word	0x20000014

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d06      	ldr	r5, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f001 ff40 	bl	800a1cc <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	2000662c 	.word	0x2000662c

0800835c <__sread>:
 800835c:	b510      	push	{r4, lr}
 800835e:	460c      	mov	r4, r1
 8008360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008364:	f001 fbac 	bl	8009ac0 <_read_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	bfab      	itete	ge
 800836c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800836e:	89a3      	ldrhlt	r3, [r4, #12]
 8008370:	181b      	addge	r3, r3, r0
 8008372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008376:	bfac      	ite	ge
 8008378:	6563      	strge	r3, [r4, #84]	; 0x54
 800837a:	81a3      	strhlt	r3, [r4, #12]
 800837c:	bd10      	pop	{r4, pc}

0800837e <__swrite>:
 800837e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008382:	461f      	mov	r7, r3
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	05db      	lsls	r3, r3, #23
 8008388:	4605      	mov	r5, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4616      	mov	r6, r2
 800838e:	d505      	bpl.n	800839c <__swrite+0x1e>
 8008390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008394:	2302      	movs	r3, #2
 8008396:	2200      	movs	r2, #0
 8008398:	f000 ff86 	bl	80092a8 <_lseek_r>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	4628      	mov	r0, r5
 80083ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	f000 b817 	b.w	80083e4 <_write_r>

080083b6 <__sseek>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083be:	f000 ff73 	bl	80092a8 <_lseek_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	bf15      	itete	ne
 80083c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d2:	81a3      	strheq	r3, [r4, #12]
 80083d4:	bf18      	it	ne
 80083d6:	81a3      	strhne	r3, [r4, #12]
 80083d8:	bd10      	pop	{r4, pc}

080083da <__sclose>:
 80083da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083de:	f000 b813 	b.w	8008408 <_close_r>
	...

080083e4 <_write_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d07      	ldr	r5, [pc, #28]	; (8008404 <_write_r+0x20>)
 80083e8:	4604      	mov	r4, r0
 80083ea:	4608      	mov	r0, r1
 80083ec:	4611      	mov	r1, r2
 80083ee:	2200      	movs	r2, #0
 80083f0:	602a      	str	r2, [r5, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f001 fef8 	bl	800a1e8 <_write>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_write_r+0x1e>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_write_r+0x1e>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	2000662c 	.word	0x2000662c

08008408 <_close_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d06      	ldr	r5, [pc, #24]	; (8008424 <_close_r+0x1c>)
 800840c:	2300      	movs	r3, #0
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f001 fea2 	bl	800a15c <_close>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_close_r+0x1a>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_close_r+0x1a>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	2000662c 	.word	0x2000662c

08008428 <quorem>:
 8008428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	6903      	ldr	r3, [r0, #16]
 800842e:	690c      	ldr	r4, [r1, #16]
 8008430:	42a3      	cmp	r3, r4
 8008432:	4607      	mov	r7, r0
 8008434:	f2c0 8081 	blt.w	800853a <quorem+0x112>
 8008438:	3c01      	subs	r4, #1
 800843a:	f101 0814 	add.w	r8, r1, #20
 800843e:	f100 0514 	add.w	r5, r0, #20
 8008442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800844c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008450:	3301      	adds	r3, #1
 8008452:	429a      	cmp	r2, r3
 8008454:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800845c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008460:	d331      	bcc.n	80084c6 <quorem+0x9e>
 8008462:	f04f 0e00 	mov.w	lr, #0
 8008466:	4640      	mov	r0, r8
 8008468:	46ac      	mov	ip, r5
 800846a:	46f2      	mov	sl, lr
 800846c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008470:	b293      	uxth	r3, r2
 8008472:	fb06 e303 	mla	r3, r6, r3, lr
 8008476:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800847a:	b29b      	uxth	r3, r3
 800847c:	ebaa 0303 	sub.w	r3, sl, r3
 8008480:	f8dc a000 	ldr.w	sl, [ip]
 8008484:	0c12      	lsrs	r2, r2, #16
 8008486:	fa13 f38a 	uxtah	r3, r3, sl
 800848a:	fb06 e202 	mla	r2, r6, r2, lr
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008496:	b292      	uxth	r2, r2
 8008498:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800849c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80084a4:	4581      	cmp	r9, r0
 80084a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084aa:	f84c 3b04 	str.w	r3, [ip], #4
 80084ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084b2:	d2db      	bcs.n	800846c <quorem+0x44>
 80084b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80084b8:	b92b      	cbnz	r3, 80084c6 <quorem+0x9e>
 80084ba:	9b01      	ldr	r3, [sp, #4]
 80084bc:	3b04      	subs	r3, #4
 80084be:	429d      	cmp	r5, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	d32e      	bcc.n	8008522 <quorem+0xfa>
 80084c4:	613c      	str	r4, [r7, #16]
 80084c6:	4638      	mov	r0, r7
 80084c8:	f001 f996 	bl	80097f8 <__mcmp>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	db24      	blt.n	800851a <quorem+0xf2>
 80084d0:	3601      	adds	r6, #1
 80084d2:	4628      	mov	r0, r5
 80084d4:	f04f 0c00 	mov.w	ip, #0
 80084d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80084dc:	f8d0 e000 	ldr.w	lr, [r0]
 80084e0:	b293      	uxth	r3, r2
 80084e2:	ebac 0303 	sub.w	r3, ip, r3
 80084e6:	0c12      	lsrs	r2, r2, #16
 80084e8:	fa13 f38e 	uxtah	r3, r3, lr
 80084ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084fa:	45c1      	cmp	r9, r8
 80084fc:	f840 3b04 	str.w	r3, [r0], #4
 8008500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008504:	d2e8      	bcs.n	80084d8 <quorem+0xb0>
 8008506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800850a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800850e:	b922      	cbnz	r2, 800851a <quorem+0xf2>
 8008510:	3b04      	subs	r3, #4
 8008512:	429d      	cmp	r5, r3
 8008514:	461a      	mov	r2, r3
 8008516:	d30a      	bcc.n	800852e <quorem+0x106>
 8008518:	613c      	str	r4, [r7, #16]
 800851a:	4630      	mov	r0, r6
 800851c:	b003      	add	sp, #12
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	3b04      	subs	r3, #4
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1cc      	bne.n	80084c4 <quorem+0x9c>
 800852a:	3c01      	subs	r4, #1
 800852c:	e7c7      	b.n	80084be <quorem+0x96>
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	3b04      	subs	r3, #4
 8008532:	2a00      	cmp	r2, #0
 8008534:	d1f0      	bne.n	8008518 <quorem+0xf0>
 8008536:	3c01      	subs	r4, #1
 8008538:	e7eb      	b.n	8008512 <quorem+0xea>
 800853a:	2000      	movs	r0, #0
 800853c:	e7ee      	b.n	800851c <quorem+0xf4>
	...

08008540 <_dtoa_r>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	ed2d 8b04 	vpush	{d8-d9}
 8008548:	ec57 6b10 	vmov	r6, r7, d0
 800854c:	b093      	sub	sp, #76	; 0x4c
 800854e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008554:	9106      	str	r1, [sp, #24]
 8008556:	ee10 aa10 	vmov	sl, s0
 800855a:	4604      	mov	r4, r0
 800855c:	9209      	str	r2, [sp, #36]	; 0x24
 800855e:	930c      	str	r3, [sp, #48]	; 0x30
 8008560:	46bb      	mov	fp, r7
 8008562:	b975      	cbnz	r5, 8008582 <_dtoa_r+0x42>
 8008564:	2010      	movs	r0, #16
 8008566:	f000 feb1 	bl	80092cc <malloc>
 800856a:	4602      	mov	r2, r0
 800856c:	6260      	str	r0, [r4, #36]	; 0x24
 800856e:	b920      	cbnz	r0, 800857a <_dtoa_r+0x3a>
 8008570:	4ba7      	ldr	r3, [pc, #668]	; (8008810 <_dtoa_r+0x2d0>)
 8008572:	21ea      	movs	r1, #234	; 0xea
 8008574:	48a7      	ldr	r0, [pc, #668]	; (8008814 <_dtoa_r+0x2d4>)
 8008576:	f001 fab5 	bl	8009ae4 <__assert_func>
 800857a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800857e:	6005      	str	r5, [r0, #0]
 8008580:	60c5      	str	r5, [r0, #12]
 8008582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008584:	6819      	ldr	r1, [r3, #0]
 8008586:	b151      	cbz	r1, 800859e <_dtoa_r+0x5e>
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	604a      	str	r2, [r1, #4]
 800858c:	2301      	movs	r3, #1
 800858e:	4093      	lsls	r3, r2
 8008590:	608b      	str	r3, [r1, #8]
 8008592:	4620      	mov	r0, r4
 8008594:	f000 feee 	bl	8009374 <_Bfree>
 8008598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	1e3b      	subs	r3, r7, #0
 80085a0:	bfaa      	itet	ge
 80085a2:	2300      	movge	r3, #0
 80085a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085a8:	f8c8 3000 	strge.w	r3, [r8]
 80085ac:	4b9a      	ldr	r3, [pc, #616]	; (8008818 <_dtoa_r+0x2d8>)
 80085ae:	bfbc      	itt	lt
 80085b0:	2201      	movlt	r2, #1
 80085b2:	f8c8 2000 	strlt.w	r2, [r8]
 80085b6:	ea33 030b 	bics.w	r3, r3, fp
 80085ba:	d11b      	bne.n	80085f4 <_dtoa_r+0xb4>
 80085bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085be:	f242 730f 	movw	r3, #9999	; 0x270f
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085c8:	4333      	orrs	r3, r6
 80085ca:	f000 8592 	beq.w	80090f2 <_dtoa_r+0xbb2>
 80085ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d0:	b963      	cbnz	r3, 80085ec <_dtoa_r+0xac>
 80085d2:	4b92      	ldr	r3, [pc, #584]	; (800881c <_dtoa_r+0x2dc>)
 80085d4:	e022      	b.n	800861c <_dtoa_r+0xdc>
 80085d6:	4b92      	ldr	r3, [pc, #584]	; (8008820 <_dtoa_r+0x2e0>)
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	3308      	adds	r3, #8
 80085dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	9801      	ldr	r0, [sp, #4]
 80085e2:	b013      	add	sp, #76	; 0x4c
 80085e4:	ecbd 8b04 	vpop	{d8-d9}
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	4b8b      	ldr	r3, [pc, #556]	; (800881c <_dtoa_r+0x2dc>)
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	3303      	adds	r3, #3
 80085f2:	e7f3      	b.n	80085dc <_dtoa_r+0x9c>
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	4650      	mov	r0, sl
 80085fa:	4659      	mov	r1, fp
 80085fc:	f7f8 fa84 	bl	8000b08 <__aeabi_dcmpeq>
 8008600:	ec4b ab19 	vmov	d9, sl, fp
 8008604:	4680      	mov	r8, r0
 8008606:	b158      	cbz	r0, 8008620 <_dtoa_r+0xe0>
 8008608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800860a:	2301      	movs	r3, #1
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 856b 	beq.w	80090ec <_dtoa_r+0xbac>
 8008616:	4883      	ldr	r0, [pc, #524]	; (8008824 <_dtoa_r+0x2e4>)
 8008618:	6018      	str	r0, [r3, #0]
 800861a:	1e43      	subs	r3, r0, #1
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	e7df      	b.n	80085e0 <_dtoa_r+0xa0>
 8008620:	ec4b ab10 	vmov	d0, sl, fp
 8008624:	aa10      	add	r2, sp, #64	; 0x40
 8008626:	a911      	add	r1, sp, #68	; 0x44
 8008628:	4620      	mov	r0, r4
 800862a:	f001 f98b 	bl	8009944 <__d2b>
 800862e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008632:	ee08 0a10 	vmov	s16, r0
 8008636:	2d00      	cmp	r5, #0
 8008638:	f000 8084 	beq.w	8008744 <_dtoa_r+0x204>
 800863c:	ee19 3a90 	vmov	r3, s19
 8008640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008644:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008648:	4656      	mov	r6, sl
 800864a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800864e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008652:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008656:	4b74      	ldr	r3, [pc, #464]	; (8008828 <_dtoa_r+0x2e8>)
 8008658:	2200      	movs	r2, #0
 800865a:	4630      	mov	r0, r6
 800865c:	4639      	mov	r1, r7
 800865e:	f7f7 fe33 	bl	80002c8 <__aeabi_dsub>
 8008662:	a365      	add	r3, pc, #404	; (adr r3, 80087f8 <_dtoa_r+0x2b8>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffe6 	bl	8000638 <__aeabi_dmul>
 800866c:	a364      	add	r3, pc, #400	; (adr r3, 8008800 <_dtoa_r+0x2c0>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fe2b 	bl	80002cc <__adddf3>
 8008676:	4606      	mov	r6, r0
 8008678:	4628      	mov	r0, r5
 800867a:	460f      	mov	r7, r1
 800867c:	f7f7 ff72 	bl	8000564 <__aeabi_i2d>
 8008680:	a361      	add	r3, pc, #388	; (adr r3, 8008808 <_dtoa_r+0x2c8>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 ffd7 	bl	8000638 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f7 fe1b 	bl	80002cc <__adddf3>
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	f7f8 fa7d 	bl	8000b98 <__aeabi_d2iz>
 800869e:	2200      	movs	r2, #0
 80086a0:	9000      	str	r0, [sp, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f8 fa38 	bl	8000b1c <__aeabi_dcmplt>
 80086ac:	b150      	cbz	r0, 80086c4 <_dtoa_r+0x184>
 80086ae:	9800      	ldr	r0, [sp, #0]
 80086b0:	f7f7 ff58 	bl	8000564 <__aeabi_i2d>
 80086b4:	4632      	mov	r2, r6
 80086b6:	463b      	mov	r3, r7
 80086b8:	f7f8 fa26 	bl	8000b08 <__aeabi_dcmpeq>
 80086bc:	b910      	cbnz	r0, 80086c4 <_dtoa_r+0x184>
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	2b16      	cmp	r3, #22
 80086c8:	d85a      	bhi.n	8008780 <_dtoa_r+0x240>
 80086ca:	9a00      	ldr	r2, [sp, #0]
 80086cc:	4b57      	ldr	r3, [pc, #348]	; (800882c <_dtoa_r+0x2ec>)
 80086ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	ec51 0b19 	vmov	r0, r1, d9
 80086da:	f7f8 fa1f 	bl	8000b1c <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d050      	beq.n	8008784 <_dtoa_r+0x244>
 80086e2:	9b00      	ldr	r3, [sp, #0]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ee:	1b5d      	subs	r5, r3, r5
 80086f0:	1e6b      	subs	r3, r5, #1
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	bf45      	ittet	mi
 80086f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80086fa:	9304      	strmi	r3, [sp, #16]
 80086fc:	2300      	movpl	r3, #0
 80086fe:	2300      	movmi	r3, #0
 8008700:	bf4c      	ite	mi
 8008702:	9305      	strmi	r3, [sp, #20]
 8008704:	9304      	strpl	r3, [sp, #16]
 8008706:	9b00      	ldr	r3, [sp, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	db3d      	blt.n	8008788 <_dtoa_r+0x248>
 800870c:	9b05      	ldr	r3, [sp, #20]
 800870e:	9a00      	ldr	r2, [sp, #0]
 8008710:	920a      	str	r2, [sp, #40]	; 0x28
 8008712:	4413      	add	r3, r2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	2300      	movs	r3, #0
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	9b06      	ldr	r3, [sp, #24]
 800871c:	2b09      	cmp	r3, #9
 800871e:	f200 8089 	bhi.w	8008834 <_dtoa_r+0x2f4>
 8008722:	2b05      	cmp	r3, #5
 8008724:	bfc4      	itt	gt
 8008726:	3b04      	subgt	r3, #4
 8008728:	9306      	strgt	r3, [sp, #24]
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	f1a3 0302 	sub.w	r3, r3, #2
 8008730:	bfcc      	ite	gt
 8008732:	2500      	movgt	r5, #0
 8008734:	2501      	movle	r5, #1
 8008736:	2b03      	cmp	r3, #3
 8008738:	f200 8087 	bhi.w	800884a <_dtoa_r+0x30a>
 800873c:	e8df f003 	tbb	[pc, r3]
 8008740:	59383a2d 	.word	0x59383a2d
 8008744:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008748:	441d      	add	r5, r3
 800874a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800874e:	2b20      	cmp	r3, #32
 8008750:	bfc1      	itttt	gt
 8008752:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008756:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800875a:	fa0b f303 	lslgt.w	r3, fp, r3
 800875e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008762:	bfda      	itte	le
 8008764:	f1c3 0320 	rsble	r3, r3, #32
 8008768:	fa06 f003 	lslle.w	r0, r6, r3
 800876c:	4318      	orrgt	r0, r3
 800876e:	f7f7 fee9 	bl	8000544 <__aeabi_ui2d>
 8008772:	2301      	movs	r3, #1
 8008774:	4606      	mov	r6, r0
 8008776:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800877a:	3d01      	subs	r5, #1
 800877c:	930e      	str	r3, [sp, #56]	; 0x38
 800877e:	e76a      	b.n	8008656 <_dtoa_r+0x116>
 8008780:	2301      	movs	r3, #1
 8008782:	e7b2      	b.n	80086ea <_dtoa_r+0x1aa>
 8008784:	900b      	str	r0, [sp, #44]	; 0x2c
 8008786:	e7b1      	b.n	80086ec <_dtoa_r+0x1ac>
 8008788:	9b04      	ldr	r3, [sp, #16]
 800878a:	9a00      	ldr	r2, [sp, #0]
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	4253      	negs	r3, r2
 8008792:	9307      	str	r3, [sp, #28]
 8008794:	2300      	movs	r3, #0
 8008796:	930a      	str	r3, [sp, #40]	; 0x28
 8008798:	e7bf      	b.n	800871a <_dtoa_r+0x1da>
 800879a:	2300      	movs	r3, #0
 800879c:	9308      	str	r3, [sp, #32]
 800879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dc55      	bgt.n	8008850 <_dtoa_r+0x310>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087aa:	461a      	mov	r2, r3
 80087ac:	9209      	str	r2, [sp, #36]	; 0x24
 80087ae:	e00c      	b.n	80087ca <_dtoa_r+0x28a>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7f3      	b.n	800879c <_dtoa_r+0x25c>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	9b00      	ldr	r3, [sp, #0]
 80087bc:	4413      	add	r3, r2
 80087be:	9302      	str	r3, [sp, #8]
 80087c0:	3301      	adds	r3, #1
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	9303      	str	r3, [sp, #12]
 80087c6:	bfb8      	it	lt
 80087c8:	2301      	movlt	r3, #1
 80087ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087cc:	2200      	movs	r2, #0
 80087ce:	6042      	str	r2, [r0, #4]
 80087d0:	2204      	movs	r2, #4
 80087d2:	f102 0614 	add.w	r6, r2, #20
 80087d6:	429e      	cmp	r6, r3
 80087d8:	6841      	ldr	r1, [r0, #4]
 80087da:	d93d      	bls.n	8008858 <_dtoa_r+0x318>
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fd89 	bl	80092f4 <_Balloc>
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d13b      	bne.n	8008860 <_dtoa_r+0x320>
 80087e8:	4b11      	ldr	r3, [pc, #68]	; (8008830 <_dtoa_r+0x2f0>)
 80087ea:	4602      	mov	r2, r0
 80087ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087f0:	e6c0      	b.n	8008574 <_dtoa_r+0x34>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e7df      	b.n	80087b6 <_dtoa_r+0x276>
 80087f6:	bf00      	nop
 80087f8:	636f4361 	.word	0x636f4361
 80087fc:	3fd287a7 	.word	0x3fd287a7
 8008800:	8b60c8b3 	.word	0x8b60c8b3
 8008804:	3fc68a28 	.word	0x3fc68a28
 8008808:	509f79fb 	.word	0x509f79fb
 800880c:	3fd34413 	.word	0x3fd34413
 8008810:	0800a331 	.word	0x0800a331
 8008814:	0800a348 	.word	0x0800a348
 8008818:	7ff00000 	.word	0x7ff00000
 800881c:	0800a32d 	.word	0x0800a32d
 8008820:	0800a324 	.word	0x0800a324
 8008824:	0800a301 	.word	0x0800a301
 8008828:	3ff80000 	.word	0x3ff80000
 800882c:	0800a438 	.word	0x0800a438
 8008830:	0800a3a3 	.word	0x0800a3a3
 8008834:	2501      	movs	r5, #1
 8008836:	2300      	movs	r3, #0
 8008838:	9306      	str	r3, [sp, #24]
 800883a:	9508      	str	r5, [sp, #32]
 800883c:	f04f 33ff 	mov.w	r3, #4294967295
 8008840:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	2312      	movs	r3, #18
 8008848:	e7b0      	b.n	80087ac <_dtoa_r+0x26c>
 800884a:	2301      	movs	r3, #1
 800884c:	9308      	str	r3, [sp, #32]
 800884e:	e7f5      	b.n	800883c <_dtoa_r+0x2fc>
 8008850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008852:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008856:	e7b8      	b.n	80087ca <_dtoa_r+0x28a>
 8008858:	3101      	adds	r1, #1
 800885a:	6041      	str	r1, [r0, #4]
 800885c:	0052      	lsls	r2, r2, #1
 800885e:	e7b8      	b.n	80087d2 <_dtoa_r+0x292>
 8008860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008862:	9a01      	ldr	r2, [sp, #4]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	2b0e      	cmp	r3, #14
 800886a:	f200 809d 	bhi.w	80089a8 <_dtoa_r+0x468>
 800886e:	2d00      	cmp	r5, #0
 8008870:	f000 809a 	beq.w	80089a8 <_dtoa_r+0x468>
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd32      	ble.n	80088e0 <_dtoa_r+0x3a0>
 800887a:	4ab7      	ldr	r2, [pc, #732]	; (8008b58 <_dtoa_r+0x618>)
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008884:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008888:	9b00      	ldr	r3, [sp, #0]
 800888a:	05d8      	lsls	r0, r3, #23
 800888c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008890:	d516      	bpl.n	80088c0 <_dtoa_r+0x380>
 8008892:	4bb2      	ldr	r3, [pc, #712]	; (8008b5c <_dtoa_r+0x61c>)
 8008894:	ec51 0b19 	vmov	r0, r1, d9
 8008898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800889c:	f7f7 fff6 	bl	800088c <__aeabi_ddiv>
 80088a0:	f007 070f 	and.w	r7, r7, #15
 80088a4:	4682      	mov	sl, r0
 80088a6:	468b      	mov	fp, r1
 80088a8:	2503      	movs	r5, #3
 80088aa:	4eac      	ldr	r6, [pc, #688]	; (8008b5c <_dtoa_r+0x61c>)
 80088ac:	b957      	cbnz	r7, 80088c4 <_dtoa_r+0x384>
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	4650      	mov	r0, sl
 80088b4:	4659      	mov	r1, fp
 80088b6:	f7f7 ffe9 	bl	800088c <__aeabi_ddiv>
 80088ba:	4682      	mov	sl, r0
 80088bc:	468b      	mov	fp, r1
 80088be:	e028      	b.n	8008912 <_dtoa_r+0x3d2>
 80088c0:	2502      	movs	r5, #2
 80088c2:	e7f2      	b.n	80088aa <_dtoa_r+0x36a>
 80088c4:	07f9      	lsls	r1, r7, #31
 80088c6:	d508      	bpl.n	80088da <_dtoa_r+0x39a>
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088d0:	f7f7 feb2 	bl	8000638 <__aeabi_dmul>
 80088d4:	3501      	adds	r5, #1
 80088d6:	4680      	mov	r8, r0
 80088d8:	4689      	mov	r9, r1
 80088da:	107f      	asrs	r7, r7, #1
 80088dc:	3608      	adds	r6, #8
 80088de:	e7e5      	b.n	80088ac <_dtoa_r+0x36c>
 80088e0:	f000 809b 	beq.w	8008a1a <_dtoa_r+0x4da>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	4f9d      	ldr	r7, [pc, #628]	; (8008b5c <_dtoa_r+0x61c>)
 80088e8:	425e      	negs	r6, r3
 80088ea:	4b9b      	ldr	r3, [pc, #620]	; (8008b58 <_dtoa_r+0x618>)
 80088ec:	f006 020f 	and.w	r2, r6, #15
 80088f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	ec51 0b19 	vmov	r0, r1, d9
 80088fc:	f7f7 fe9c 	bl	8000638 <__aeabi_dmul>
 8008900:	1136      	asrs	r6, r6, #4
 8008902:	4682      	mov	sl, r0
 8008904:	468b      	mov	fp, r1
 8008906:	2300      	movs	r3, #0
 8008908:	2502      	movs	r5, #2
 800890a:	2e00      	cmp	r6, #0
 800890c:	d17a      	bne.n	8008a04 <_dtoa_r+0x4c4>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1d3      	bne.n	80088ba <_dtoa_r+0x37a>
 8008912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8082 	beq.w	8008a1e <_dtoa_r+0x4de>
 800891a:	4b91      	ldr	r3, [pc, #580]	; (8008b60 <_dtoa_r+0x620>)
 800891c:	2200      	movs	r2, #0
 800891e:	4650      	mov	r0, sl
 8008920:	4659      	mov	r1, fp
 8008922:	f7f8 f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8008926:	2800      	cmp	r0, #0
 8008928:	d079      	beq.n	8008a1e <_dtoa_r+0x4de>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d076      	beq.n	8008a1e <_dtoa_r+0x4de>
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd36      	ble.n	80089a4 <_dtoa_r+0x464>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	4650      	mov	r0, sl
 800893a:	4659      	mov	r1, fp
 800893c:	1e5f      	subs	r7, r3, #1
 800893e:	2200      	movs	r2, #0
 8008940:	4b88      	ldr	r3, [pc, #544]	; (8008b64 <_dtoa_r+0x624>)
 8008942:	f7f7 fe79 	bl	8000638 <__aeabi_dmul>
 8008946:	9e02      	ldr	r6, [sp, #8]
 8008948:	4682      	mov	sl, r0
 800894a:	468b      	mov	fp, r1
 800894c:	3501      	adds	r5, #1
 800894e:	4628      	mov	r0, r5
 8008950:	f7f7 fe08 	bl	8000564 <__aeabi_i2d>
 8008954:	4652      	mov	r2, sl
 8008956:	465b      	mov	r3, fp
 8008958:	f7f7 fe6e 	bl	8000638 <__aeabi_dmul>
 800895c:	4b82      	ldr	r3, [pc, #520]	; (8008b68 <_dtoa_r+0x628>)
 800895e:	2200      	movs	r2, #0
 8008960:	f7f7 fcb4 	bl	80002cc <__adddf3>
 8008964:	46d0      	mov	r8, sl
 8008966:	46d9      	mov	r9, fp
 8008968:	4682      	mov	sl, r0
 800896a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800896e:	2e00      	cmp	r6, #0
 8008970:	d158      	bne.n	8008a24 <_dtoa_r+0x4e4>
 8008972:	4b7e      	ldr	r3, [pc, #504]	; (8008b6c <_dtoa_r+0x62c>)
 8008974:	2200      	movs	r2, #0
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f7 fca5 	bl	80002c8 <__aeabi_dsub>
 800897e:	4652      	mov	r2, sl
 8008980:	465b      	mov	r3, fp
 8008982:	4680      	mov	r8, r0
 8008984:	4689      	mov	r9, r1
 8008986:	f7f8 f8e7 	bl	8000b58 <__aeabi_dcmpgt>
 800898a:	2800      	cmp	r0, #0
 800898c:	f040 8295 	bne.w	8008eba <_dtoa_r+0x97a>
 8008990:	4652      	mov	r2, sl
 8008992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008996:	4640      	mov	r0, r8
 8008998:	4649      	mov	r1, r9
 800899a:	f7f8 f8bf 	bl	8000b1c <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	f040 8289 	bne.w	8008eb6 <_dtoa_r+0x976>
 80089a4:	ec5b ab19 	vmov	sl, fp, d9
 80089a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f2c0 8148 	blt.w	8008c40 <_dtoa_r+0x700>
 80089b0:	9a00      	ldr	r2, [sp, #0]
 80089b2:	2a0e      	cmp	r2, #14
 80089b4:	f300 8144 	bgt.w	8008c40 <_dtoa_r+0x700>
 80089b8:	4b67      	ldr	r3, [pc, #412]	; (8008b58 <_dtoa_r+0x618>)
 80089ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f280 80d5 	bge.w	8008b74 <_dtoa_r+0x634>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f300 80d1 	bgt.w	8008b74 <_dtoa_r+0x634>
 80089d2:	f040 826f 	bne.w	8008eb4 <_dtoa_r+0x974>
 80089d6:	4b65      	ldr	r3, [pc, #404]	; (8008b6c <_dtoa_r+0x62c>)
 80089d8:	2200      	movs	r2, #0
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fe2b 	bl	8000638 <__aeabi_dmul>
 80089e2:	4652      	mov	r2, sl
 80089e4:	465b      	mov	r3, fp
 80089e6:	f7f8 f8ad 	bl	8000b44 <__aeabi_dcmpge>
 80089ea:	9e03      	ldr	r6, [sp, #12]
 80089ec:	4637      	mov	r7, r6
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f040 8245 	bne.w	8008e7e <_dtoa_r+0x93e>
 80089f4:	9d01      	ldr	r5, [sp, #4]
 80089f6:	2331      	movs	r3, #49	; 0x31
 80089f8:	f805 3b01 	strb.w	r3, [r5], #1
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	e240      	b.n	8008e86 <_dtoa_r+0x946>
 8008a04:	07f2      	lsls	r2, r6, #31
 8008a06:	d505      	bpl.n	8008a14 <_dtoa_r+0x4d4>
 8008a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0c:	f7f7 fe14 	bl	8000638 <__aeabi_dmul>
 8008a10:	3501      	adds	r5, #1
 8008a12:	2301      	movs	r3, #1
 8008a14:	1076      	asrs	r6, r6, #1
 8008a16:	3708      	adds	r7, #8
 8008a18:	e777      	b.n	800890a <_dtoa_r+0x3ca>
 8008a1a:	2502      	movs	r5, #2
 8008a1c:	e779      	b.n	8008912 <_dtoa_r+0x3d2>
 8008a1e:	9f00      	ldr	r7, [sp, #0]
 8008a20:	9e03      	ldr	r6, [sp, #12]
 8008a22:	e794      	b.n	800894e <_dtoa_r+0x40e>
 8008a24:	9901      	ldr	r1, [sp, #4]
 8008a26:	4b4c      	ldr	r3, [pc, #304]	; (8008b58 <_dtoa_r+0x618>)
 8008a28:	4431      	add	r1, r6
 8008a2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a2c:	9908      	ldr	r1, [sp, #32]
 8008a2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d043      	beq.n	8008ac2 <_dtoa_r+0x582>
 8008a3a:	494d      	ldr	r1, [pc, #308]	; (8008b70 <_dtoa_r+0x630>)
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f7f7 ff25 	bl	800088c <__aeabi_ddiv>
 8008a42:	4652      	mov	r2, sl
 8008a44:	465b      	mov	r3, fp
 8008a46:	f7f7 fc3f 	bl	80002c8 <__aeabi_dsub>
 8008a4a:	9d01      	ldr	r5, [sp, #4]
 8008a4c:	4682      	mov	sl, r0
 8008a4e:	468b      	mov	fp, r1
 8008a50:	4649      	mov	r1, r9
 8008a52:	4640      	mov	r0, r8
 8008a54:	f7f8 f8a0 	bl	8000b98 <__aeabi_d2iz>
 8008a58:	4606      	mov	r6, r0
 8008a5a:	f7f7 fd83 	bl	8000564 <__aeabi_i2d>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4640      	mov	r0, r8
 8008a64:	4649      	mov	r1, r9
 8008a66:	f7f7 fc2f 	bl	80002c8 <__aeabi_dsub>
 8008a6a:	3630      	adds	r6, #48	; 0x30
 8008a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a70:	4652      	mov	r2, sl
 8008a72:	465b      	mov	r3, fp
 8008a74:	4680      	mov	r8, r0
 8008a76:	4689      	mov	r9, r1
 8008a78:	f7f8 f850 	bl	8000b1c <__aeabi_dcmplt>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d163      	bne.n	8008b48 <_dtoa_r+0x608>
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	4936      	ldr	r1, [pc, #216]	; (8008b60 <_dtoa_r+0x620>)
 8008a86:	2000      	movs	r0, #0
 8008a88:	f7f7 fc1e 	bl	80002c8 <__aeabi_dsub>
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	465b      	mov	r3, fp
 8008a90:	f7f8 f844 	bl	8000b1c <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f040 80b5 	bne.w	8008c04 <_dtoa_r+0x6c4>
 8008a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	d081      	beq.n	80089a4 <_dtoa_r+0x464>
 8008aa0:	4b30      	ldr	r3, [pc, #192]	; (8008b64 <_dtoa_r+0x624>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	4659      	mov	r1, fp
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	4b2d      	ldr	r3, [pc, #180]	; (8008b64 <_dtoa_r+0x624>)
 8008aae:	4682      	mov	sl, r0
 8008ab0:	468b      	mov	fp, r1
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	e7c6      	b.n	8008a50 <_dtoa_r+0x510>
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	4659      	mov	r1, fp
 8008ac6:	f7f7 fdb7 	bl	8000638 <__aeabi_dmul>
 8008aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008acc:	9d01      	ldr	r5, [sp, #4]
 8008ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	468b      	mov	fp, r1
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	f7f8 f85e 	bl	8000b98 <__aeabi_d2iz>
 8008adc:	4606      	mov	r6, r0
 8008ade:	f7f7 fd41 	bl	8000564 <__aeabi_i2d>
 8008ae2:	3630      	adds	r6, #48	; 0x30
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7f7 fbec 	bl	80002c8 <__aeabi_dsub>
 8008af0:	f805 6b01 	strb.w	r6, [r5], #1
 8008af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008af6:	429d      	cmp	r5, r3
 8008af8:	4680      	mov	r8, r0
 8008afa:	4689      	mov	r9, r1
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	d124      	bne.n	8008b4c <_dtoa_r+0x60c>
 8008b02:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <_dtoa_r+0x630>)
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f7f7 fbe0 	bl	80002cc <__adddf3>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4640      	mov	r0, r8
 8008b12:	4649      	mov	r1, r9
 8008b14:	f7f8 f820 	bl	8000b58 <__aeabi_dcmpgt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d173      	bne.n	8008c04 <_dtoa_r+0x6c4>
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	465b      	mov	r3, fp
 8008b20:	4913      	ldr	r1, [pc, #76]	; (8008b70 <_dtoa_r+0x630>)
 8008b22:	2000      	movs	r0, #0
 8008b24:	f7f7 fbd0 	bl	80002c8 <__aeabi_dsub>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fff4 	bl	8000b1c <__aeabi_dcmplt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f43f af35 	beq.w	80089a4 <_dtoa_r+0x464>
 8008b3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b3c:	1e6b      	subs	r3, r5, #1
 8008b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b44:	2b30      	cmp	r3, #48	; 0x30
 8008b46:	d0f8      	beq.n	8008b3a <_dtoa_r+0x5fa>
 8008b48:	9700      	str	r7, [sp, #0]
 8008b4a:	e049      	b.n	8008be0 <_dtoa_r+0x6a0>
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <_dtoa_r+0x624>)
 8008b4e:	f7f7 fd73 	bl	8000638 <__aeabi_dmul>
 8008b52:	4680      	mov	r8, r0
 8008b54:	4689      	mov	r9, r1
 8008b56:	e7bd      	b.n	8008ad4 <_dtoa_r+0x594>
 8008b58:	0800a438 	.word	0x0800a438
 8008b5c:	0800a410 	.word	0x0800a410
 8008b60:	3ff00000 	.word	0x3ff00000
 8008b64:	40240000 	.word	0x40240000
 8008b68:	401c0000 	.word	0x401c0000
 8008b6c:	40140000 	.word	0x40140000
 8008b70:	3fe00000 	.word	0x3fe00000
 8008b74:	9d01      	ldr	r5, [sp, #4]
 8008b76:	4656      	mov	r6, sl
 8008b78:	465f      	mov	r7, fp
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4639      	mov	r1, r7
 8008b82:	f7f7 fe83 	bl	800088c <__aeabi_ddiv>
 8008b86:	f7f8 f807 	bl	8000b98 <__aeabi_d2iz>
 8008b8a:	4682      	mov	sl, r0
 8008b8c:	f7f7 fcea 	bl	8000564 <__aeabi_i2d>
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	f7f7 fd50 	bl	8000638 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008ba4:	f7f7 fb90 	bl	80002c8 <__aeabi_dsub>
 8008ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8008bac:	9e01      	ldr	r6, [sp, #4]
 8008bae:	9f03      	ldr	r7, [sp, #12]
 8008bb0:	1bae      	subs	r6, r5, r6
 8008bb2:	42b7      	cmp	r7, r6
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	d135      	bne.n	8008c26 <_dtoa_r+0x6e6>
 8008bba:	f7f7 fb87 	bl	80002cc <__adddf3>
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	460f      	mov	r7, r1
 8008bc6:	f7f7 ffc7 	bl	8000b58 <__aeabi_dcmpgt>
 8008bca:	b9d0      	cbnz	r0, 8008c02 <_dtoa_r+0x6c2>
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 ff98 	bl	8000b08 <__aeabi_dcmpeq>
 8008bd8:	b110      	cbz	r0, 8008be0 <_dtoa_r+0x6a0>
 8008bda:	f01a 0f01 	tst.w	sl, #1
 8008bde:	d110      	bne.n	8008c02 <_dtoa_r+0x6c2>
 8008be0:	4620      	mov	r0, r4
 8008be2:	ee18 1a10 	vmov	r1, s16
 8008be6:	f000 fbc5 	bl	8009374 <_Bfree>
 8008bea:	2300      	movs	r3, #0
 8008bec:	9800      	ldr	r0, [sp, #0]
 8008bee:	702b      	strb	r3, [r5, #0]
 8008bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	6018      	str	r0, [r3, #0]
 8008bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f43f acf1 	beq.w	80085e0 <_dtoa_r+0xa0>
 8008bfe:	601d      	str	r5, [r3, #0]
 8008c00:	e4ee      	b.n	80085e0 <_dtoa_r+0xa0>
 8008c02:	9f00      	ldr	r7, [sp, #0]
 8008c04:	462b      	mov	r3, r5
 8008c06:	461d      	mov	r5, r3
 8008c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c0c:	2a39      	cmp	r2, #57	; 0x39
 8008c0e:	d106      	bne.n	8008c1e <_dtoa_r+0x6de>
 8008c10:	9a01      	ldr	r2, [sp, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d1f7      	bne.n	8008c06 <_dtoa_r+0x6c6>
 8008c16:	9901      	ldr	r1, [sp, #4]
 8008c18:	2230      	movs	r2, #48	; 0x30
 8008c1a:	3701      	adds	r7, #1
 8008c1c:	700a      	strb	r2, [r1, #0]
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	3201      	adds	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e790      	b.n	8008b48 <_dtoa_r+0x608>
 8008c26:	4ba6      	ldr	r3, [pc, #664]	; (8008ec0 <_dtoa_r+0x980>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f7f7 fd05 	bl	8000638 <__aeabi_dmul>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	f7f7 ff67 	bl	8000b08 <__aeabi_dcmpeq>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d09d      	beq.n	8008b7a <_dtoa_r+0x63a>
 8008c3e:	e7cf      	b.n	8008be0 <_dtoa_r+0x6a0>
 8008c40:	9a08      	ldr	r2, [sp, #32]
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	f000 80d7 	beq.w	8008df6 <_dtoa_r+0x8b6>
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	2a01      	cmp	r2, #1
 8008c4c:	f300 80ba 	bgt.w	8008dc4 <_dtoa_r+0x884>
 8008c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80b2 	beq.w	8008dbc <_dtoa_r+0x87c>
 8008c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c5c:	9e07      	ldr	r6, [sp, #28]
 8008c5e:	9d04      	ldr	r5, [sp, #16]
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	441a      	add	r2, r3
 8008c64:	9204      	str	r2, [sp, #16]
 8008c66:	9a05      	ldr	r2, [sp, #20]
 8008c68:	2101      	movs	r1, #1
 8008c6a:	441a      	add	r2, r3
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	9205      	str	r2, [sp, #20]
 8008c70:	f000 fc38 	bl	80094e4 <__i2b>
 8008c74:	4607      	mov	r7, r0
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	dd0c      	ble.n	8008c94 <_dtoa_r+0x754>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dd09      	ble.n	8008c94 <_dtoa_r+0x754>
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	9a04      	ldr	r2, [sp, #16]
 8008c84:	bfa8      	it	ge
 8008c86:	462b      	movge	r3, r5
 8008c88:	1ad2      	subs	r2, r2, r3
 8008c8a:	9204      	str	r2, [sp, #16]
 8008c8c:	9a05      	ldr	r2, [sp, #20]
 8008c8e:	1aed      	subs	r5, r5, r3
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	9305      	str	r3, [sp, #20]
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	b31b      	cbz	r3, 8008ce0 <_dtoa_r+0x7a0>
 8008c98:	9b08      	ldr	r3, [sp, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 80af 	beq.w	8008dfe <_dtoa_r+0x8be>
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	dd13      	ble.n	8008ccc <_dtoa_r+0x78c>
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fcdb 	bl	8009664 <__pow5mult>
 8008cae:	ee18 2a10 	vmov	r2, s16
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fc2a 	bl	8009510 <__multiply>
 8008cbc:	ee18 1a10 	vmov	r1, s16
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fb56 	bl	8009374 <_Bfree>
 8008cc8:	ee08 8a10 	vmov	s16, r8
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	1b9a      	subs	r2, r3, r6
 8008cd0:	d006      	beq.n	8008ce0 <_dtoa_r+0x7a0>
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 fcc4 	bl	8009664 <__pow5mult>
 8008cdc:	ee08 0a10 	vmov	s16, r0
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fbfe 	bl	80094e4 <__i2b>
 8008ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	4606      	mov	r6, r0
 8008cee:	f340 8088 	ble.w	8008e02 <_dtoa_r+0x8c2>
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f000 fcb4 	bl	8009664 <__pow5mult>
 8008cfc:	9b06      	ldr	r3, [sp, #24]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	4606      	mov	r6, r0
 8008d02:	f340 8081 	ble.w	8008e08 <_dtoa_r+0x8c8>
 8008d06:	f04f 0800 	mov.w	r8, #0
 8008d0a:	6933      	ldr	r3, [r6, #16]
 8008d0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d10:	6918      	ldr	r0, [r3, #16]
 8008d12:	f000 fb97 	bl	8009444 <__hi0bits>
 8008d16:	f1c0 0020 	rsb	r0, r0, #32
 8008d1a:	9b05      	ldr	r3, [sp, #20]
 8008d1c:	4418      	add	r0, r3
 8008d1e:	f010 001f 	ands.w	r0, r0, #31
 8008d22:	f000 8092 	beq.w	8008e4a <_dtoa_r+0x90a>
 8008d26:	f1c0 0320 	rsb	r3, r0, #32
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	f340 808a 	ble.w	8008e44 <_dtoa_r+0x904>
 8008d30:	f1c0 001c 	rsb	r0, r0, #28
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	4403      	add	r3, r0
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	9b05      	ldr	r3, [sp, #20]
 8008d3c:	4403      	add	r3, r0
 8008d3e:	4405      	add	r5, r0
 8008d40:	9305      	str	r3, [sp, #20]
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dd07      	ble.n	8008d58 <_dtoa_r+0x818>
 8008d48:	ee18 1a10 	vmov	r1, s16
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fce2 	bl	8009718 <__lshift>
 8008d54:	ee08 0a10 	vmov	s16, r0
 8008d58:	9b05      	ldr	r3, [sp, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dd05      	ble.n	8008d6a <_dtoa_r+0x82a>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	461a      	mov	r2, r3
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fcd8 	bl	8009718 <__lshift>
 8008d68:	4606      	mov	r6, r0
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d06e      	beq.n	8008e4e <_dtoa_r+0x90e>
 8008d70:	ee18 0a10 	vmov	r0, s16
 8008d74:	4631      	mov	r1, r6
 8008d76:	f000 fd3f 	bl	80097f8 <__mcmp>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	da67      	bge.n	8008e4e <_dtoa_r+0x90e>
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	ee18 1a10 	vmov	r1, s16
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	220a      	movs	r2, #10
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fb13 	bl	80093b8 <__multadd>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	ee08 0a10 	vmov	s16, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 81b1 	beq.w	8009100 <_dtoa_r+0xbc0>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4639      	mov	r1, r7
 8008da2:	220a      	movs	r2, #10
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fb07 	bl	80093b8 <__multadd>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	4607      	mov	r7, r0
 8008db0:	f300 808e 	bgt.w	8008ed0 <_dtoa_r+0x990>
 8008db4:	9b06      	ldr	r3, [sp, #24]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	dc51      	bgt.n	8008e5e <_dtoa_r+0x91e>
 8008dba:	e089      	b.n	8008ed0 <_dtoa_r+0x990>
 8008dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dc2:	e74b      	b.n	8008c5c <_dtoa_r+0x71c>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1e5e      	subs	r6, r3, #1
 8008dc8:	9b07      	ldr	r3, [sp, #28]
 8008dca:	42b3      	cmp	r3, r6
 8008dcc:	bfbf      	itttt	lt
 8008dce:	9b07      	ldrlt	r3, [sp, #28]
 8008dd0:	9607      	strlt	r6, [sp, #28]
 8008dd2:	1af2      	sublt	r2, r6, r3
 8008dd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dd6:	bfb6      	itet	lt
 8008dd8:	189b      	addlt	r3, r3, r2
 8008dda:	1b9e      	subge	r6, r3, r6
 8008ddc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	bfb8      	it	lt
 8008de2:	2600      	movlt	r6, #0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfb7      	itett	lt
 8008de8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008dec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008df0:	1a9d      	sublt	r5, r3, r2
 8008df2:	2300      	movlt	r3, #0
 8008df4:	e734      	b.n	8008c60 <_dtoa_r+0x720>
 8008df6:	9e07      	ldr	r6, [sp, #28]
 8008df8:	9d04      	ldr	r5, [sp, #16]
 8008dfa:	9f08      	ldr	r7, [sp, #32]
 8008dfc:	e73b      	b.n	8008c76 <_dtoa_r+0x736>
 8008dfe:	9a07      	ldr	r2, [sp, #28]
 8008e00:	e767      	b.n	8008cd2 <_dtoa_r+0x792>
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	dc18      	bgt.n	8008e3a <_dtoa_r+0x8fa>
 8008e08:	f1ba 0f00 	cmp.w	sl, #0
 8008e0c:	d115      	bne.n	8008e3a <_dtoa_r+0x8fa>
 8008e0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e12:	b993      	cbnz	r3, 8008e3a <_dtoa_r+0x8fa>
 8008e14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e18:	0d1b      	lsrs	r3, r3, #20
 8008e1a:	051b      	lsls	r3, r3, #20
 8008e1c:	b183      	cbz	r3, 8008e40 <_dtoa_r+0x900>
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	9b05      	ldr	r3, [sp, #20]
 8008e26:	3301      	adds	r3, #1
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	f04f 0801 	mov.w	r8, #1
 8008e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f47f af6a 	bne.w	8008d0a <_dtoa_r+0x7ca>
 8008e36:	2001      	movs	r0, #1
 8008e38:	e76f      	b.n	8008d1a <_dtoa_r+0x7da>
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	e7f6      	b.n	8008e2e <_dtoa_r+0x8ee>
 8008e40:	4698      	mov	r8, r3
 8008e42:	e7f4      	b.n	8008e2e <_dtoa_r+0x8ee>
 8008e44:	f43f af7d 	beq.w	8008d42 <_dtoa_r+0x802>
 8008e48:	4618      	mov	r0, r3
 8008e4a:	301c      	adds	r0, #28
 8008e4c:	e772      	b.n	8008d34 <_dtoa_r+0x7f4>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc37      	bgt.n	8008ec4 <_dtoa_r+0x984>
 8008e54:	9b06      	ldr	r3, [sp, #24]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	dd34      	ble.n	8008ec4 <_dtoa_r+0x984>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	9b02      	ldr	r3, [sp, #8]
 8008e60:	b96b      	cbnz	r3, 8008e7e <_dtoa_r+0x93e>
 8008e62:	4631      	mov	r1, r6
 8008e64:	2205      	movs	r2, #5
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 faa6 	bl	80093b8 <__multadd>
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	4606      	mov	r6, r0
 8008e70:	ee18 0a10 	vmov	r0, s16
 8008e74:	f000 fcc0 	bl	80097f8 <__mcmp>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	f73f adbb 	bgt.w	80089f4 <_dtoa_r+0x4b4>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e80:	9d01      	ldr	r5, [sp, #4]
 8008e82:	43db      	mvns	r3, r3
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	f04f 0800 	mov.w	r8, #0
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fa71 	bl	8009374 <_Bfree>
 8008e92:	2f00      	cmp	r7, #0
 8008e94:	f43f aea4 	beq.w	8008be0 <_dtoa_r+0x6a0>
 8008e98:	f1b8 0f00 	cmp.w	r8, #0
 8008e9c:	d005      	beq.n	8008eaa <_dtoa_r+0x96a>
 8008e9e:	45b8      	cmp	r8, r7
 8008ea0:	d003      	beq.n	8008eaa <_dtoa_r+0x96a>
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fa65 	bl	8009374 <_Bfree>
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 fa61 	bl	8009374 <_Bfree>
 8008eb2:	e695      	b.n	8008be0 <_dtoa_r+0x6a0>
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	4637      	mov	r7, r6
 8008eb8:	e7e1      	b.n	8008e7e <_dtoa_r+0x93e>
 8008eba:	9700      	str	r7, [sp, #0]
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	e599      	b.n	80089f4 <_dtoa_r+0x4b4>
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 80ca 	beq.w	8009060 <_dtoa_r+0xb20>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	9302      	str	r3, [sp, #8]
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	dd05      	ble.n	8008ee0 <_dtoa_r+0x9a0>
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	462a      	mov	r2, r5
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fc1d 	bl	8009718 <__lshift>
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f1b8 0f00 	cmp.w	r8, #0
 8008ee4:	d05b      	beq.n	8008f9e <_dtoa_r+0xa5e>
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fa03 	bl	80092f4 <_Balloc>
 8008eee:	4605      	mov	r5, r0
 8008ef0:	b928      	cbnz	r0, 8008efe <_dtoa_r+0x9be>
 8008ef2:	4b87      	ldr	r3, [pc, #540]	; (8009110 <_dtoa_r+0xbd0>)
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008efa:	f7ff bb3b 	b.w	8008574 <_dtoa_r+0x34>
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	3202      	adds	r2, #2
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	f107 010c 	add.w	r1, r7, #12
 8008f08:	300c      	adds	r0, #12
 8008f0a:	f7fe fc98 	bl	800783e <memcpy>
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4629      	mov	r1, r5
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fc00 	bl	8009718 <__lshift>
 8008f18:	9b01      	ldr	r3, [sp, #4]
 8008f1a:	f103 0901 	add.w	r9, r3, #1
 8008f1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	f00a 0301 	and.w	r3, sl, #1
 8008f2a:	46b8      	mov	r8, r7
 8008f2c:	9304      	str	r3, [sp, #16]
 8008f2e:	4607      	mov	r7, r0
 8008f30:	4631      	mov	r1, r6
 8008f32:	ee18 0a10 	vmov	r0, s16
 8008f36:	f7ff fa77 	bl	8008428 <quorem>
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	9002      	str	r0, [sp, #8]
 8008f3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f42:	ee18 0a10 	vmov	r0, s16
 8008f46:	f000 fc57 	bl	80097f8 <__mcmp>
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	9003      	str	r0, [sp, #12]
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fc6d 	bl	8009830 <__mdiff>
 8008f56:	68c2      	ldr	r2, [r0, #12]
 8008f58:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	bb02      	cbnz	r2, 8008fa2 <_dtoa_r+0xa62>
 8008f60:	4601      	mov	r1, r0
 8008f62:	ee18 0a10 	vmov	r0, s16
 8008f66:	f000 fc47 	bl	80097f8 <__mcmp>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4620      	mov	r0, r4
 8008f70:	9207      	str	r2, [sp, #28]
 8008f72:	f000 f9ff 	bl	8009374 <_Bfree>
 8008f76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f7a:	ea43 0102 	orr.w	r1, r3, r2
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	430b      	orrs	r3, r1
 8008f82:	464d      	mov	r5, r9
 8008f84:	d10f      	bne.n	8008fa6 <_dtoa_r+0xa66>
 8008f86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f8a:	d02a      	beq.n	8008fe2 <_dtoa_r+0xaa2>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dd02      	ble.n	8008f98 <_dtoa_r+0xa58>
 8008f92:	9b02      	ldr	r3, [sp, #8]
 8008f94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008f98:	f88b a000 	strb.w	sl, [fp]
 8008f9c:	e775      	b.n	8008e8a <_dtoa_r+0x94a>
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	e7ba      	b.n	8008f18 <_dtoa_r+0x9d8>
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	e7e2      	b.n	8008f6c <_dtoa_r+0xa2c>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db04      	blt.n	8008fb6 <_dtoa_r+0xa76>
 8008fac:	9906      	ldr	r1, [sp, #24]
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	9904      	ldr	r1, [sp, #16]
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	d122      	bne.n	8008ffc <_dtoa_r+0xabc>
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	ddee      	ble.n	8008f98 <_dtoa_r+0xa58>
 8008fba:	ee18 1a10 	vmov	r1, s16
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 fba9 	bl	8009718 <__lshift>
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	ee08 0a10 	vmov	s16, r0
 8008fcc:	f000 fc14 	bl	80097f8 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dc03      	bgt.n	8008fdc <_dtoa_r+0xa9c>
 8008fd4:	d1e0      	bne.n	8008f98 <_dtoa_r+0xa58>
 8008fd6:	f01a 0f01 	tst.w	sl, #1
 8008fda:	d0dd      	beq.n	8008f98 <_dtoa_r+0xa58>
 8008fdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008fe0:	d1d7      	bne.n	8008f92 <_dtoa_r+0xa52>
 8008fe2:	2339      	movs	r3, #57	; 0x39
 8008fe4:	f88b 3000 	strb.w	r3, [fp]
 8008fe8:	462b      	mov	r3, r5
 8008fea:	461d      	mov	r5, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ff2:	2a39      	cmp	r2, #57	; 0x39
 8008ff4:	d071      	beq.n	80090da <_dtoa_r+0xb9a>
 8008ff6:	3201      	adds	r2, #1
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	e746      	b.n	8008e8a <_dtoa_r+0x94a>
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	dd07      	ble.n	8009010 <_dtoa_r+0xad0>
 8009000:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009004:	d0ed      	beq.n	8008fe2 <_dtoa_r+0xaa2>
 8009006:	f10a 0301 	add.w	r3, sl, #1
 800900a:	f88b 3000 	strb.w	r3, [fp]
 800900e:	e73c      	b.n	8008e8a <_dtoa_r+0x94a>
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009016:	4599      	cmp	r9, r3
 8009018:	d047      	beq.n	80090aa <_dtoa_r+0xb6a>
 800901a:	ee18 1a10 	vmov	r1, s16
 800901e:	2300      	movs	r3, #0
 8009020:	220a      	movs	r2, #10
 8009022:	4620      	mov	r0, r4
 8009024:	f000 f9c8 	bl	80093b8 <__multadd>
 8009028:	45b8      	cmp	r8, r7
 800902a:	ee08 0a10 	vmov	s16, r0
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	f04f 020a 	mov.w	r2, #10
 8009036:	4641      	mov	r1, r8
 8009038:	4620      	mov	r0, r4
 800903a:	d106      	bne.n	800904a <_dtoa_r+0xb0a>
 800903c:	f000 f9bc 	bl	80093b8 <__multadd>
 8009040:	4680      	mov	r8, r0
 8009042:	4607      	mov	r7, r0
 8009044:	f109 0901 	add.w	r9, r9, #1
 8009048:	e772      	b.n	8008f30 <_dtoa_r+0x9f0>
 800904a:	f000 f9b5 	bl	80093b8 <__multadd>
 800904e:	4639      	mov	r1, r7
 8009050:	4680      	mov	r8, r0
 8009052:	2300      	movs	r3, #0
 8009054:	220a      	movs	r2, #10
 8009056:	4620      	mov	r0, r4
 8009058:	f000 f9ae 	bl	80093b8 <__multadd>
 800905c:	4607      	mov	r7, r0
 800905e:	e7f1      	b.n	8009044 <_dtoa_r+0xb04>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	9d01      	ldr	r5, [sp, #4]
 8009066:	ee18 0a10 	vmov	r0, s16
 800906a:	4631      	mov	r1, r6
 800906c:	f7ff f9dc 	bl	8008428 <quorem>
 8009070:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	f805 ab01 	strb.w	sl, [r5], #1
 800907a:	1aea      	subs	r2, r5, r3
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	4293      	cmp	r3, r2
 8009080:	dd09      	ble.n	8009096 <_dtoa_r+0xb56>
 8009082:	ee18 1a10 	vmov	r1, s16
 8009086:	2300      	movs	r3, #0
 8009088:	220a      	movs	r2, #10
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f994 	bl	80093b8 <__multadd>
 8009090:	ee08 0a10 	vmov	s16, r0
 8009094:	e7e7      	b.n	8009066 <_dtoa_r+0xb26>
 8009096:	9b02      	ldr	r3, [sp, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfc8      	it	gt
 800909c:	461d      	movgt	r5, r3
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	bfd8      	it	le
 80090a2:	2501      	movle	r5, #1
 80090a4:	441d      	add	r5, r3
 80090a6:	f04f 0800 	mov.w	r8, #0
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	2201      	movs	r2, #1
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fb31 	bl	8009718 <__lshift>
 80090b6:	4631      	mov	r1, r6
 80090b8:	ee08 0a10 	vmov	s16, r0
 80090bc:	f000 fb9c 	bl	80097f8 <__mcmp>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	dc91      	bgt.n	8008fe8 <_dtoa_r+0xaa8>
 80090c4:	d102      	bne.n	80090cc <_dtoa_r+0xb8c>
 80090c6:	f01a 0f01 	tst.w	sl, #1
 80090ca:	d18d      	bne.n	8008fe8 <_dtoa_r+0xaa8>
 80090cc:	462b      	mov	r3, r5
 80090ce:	461d      	mov	r5, r3
 80090d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090d4:	2a30      	cmp	r2, #48	; 0x30
 80090d6:	d0fa      	beq.n	80090ce <_dtoa_r+0xb8e>
 80090d8:	e6d7      	b.n	8008e8a <_dtoa_r+0x94a>
 80090da:	9a01      	ldr	r2, [sp, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d184      	bne.n	8008fea <_dtoa_r+0xaaa>
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	2331      	movs	r3, #49	; 0x31
 80090e8:	7013      	strb	r3, [r2, #0]
 80090ea:	e6ce      	b.n	8008e8a <_dtoa_r+0x94a>
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <_dtoa_r+0xbd4>)
 80090ee:	f7ff ba95 	b.w	800861c <_dtoa_r+0xdc>
 80090f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f aa6e 	bne.w	80085d6 <_dtoa_r+0x96>
 80090fa:	4b07      	ldr	r3, [pc, #28]	; (8009118 <_dtoa_r+0xbd8>)
 80090fc:	f7ff ba8e 	b.w	800861c <_dtoa_r+0xdc>
 8009100:	9b02      	ldr	r3, [sp, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	dcae      	bgt.n	8009064 <_dtoa_r+0xb24>
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	2b02      	cmp	r3, #2
 800910a:	f73f aea8 	bgt.w	8008e5e <_dtoa_r+0x91e>
 800910e:	e7a9      	b.n	8009064 <_dtoa_r+0xb24>
 8009110:	0800a3a3 	.word	0x0800a3a3
 8009114:	0800a300 	.word	0x0800a300
 8009118:	0800a324 	.word	0x0800a324

0800911c <__sflush_r>:
 800911c:	898a      	ldrh	r2, [r1, #12]
 800911e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	4605      	mov	r5, r0
 8009124:	0710      	lsls	r0, r2, #28
 8009126:	460c      	mov	r4, r1
 8009128:	d458      	bmi.n	80091dc <__sflush_r+0xc0>
 800912a:	684b      	ldr	r3, [r1, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dc05      	bgt.n	800913c <__sflush_r+0x20>
 8009130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	dc02      	bgt.n	800913c <__sflush_r+0x20>
 8009136:	2000      	movs	r0, #0
 8009138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800913e:	2e00      	cmp	r6, #0
 8009140:	d0f9      	beq.n	8009136 <__sflush_r+0x1a>
 8009142:	2300      	movs	r3, #0
 8009144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009148:	682f      	ldr	r7, [r5, #0]
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	d032      	beq.n	80091b4 <__sflush_r+0x98>
 800914e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	075a      	lsls	r2, r3, #29
 8009154:	d505      	bpl.n	8009162 <__sflush_r+0x46>
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	1ac0      	subs	r0, r0, r3
 800915a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800915c:	b10b      	cbz	r3, 8009162 <__sflush_r+0x46>
 800915e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009160:	1ac0      	subs	r0, r0, r3
 8009162:	2300      	movs	r3, #0
 8009164:	4602      	mov	r2, r0
 8009166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009168:	6a21      	ldr	r1, [r4, #32]
 800916a:	4628      	mov	r0, r5
 800916c:	47b0      	blx	r6
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	d106      	bne.n	8009182 <__sflush_r+0x66>
 8009174:	6829      	ldr	r1, [r5, #0]
 8009176:	291d      	cmp	r1, #29
 8009178:	d82c      	bhi.n	80091d4 <__sflush_r+0xb8>
 800917a:	4a2a      	ldr	r2, [pc, #168]	; (8009224 <__sflush_r+0x108>)
 800917c:	40ca      	lsrs	r2, r1
 800917e:	07d6      	lsls	r6, r2, #31
 8009180:	d528      	bpl.n	80091d4 <__sflush_r+0xb8>
 8009182:	2200      	movs	r2, #0
 8009184:	6062      	str	r2, [r4, #4]
 8009186:	04d9      	lsls	r1, r3, #19
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	6022      	str	r2, [r4, #0]
 800918c:	d504      	bpl.n	8009198 <__sflush_r+0x7c>
 800918e:	1c42      	adds	r2, r0, #1
 8009190:	d101      	bne.n	8009196 <__sflush_r+0x7a>
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	b903      	cbnz	r3, 8009198 <__sflush_r+0x7c>
 8009196:	6560      	str	r0, [r4, #84]	; 0x54
 8009198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919a:	602f      	str	r7, [r5, #0]
 800919c:	2900      	cmp	r1, #0
 800919e:	d0ca      	beq.n	8009136 <__sflush_r+0x1a>
 80091a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d002      	beq.n	80091ae <__sflush_r+0x92>
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 fc3d 	bl	8009a28 <_free_r>
 80091ae:	2000      	movs	r0, #0
 80091b0:	6360      	str	r0, [r4, #52]	; 0x34
 80091b2:	e7c1      	b.n	8009138 <__sflush_r+0x1c>
 80091b4:	6a21      	ldr	r1, [r4, #32]
 80091b6:	2301      	movs	r3, #1
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b0      	blx	r6
 80091bc:	1c41      	adds	r1, r0, #1
 80091be:	d1c7      	bne.n	8009150 <__sflush_r+0x34>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0c4      	beq.n	8009150 <__sflush_r+0x34>
 80091c6:	2b1d      	cmp	r3, #29
 80091c8:	d001      	beq.n	80091ce <__sflush_r+0xb2>
 80091ca:	2b16      	cmp	r3, #22
 80091cc:	d101      	bne.n	80091d2 <__sflush_r+0xb6>
 80091ce:	602f      	str	r7, [r5, #0]
 80091d0:	e7b1      	b.n	8009136 <__sflush_r+0x1a>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	e7ad      	b.n	8009138 <__sflush_r+0x1c>
 80091dc:	690f      	ldr	r7, [r1, #16]
 80091de:	2f00      	cmp	r7, #0
 80091e0:	d0a9      	beq.n	8009136 <__sflush_r+0x1a>
 80091e2:	0793      	lsls	r3, r2, #30
 80091e4:	680e      	ldr	r6, [r1, #0]
 80091e6:	bf08      	it	eq
 80091e8:	694b      	ldreq	r3, [r1, #20]
 80091ea:	600f      	str	r7, [r1, #0]
 80091ec:	bf18      	it	ne
 80091ee:	2300      	movne	r3, #0
 80091f0:	eba6 0807 	sub.w	r8, r6, r7
 80091f4:	608b      	str	r3, [r1, #8]
 80091f6:	f1b8 0f00 	cmp.w	r8, #0
 80091fa:	dd9c      	ble.n	8009136 <__sflush_r+0x1a>
 80091fc:	6a21      	ldr	r1, [r4, #32]
 80091fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009200:	4643      	mov	r3, r8
 8009202:	463a      	mov	r2, r7
 8009204:	4628      	mov	r0, r5
 8009206:	47b0      	blx	r6
 8009208:	2800      	cmp	r0, #0
 800920a:	dc06      	bgt.n	800921a <__sflush_r+0xfe>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e78e      	b.n	8009138 <__sflush_r+0x1c>
 800921a:	4407      	add	r7, r0
 800921c:	eba8 0800 	sub.w	r8, r8, r0
 8009220:	e7e9      	b.n	80091f6 <__sflush_r+0xda>
 8009222:	bf00      	nop
 8009224:	20400001 	.word	0x20400001

08009228 <_fflush_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	690b      	ldr	r3, [r1, #16]
 800922c:	4605      	mov	r5, r0
 800922e:	460c      	mov	r4, r1
 8009230:	b913      	cbnz	r3, 8009238 <_fflush_r+0x10>
 8009232:	2500      	movs	r5, #0
 8009234:	4628      	mov	r0, r5
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	b118      	cbz	r0, 8009242 <_fflush_r+0x1a>
 800923a:	6983      	ldr	r3, [r0, #24]
 800923c:	b90b      	cbnz	r3, 8009242 <_fflush_r+0x1a>
 800923e:	f7fe fa39 	bl	80076b4 <__sinit>
 8009242:	4b14      	ldr	r3, [pc, #80]	; (8009294 <_fflush_r+0x6c>)
 8009244:	429c      	cmp	r4, r3
 8009246:	d11b      	bne.n	8009280 <_fflush_r+0x58>
 8009248:	686c      	ldr	r4, [r5, #4]
 800924a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0ef      	beq.n	8009232 <_fflush_r+0xa>
 8009252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009254:	07d0      	lsls	r0, r2, #31
 8009256:	d404      	bmi.n	8009262 <_fflush_r+0x3a>
 8009258:	0599      	lsls	r1, r3, #22
 800925a:	d402      	bmi.n	8009262 <_fflush_r+0x3a>
 800925c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800925e:	f7fe faec 	bl	800783a <__retarget_lock_acquire_recursive>
 8009262:	4628      	mov	r0, r5
 8009264:	4621      	mov	r1, r4
 8009266:	f7ff ff59 	bl	800911c <__sflush_r>
 800926a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800926c:	07da      	lsls	r2, r3, #31
 800926e:	4605      	mov	r5, r0
 8009270:	d4e0      	bmi.n	8009234 <_fflush_r+0xc>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	059b      	lsls	r3, r3, #22
 8009276:	d4dd      	bmi.n	8009234 <_fflush_r+0xc>
 8009278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927a:	f7fe fadf 	bl	800783c <__retarget_lock_release_recursive>
 800927e:	e7d9      	b.n	8009234 <_fflush_r+0xc>
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <_fflush_r+0x70>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d101      	bne.n	800928a <_fflush_r+0x62>
 8009286:	68ac      	ldr	r4, [r5, #8]
 8009288:	e7df      	b.n	800924a <_fflush_r+0x22>
 800928a:	4b04      	ldr	r3, [pc, #16]	; (800929c <_fflush_r+0x74>)
 800928c:	429c      	cmp	r4, r3
 800928e:	bf08      	it	eq
 8009290:	68ec      	ldreq	r4, [r5, #12]
 8009292:	e7da      	b.n	800924a <_fflush_r+0x22>
 8009294:	0800a2ac 	.word	0x0800a2ac
 8009298:	0800a2cc 	.word	0x0800a2cc
 800929c:	0800a28c 	.word	0x0800a28c

080092a0 <_localeconv_r>:
 80092a0:	4800      	ldr	r0, [pc, #0]	; (80092a4 <_localeconv_r+0x4>)
 80092a2:	4770      	bx	lr
 80092a4:	20000168 	.word	0x20000168

080092a8 <_lseek_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d07      	ldr	r5, [pc, #28]	; (80092c8 <_lseek_r+0x20>)
 80092ac:	4604      	mov	r4, r0
 80092ae:	4608      	mov	r0, r1
 80092b0:	4611      	mov	r1, r2
 80092b2:	2200      	movs	r2, #0
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	f000 ff78 	bl	800a1ac <_lseek>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_lseek_r+0x1e>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_lseek_r+0x1e>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	2000662c 	.word	0x2000662c

080092cc <malloc>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <malloc+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7fe baeb 	b.w	80078ac <_malloc_r>
 80092d6:	bf00      	nop
 80092d8:	20000014 	.word	0x20000014

080092dc <__malloc_lock>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__malloc_lock+0x8>)
 80092de:	f7fe baac 	b.w	800783a <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	20006620 	.word	0x20006620

080092e8 <__malloc_unlock>:
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <__malloc_unlock+0x8>)
 80092ea:	f7fe baa7 	b.w	800783c <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	20006620 	.word	0x20006620

080092f4 <_Balloc>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092f8:	4604      	mov	r4, r0
 80092fa:	460d      	mov	r5, r1
 80092fc:	b976      	cbnz	r6, 800931c <_Balloc+0x28>
 80092fe:	2010      	movs	r0, #16
 8009300:	f7ff ffe4 	bl	80092cc <malloc>
 8009304:	4602      	mov	r2, r0
 8009306:	6260      	str	r0, [r4, #36]	; 0x24
 8009308:	b920      	cbnz	r0, 8009314 <_Balloc+0x20>
 800930a:	4b18      	ldr	r3, [pc, #96]	; (800936c <_Balloc+0x78>)
 800930c:	4818      	ldr	r0, [pc, #96]	; (8009370 <_Balloc+0x7c>)
 800930e:	2166      	movs	r1, #102	; 0x66
 8009310:	f000 fbe8 	bl	8009ae4 <__assert_func>
 8009314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009318:	6006      	str	r6, [r0, #0]
 800931a:	60c6      	str	r6, [r0, #12]
 800931c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800931e:	68f3      	ldr	r3, [r6, #12]
 8009320:	b183      	cbz	r3, 8009344 <_Balloc+0x50>
 8009322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800932a:	b9b8      	cbnz	r0, 800935c <_Balloc+0x68>
 800932c:	2101      	movs	r1, #1
 800932e:	fa01 f605 	lsl.w	r6, r1, r5
 8009332:	1d72      	adds	r2, r6, #5
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fb60 	bl	80099fc <_calloc_r>
 800933c:	b160      	cbz	r0, 8009358 <_Balloc+0x64>
 800933e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009342:	e00e      	b.n	8009362 <_Balloc+0x6e>
 8009344:	2221      	movs	r2, #33	; 0x21
 8009346:	2104      	movs	r1, #4
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fb57 	bl	80099fc <_calloc_r>
 800934e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009350:	60f0      	str	r0, [r6, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e4      	bne.n	8009322 <_Balloc+0x2e>
 8009358:	2000      	movs	r0, #0
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	6802      	ldr	r2, [r0, #0]
 800935e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009362:	2300      	movs	r3, #0
 8009364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009368:	e7f7      	b.n	800935a <_Balloc+0x66>
 800936a:	bf00      	nop
 800936c:	0800a331 	.word	0x0800a331
 8009370:	0800a3b4 	.word	0x0800a3b4

08009374 <_Bfree>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009378:	4605      	mov	r5, r0
 800937a:	460c      	mov	r4, r1
 800937c:	b976      	cbnz	r6, 800939c <_Bfree+0x28>
 800937e:	2010      	movs	r0, #16
 8009380:	f7ff ffa4 	bl	80092cc <malloc>
 8009384:	4602      	mov	r2, r0
 8009386:	6268      	str	r0, [r5, #36]	; 0x24
 8009388:	b920      	cbnz	r0, 8009394 <_Bfree+0x20>
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <_Bfree+0x3c>)
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <_Bfree+0x40>)
 800938e:	218a      	movs	r1, #138	; 0x8a
 8009390:	f000 fba8 	bl	8009ae4 <__assert_func>
 8009394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009398:	6006      	str	r6, [r0, #0]
 800939a:	60c6      	str	r6, [r0, #12]
 800939c:	b13c      	cbz	r4, 80093ae <_Bfree+0x3a>
 800939e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093a8:	6021      	str	r1, [r4, #0]
 80093aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	0800a331 	.word	0x0800a331
 80093b4:	0800a3b4 	.word	0x0800a3b4

080093b8 <__multadd>:
 80093b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	690d      	ldr	r5, [r1, #16]
 80093be:	4607      	mov	r7, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	461e      	mov	r6, r3
 80093c4:	f101 0c14 	add.w	ip, r1, #20
 80093c8:	2000      	movs	r0, #0
 80093ca:	f8dc 3000 	ldr.w	r3, [ip]
 80093ce:	b299      	uxth	r1, r3
 80093d0:	fb02 6101 	mla	r1, r2, r1, r6
 80093d4:	0c1e      	lsrs	r6, r3, #16
 80093d6:	0c0b      	lsrs	r3, r1, #16
 80093d8:	fb02 3306 	mla	r3, r2, r6, r3
 80093dc:	b289      	uxth	r1, r1
 80093de:	3001      	adds	r0, #1
 80093e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093e4:	4285      	cmp	r5, r0
 80093e6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093ee:	dcec      	bgt.n	80093ca <__multadd+0x12>
 80093f0:	b30e      	cbz	r6, 8009436 <__multadd+0x7e>
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	42ab      	cmp	r3, r5
 80093f6:	dc19      	bgt.n	800942c <__multadd+0x74>
 80093f8:	6861      	ldr	r1, [r4, #4]
 80093fa:	4638      	mov	r0, r7
 80093fc:	3101      	adds	r1, #1
 80093fe:	f7ff ff79 	bl	80092f4 <_Balloc>
 8009402:	4680      	mov	r8, r0
 8009404:	b928      	cbnz	r0, 8009412 <__multadd+0x5a>
 8009406:	4602      	mov	r2, r0
 8009408:	4b0c      	ldr	r3, [pc, #48]	; (800943c <__multadd+0x84>)
 800940a:	480d      	ldr	r0, [pc, #52]	; (8009440 <__multadd+0x88>)
 800940c:	21b5      	movs	r1, #181	; 0xb5
 800940e:	f000 fb69 	bl	8009ae4 <__assert_func>
 8009412:	6922      	ldr	r2, [r4, #16]
 8009414:	3202      	adds	r2, #2
 8009416:	f104 010c 	add.w	r1, r4, #12
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	300c      	adds	r0, #12
 800941e:	f7fe fa0e 	bl	800783e <memcpy>
 8009422:	4621      	mov	r1, r4
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff ffa5 	bl	8009374 <_Bfree>
 800942a:	4644      	mov	r4, r8
 800942c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009430:	3501      	adds	r5, #1
 8009432:	615e      	str	r6, [r3, #20]
 8009434:	6125      	str	r5, [r4, #16]
 8009436:	4620      	mov	r0, r4
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943c:	0800a3a3 	.word	0x0800a3a3
 8009440:	0800a3b4 	.word	0x0800a3b4

08009444 <__hi0bits>:
 8009444:	0c03      	lsrs	r3, r0, #16
 8009446:	041b      	lsls	r3, r3, #16
 8009448:	b9d3      	cbnz	r3, 8009480 <__hi0bits+0x3c>
 800944a:	0400      	lsls	r0, r0, #16
 800944c:	2310      	movs	r3, #16
 800944e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009452:	bf04      	itt	eq
 8009454:	0200      	lsleq	r0, r0, #8
 8009456:	3308      	addeq	r3, #8
 8009458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800945c:	bf04      	itt	eq
 800945e:	0100      	lsleq	r0, r0, #4
 8009460:	3304      	addeq	r3, #4
 8009462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009466:	bf04      	itt	eq
 8009468:	0080      	lsleq	r0, r0, #2
 800946a:	3302      	addeq	r3, #2
 800946c:	2800      	cmp	r0, #0
 800946e:	db05      	blt.n	800947c <__hi0bits+0x38>
 8009470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009474:	f103 0301 	add.w	r3, r3, #1
 8009478:	bf08      	it	eq
 800947a:	2320      	moveq	r3, #32
 800947c:	4618      	mov	r0, r3
 800947e:	4770      	bx	lr
 8009480:	2300      	movs	r3, #0
 8009482:	e7e4      	b.n	800944e <__hi0bits+0xa>

08009484 <__lo0bits>:
 8009484:	6803      	ldr	r3, [r0, #0]
 8009486:	f013 0207 	ands.w	r2, r3, #7
 800948a:	4601      	mov	r1, r0
 800948c:	d00b      	beq.n	80094a6 <__lo0bits+0x22>
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d423      	bmi.n	80094da <__lo0bits+0x56>
 8009492:	0798      	lsls	r0, r3, #30
 8009494:	bf49      	itett	mi
 8009496:	085b      	lsrmi	r3, r3, #1
 8009498:	089b      	lsrpl	r3, r3, #2
 800949a:	2001      	movmi	r0, #1
 800949c:	600b      	strmi	r3, [r1, #0]
 800949e:	bf5c      	itt	pl
 80094a0:	600b      	strpl	r3, [r1, #0]
 80094a2:	2002      	movpl	r0, #2
 80094a4:	4770      	bx	lr
 80094a6:	b298      	uxth	r0, r3
 80094a8:	b9a8      	cbnz	r0, 80094d6 <__lo0bits+0x52>
 80094aa:	0c1b      	lsrs	r3, r3, #16
 80094ac:	2010      	movs	r0, #16
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	b90a      	cbnz	r2, 80094b6 <__lo0bits+0x32>
 80094b2:	3008      	adds	r0, #8
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	071a      	lsls	r2, r3, #28
 80094b8:	bf04      	itt	eq
 80094ba:	091b      	lsreq	r3, r3, #4
 80094bc:	3004      	addeq	r0, #4
 80094be:	079a      	lsls	r2, r3, #30
 80094c0:	bf04      	itt	eq
 80094c2:	089b      	lsreq	r3, r3, #2
 80094c4:	3002      	addeq	r0, #2
 80094c6:	07da      	lsls	r2, r3, #31
 80094c8:	d403      	bmi.n	80094d2 <__lo0bits+0x4e>
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	f100 0001 	add.w	r0, r0, #1
 80094d0:	d005      	beq.n	80094de <__lo0bits+0x5a>
 80094d2:	600b      	str	r3, [r1, #0]
 80094d4:	4770      	bx	lr
 80094d6:	4610      	mov	r0, r2
 80094d8:	e7e9      	b.n	80094ae <__lo0bits+0x2a>
 80094da:	2000      	movs	r0, #0
 80094dc:	4770      	bx	lr
 80094de:	2020      	movs	r0, #32
 80094e0:	4770      	bx	lr
	...

080094e4 <__i2b>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7ff ff03 	bl	80092f4 <_Balloc>
 80094ee:	4602      	mov	r2, r0
 80094f0:	b928      	cbnz	r0, 80094fe <__i2b+0x1a>
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <__i2b+0x24>)
 80094f4:	4805      	ldr	r0, [pc, #20]	; (800950c <__i2b+0x28>)
 80094f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094fa:	f000 faf3 	bl	8009ae4 <__assert_func>
 80094fe:	2301      	movs	r3, #1
 8009500:	6144      	str	r4, [r0, #20]
 8009502:	6103      	str	r3, [r0, #16]
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop
 8009508:	0800a3a3 	.word	0x0800a3a3
 800950c:	0800a3b4 	.word	0x0800a3b4

08009510 <__multiply>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	4691      	mov	r9, r2
 8009516:	690a      	ldr	r2, [r1, #16]
 8009518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800951c:	429a      	cmp	r2, r3
 800951e:	bfb8      	it	lt
 8009520:	460b      	movlt	r3, r1
 8009522:	460c      	mov	r4, r1
 8009524:	bfbc      	itt	lt
 8009526:	464c      	movlt	r4, r9
 8009528:	4699      	movlt	r9, r3
 800952a:	6927      	ldr	r7, [r4, #16]
 800952c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	6861      	ldr	r1, [r4, #4]
 8009534:	eb07 060a 	add.w	r6, r7, sl
 8009538:	42b3      	cmp	r3, r6
 800953a:	b085      	sub	sp, #20
 800953c:	bfb8      	it	lt
 800953e:	3101      	addlt	r1, #1
 8009540:	f7ff fed8 	bl	80092f4 <_Balloc>
 8009544:	b930      	cbnz	r0, 8009554 <__multiply+0x44>
 8009546:	4602      	mov	r2, r0
 8009548:	4b44      	ldr	r3, [pc, #272]	; (800965c <__multiply+0x14c>)
 800954a:	4845      	ldr	r0, [pc, #276]	; (8009660 <__multiply+0x150>)
 800954c:	f240 115d 	movw	r1, #349	; 0x15d
 8009550:	f000 fac8 	bl	8009ae4 <__assert_func>
 8009554:	f100 0514 	add.w	r5, r0, #20
 8009558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800955c:	462b      	mov	r3, r5
 800955e:	2200      	movs	r2, #0
 8009560:	4543      	cmp	r3, r8
 8009562:	d321      	bcc.n	80095a8 <__multiply+0x98>
 8009564:	f104 0314 	add.w	r3, r4, #20
 8009568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800956c:	f109 0314 	add.w	r3, r9, #20
 8009570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	1b3a      	subs	r2, r7, r4
 8009578:	3a15      	subs	r2, #21
 800957a:	f022 0203 	bic.w	r2, r2, #3
 800957e:	3204      	adds	r2, #4
 8009580:	f104 0115 	add.w	r1, r4, #21
 8009584:	428f      	cmp	r7, r1
 8009586:	bf38      	it	cc
 8009588:	2204      	movcc	r2, #4
 800958a:	9201      	str	r2, [sp, #4]
 800958c:	9a02      	ldr	r2, [sp, #8]
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	429a      	cmp	r2, r3
 8009592:	d80c      	bhi.n	80095ae <__multiply+0x9e>
 8009594:	2e00      	cmp	r6, #0
 8009596:	dd03      	ble.n	80095a0 <__multiply+0x90>
 8009598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800959c:	2b00      	cmp	r3, #0
 800959e:	d05a      	beq.n	8009656 <__multiply+0x146>
 80095a0:	6106      	str	r6, [r0, #16]
 80095a2:	b005      	add	sp, #20
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	f843 2b04 	str.w	r2, [r3], #4
 80095ac:	e7d8      	b.n	8009560 <__multiply+0x50>
 80095ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80095b2:	f1ba 0f00 	cmp.w	sl, #0
 80095b6:	d024      	beq.n	8009602 <__multiply+0xf2>
 80095b8:	f104 0e14 	add.w	lr, r4, #20
 80095bc:	46a9      	mov	r9, r5
 80095be:	f04f 0c00 	mov.w	ip, #0
 80095c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095c6:	f8d9 1000 	ldr.w	r1, [r9]
 80095ca:	fa1f fb82 	uxth.w	fp, r2
 80095ce:	b289      	uxth	r1, r1
 80095d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80095d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095d8:	f8d9 2000 	ldr.w	r2, [r9]
 80095dc:	4461      	add	r1, ip
 80095de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80095e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095ea:	b289      	uxth	r1, r1
 80095ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095f0:	4577      	cmp	r7, lr
 80095f2:	f849 1b04 	str.w	r1, [r9], #4
 80095f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095fa:	d8e2      	bhi.n	80095c2 <__multiply+0xb2>
 80095fc:	9a01      	ldr	r2, [sp, #4]
 80095fe:	f845 c002 	str.w	ip, [r5, r2]
 8009602:	9a03      	ldr	r2, [sp, #12]
 8009604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009608:	3304      	adds	r3, #4
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	d020      	beq.n	8009652 <__multiply+0x142>
 8009610:	6829      	ldr	r1, [r5, #0]
 8009612:	f104 0c14 	add.w	ip, r4, #20
 8009616:	46ae      	mov	lr, r5
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	f8bc b000 	ldrh.w	fp, [ip]
 8009620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009624:	fb09 220b 	mla	r2, r9, fp, r2
 8009628:	4492      	add	sl, r2
 800962a:	b289      	uxth	r1, r1
 800962c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009630:	f84e 1b04 	str.w	r1, [lr], #4
 8009634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009638:	f8be 1000 	ldrh.w	r1, [lr]
 800963c:	0c12      	lsrs	r2, r2, #16
 800963e:	fb09 1102 	mla	r1, r9, r2, r1
 8009642:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009646:	4567      	cmp	r7, ip
 8009648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800964c:	d8e6      	bhi.n	800961c <__multiply+0x10c>
 800964e:	9a01      	ldr	r2, [sp, #4]
 8009650:	50a9      	str	r1, [r5, r2]
 8009652:	3504      	adds	r5, #4
 8009654:	e79a      	b.n	800958c <__multiply+0x7c>
 8009656:	3e01      	subs	r6, #1
 8009658:	e79c      	b.n	8009594 <__multiply+0x84>
 800965a:	bf00      	nop
 800965c:	0800a3a3 	.word	0x0800a3a3
 8009660:	0800a3b4 	.word	0x0800a3b4

08009664 <__pow5mult>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4615      	mov	r5, r2
 800966a:	f012 0203 	ands.w	r2, r2, #3
 800966e:	4606      	mov	r6, r0
 8009670:	460f      	mov	r7, r1
 8009672:	d007      	beq.n	8009684 <__pow5mult+0x20>
 8009674:	4c25      	ldr	r4, [pc, #148]	; (800970c <__pow5mult+0xa8>)
 8009676:	3a01      	subs	r2, #1
 8009678:	2300      	movs	r3, #0
 800967a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800967e:	f7ff fe9b 	bl	80093b8 <__multadd>
 8009682:	4607      	mov	r7, r0
 8009684:	10ad      	asrs	r5, r5, #2
 8009686:	d03d      	beq.n	8009704 <__pow5mult+0xa0>
 8009688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800968a:	b97c      	cbnz	r4, 80096ac <__pow5mult+0x48>
 800968c:	2010      	movs	r0, #16
 800968e:	f7ff fe1d 	bl	80092cc <malloc>
 8009692:	4602      	mov	r2, r0
 8009694:	6270      	str	r0, [r6, #36]	; 0x24
 8009696:	b928      	cbnz	r0, 80096a4 <__pow5mult+0x40>
 8009698:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <__pow5mult+0xac>)
 800969a:	481e      	ldr	r0, [pc, #120]	; (8009714 <__pow5mult+0xb0>)
 800969c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096a0:	f000 fa20 	bl	8009ae4 <__assert_func>
 80096a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096a8:	6004      	str	r4, [r0, #0]
 80096aa:	60c4      	str	r4, [r0, #12]
 80096ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096b4:	b94c      	cbnz	r4, 80096ca <__pow5mult+0x66>
 80096b6:	f240 2171 	movw	r1, #625	; 0x271
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ff12 	bl	80094e4 <__i2b>
 80096c0:	2300      	movs	r3, #0
 80096c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80096c6:	4604      	mov	r4, r0
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	f04f 0900 	mov.w	r9, #0
 80096ce:	07eb      	lsls	r3, r5, #31
 80096d0:	d50a      	bpl.n	80096e8 <__pow5mult+0x84>
 80096d2:	4639      	mov	r1, r7
 80096d4:	4622      	mov	r2, r4
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7ff ff1a 	bl	8009510 <__multiply>
 80096dc:	4639      	mov	r1, r7
 80096de:	4680      	mov	r8, r0
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff fe47 	bl	8009374 <_Bfree>
 80096e6:	4647      	mov	r7, r8
 80096e8:	106d      	asrs	r5, r5, #1
 80096ea:	d00b      	beq.n	8009704 <__pow5mult+0xa0>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	b938      	cbnz	r0, 8009700 <__pow5mult+0x9c>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4621      	mov	r1, r4
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff ff0b 	bl	8009510 <__multiply>
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	f8c0 9000 	str.w	r9, [r0]
 8009700:	4604      	mov	r4, r0
 8009702:	e7e4      	b.n	80096ce <__pow5mult+0x6a>
 8009704:	4638      	mov	r0, r7
 8009706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970a:	bf00      	nop
 800970c:	0800a500 	.word	0x0800a500
 8009710:	0800a331 	.word	0x0800a331
 8009714:	0800a3b4 	.word	0x0800a3b4

08009718 <__lshift>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	6849      	ldr	r1, [r1, #4]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	4607      	mov	r7, r0
 800972a:	4691      	mov	r9, r2
 800972c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009730:	f108 0601 	add.w	r6, r8, #1
 8009734:	42b3      	cmp	r3, r6
 8009736:	db0b      	blt.n	8009750 <__lshift+0x38>
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff fddb 	bl	80092f4 <_Balloc>
 800973e:	4605      	mov	r5, r0
 8009740:	b948      	cbnz	r0, 8009756 <__lshift+0x3e>
 8009742:	4602      	mov	r2, r0
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <__lshift+0xd8>)
 8009746:	482b      	ldr	r0, [pc, #172]	; (80097f4 <__lshift+0xdc>)
 8009748:	f240 11d9 	movw	r1, #473	; 0x1d9
 800974c:	f000 f9ca 	bl	8009ae4 <__assert_func>
 8009750:	3101      	adds	r1, #1
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	e7ee      	b.n	8009734 <__lshift+0x1c>
 8009756:	2300      	movs	r3, #0
 8009758:	f100 0114 	add.w	r1, r0, #20
 800975c:	f100 0210 	add.w	r2, r0, #16
 8009760:	4618      	mov	r0, r3
 8009762:	4553      	cmp	r3, sl
 8009764:	db37      	blt.n	80097d6 <__lshift+0xbe>
 8009766:	6920      	ldr	r0, [r4, #16]
 8009768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800976c:	f104 0314 	add.w	r3, r4, #20
 8009770:	f019 091f 	ands.w	r9, r9, #31
 8009774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800977c:	d02f      	beq.n	80097de <__lshift+0xc6>
 800977e:	f1c9 0e20 	rsb	lr, r9, #32
 8009782:	468a      	mov	sl, r1
 8009784:	f04f 0c00 	mov.w	ip, #0
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	fa02 f209 	lsl.w	r2, r2, r9
 800978e:	ea42 020c 	orr.w	r2, r2, ip
 8009792:	f84a 2b04 	str.w	r2, [sl], #4
 8009796:	f853 2b04 	ldr.w	r2, [r3], #4
 800979a:	4298      	cmp	r0, r3
 800979c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097a0:	d8f2      	bhi.n	8009788 <__lshift+0x70>
 80097a2:	1b03      	subs	r3, r0, r4
 80097a4:	3b15      	subs	r3, #21
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	3304      	adds	r3, #4
 80097ac:	f104 0215 	add.w	r2, r4, #21
 80097b0:	4290      	cmp	r0, r2
 80097b2:	bf38      	it	cc
 80097b4:	2304      	movcc	r3, #4
 80097b6:	f841 c003 	str.w	ip, [r1, r3]
 80097ba:	f1bc 0f00 	cmp.w	ip, #0
 80097be:	d001      	beq.n	80097c4 <__lshift+0xac>
 80097c0:	f108 0602 	add.w	r6, r8, #2
 80097c4:	3e01      	subs	r6, #1
 80097c6:	4638      	mov	r0, r7
 80097c8:	612e      	str	r6, [r5, #16]
 80097ca:	4621      	mov	r1, r4
 80097cc:	f7ff fdd2 	bl	8009374 <_Bfree>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097da:	3301      	adds	r3, #1
 80097dc:	e7c1      	b.n	8009762 <__lshift+0x4a>
 80097de:	3904      	subs	r1, #4
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e8:	4298      	cmp	r0, r3
 80097ea:	d8f9      	bhi.n	80097e0 <__lshift+0xc8>
 80097ec:	e7ea      	b.n	80097c4 <__lshift+0xac>
 80097ee:	bf00      	nop
 80097f0:	0800a3a3 	.word	0x0800a3a3
 80097f4:	0800a3b4 	.word	0x0800a3b4

080097f8 <__mcmp>:
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	6902      	ldr	r2, [r0, #16]
 80097fc:	690c      	ldr	r4, [r1, #16]
 80097fe:	1b12      	subs	r2, r2, r4
 8009800:	d10e      	bne.n	8009820 <__mcmp+0x28>
 8009802:	f100 0314 	add.w	r3, r0, #20
 8009806:	3114      	adds	r1, #20
 8009808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800980c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009818:	42a5      	cmp	r5, r4
 800981a:	d003      	beq.n	8009824 <__mcmp+0x2c>
 800981c:	d305      	bcc.n	800982a <__mcmp+0x32>
 800981e:	2201      	movs	r2, #1
 8009820:	4610      	mov	r0, r2
 8009822:	bd30      	pop	{r4, r5, pc}
 8009824:	4283      	cmp	r3, r0
 8009826:	d3f3      	bcc.n	8009810 <__mcmp+0x18>
 8009828:	e7fa      	b.n	8009820 <__mcmp+0x28>
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	e7f7      	b.n	8009820 <__mcmp+0x28>

08009830 <__mdiff>:
 8009830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	4606      	mov	r6, r0
 8009838:	4611      	mov	r1, r2
 800983a:	4620      	mov	r0, r4
 800983c:	4690      	mov	r8, r2
 800983e:	f7ff ffdb 	bl	80097f8 <__mcmp>
 8009842:	1e05      	subs	r5, r0, #0
 8009844:	d110      	bne.n	8009868 <__mdiff+0x38>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fd53 	bl	80092f4 <_Balloc>
 800984e:	b930      	cbnz	r0, 800985e <__mdiff+0x2e>
 8009850:	4b3a      	ldr	r3, [pc, #232]	; (800993c <__mdiff+0x10c>)
 8009852:	4602      	mov	r2, r0
 8009854:	f240 2132 	movw	r1, #562	; 0x232
 8009858:	4839      	ldr	r0, [pc, #228]	; (8009940 <__mdiff+0x110>)
 800985a:	f000 f943 	bl	8009ae4 <__assert_func>
 800985e:	2301      	movs	r3, #1
 8009860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	bfa4      	itt	ge
 800986a:	4643      	movge	r3, r8
 800986c:	46a0      	movge	r8, r4
 800986e:	4630      	mov	r0, r6
 8009870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009874:	bfa6      	itte	ge
 8009876:	461c      	movge	r4, r3
 8009878:	2500      	movge	r5, #0
 800987a:	2501      	movlt	r5, #1
 800987c:	f7ff fd3a 	bl	80092f4 <_Balloc>
 8009880:	b920      	cbnz	r0, 800988c <__mdiff+0x5c>
 8009882:	4b2e      	ldr	r3, [pc, #184]	; (800993c <__mdiff+0x10c>)
 8009884:	4602      	mov	r2, r0
 8009886:	f44f 7110 	mov.w	r1, #576	; 0x240
 800988a:	e7e5      	b.n	8009858 <__mdiff+0x28>
 800988c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009890:	6926      	ldr	r6, [r4, #16]
 8009892:	60c5      	str	r5, [r0, #12]
 8009894:	f104 0914 	add.w	r9, r4, #20
 8009898:	f108 0514 	add.w	r5, r8, #20
 800989c:	f100 0e14 	add.w	lr, r0, #20
 80098a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098a8:	f108 0210 	add.w	r2, r8, #16
 80098ac:	46f2      	mov	sl, lr
 80098ae:	2100      	movs	r1, #0
 80098b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80098b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098b8:	fa1f f883 	uxth.w	r8, r3
 80098bc:	fa11 f18b 	uxtah	r1, r1, fp
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	eba1 0808 	sub.w	r8, r1, r8
 80098c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098ce:	fa1f f888 	uxth.w	r8, r8
 80098d2:	1419      	asrs	r1, r3, #16
 80098d4:	454e      	cmp	r6, r9
 80098d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098da:	f84a 3b04 	str.w	r3, [sl], #4
 80098de:	d8e7      	bhi.n	80098b0 <__mdiff+0x80>
 80098e0:	1b33      	subs	r3, r6, r4
 80098e2:	3b15      	subs	r3, #21
 80098e4:	f023 0303 	bic.w	r3, r3, #3
 80098e8:	3304      	adds	r3, #4
 80098ea:	3415      	adds	r4, #21
 80098ec:	42a6      	cmp	r6, r4
 80098ee:	bf38      	it	cc
 80098f0:	2304      	movcc	r3, #4
 80098f2:	441d      	add	r5, r3
 80098f4:	4473      	add	r3, lr
 80098f6:	469e      	mov	lr, r3
 80098f8:	462e      	mov	r6, r5
 80098fa:	4566      	cmp	r6, ip
 80098fc:	d30e      	bcc.n	800991c <__mdiff+0xec>
 80098fe:	f10c 0203 	add.w	r2, ip, #3
 8009902:	1b52      	subs	r2, r2, r5
 8009904:	f022 0203 	bic.w	r2, r2, #3
 8009908:	3d03      	subs	r5, #3
 800990a:	45ac      	cmp	ip, r5
 800990c:	bf38      	it	cc
 800990e:	2200      	movcc	r2, #0
 8009910:	441a      	add	r2, r3
 8009912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009916:	b17b      	cbz	r3, 8009938 <__mdiff+0x108>
 8009918:	6107      	str	r7, [r0, #16]
 800991a:	e7a3      	b.n	8009864 <__mdiff+0x34>
 800991c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009920:	fa11 f288 	uxtah	r2, r1, r8
 8009924:	1414      	asrs	r4, r2, #16
 8009926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800992a:	b292      	uxth	r2, r2
 800992c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009930:	f84e 2b04 	str.w	r2, [lr], #4
 8009934:	1421      	asrs	r1, r4, #16
 8009936:	e7e0      	b.n	80098fa <__mdiff+0xca>
 8009938:	3f01      	subs	r7, #1
 800993a:	e7ea      	b.n	8009912 <__mdiff+0xe2>
 800993c:	0800a3a3 	.word	0x0800a3a3
 8009940:	0800a3b4 	.word	0x0800a3b4

08009944 <__d2b>:
 8009944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009948:	4689      	mov	r9, r1
 800994a:	2101      	movs	r1, #1
 800994c:	ec57 6b10 	vmov	r6, r7, d0
 8009950:	4690      	mov	r8, r2
 8009952:	f7ff fccf 	bl	80092f4 <_Balloc>
 8009956:	4604      	mov	r4, r0
 8009958:	b930      	cbnz	r0, 8009968 <__d2b+0x24>
 800995a:	4602      	mov	r2, r0
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <__d2b+0xb0>)
 800995e:	4826      	ldr	r0, [pc, #152]	; (80099f8 <__d2b+0xb4>)
 8009960:	f240 310a 	movw	r1, #778	; 0x30a
 8009964:	f000 f8be 	bl	8009ae4 <__assert_func>
 8009968:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800996c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009970:	bb35      	cbnz	r5, 80099c0 <__d2b+0x7c>
 8009972:	2e00      	cmp	r6, #0
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	d028      	beq.n	80099ca <__d2b+0x86>
 8009978:	4668      	mov	r0, sp
 800997a:	9600      	str	r6, [sp, #0]
 800997c:	f7ff fd82 	bl	8009484 <__lo0bits>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	b300      	cbz	r0, 80099c6 <__d2b+0x82>
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	f1c0 0320 	rsb	r3, r0, #32
 800998a:	fa02 f303 	lsl.w	r3, r2, r3
 800998e:	430b      	orrs	r3, r1
 8009990:	40c2      	lsrs	r2, r0
 8009992:	6163      	str	r3, [r4, #20]
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	61a3      	str	r3, [r4, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	bf14      	ite	ne
 800999e:	2202      	movne	r2, #2
 80099a0:	2201      	moveq	r2, #1
 80099a2:	6122      	str	r2, [r4, #16]
 80099a4:	b1d5      	cbz	r5, 80099dc <__d2b+0x98>
 80099a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099aa:	4405      	add	r5, r0
 80099ac:	f8c9 5000 	str.w	r5, [r9]
 80099b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099b4:	f8c8 0000 	str.w	r0, [r8]
 80099b8:	4620      	mov	r0, r4
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099c4:	e7d5      	b.n	8009972 <__d2b+0x2e>
 80099c6:	6161      	str	r1, [r4, #20]
 80099c8:	e7e5      	b.n	8009996 <__d2b+0x52>
 80099ca:	a801      	add	r0, sp, #4
 80099cc:	f7ff fd5a 	bl	8009484 <__lo0bits>
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	2201      	movs	r2, #1
 80099d6:	6122      	str	r2, [r4, #16]
 80099d8:	3020      	adds	r0, #32
 80099da:	e7e3      	b.n	80099a4 <__d2b+0x60>
 80099dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099e4:	f8c9 0000 	str.w	r0, [r9]
 80099e8:	6918      	ldr	r0, [r3, #16]
 80099ea:	f7ff fd2b 	bl	8009444 <__hi0bits>
 80099ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099f2:	e7df      	b.n	80099b4 <__d2b+0x70>
 80099f4:	0800a3a3 	.word	0x0800a3a3
 80099f8:	0800a3b4 	.word	0x0800a3b4

080099fc <_calloc_r>:
 80099fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fe:	fba1 2402 	umull	r2, r4, r1, r2
 8009a02:	b94c      	cbnz	r4, 8009a18 <_calloc_r+0x1c>
 8009a04:	4611      	mov	r1, r2
 8009a06:	9201      	str	r2, [sp, #4]
 8009a08:	f7fd ff50 	bl	80078ac <_malloc_r>
 8009a0c:	9a01      	ldr	r2, [sp, #4]
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b930      	cbnz	r0, 8009a20 <_calloc_r+0x24>
 8009a12:	4628      	mov	r0, r5
 8009a14:	b003      	add	sp, #12
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	220c      	movs	r2, #12
 8009a1a:	6002      	str	r2, [r0, #0]
 8009a1c:	2500      	movs	r5, #0
 8009a1e:	e7f8      	b.n	8009a12 <_calloc_r+0x16>
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7fd ff1a 	bl	800785a <memset>
 8009a26:	e7f4      	b.n	8009a12 <_calloc_r+0x16>

08009a28 <_free_r>:
 8009a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d044      	beq.n	8009ab8 <_free_r+0x90>
 8009a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a32:	9001      	str	r0, [sp, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f1a1 0404 	sub.w	r4, r1, #4
 8009a3a:	bfb8      	it	lt
 8009a3c:	18e4      	addlt	r4, r4, r3
 8009a3e:	f7ff fc4d 	bl	80092dc <__malloc_lock>
 8009a42:	4a1e      	ldr	r2, [pc, #120]	; (8009abc <_free_r+0x94>)
 8009a44:	9801      	ldr	r0, [sp, #4]
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	b933      	cbnz	r3, 8009a58 <_free_r+0x30>
 8009a4a:	6063      	str	r3, [r4, #4]
 8009a4c:	6014      	str	r4, [r2, #0]
 8009a4e:	b003      	add	sp, #12
 8009a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a54:	f7ff bc48 	b.w	80092e8 <__malloc_unlock>
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	d908      	bls.n	8009a6e <_free_r+0x46>
 8009a5c:	6825      	ldr	r5, [r4, #0]
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf01      	itttt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1949      	addeq	r1, r1, r5
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	e7ed      	b.n	8009a4a <_free_r+0x22>
 8009a6e:	461a      	mov	r2, r3
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	b10b      	cbz	r3, 8009a78 <_free_r+0x50>
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d9fa      	bls.n	8009a6e <_free_r+0x46>
 8009a78:	6811      	ldr	r1, [r2, #0]
 8009a7a:	1855      	adds	r5, r2, r1
 8009a7c:	42a5      	cmp	r5, r4
 8009a7e:	d10b      	bne.n	8009a98 <_free_r+0x70>
 8009a80:	6824      	ldr	r4, [r4, #0]
 8009a82:	4421      	add	r1, r4
 8009a84:	1854      	adds	r4, r2, r1
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	6011      	str	r1, [r2, #0]
 8009a8a:	d1e0      	bne.n	8009a4e <_free_r+0x26>
 8009a8c:	681c      	ldr	r4, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	6053      	str	r3, [r2, #4]
 8009a92:	4421      	add	r1, r4
 8009a94:	6011      	str	r1, [r2, #0]
 8009a96:	e7da      	b.n	8009a4e <_free_r+0x26>
 8009a98:	d902      	bls.n	8009aa0 <_free_r+0x78>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	6003      	str	r3, [r0, #0]
 8009a9e:	e7d6      	b.n	8009a4e <_free_r+0x26>
 8009aa0:	6825      	ldr	r5, [r4, #0]
 8009aa2:	1961      	adds	r1, r4, r5
 8009aa4:	428b      	cmp	r3, r1
 8009aa6:	bf04      	itt	eq
 8009aa8:	6819      	ldreq	r1, [r3, #0]
 8009aaa:	685b      	ldreq	r3, [r3, #4]
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	bf04      	itt	eq
 8009ab0:	1949      	addeq	r1, r1, r5
 8009ab2:	6021      	streq	r1, [r4, #0]
 8009ab4:	6054      	str	r4, [r2, #4]
 8009ab6:	e7ca      	b.n	8009a4e <_free_r+0x26>
 8009ab8:	b003      	add	sp, #12
 8009aba:	bd30      	pop	{r4, r5, pc}
 8009abc:	20006624 	.word	0x20006624

08009ac0 <_read_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	; (8009ae0 <_read_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f000 fb74 	bl	800a1bc <_read>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_read_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_read_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	2000662c 	.word	0x2000662c

08009ae4 <__assert_func>:
 8009ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae6:	4614      	mov	r4, r2
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <__assert_func+0x2c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4605      	mov	r5, r0
 8009af0:	68d8      	ldr	r0, [r3, #12]
 8009af2:	b14c      	cbz	r4, 8009b08 <__assert_func+0x24>
 8009af4:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <__assert_func+0x30>)
 8009af6:	9100      	str	r1, [sp, #0]
 8009af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009afc:	4906      	ldr	r1, [pc, #24]	; (8009b18 <__assert_func+0x34>)
 8009afe:	462b      	mov	r3, r5
 8009b00:	f000 f80e 	bl	8009b20 <fiprintf>
 8009b04:	f000 fa58 	bl	8009fb8 <abort>
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <__assert_func+0x38>)
 8009b0a:	461c      	mov	r4, r3
 8009b0c:	e7f3      	b.n	8009af6 <__assert_func+0x12>
 8009b0e:	bf00      	nop
 8009b10:	20000014 	.word	0x20000014
 8009b14:	0800a50c 	.word	0x0800a50c
 8009b18:	0800a519 	.word	0x0800a519
 8009b1c:	0800a547 	.word	0x0800a547

08009b20 <fiprintf>:
 8009b20:	b40e      	push	{r1, r2, r3}
 8009b22:	b503      	push	{r0, r1, lr}
 8009b24:	4601      	mov	r1, r0
 8009b26:	ab03      	add	r3, sp, #12
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <fiprintf+0x20>)
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	6800      	ldr	r0, [r0, #0]
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	f000 f843 	bl	8009bbc <_vfiprintf_r>
 8009b36:	b002      	add	sp, #8
 8009b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b3c:	b003      	add	sp, #12
 8009b3e:	4770      	bx	lr
 8009b40:	20000014 	.word	0x20000014

08009b44 <__ascii_mbtowc>:
 8009b44:	b082      	sub	sp, #8
 8009b46:	b901      	cbnz	r1, 8009b4a <__ascii_mbtowc+0x6>
 8009b48:	a901      	add	r1, sp, #4
 8009b4a:	b142      	cbz	r2, 8009b5e <__ascii_mbtowc+0x1a>
 8009b4c:	b14b      	cbz	r3, 8009b62 <__ascii_mbtowc+0x1e>
 8009b4e:	7813      	ldrb	r3, [r2, #0]
 8009b50:	600b      	str	r3, [r1, #0]
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	1e10      	subs	r0, r2, #0
 8009b56:	bf18      	it	ne
 8009b58:	2001      	movne	r0, #1
 8009b5a:	b002      	add	sp, #8
 8009b5c:	4770      	bx	lr
 8009b5e:	4610      	mov	r0, r2
 8009b60:	e7fb      	b.n	8009b5a <__ascii_mbtowc+0x16>
 8009b62:	f06f 0001 	mvn.w	r0, #1
 8009b66:	e7f8      	b.n	8009b5a <__ascii_mbtowc+0x16>

08009b68 <__sfputc_r>:
 8009b68:	6893      	ldr	r3, [r2, #8]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	b410      	push	{r4}
 8009b70:	6093      	str	r3, [r2, #8]
 8009b72:	da08      	bge.n	8009b86 <__sfputc_r+0x1e>
 8009b74:	6994      	ldr	r4, [r2, #24]
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	db01      	blt.n	8009b7e <__sfputc_r+0x16>
 8009b7a:	290a      	cmp	r1, #10
 8009b7c:	d103      	bne.n	8009b86 <__sfputc_r+0x1e>
 8009b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b82:	f000 b94b 	b.w	8009e1c <__swbuf_r>
 8009b86:	6813      	ldr	r3, [r2, #0]
 8009b88:	1c58      	adds	r0, r3, #1
 8009b8a:	6010      	str	r0, [r2, #0]
 8009b8c:	7019      	strb	r1, [r3, #0]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <__sfputs_r>:
 8009b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b98:	4606      	mov	r6, r0
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	18d5      	adds	r5, r2, r3
 8009ba0:	42ac      	cmp	r4, r5
 8009ba2:	d101      	bne.n	8009ba8 <__sfputs_r+0x12>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e007      	b.n	8009bb8 <__sfputs_r+0x22>
 8009ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bac:	463a      	mov	r2, r7
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff ffda 	bl	8009b68 <__sfputc_r>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d1f3      	bne.n	8009ba0 <__sfputs_r+0xa>
 8009bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bbc <_vfiprintf_r>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	b09d      	sub	sp, #116	; 0x74
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	4698      	mov	r8, r3
 8009bc8:	4606      	mov	r6, r0
 8009bca:	b118      	cbz	r0, 8009bd4 <_vfiprintf_r+0x18>
 8009bcc:	6983      	ldr	r3, [r0, #24]
 8009bce:	b90b      	cbnz	r3, 8009bd4 <_vfiprintf_r+0x18>
 8009bd0:	f7fd fd70 	bl	80076b4 <__sinit>
 8009bd4:	4b89      	ldr	r3, [pc, #548]	; (8009dfc <_vfiprintf_r+0x240>)
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	d11b      	bne.n	8009c12 <_vfiprintf_r+0x56>
 8009bda:	6875      	ldr	r5, [r6, #4]
 8009bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bde:	07d9      	lsls	r1, r3, #31
 8009be0:	d405      	bmi.n	8009bee <_vfiprintf_r+0x32>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	059a      	lsls	r2, r3, #22
 8009be6:	d402      	bmi.n	8009bee <_vfiprintf_r+0x32>
 8009be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bea:	f7fd fe26 	bl	800783a <__retarget_lock_acquire_recursive>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	071b      	lsls	r3, r3, #28
 8009bf2:	d501      	bpl.n	8009bf8 <_vfiprintf_r+0x3c>
 8009bf4:	692b      	ldr	r3, [r5, #16]
 8009bf6:	b9eb      	cbnz	r3, 8009c34 <_vfiprintf_r+0x78>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f000 f96e 	bl	8009edc <__swsetup_r>
 8009c00:	b1c0      	cbz	r0, 8009c34 <_vfiprintf_r+0x78>
 8009c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c04:	07dc      	lsls	r4, r3, #31
 8009c06:	d50e      	bpl.n	8009c26 <_vfiprintf_r+0x6a>
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	b01d      	add	sp, #116	; 0x74
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <_vfiprintf_r+0x244>)
 8009c14:	429d      	cmp	r5, r3
 8009c16:	d101      	bne.n	8009c1c <_vfiprintf_r+0x60>
 8009c18:	68b5      	ldr	r5, [r6, #8]
 8009c1a:	e7df      	b.n	8009bdc <_vfiprintf_r+0x20>
 8009c1c:	4b79      	ldr	r3, [pc, #484]	; (8009e04 <_vfiprintf_r+0x248>)
 8009c1e:	429d      	cmp	r5, r3
 8009c20:	bf08      	it	eq
 8009c22:	68f5      	ldreq	r5, [r6, #12]
 8009c24:	e7da      	b.n	8009bdc <_vfiprintf_r+0x20>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	0598      	lsls	r0, r3, #22
 8009c2a:	d4ed      	bmi.n	8009c08 <_vfiprintf_r+0x4c>
 8009c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2e:	f7fd fe05 	bl	800783c <__retarget_lock_release_recursive>
 8009c32:	e7e9      	b.n	8009c08 <_vfiprintf_r+0x4c>
 8009c34:	2300      	movs	r3, #0
 8009c36:	9309      	str	r3, [sp, #36]	; 0x24
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c42:	2330      	movs	r3, #48	; 0x30
 8009c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e08 <_vfiprintf_r+0x24c>
 8009c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c4c:	f04f 0901 	mov.w	r9, #1
 8009c50:	4623      	mov	r3, r4
 8009c52:	469a      	mov	sl, r3
 8009c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c58:	b10a      	cbz	r2, 8009c5e <_vfiprintf_r+0xa2>
 8009c5a:	2a25      	cmp	r2, #37	; 0x25
 8009c5c:	d1f9      	bne.n	8009c52 <_vfiprintf_r+0x96>
 8009c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c62:	d00b      	beq.n	8009c7c <_vfiprintf_r+0xc0>
 8009c64:	465b      	mov	r3, fp
 8009c66:	4622      	mov	r2, r4
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ff93 	bl	8009b96 <__sfputs_r>
 8009c70:	3001      	adds	r0, #1
 8009c72:	f000 80aa 	beq.w	8009dca <_vfiprintf_r+0x20e>
 8009c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c78:	445a      	add	r2, fp
 8009c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80a2 	beq.w	8009dca <_vfiprintf_r+0x20e>
 8009c86:	2300      	movs	r3, #0
 8009c88:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c90:	f10a 0a01 	add.w	sl, sl, #1
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c9e:	4654      	mov	r4, sl
 8009ca0:	2205      	movs	r2, #5
 8009ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca6:	4858      	ldr	r0, [pc, #352]	; (8009e08 <_vfiprintf_r+0x24c>)
 8009ca8:	f7f6 faba 	bl	8000220 <memchr>
 8009cac:	9a04      	ldr	r2, [sp, #16]
 8009cae:	b9d8      	cbnz	r0, 8009ce8 <_vfiprintf_r+0x12c>
 8009cb0:	06d1      	lsls	r1, r2, #27
 8009cb2:	bf44      	itt	mi
 8009cb4:	2320      	movmi	r3, #32
 8009cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cba:	0713      	lsls	r3, r2, #28
 8009cbc:	bf44      	itt	mi
 8009cbe:	232b      	movmi	r3, #43	; 0x2b
 8009cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cca:	d015      	beq.n	8009cf8 <_vfiprintf_r+0x13c>
 8009ccc:	9a07      	ldr	r2, [sp, #28]
 8009cce:	4654      	mov	r4, sl
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	f04f 0c0a 	mov.w	ip, #10
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cdc:	3b30      	subs	r3, #48	; 0x30
 8009cde:	2b09      	cmp	r3, #9
 8009ce0:	d94e      	bls.n	8009d80 <_vfiprintf_r+0x1c4>
 8009ce2:	b1b0      	cbz	r0, 8009d12 <_vfiprintf_r+0x156>
 8009ce4:	9207      	str	r2, [sp, #28]
 8009ce6:	e014      	b.n	8009d12 <_vfiprintf_r+0x156>
 8009ce8:	eba0 0308 	sub.w	r3, r0, r8
 8009cec:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	9304      	str	r3, [sp, #16]
 8009cf4:	46a2      	mov	sl, r4
 8009cf6:	e7d2      	b.n	8009c9e <_vfiprintf_r+0xe2>
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	1d19      	adds	r1, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	9103      	str	r1, [sp, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfbb      	ittet	lt
 8009d04:	425b      	neglt	r3, r3
 8009d06:	f042 0202 	orrlt.w	r2, r2, #2
 8009d0a:	9307      	strge	r3, [sp, #28]
 8009d0c:	9307      	strlt	r3, [sp, #28]
 8009d0e:	bfb8      	it	lt
 8009d10:	9204      	strlt	r2, [sp, #16]
 8009d12:	7823      	ldrb	r3, [r4, #0]
 8009d14:	2b2e      	cmp	r3, #46	; 0x2e
 8009d16:	d10c      	bne.n	8009d32 <_vfiprintf_r+0x176>
 8009d18:	7863      	ldrb	r3, [r4, #1]
 8009d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1c:	d135      	bne.n	8009d8a <_vfiprintf_r+0x1ce>
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	1d1a      	adds	r2, r3, #4
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	9203      	str	r2, [sp, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bfb8      	it	lt
 8009d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d2e:	3402      	adds	r4, #2
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e18 <_vfiprintf_r+0x25c>
 8009d36:	7821      	ldrb	r1, [r4, #0]
 8009d38:	2203      	movs	r2, #3
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	f7f6 fa70 	bl	8000220 <memchr>
 8009d40:	b140      	cbz	r0, 8009d54 <_vfiprintf_r+0x198>
 8009d42:	2340      	movs	r3, #64	; 0x40
 8009d44:	eba0 000a 	sub.w	r0, r0, sl
 8009d48:	fa03 f000 	lsl.w	r0, r3, r0
 8009d4c:	9b04      	ldr	r3, [sp, #16]
 8009d4e:	4303      	orrs	r3, r0
 8009d50:	3401      	adds	r4, #1
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d58:	482c      	ldr	r0, [pc, #176]	; (8009e0c <_vfiprintf_r+0x250>)
 8009d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d5e:	2206      	movs	r2, #6
 8009d60:	f7f6 fa5e 	bl	8000220 <memchr>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d03f      	beq.n	8009de8 <_vfiprintf_r+0x22c>
 8009d68:	4b29      	ldr	r3, [pc, #164]	; (8009e10 <_vfiprintf_r+0x254>)
 8009d6a:	bb1b      	cbnz	r3, 8009db4 <_vfiprintf_r+0x1f8>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	3307      	adds	r3, #7
 8009d70:	f023 0307 	bic.w	r3, r3, #7
 8009d74:	3308      	adds	r3, #8
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	443b      	add	r3, r7
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	e767      	b.n	8009c50 <_vfiprintf_r+0x94>
 8009d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d84:	460c      	mov	r4, r1
 8009d86:	2001      	movs	r0, #1
 8009d88:	e7a5      	b.n	8009cd6 <_vfiprintf_r+0x11a>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	4619      	mov	r1, r3
 8009d92:	f04f 0c0a 	mov.w	ip, #10
 8009d96:	4620      	mov	r0, r4
 8009d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d9c:	3a30      	subs	r2, #48	; 0x30
 8009d9e:	2a09      	cmp	r2, #9
 8009da0:	d903      	bls.n	8009daa <_vfiprintf_r+0x1ee>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0c5      	beq.n	8009d32 <_vfiprintf_r+0x176>
 8009da6:	9105      	str	r1, [sp, #20]
 8009da8:	e7c3      	b.n	8009d32 <_vfiprintf_r+0x176>
 8009daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dae:	4604      	mov	r4, r0
 8009db0:	2301      	movs	r3, #1
 8009db2:	e7f0      	b.n	8009d96 <_vfiprintf_r+0x1da>
 8009db4:	ab03      	add	r3, sp, #12
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <_vfiprintf_r+0x258>)
 8009dbc:	a904      	add	r1, sp, #16
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7fd fe88 	bl	8007ad4 <_printf_float>
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	1c78      	adds	r0, r7, #1
 8009dc8:	d1d6      	bne.n	8009d78 <_vfiprintf_r+0x1bc>
 8009dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dcc:	07d9      	lsls	r1, r3, #31
 8009dce:	d405      	bmi.n	8009ddc <_vfiprintf_r+0x220>
 8009dd0:	89ab      	ldrh	r3, [r5, #12]
 8009dd2:	059a      	lsls	r2, r3, #22
 8009dd4:	d402      	bmi.n	8009ddc <_vfiprintf_r+0x220>
 8009dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dd8:	f7fd fd30 	bl	800783c <__retarget_lock_release_recursive>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	065b      	lsls	r3, r3, #25
 8009de0:	f53f af12 	bmi.w	8009c08 <_vfiprintf_r+0x4c>
 8009de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de6:	e711      	b.n	8009c0c <_vfiprintf_r+0x50>
 8009de8:	ab03      	add	r3, sp, #12
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	462a      	mov	r2, r5
 8009dee:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <_vfiprintf_r+0x258>)
 8009df0:	a904      	add	r1, sp, #16
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7fe f912 	bl	800801c <_printf_i>
 8009df8:	e7e4      	b.n	8009dc4 <_vfiprintf_r+0x208>
 8009dfa:	bf00      	nop
 8009dfc:	0800a2ac 	.word	0x0800a2ac
 8009e00:	0800a2cc 	.word	0x0800a2cc
 8009e04:	0800a28c 	.word	0x0800a28c
 8009e08:	0800a552 	.word	0x0800a552
 8009e0c:	0800a55c 	.word	0x0800a55c
 8009e10:	08007ad5 	.word	0x08007ad5
 8009e14:	08009b97 	.word	0x08009b97
 8009e18:	0800a558 	.word	0x0800a558

08009e1c <__swbuf_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	460e      	mov	r6, r1
 8009e20:	4614      	mov	r4, r2
 8009e22:	4605      	mov	r5, r0
 8009e24:	b118      	cbz	r0, 8009e2e <__swbuf_r+0x12>
 8009e26:	6983      	ldr	r3, [r0, #24]
 8009e28:	b90b      	cbnz	r3, 8009e2e <__swbuf_r+0x12>
 8009e2a:	f7fd fc43 	bl	80076b4 <__sinit>
 8009e2e:	4b21      	ldr	r3, [pc, #132]	; (8009eb4 <__swbuf_r+0x98>)
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d12b      	bne.n	8009e8c <__swbuf_r+0x70>
 8009e34:	686c      	ldr	r4, [r5, #4]
 8009e36:	69a3      	ldr	r3, [r4, #24]
 8009e38:	60a3      	str	r3, [r4, #8]
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	071a      	lsls	r2, r3, #28
 8009e3e:	d52f      	bpl.n	8009ea0 <__swbuf_r+0x84>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	b36b      	cbz	r3, 8009ea0 <__swbuf_r+0x84>
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	1ac0      	subs	r0, r0, r3
 8009e4a:	6963      	ldr	r3, [r4, #20]
 8009e4c:	b2f6      	uxtb	r6, r6
 8009e4e:	4283      	cmp	r3, r0
 8009e50:	4637      	mov	r7, r6
 8009e52:	dc04      	bgt.n	8009e5e <__swbuf_r+0x42>
 8009e54:	4621      	mov	r1, r4
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7ff f9e6 	bl	8009228 <_fflush_r>
 8009e5c:	bb30      	cbnz	r0, 8009eac <__swbuf_r+0x90>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	6022      	str	r2, [r4, #0]
 8009e6a:	701e      	strb	r6, [r3, #0]
 8009e6c:	6963      	ldr	r3, [r4, #20]
 8009e6e:	3001      	adds	r0, #1
 8009e70:	4283      	cmp	r3, r0
 8009e72:	d004      	beq.n	8009e7e <__swbuf_r+0x62>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	07db      	lsls	r3, r3, #31
 8009e78:	d506      	bpl.n	8009e88 <__swbuf_r+0x6c>
 8009e7a:	2e0a      	cmp	r6, #10
 8009e7c:	d104      	bne.n	8009e88 <__swbuf_r+0x6c>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff f9d1 	bl	8009228 <_fflush_r>
 8009e86:	b988      	cbnz	r0, 8009eac <__swbuf_r+0x90>
 8009e88:	4638      	mov	r0, r7
 8009e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <__swbuf_r+0x9c>)
 8009e8e:	429c      	cmp	r4, r3
 8009e90:	d101      	bne.n	8009e96 <__swbuf_r+0x7a>
 8009e92:	68ac      	ldr	r4, [r5, #8]
 8009e94:	e7cf      	b.n	8009e36 <__swbuf_r+0x1a>
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <__swbuf_r+0xa0>)
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	bf08      	it	eq
 8009e9c:	68ec      	ldreq	r4, [r5, #12]
 8009e9e:	e7ca      	b.n	8009e36 <__swbuf_r+0x1a>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f81a 	bl	8009edc <__swsetup_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d0cb      	beq.n	8009e44 <__swbuf_r+0x28>
 8009eac:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb0:	e7ea      	b.n	8009e88 <__swbuf_r+0x6c>
 8009eb2:	bf00      	nop
 8009eb4:	0800a2ac 	.word	0x0800a2ac
 8009eb8:	0800a2cc 	.word	0x0800a2cc
 8009ebc:	0800a28c 	.word	0x0800a28c

08009ec0 <__ascii_wctomb>:
 8009ec0:	b149      	cbz	r1, 8009ed6 <__ascii_wctomb+0x16>
 8009ec2:	2aff      	cmp	r2, #255	; 0xff
 8009ec4:	bf85      	ittet	hi
 8009ec6:	238a      	movhi	r3, #138	; 0x8a
 8009ec8:	6003      	strhi	r3, [r0, #0]
 8009eca:	700a      	strbls	r2, [r1, #0]
 8009ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ed0:	bf98      	it	ls
 8009ed2:	2001      	movls	r0, #1
 8009ed4:	4770      	bx	lr
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4770      	bx	lr
	...

08009edc <__swsetup_r>:
 8009edc:	4b32      	ldr	r3, [pc, #200]	; (8009fa8 <__swsetup_r+0xcc>)
 8009ede:	b570      	push	{r4, r5, r6, lr}
 8009ee0:	681d      	ldr	r5, [r3, #0]
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	b125      	cbz	r5, 8009ef2 <__swsetup_r+0x16>
 8009ee8:	69ab      	ldr	r3, [r5, #24]
 8009eea:	b913      	cbnz	r3, 8009ef2 <__swsetup_r+0x16>
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7fd fbe1 	bl	80076b4 <__sinit>
 8009ef2:	4b2e      	ldr	r3, [pc, #184]	; (8009fac <__swsetup_r+0xd0>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	d10f      	bne.n	8009f18 <__swsetup_r+0x3c>
 8009ef8:	686c      	ldr	r4, [r5, #4]
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f00:	0719      	lsls	r1, r3, #28
 8009f02:	d42c      	bmi.n	8009f5e <__swsetup_r+0x82>
 8009f04:	06dd      	lsls	r5, r3, #27
 8009f06:	d411      	bmi.n	8009f2c <__swsetup_r+0x50>
 8009f08:	2309      	movs	r3, #9
 8009f0a:	6033      	str	r3, [r6, #0]
 8009f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	f04f 30ff 	mov.w	r0, #4294967295
 8009f16:	e03e      	b.n	8009f96 <__swsetup_r+0xba>
 8009f18:	4b25      	ldr	r3, [pc, #148]	; (8009fb0 <__swsetup_r+0xd4>)
 8009f1a:	429c      	cmp	r4, r3
 8009f1c:	d101      	bne.n	8009f22 <__swsetup_r+0x46>
 8009f1e:	68ac      	ldr	r4, [r5, #8]
 8009f20:	e7eb      	b.n	8009efa <__swsetup_r+0x1e>
 8009f22:	4b24      	ldr	r3, [pc, #144]	; (8009fb4 <__swsetup_r+0xd8>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	bf08      	it	eq
 8009f28:	68ec      	ldreq	r4, [r5, #12]
 8009f2a:	e7e6      	b.n	8009efa <__swsetup_r+0x1e>
 8009f2c:	0758      	lsls	r0, r3, #29
 8009f2e:	d512      	bpl.n	8009f56 <__swsetup_r+0x7a>
 8009f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f32:	b141      	cbz	r1, 8009f46 <__swsetup_r+0x6a>
 8009f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	d002      	beq.n	8009f42 <__swsetup_r+0x66>
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff fd73 	bl	8009a28 <_free_r>
 8009f42:	2300      	movs	r3, #0
 8009f44:	6363      	str	r3, [r4, #52]	; 0x34
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	6923      	ldr	r3, [r4, #16]
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f043 0308 	orr.w	r3, r3, #8
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	b94b      	cbnz	r3, 8009f76 <__swsetup_r+0x9a>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f6c:	d003      	beq.n	8009f76 <__swsetup_r+0x9a>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4630      	mov	r0, r6
 8009f72:	f000 f84d 	bl	800a010 <__smakebuf_r>
 8009f76:	89a0      	ldrh	r0, [r4, #12]
 8009f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f7c:	f010 0301 	ands.w	r3, r0, #1
 8009f80:	d00a      	beq.n	8009f98 <__swsetup_r+0xbc>
 8009f82:	2300      	movs	r3, #0
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6963      	ldr	r3, [r4, #20]
 8009f88:	425b      	negs	r3, r3
 8009f8a:	61a3      	str	r3, [r4, #24]
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	b943      	cbnz	r3, 8009fa2 <__swsetup_r+0xc6>
 8009f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f94:	d1ba      	bne.n	8009f0c <__swsetup_r+0x30>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	0781      	lsls	r1, r0, #30
 8009f9a:	bf58      	it	pl
 8009f9c:	6963      	ldrpl	r3, [r4, #20]
 8009f9e:	60a3      	str	r3, [r4, #8]
 8009fa0:	e7f4      	b.n	8009f8c <__swsetup_r+0xb0>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e7f7      	b.n	8009f96 <__swsetup_r+0xba>
 8009fa6:	bf00      	nop
 8009fa8:	20000014 	.word	0x20000014
 8009fac:	0800a2ac 	.word	0x0800a2ac
 8009fb0:	0800a2cc 	.word	0x0800a2cc
 8009fb4:	0800a28c 	.word	0x0800a28c

08009fb8 <abort>:
 8009fb8:	b508      	push	{r3, lr}
 8009fba:	2006      	movs	r0, #6
 8009fbc:	f000 f890 	bl	800a0e0 <raise>
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	f000 f919 	bl	800a1f8 <_exit>

08009fc6 <__swhatbuf_r>:
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	460e      	mov	r6, r1
 8009fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	b096      	sub	sp, #88	; 0x58
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	461d      	mov	r5, r3
 8009fd6:	da08      	bge.n	8009fea <__swhatbuf_r+0x24>
 8009fd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	602a      	str	r2, [r5, #0]
 8009fe0:	061a      	lsls	r2, r3, #24
 8009fe2:	d410      	bmi.n	800a006 <__swhatbuf_r+0x40>
 8009fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe8:	e00e      	b.n	800a008 <__swhatbuf_r+0x42>
 8009fea:	466a      	mov	r2, sp
 8009fec:	f000 f894 	bl	800a118 <_fstat_r>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	dbf1      	blt.n	8009fd8 <__swhatbuf_r+0x12>
 8009ff4:	9a01      	ldr	r2, [sp, #4]
 8009ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ffa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ffe:	425a      	negs	r2, r3
 800a000:	415a      	adcs	r2, r3
 800a002:	602a      	str	r2, [r5, #0]
 800a004:	e7ee      	b.n	8009fe4 <__swhatbuf_r+0x1e>
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	2000      	movs	r0, #0
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	b016      	add	sp, #88	; 0x58
 800a00e:	bd70      	pop	{r4, r5, r6, pc}

0800a010 <__smakebuf_r>:
 800a010:	898b      	ldrh	r3, [r1, #12]
 800a012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a014:	079d      	lsls	r5, r3, #30
 800a016:	4606      	mov	r6, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	d507      	bpl.n	800a02c <__smakebuf_r+0x1c>
 800a01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	2301      	movs	r3, #1
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	b002      	add	sp, #8
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	ab01      	add	r3, sp, #4
 800a02e:	466a      	mov	r2, sp
 800a030:	f7ff ffc9 	bl	8009fc6 <__swhatbuf_r>
 800a034:	9900      	ldr	r1, [sp, #0]
 800a036:	4605      	mov	r5, r0
 800a038:	4630      	mov	r0, r6
 800a03a:	f7fd fc37 	bl	80078ac <_malloc_r>
 800a03e:	b948      	cbnz	r0, 800a054 <__smakebuf_r+0x44>
 800a040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a044:	059a      	lsls	r2, r3, #22
 800a046:	d4ef      	bmi.n	800a028 <__smakebuf_r+0x18>
 800a048:	f023 0303 	bic.w	r3, r3, #3
 800a04c:	f043 0302 	orr.w	r3, r3, #2
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	e7e3      	b.n	800a01c <__smakebuf_r+0xc>
 800a054:	4b0d      	ldr	r3, [pc, #52]	; (800a08c <__smakebuf_r+0x7c>)
 800a056:	62b3      	str	r3, [r6, #40]	; 0x28
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	6163      	str	r3, [r4, #20]
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	6120      	str	r0, [r4, #16]
 800a06a:	b15b      	cbz	r3, 800a084 <__smakebuf_r+0x74>
 800a06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f863 	bl	800a13c <_isatty_r>
 800a076:	b128      	cbz	r0, 800a084 <__smakebuf_r+0x74>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	89a0      	ldrh	r0, [r4, #12]
 800a086:	4305      	orrs	r5, r0
 800a088:	81a5      	strh	r5, [r4, #12]
 800a08a:	e7cd      	b.n	800a028 <__smakebuf_r+0x18>
 800a08c:	0800764d 	.word	0x0800764d

0800a090 <_raise_r>:
 800a090:	291f      	cmp	r1, #31
 800a092:	b538      	push	{r3, r4, r5, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	d904      	bls.n	800a0a4 <_raise_r+0x14>
 800a09a:	2316      	movs	r3, #22
 800a09c:	6003      	str	r3, [r0, #0]
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	bd38      	pop	{r3, r4, r5, pc}
 800a0a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0a6:	b112      	cbz	r2, 800a0ae <_raise_r+0x1e>
 800a0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ac:	b94b      	cbnz	r3, 800a0c2 <_raise_r+0x32>
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 f830 	bl	800a114 <_getpid_r>
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0be:	f000 b817 	b.w	800a0f0 <_kill_r>
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d00a      	beq.n	800a0dc <_raise_r+0x4c>
 800a0c6:	1c59      	adds	r1, r3, #1
 800a0c8:	d103      	bne.n	800a0d2 <_raise_r+0x42>
 800a0ca:	2316      	movs	r3, #22
 800a0cc:	6003      	str	r3, [r0, #0]
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	e7e7      	b.n	800a0a2 <_raise_r+0x12>
 800a0d2:	2400      	movs	r4, #0
 800a0d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0d8:	4628      	mov	r0, r5
 800a0da:	4798      	blx	r3
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e7e0      	b.n	800a0a2 <_raise_r+0x12>

0800a0e0 <raise>:
 800a0e0:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <raise+0xc>)
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	f7ff bfd3 	b.w	800a090 <_raise_r>
 800a0ea:	bf00      	nop
 800a0ec:	20000014 	.word	0x20000014

0800a0f0 <_kill_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_kill_r+0x20>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f000 f84d 	bl	800a19c <_kill>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_kill_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_kill_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	2000662c 	.word	0x2000662c

0800a114 <_getpid_r>:
 800a114:	f000 b832 	b.w	800a17c <_getpid>

0800a118 <_fstat_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	; (800a138 <_fstat_r+0x20>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f000 f821 	bl	800a16c <_fstat>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d102      	bne.n	800a134 <_fstat_r+0x1c>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	b103      	cbz	r3, 800a134 <_fstat_r+0x1c>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	bf00      	nop
 800a138:	2000662c 	.word	0x2000662c

0800a13c <_isatty_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_isatty_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f000 f820 	bl	800a18c <_isatty>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_isatty_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_isatty_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	2000662c 	.word	0x2000662c

0800a15c <_close>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	; (800a168 <_close+0xc>)
 800a15e:	2258      	movs	r2, #88	; 0x58
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	4770      	bx	lr
 800a168:	2000662c 	.word	0x2000662c

0800a16c <_fstat>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <_fstat+0xc>)
 800a16e:	2258      	movs	r2, #88	; 0x58
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	4770      	bx	lr
 800a178:	2000662c 	.word	0x2000662c

0800a17c <_getpid>:
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <_getpid+0xc>)
 800a17e:	2258      	movs	r2, #88	; 0x58
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	4770      	bx	lr
 800a188:	2000662c 	.word	0x2000662c

0800a18c <_isatty>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	; (800a198 <_isatty+0xc>)
 800a18e:	2258      	movs	r2, #88	; 0x58
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	2000      	movs	r0, #0
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	2000662c 	.word	0x2000662c

0800a19c <_kill>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <_kill+0xc>)
 800a19e:	2258      	movs	r2, #88	; 0x58
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a6:	4770      	bx	lr
 800a1a8:	2000662c 	.word	0x2000662c

0800a1ac <_lseek>:
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <_lseek+0xc>)
 800a1ae:	2258      	movs	r2, #88	; 0x58
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	4770      	bx	lr
 800a1b8:	2000662c 	.word	0x2000662c

0800a1bc <_read>:
 800a1bc:	4b02      	ldr	r3, [pc, #8]	; (800a1c8 <_read+0xc>)
 800a1be:	2258      	movs	r2, #88	; 0x58
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	4770      	bx	lr
 800a1c8:	2000662c 	.word	0x2000662c

0800a1cc <_sbrk>:
 800a1cc:	4a04      	ldr	r2, [pc, #16]	; (800a1e0 <_sbrk+0x14>)
 800a1ce:	6811      	ldr	r1, [r2, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b909      	cbnz	r1, 800a1d8 <_sbrk+0xc>
 800a1d4:	4903      	ldr	r1, [pc, #12]	; (800a1e4 <_sbrk+0x18>)
 800a1d6:	6011      	str	r1, [r2, #0]
 800a1d8:	6810      	ldr	r0, [r2, #0]
 800a1da:	4403      	add	r3, r0
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	4770      	bx	lr
 800a1e0:	20006630 	.word	0x20006630
 800a1e4:	20006638 	.word	0x20006638

0800a1e8 <_write>:
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <_write+0xc>)
 800a1ea:	2258      	movs	r2, #88	; 0x58
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f2:	4770      	bx	lr
 800a1f4:	2000662c 	.word	0x2000662c

0800a1f8 <_exit>:
 800a1f8:	e7fe      	b.n	800a1f8 <_exit>
	...

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr
