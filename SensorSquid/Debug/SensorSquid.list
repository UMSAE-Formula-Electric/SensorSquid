
SensorSquid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800c098  0800c098  0001c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c574  0800c574  0001c574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0800c578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000064f4  200001e8  0800c75c  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200066dc  0800c75c  000266dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000304de  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006865  00000000  00000000  000506f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001aa67  00000000  00000000  00056f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c98  00000000  00000000  000719c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001c50  00000000  00000000  00073658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029f26  00000000  00000000  000752a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031ade  00000000  00000000  0009f1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f66be  00000000  00000000  000d0cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001c736a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006488  00000000  00000000  001c73bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001cd844  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001cd910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c080 	.word	0x0800c080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c080 	.word	0x0800c080

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x30>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f96:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f9e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fa6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fc67 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2005      	movs	r0, #5
 8000fb0:	f006 fada 	bl	8007568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f006 fab6 	bl	8007524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bd08      	pop	{r3, pc}
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x10>)
 8000fc2:	6811      	ldr	r1, [r2, #0]
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_IncTick+0x14>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	440b      	add	r3, r1
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000204 	.word	0x20000204
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <HAL_GetTick+0x8>)
 8000fda:	6818      	ldr	r0, [r3, #0]
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000204 	.word	0x20000204

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff6 	bl	8000fd8 <HAL_GetTick>
 8000fec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ff2:	d002      	beq.n	8000ffa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_Delay+0x24>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	f7ff ffed 	bl	8000fd8 <HAL_GetTick>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	42a0      	cmp	r0, r4
 8001002:	d3fa      	bcc.n	8000ffa <HAL_Delay+0x16>
  {
  }
}
 8001004:	bd38      	pop	{r3, r4, r5, pc}
 8001006:	bf00      	nop
 8001008:	20000000 	.word	0x20000000

0800100c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <ADC_Init+0x12c>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001014:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	6841      	ldr	r1, [r0, #4]
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800101e:	6802      	ldr	r2, [r0, #0]
 8001020:	6853      	ldr	r3, [r2, #4]
 8001022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001026:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001028:	6802      	ldr	r2, [r0, #0]
 800102a:	6853      	ldr	r3, [r2, #4]
 800102c:	6901      	ldr	r1, [r0, #16]
 800102e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001032:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001034:	6802      	ldr	r2, [r0, #0]
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800103c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800103e:	6802      	ldr	r2, [r0, #0]
 8001040:	6853      	ldr	r3, [r2, #4]
 8001042:	6881      	ldr	r1, [r0, #8]
 8001044:	430b      	orrs	r3, r1
 8001046:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001048:	6802      	ldr	r2, [r0, #0]
 800104a:	6893      	ldr	r3, [r2, #8]
 800104c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001050:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001052:	6802      	ldr	r2, [r0, #0]
 8001054:	6893      	ldr	r3, [r2, #8]
 8001056:	68c1      	ldr	r1, [r0, #12]
 8001058:	430b      	orrs	r3, r1
 800105a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800105c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <ADC_Init+0x130>)
 8001060:	429a      	cmp	r2, r3
 8001062:	d057      	beq.n	8001114 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800106c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800106e:	6802      	ldr	r2, [r0, #0]
 8001070:	6893      	ldr	r3, [r2, #8]
 8001072:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001074:	430b      	orrs	r3, r1
 8001076:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	6893      	ldr	r3, [r2, #8]
 800107c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001080:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001082:	6802      	ldr	r2, [r0, #0]
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001088:	430b      	orrs	r3, r1
 800108a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800108c:	6802      	ldr	r2, [r0, #0]
 800108e:	6893      	ldr	r3, [r2, #8]
 8001090:	f023 0302 	bic.w	r3, r3, #2
 8001094:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	6893      	ldr	r3, [r2, #8]
 800109a:	7e01      	ldrb	r1, [r0, #24]
 800109c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80010a0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d03f      	beq.n	800112a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010aa:	6802      	ldr	r2, [r0, #0]
 80010ac:	6853      	ldr	r3, [r2, #4]
 80010ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b2:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010b4:	6802      	ldr	r2, [r0, #0]
 80010b6:	6853      	ldr	r3, [r2, #4]
 80010b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010bc:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010be:	6801      	ldr	r1, [r0, #0]
 80010c0:	684b      	ldr	r3, [r1, #4]
 80010c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010c4:	3a01      	subs	r2, #1
 80010c6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80010ca:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010cc:	6802      	ldr	r2, [r0, #0]
 80010ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80010d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010d6:	6801      	ldr	r1, [r0, #0]
 80010d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80010da:	69c2      	ldr	r2, [r0, #28]
 80010dc:	3a01      	subs	r2, #1
 80010de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80010e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010e4:	6802      	ldr	r2, [r0, #0]
 80010e6:	6893      	ldr	r3, [r2, #8]
 80010e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ee:	6802      	ldr	r2, [r0, #0]
 80010f0:	6893      	ldr	r3, [r2, #8]
 80010f2:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80010f6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80010fa:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010fc:	6802      	ldr	r2, [r0, #0]
 80010fe:	6893      	ldr	r3, [r2, #8]
 8001100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001104:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001106:	6802      	ldr	r2, [r0, #0]
 8001108:	6893      	ldr	r3, [r2, #8]
 800110a:	6941      	ldr	r1, [r0, #20]
 800110c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001110:	6093      	str	r3, [r2, #8]
}
 8001112:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001114:	6802      	ldr	r2, [r0, #0]
 8001116:	6893      	ldr	r3, [r2, #8]
 8001118:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800111c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800111e:	6802      	ldr	r2, [r0, #0]
 8001120:	6893      	ldr	r3, [r2, #8]
 8001122:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001126:	6093      	str	r3, [r2, #8]
 8001128:	e7b0      	b.n	800108c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800112a:	6802      	ldr	r2, [r0, #0]
 800112c:	6853      	ldr	r3, [r2, #4]
 800112e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001132:	6053      	str	r3, [r2, #4]
 8001134:	e7ca      	b.n	80010cc <ADC_Init+0xc0>
 8001136:	bf00      	nop
 8001138:	40012300 	.word	0x40012300
 800113c:	0f000001 	.word	0x0f000001

08001140 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001140:	b338      	cbz	r0, 8001192 <HAL_ADC_Init+0x52>
{
 8001142:	b510      	push	{r4, lr}
 8001144:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001146:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001148:	b143      	cbz	r3, 800115c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800114c:	f013 0f10 	tst.w	r3, #16
 8001150:	d00b      	beq.n	800116a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001152:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001154:	2300      	movs	r3, #0
 8001156:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800115a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 800115c:	f005 fc32 	bl	80069c4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001160:	2300      	movs	r3, #0
 8001162:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001164:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001168:	e7ef      	b.n	800114a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800116a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800116c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001170:	f023 0302 	bic.w	r3, r3, #2
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ff46 	bl	800100c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	2000      	movs	r0, #0
 8001182:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001186:	f023 0303 	bic.w	r3, r3, #3
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6423      	str	r3, [r4, #64]	; 0x40
 8001190:	e7e0      	b.n	8001154 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001192:	2001      	movs	r0, #1
}
 8001194:	4770      	bx	lr
	...

08001198 <HAL_ADC_Start_DMA>:
{
 8001198:	b510      	push	{r4, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800119e:	2200      	movs	r2, #0
 80011a0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80011a2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80011a6:	2a01      	cmp	r2, #1
 80011a8:	f000 80ae 	beq.w	8001308 <HAL_ADC_Start_DMA+0x170>
 80011ac:	4604      	mov	r4, r0
 80011ae:	2201      	movs	r2, #1
 80011b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011b4:	6802      	ldr	r2, [r0, #0]
 80011b6:	6890      	ldr	r0, [r2, #8]
 80011b8:	f010 0f01 	tst.w	r0, #1
 80011bc:	d113      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80011be:	6890      	ldr	r0, [r2, #8]
 80011c0:	f040 0001 	orr.w	r0, r0, #1
 80011c4:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c6:	4a53      	ldr	r2, [pc, #332]	; (8001314 <HAL_ADC_Start_DMA+0x17c>)
 80011c8:	6810      	ldr	r0, [r2, #0]
 80011ca:	4a53      	ldr	r2, [pc, #332]	; (8001318 <HAL_ADC_Start_DMA+0x180>)
 80011cc:	fba2 2000 	umull	r2, r0, r2, r0
 80011d0:	0c80      	lsrs	r0, r0, #18
 80011d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80011d6:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Start_DMA+0x48>
      counter--;
 80011da:	9801      	ldr	r0, [sp, #4]
 80011dc:	3801      	subs	r0, #1
 80011de:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80011e0:	9801      	ldr	r0, [sp, #4]
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	6890      	ldr	r0, [r2, #8]
 80011ea:	f410 7f80 	tst.w	r0, #256	; 0x100
 80011ee:	d003      	beq.n	80011f8 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011f0:	6890      	ldr	r0, [r2, #8]
 80011f2:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80011f6:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011f8:	6822      	ldr	r2, [r4, #0]
 80011fa:	6890      	ldr	r0, [r2, #8]
 80011fc:	f010 0f01 	tst.w	r0, #1
 8001200:	d077      	beq.n	80012f2 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001204:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001208:	f020 0001 	bic.w	r0, r0, #1
 800120c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001210:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001212:	6852      	ldr	r2, [r2, #4]
 8001214:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001218:	d005      	beq.n	8001226 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800121a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800121c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001224:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001226:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001228:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800122c:	d036      	beq.n	800129c <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800122e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001230:	f022 0206 	bic.w	r2, r2, #6
 8001234:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001236:	2200      	movs	r2, #0
 8001238:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800123c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800123e:	4837      	ldr	r0, [pc, #220]	; (800131c <HAL_ADC_Start_DMA+0x184>)
 8001240:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001242:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001244:	4836      	ldr	r0, [pc, #216]	; (8001320 <HAL_ADC_Start_DMA+0x188>)
 8001246:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001248:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800124a:	4836      	ldr	r0, [pc, #216]	; (8001324 <HAL_ADC_Start_DMA+0x18c>)
 800124c:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001254:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001256:	6820      	ldr	r0, [r4, #0]
 8001258:	6842      	ldr	r2, [r0, #4]
 800125a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800125e:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	6882      	ldr	r2, [r0, #8]
 8001264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001268:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800126a:	6820      	ldr	r0, [r4, #0]
 800126c:	460a      	mov	r2, r1
 800126e:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001272:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001274:	f000 fc40 	bl	8001af8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_ADC_Start_DMA+0x190>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f013 0f1f 	tst.w	r3, #31
 8001280:	d127      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <HAL_ADC_Start_DMA+0x194>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d011      	beq.n	80012ae <HAL_ADC_Start_DMA+0x116>
 800128a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_ADC_Start_DMA+0x198>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d014      	beq.n	80012c2 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 8001298:	2000      	movs	r0, #0
 800129a:	e033      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 800129c:	2200      	movs	r2, #0
 800129e:	6462      	str	r2, [r4, #68]	; 0x44
 80012a0:	e7c9      	b.n	8001236 <HAL_ADC_Start_DMA+0x9e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012a2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80012a6:	6852      	ldr	r2, [r2, #4]
 80012a8:	f012 0f1f 	tst.w	r2, #31
 80012ac:	d1f1      	bne.n	8001292 <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012b4:	d12a      	bne.n	800130c <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80012be:	2000      	movs	r0, #0
 80012c0:	e020      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012c2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80012c6:	6852      	ldr	r2, [r2, #4]
 80012c8:	f012 0f10 	tst.w	r2, #16
 80012cc:	d0ef      	beq.n	80012ae <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 80012ce:	2000      	movs	r0, #0
 80012d0:	e018      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	4a15      	ldr	r2, [pc, #84]	; (800132c <HAL_ADC_Start_DMA+0x194>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d001      	beq.n	80012de <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 80012da:	2000      	movs	r0, #0
 80012dc:	e012      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012e4:	d114      	bne.n	8001310 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80012ee:	2000      	movs	r0, #0
 80012f0:	e008      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001302:	2000      	movs	r0, #0
}
 8001304:	b002      	add	sp, #8
 8001306:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001308:	2002      	movs	r0, #2
 800130a:	e7fb      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	e7f9      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
 8001310:	2000      	movs	r0, #0
 8001312:	e7f7      	b.n	8001304 <HAL_ADC_Start_DMA+0x16c>
 8001314:	20000010 	.word	0x20000010
 8001318:	431bde83 	.word	0x431bde83
 800131c:	0800135b 	.word	0x0800135b
 8001320:	08001339 	.word	0x08001339
 8001324:	08001345 	.word	0x08001345
 8001328:	40012300 	.word	0x40012300
 800132c:	40012000 	.word	0x40012000
 8001330:	40012200 	.word	0x40012200

08001334 <HAL_ADC_ConvCpltCallback>:
}
 8001334:	4770      	bx	lr

08001336 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001336:	4770      	bx	lr

08001338 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001338:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800133a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800133c:	f7ff fffb 	bl	8001336 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001340:	bd08      	pop	{r3, pc}

08001342 <HAL_ADC_ErrorCallback>:
}
 8001342:	4770      	bx	lr

08001344 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001344:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001346:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800134c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001354:	f7ff fff5 	bl	8001342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001358:	bd08      	pop	{r3, pc}

0800135a <ADC_DMAConvCplt>:
{
 800135a:	b508      	push	{r3, lr}
 800135c:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800135e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001360:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001362:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001366:	d125      	bne.n	80013b4 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001368:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001378:	d119      	bne.n	80013ae <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800137a:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137c:	b9ba      	cbnz	r2, 80013ae <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001380:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001384:	d003      	beq.n	800138e <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001386:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001388:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800138c:	d10f      	bne.n	80013ae <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	f022 0220 	bic.w	r2, r2, #32
 8001394:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013a0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80013a4:	d103      	bne.n	80013ae <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80013ae:	f7ff ffc1 	bl	8001334 <HAL_ADC_ConvCpltCallback>
}
 80013b2:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80013b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80013b6:	f012 0f10 	tst.w	r2, #16
 80013ba:	d104      	bne.n	80013c6 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80013bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80013be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013c0:	4618      	mov	r0, r3
 80013c2:	4790      	blx	r2
}
 80013c4:	e7f5      	b.n	80013b2 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80013c6:	f7ff ffbc 	bl	8001342 <HAL_ADC_ErrorCallback>
 80013ca:	e7f2      	b.n	80013b2 <ADC_DMAConvCplt+0x58>

080013cc <HAL_ADC_ConfigChannel>:
{
 80013cc:	b430      	push	{r4, r5}
 80013ce:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80013d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f000 80c0 	beq.w	800155e <HAL_ADC_ConfigChannel+0x192>
 80013de:	2301      	movs	r3, #1
 80013e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013e4:	680b      	ldr	r3, [r1, #0]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	d941      	bls.n	800146e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013ea:	6804      	ldr	r4, [r0, #0]
 80013ec:	68e2      	ldr	r2, [r4, #12]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013f4:	3b1e      	subs	r3, #30
 80013f6:	f04f 0c07 	mov.w	ip, #7
 80013fa:	fa0c f303 	lsl.w	r3, ip, r3
 80013fe:	ea22 0303 	bic.w	r3, r2, r3
 8001402:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001404:	6804      	ldr	r4, [r0, #0]
 8001406:	68e2      	ldr	r2, [r4, #12]
 8001408:	880b      	ldrh	r3, [r1, #0]
 800140a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800140e:	3b1e      	subs	r3, #30
 8001410:	688d      	ldr	r5, [r1, #8]
 8001412:	fa05 f303 	lsl.w	r3, r5, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800141a:	684b      	ldr	r3, [r1, #4]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d83d      	bhi.n	800149c <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001420:	6804      	ldr	r4, [r0, #0]
 8001422:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001424:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001428:	3b05      	subs	r3, #5
 800142a:	f04f 0c1f 	mov.w	ip, #31
 800142e:	fa0c f303 	lsl.w	r3, ip, r3
 8001432:	ea22 0303 	bic.w	r3, r2, r3
 8001436:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001438:	6804      	ldr	r4, [r0, #0]
 800143a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800143c:	684b      	ldr	r3, [r1, #4]
 800143e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001442:	3b05      	subs	r3, #5
 8001444:	f8b1 c000 	ldrh.w	ip, [r1]
 8001448:	fa0c f303 	lsl.w	r3, ip, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_ADC_ConfigChannel+0x198>)
 8001454:	429a      	cmp	r2, r3
 8001456:	d051      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_ADC_ConfigChannel+0x198>)
 800145c:	429a      	cmp	r2, r3
 800145e:	d05a      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001460:	2300      	movs	r3, #0
 8001462:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001466:	4618      	mov	r0, r3
}
 8001468:	b002      	add	sp, #8
 800146a:	bc30      	pop	{r4, r5}
 800146c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800146e:	6804      	ldr	r4, [r0, #0]
 8001470:	6922      	ldr	r2, [r4, #16]
 8001472:	b29b      	uxth	r3, r3
 8001474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001478:	f04f 0c07 	mov.w	ip, #7
 800147c:	fa0c f303 	lsl.w	r3, ip, r3
 8001480:	ea22 0303 	bic.w	r3, r2, r3
 8001484:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001486:	6804      	ldr	r4, [r0, #0]
 8001488:	6922      	ldr	r2, [r4, #16]
 800148a:	880b      	ldrh	r3, [r1, #0]
 800148c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001490:	688d      	ldr	r5, [r1, #8]
 8001492:	fa05 f303 	lsl.w	r3, r5, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	6123      	str	r3, [r4, #16]
 800149a:	e7be      	b.n	800141a <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 800149c:	2b0c      	cmp	r3, #12
 800149e:	d816      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a0:	6805      	ldr	r5, [r0, #0]
 80014a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80014a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014a8:	3b23      	subs	r3, #35	; 0x23
 80014aa:	241f      	movs	r4, #31
 80014ac:	fa04 f303 	lsl.w	r3, r4, r3
 80014b0:	ea22 0303 	bic.w	r3, r2, r3
 80014b4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014b6:	6805      	ldr	r5, [r0, #0]
 80014b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80014ba:	684b      	ldr	r3, [r1, #4]
 80014bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	880c      	ldrh	r4, [r1, #0]
 80014c4:	fa04 f303 	lsl.w	r3, r4, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	632b      	str	r3, [r5, #48]	; 0x30
 80014cc:	e7c0      	b.n	8001450 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ce:	6805      	ldr	r5, [r0, #0]
 80014d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80014d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d6:	3b41      	subs	r3, #65	; 0x41
 80014d8:	241f      	movs	r4, #31
 80014da:	fa04 f303 	lsl.w	r3, r4, r3
 80014de:	ea22 0303 	bic.w	r3, r2, r3
 80014e2:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014e4:	6805      	ldr	r5, [r0, #0]
 80014e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80014e8:	684b      	ldr	r3, [r1, #4]
 80014ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ee:	3b41      	subs	r3, #65	; 0x41
 80014f0:	880c      	ldrh	r4, [r1, #0]
 80014f2:	fa04 f303 	lsl.w	r3, r4, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80014fa:	e7a9      	b.n	8001450 <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014fc:	680b      	ldr	r3, [r1, #0]
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d1aa      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x8c>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_ADC_ConfigChannel+0x19c>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800150a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e7a0      	b.n	8001458 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001516:	680b      	ldr	r3, [r1, #0]
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_ADC_ConfigChannel+0x1a0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d001      	beq.n	8001522 <HAL_ADC_ConfigChannel+0x156>
 800151e:	2b11      	cmp	r3, #17
 8001520:	d19e      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x94>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x19c>)
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800152a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001532:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001534:	680a      	ldr	r2, [r1, #0]
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_ADC_ConfigChannel+0x1a0>)
 8001538:	429a      	cmp	r2, r3
 800153a:	d191      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_ADC_ConfigChannel+0x1a4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <HAL_ADC_ConfigChannel+0x1a8>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001550:	9b01      	ldr	r3, [sp, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d084      	beq.n	8001460 <HAL_ADC_ConfigChannel+0x94>
        counter--;
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	e7f8      	b.n	8001550 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800155e:	2002      	movs	r0, #2
 8001560:	e782      	b.n	8001468 <HAL_ADC_ConfigChannel+0x9c>
 8001562:	bf00      	nop
 8001564:	40012000 	.word	0x40012000
 8001568:	40012300 	.word	0x40012300
 800156c:	10000012 	.word	0x10000012
 8001570:	20000010 	.word	0x20000010
 8001574:	431bde83 	.word	0x431bde83

08001578 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001578:	2800      	cmp	r0, #0
 800157a:	f000 80a1 	beq.w	80016c0 <HAL_CAN_Init+0x148>
{
 800157e:	b538      	push	{r3, r4, r5, lr}
 8001580:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001582:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001586:	b1d3      	cbz	r3, 80015be <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001592:	f7ff fd21 	bl	8000fd8 <HAL_GetTick>
 8001596:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	f012 0f01 	tst.w	r2, #1
 80015a0:	d110      	bne.n	80015c4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a2:	f7ff fd19 	bl	8000fd8 <HAL_GetTick>
 80015a6:	1b40      	subs	r0, r0, r5
 80015a8:	280a      	cmp	r0, #10
 80015aa:	d9f5      	bls.n	8001598 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015b4:	2305      	movs	r3, #5
 80015b6:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80015be:	f005 fb29 	bl	8006c14 <HAL_CAN_MspInit>
 80015c2:	e7e1      	b.n	8001588 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f022 0202 	bic.w	r2, r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80015cc:	f7ff fd04 	bl	8000fd8 <HAL_GetTick>
 80015d0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	f012 0f02 	tst.w	r2, #2
 80015da:	d00d      	beq.n	80015f8 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015dc:	f7ff fcfc 	bl	8000fd8 <HAL_GetTick>
 80015e0:	1b40      	subs	r0, r0, r5
 80015e2:	280a      	cmp	r0, #10
 80015e4:	d9f5      	bls.n	80015d2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ee:	2305      	movs	r3, #5
 80015f0:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
 80015f6:	e7e1      	b.n	80015bc <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015f8:	7e22      	ldrb	r2, [r4, #24]
 80015fa:	2a01      	cmp	r2, #1
 80015fc:	d03d      	beq.n	800167a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001606:	7e63      	ldrb	r3, [r4, #25]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d03b      	beq.n	8001684 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001614:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001616:	7ea3      	ldrb	r3, [r4, #26]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d039      	beq.n	8001690 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	f023 0320 	bic.w	r3, r3, #32
 8001624:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001626:	7ee3      	ldrb	r3, [r4, #27]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d037      	beq.n	800169c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001636:	7f23      	ldrb	r3, [r4, #28]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d035      	beq.n	80016a8 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	f023 0308 	bic.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001646:	7f63      	ldrb	r3, [r4, #29]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d033      	beq.n	80016b4 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	68e2      	ldr	r2, [r4, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	6922      	ldr	r2, [r4, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	6962      	ldr	r2, [r4, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	6862      	ldr	r2, [r4, #4]
 8001666:	3a01      	subs	r2, #1
 8001668:	6821      	ldr	r1, [r4, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800166e:	2000      	movs	r0, #0
 8001670:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001672:	2301      	movs	r3, #1
 8001674:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001678:	e7a0      	b.n	80015bc <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e7c0      	b.n	8001606 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001684:	6822      	ldr	r2, [r4, #0]
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e7c2      	b.n	8001616 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e7c4      	b.n	8001626 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	f023 0310 	bic.w	r3, r3, #16
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e7c6      	b.n	8001636 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e7c8      	b.n	8001646 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e7ca      	b.n	8001656 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
}
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c4:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d905      	bls.n	80016dc <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
  }
}
 80016da:	4770      	bx	lr
{
 80016dc:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 80016e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016f0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80016f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016fc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80016fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001706:	694a      	ldr	r2, [r1, #20]
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001712:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8001716:	ea6f 0c02 	mvn.w	ip, r2
 800171a:	ea20 0002 	bic.w	r0, r0, r2
 800171e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001722:	69cb      	ldr	r3, [r1, #28]
 8001724:	b9c3      	cbnz	r3, 8001758 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 8001728:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800172c:	ea0c 0000 	and.w	r0, ip, r0
 8001730:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001734:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001736:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001738:	68cd      	ldr	r5, [r1, #12]
 800173a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173e:	3048      	adds	r0, #72	; 0x48
 8001740:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001744:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001746:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001748:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800174c:	694c      	ldr	r4, [r1, #20]
 800174e:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 8001752:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8001756:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001758:	69cb      	ldr	r3, [r1, #28]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d01e      	beq.n	800179c <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800175e:	698b      	ldr	r3, [r1, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d133      	bne.n	80017cc <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001764:	4824      	ldr	r0, [pc, #144]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 8001766:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800176a:	ea0c 0303 	and.w	r3, ip, r3
 800176e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001772:	690b      	ldr	r3, [r1, #16]
 8001774:	bb8b      	cbnz	r3, 80017da <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001776:	4820      	ldr	r0, [pc, #128]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 8001778:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800177c:	ea0c 0303 	and.w	r3, ip, r3
 8001780:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001784:	6a0b      	ldr	r3, [r1, #32]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d02e      	beq.n	80017e8 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 800178c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8001798:	2000      	movs	r0, #0
}
 800179a:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 800179e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80017a2:	4310      	orrs	r0, r2
 80017a4:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017a8:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017aa:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ac:	680d      	ldr	r5, [r1, #0]
 80017ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b2:	3048      	adds	r0, #72	; 0x48
 80017b4:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017b8:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ba:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017bc:	688d      	ldr	r5, [r1, #8]
 80017be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c2:	3448      	adds	r4, #72	; 0x48
 80017c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80017c8:	6058      	str	r0, [r3, #4]
 80017ca:	e7c8      	b.n	800175e <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 80017ce:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 80017d8:	e7cb      	b.n	8001772 <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 80017dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 80017e6:	e7cd      	b.n	8001784 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017e8:	4903      	ldr	r1, [pc, #12]	; (80017f8 <HAL_CAN_ConfigFilter+0x134>)
 80017ea:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 80017ee:	431a      	orrs	r2, r3
 80017f0:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 80017f4:	e7c9      	b.n	800178a <HAL_CAN_ConfigFilter+0xc6>
 80017f6:	bf00      	nop
 80017f8:	40006400 	.word	0x40006400

080017fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001800:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001804:	b2ed      	uxtb	r5, r5
 8001806:	2d01      	cmp	r5, #1
 8001808:	d006      	beq.n	8001818 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800180a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800180c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001810:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001812:	2501      	movs	r5, #1
  }
}
 8001814:	4628      	mov	r0, r5
 8001816:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001818:	2302      	movs	r3, #2
 800181a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001828:	f7ff fbd6 	bl	8000fd8 <HAL_GetTick>
 800182c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f013 0f01 	tst.w	r3, #1
 8001836:	d00c      	beq.n	8001852 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001838:	f7ff fbce 	bl	8000fd8 <HAL_GetTick>
 800183c:	1b83      	subs	r3, r0, r6
 800183e:	2b0a      	cmp	r3, #10
 8001840:	d9f5      	bls.n	800182e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800184a:	2305      	movs	r3, #5
 800184c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001850:	e7e0      	b.n	8001814 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001852:	2500      	movs	r5, #0
 8001854:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8001856:	e7dd      	b.n	8001814 <HAL_CAN_Start+0x18>

08001858 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001858:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800185c:	3b01      	subs	r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d905      	bls.n	8001870 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800186c:	2001      	movs	r0, #1
  }
}
 800186e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	6953      	ldr	r3, [r2, #20]
 8001874:	4319      	orrs	r1, r3
 8001876:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001878:	2000      	movs	r0, #0
 800187a:	4770      	bx	lr

0800187c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800187e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001880:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	0200      	lsls	r0, r0, #8
 800188a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001898:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_NVIC_SetPriority+0x68>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018aa:	f1c3 0c07 	rsb	ip, r3, #7
 80018ae:	f1bc 0f04 	cmp.w	ip, #4
 80018b2:	bf28      	it	cs
 80018b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b8:	f103 0e04 	add.w	lr, r3, #4
 80018bc:	f1be 0f06 	cmp.w	lr, #6
 80018c0:	d918      	bls.n	80018f4 <HAL_NVIC_SetPriority+0x54>
 80018c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 3eff 	mov.w	lr, #4294967295
 80018c8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80018cc:	ea21 010c 	bic.w	r1, r1, ip
 80018d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d2:	fa0e f303 	lsl.w	r3, lr, r3
 80018d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018dc:	2800      	cmp	r0, #0
 80018de:	db0b      	blt.n	80018f8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	0109      	lsls	r1, r1, #4
 80018e2:	b2c9      	uxtb	r1, r1
 80018e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f4:	2300      	movs	r3, #0
 80018f6:	e7e5      	b.n	80018c4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	f000 000f 	and.w	r0, r0, #15
 80018fc:	0109      	lsls	r1, r1, #4
 80018fe:	b2c9      	uxtb	r1, r1
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_NVIC_SetPriority+0x6c>)
 8001902:	5419      	strb	r1, [r3, r0]
 8001904:	e7f4      	b.n	80018f0 <HAL_NVIC_SetPriority+0x50>
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	e000ed14 	.word	0xe000ed14

08001910 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001910:	2800      	cmp	r0, #0
 8001912:	db07      	blt.n	8001924 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001914:	f000 021f 	and.w	r2, r0, #31
 8001918:	0940      	lsrs	r0, r0, #5
 800191a:	2301      	movs	r3, #1
 800191c:	4093      	lsls	r3, r2
 800191e:	4a02      	ldr	r2, [pc, #8]	; (8001928 <HAL_NVIC_EnableIRQ+0x18>)
 8001920:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800192e:	6805      	ldr	r5, [r0, #0]
 8001930:	682c      	ldr	r4, [r5, #0]
 8001932:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001936:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001938:	6804      	ldr	r4, [r0, #0]
 800193a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193c:	6883      	ldr	r3, [r0, #8]
 800193e:	2b40      	cmp	r3, #64	; 0x40
 8001940:	d005      	beq.n	800194e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001942:	6803      	ldr	r3, [r0, #0]
 8001944:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001946:	6803      	ldr	r3, [r0, #0]
 8001948:	60da      	str	r2, [r3, #12]
  }
}
 800194a:	bc30      	pop	{r4, r5}
 800194c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800194e:	6803      	ldr	r3, [r0, #0]
 8001950:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001952:	6803      	ldr	r3, [r0, #0]
 8001954:	60d9      	str	r1, [r3, #12]
 8001956:	e7f8      	b.n	800194a <DMA_SetConfig+0x1e>

08001958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001958:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800195a:	6803      	ldr	r3, [r0, #0]
 800195c:	b2d9      	uxtb	r1, r3
 800195e:	3910      	subs	r1, #16
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <DMA_CalcBaseAndBitshift+0x3c>)
 8001962:	fba2 4201 	umull	r4, r2, r2, r1
 8001966:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <DMA_CalcBaseAndBitshift+0x40>)
 800196a:	5ca2      	ldrb	r2, [r4, r2]
 800196c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800196e:	295f      	cmp	r1, #95	; 0x5f
 8001970:	d909      	bls.n	8001986 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	3304      	adds	r3, #4
 800197c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800197e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001984:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	6583      	str	r3, [r0, #88]	; 0x58
 8001990:	e7f5      	b.n	800197e <DMA_CalcBaseAndBitshift+0x26>
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab
 8001998:	0800c098 	.word	0x0800c098

0800199c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800199c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800199e:	6982      	ldr	r2, [r0, #24]
 80019a0:	b992      	cbnz	r2, 80019c8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d00a      	beq.n	80019bc <DMA_CheckFifoParam+0x20>
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d002      	beq.n	80019b0 <DMA_CheckFifoParam+0x14>
 80019aa:	b10b      	cbz	r3, 80019b0 <DMA_CheckFifoParam+0x14>
 80019ac:	2000      	movs	r0, #0
 80019ae:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019b6:	d128      	bne.n	8001a0a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2000      	movs	r0, #0
 80019ba:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c2:	d024      	beq.n	8001a0e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2000      	movs	r0, #0
 80019c6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80019cc:	d009      	beq.n	80019e2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d925      	bls.n	8001a1e <DMA_CheckFifoParam+0x82>
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d125      	bne.n	8001a22 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019dc:	d123      	bne.n	8001a26 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2000      	movs	r0, #0
 80019e0:	4770      	bx	lr
    switch (tmp)
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d803      	bhi.n	80019ee <DMA_CheckFifoParam+0x52>
 80019e6:	e8df f003 	tbb	[pc, r3]
 80019ea:	0414      	.short	0x0414
 80019ec:	0a14      	.short	0x0a14
 80019ee:	2000      	movs	r0, #0
 80019f0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019f8:	d10d      	bne.n	8001a16 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2000      	movs	r0, #0
 80019fc:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a04:	d009      	beq.n	8001a1a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2000      	movs	r0, #0
 8001a08:	4770      	bx	lr
        status = HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	4770      	bx	lr
      status = HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	4770      	bx	lr
        status = HAL_ERROR;
 8001a16:	2001      	movs	r0, #1
 8001a18:	4770      	bx	lr
        status = HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	4770      	bx	lr
      status = HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	4770      	bx	lr
    switch (tmp)
 8001a22:	2000      	movs	r0, #0
 8001a24:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_DMA_Init>:
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fad2 	bl	8000fd8 <HAL_GetTick>
  if(hdma == NULL)
 8001a34:	2c00      	cmp	r4, #0
 8001a36:	d05b      	beq.n	8001af0 <HAL_DMA_Init+0xc4>
 8001a38:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001a40:	2300      	movs	r3, #0
 8001a42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	f012 0f01 	tst.w	r2, #1
 8001a58:	d00a      	beq.n	8001a70 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5a:	f7ff fabd 	bl	8000fd8 <HAL_GetTick>
 8001a5e:	1b43      	subs	r3, r0, r5
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d9f5      	bls.n	8001a50 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a64:	2320      	movs	r3, #32
 8001a66:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001a70:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a72:	4820      	ldr	r0, [pc, #128]	; (8001af4 <HAL_DMA_Init+0xc8>)
 8001a74:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a76:	6861      	ldr	r1, [r4, #4]
 8001a78:	68a2      	ldr	r2, [r4, #8]
 8001a7a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a80:	6921      	ldr	r1, [r4, #16]
 8001a82:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a88:	69a1      	ldr	r1, [r4, #24]
 8001a8a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a90:	6a21      	ldr	r1, [r4, #32]
 8001a92:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a94:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a98:	2904      	cmp	r1, #4
 8001a9a:	d01e      	beq.n	8001ada <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001a9c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001a9e:	6826      	ldr	r6, [r4, #0]
 8001aa0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d107      	bne.n	8001abe <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ab0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ab4:	b11b      	cbz	r3, 8001abe <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff ff70 	bl	800199c <DMA_CheckFifoParam>
 8001abc:	b990      	cbnz	r0, 8001ae4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001abe:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff49 	bl	8001958 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ac8:	233f      	movs	r3, #63	; 0x3f
 8001aca:	4093      	lsls	r3, r2
 8001acc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	2000      	movs	r0, #0
 8001ad0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ad8:	e7c9      	b.n	8001a6e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ada:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001adc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ade:	4301      	orrs	r1, r0
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	e7db      	b.n	8001a9c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001aee:	e7be      	b.n	8001a6e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
 8001af2:	e7bc      	b.n	8001a6e <HAL_DMA_Init+0x42>
 8001af4:	f010803f 	.word	0xf010803f

08001af8 <HAL_DMA_Start_IT>:
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001afe:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001b02:	2801      	cmp	r0, #1
 8001b04:	d02b      	beq.n	8001b5e <HAL_DMA_Start_IT+0x66>
 8001b06:	2001      	movs	r0, #1
 8001b08:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001b10:	b2c0      	uxtb	r0, r0
 8001b12:	2801      	cmp	r0, #1
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001b16:	2300      	movs	r3, #0
 8001b18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001b1c:	2002      	movs	r0, #2
}
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b20:	2002      	movs	r0, #2
 8001b22:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	2000      	movs	r0, #0
 8001b28:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff fefe 	bl	800192c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b32:	233f      	movs	r3, #63	; 0x3f
 8001b34:	4093      	lsls	r3, r2
 8001b36:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f043 0316 	orr.w	r3, r3, #22
 8001b40:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b44:	b123      	cbz	r3, 8001b50 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7df      	b.n	8001b1e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	e7dd      	b.n	8001b1e <HAL_DMA_Start_IT+0x26>

08001b62 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b74:	2305      	movs	r3, #5
 8001b76:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	6802      	ldr	r2, [r0, #0]
 8001b7c:	6813      	ldr	r3, [r2, #0]
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001b84:	2000      	movs	r0, #0
}
 8001b86:	4770      	bx	lr

08001b88 <HAL_DMA_IRQHandler>:
{
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_DMA_IRQHandler+0x1d4>)
 8001b94:	681d      	ldr	r5, [r3, #0]
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_DMA_IRQHandler+0x1d8>)
 8001b98:	fba3 3505 	umull	r3, r5, r3, r5
 8001b9c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001ba0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	4233      	tst	r3, r6
 8001baa:	d010      	beq.n	8001bce <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f012 0f04 	tst.w	r2, #4
 8001bb4:	d00b      	beq.n	8001bce <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f022 0204 	bic.w	r2, r2, #4
 8001bbc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bbe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	4233      	tst	r3, r6
 8001bd6:	d009      	beq.n	8001bec <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd8:	6822      	ldr	r2, [r4, #0]
 8001bda:	6952      	ldr	r2, [r2, #20]
 8001bdc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001be6:	f043 0302 	orr.w	r3, r3, #2
 8001bea:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bee:	2304      	movs	r3, #4
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	4233      	tst	r3, r6
 8001bf4:	d009      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	f012 0f02 	tst.w	r2, #2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c00:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	4233      	tst	r3, r6
 8001c12:	d024      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f012 0f08 	tst.w	r2, #8
 8001c1c:	d01f      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c1e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001c28:	d00d      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001c30:	d104      	bne.n	8001c3c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c34:	b19b      	cbz	r3, 8001c5e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001c36:	4620      	mov	r0, r4
 8001c38:	4798      	blx	r3
 8001c3a:	e010      	b.n	8001c5e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c3e:	b173      	cbz	r3, 8001c5e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001c40:	4620      	mov	r0, r4
 8001c42:	4798      	blx	r3
 8001c44:	e00b      	b.n	8001c5e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001c4c:	d103      	bne.n	8001c56 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c58:	b10b      	cbz	r3, 8001c5e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c60:	2320      	movs	r3, #32
 8001c62:	4093      	lsls	r3, r2
 8001c64:	4233      	tst	r3, r6
 8001c66:	d055      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f012 0f10 	tst.w	r2, #16
 8001c70:	d050      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c72:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c74:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001c86:	d033      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001c8e:	d12a      	bne.n	8001ce6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03e      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001c96:	4620      	mov	r0, r4
 8001c98:	4798      	blx	r3
 8001c9a:	e03b      	b.n	8001d14 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	f023 0316 	bic.w	r3, r3, #22
 8001ca4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	6953      	ldr	r3, [r2, #20]
 8001caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cae:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb2:	b1a3      	cbz	r3, 8001cde <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	f023 0308 	bic.w	r3, r3, #8
 8001cbc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cc0:	233f      	movs	r3, #63	; 0x3f
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001cd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03f      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4798      	blx	r3
        return;
 8001cdc:	e03c      	b.n	8001d58 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e7      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x12c>
 8001ce4:	e7eb      	b.n	8001cbe <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001ce6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ce8:	b1a3      	cbz	r3, 8001d14 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001cea:	4620      	mov	r0, r4
 8001cec:	4798      	blx	r3
 8001cee:	e011      	b.n	8001d14 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001cf6:	d109      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f022 0210 	bic.w	r2, r2, #16
 8001cfe:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001d06:	2300      	movs	r3, #0
 8001d08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d0e:	b10b      	cbz	r3, 8001d14 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001d10:	4620      	mov	r0, r4
 8001d12:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d16:	b1fb      	cbz	r3, 8001d58 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d1a:	f013 0f01 	tst.w	r3, #1
 8001d1e:	d017      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d20:	2305      	movs	r3, #5
 8001d22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d26:	6822      	ldr	r2, [r4, #0]
 8001d28:	6813      	ldr	r3, [r2, #0]
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001d30:	9b01      	ldr	r3, [sp, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	42ab      	cmp	r3, r5
 8001d38:	d804      	bhi.n	8001d44 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f013 0f01 	tst.w	r3, #1
 8001d42:	d1f5      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001d50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d52:	b10b      	cbz	r3, 8001d58 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001d54:	4620      	mov	r0, r4
 8001d56:	4798      	blx	r3
}
 8001d58:	b003      	add	sp, #12
 8001d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	1b4e81b5 	.word	0x1b4e81b5

08001d64 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001d64:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f200 80de 	bhi.w	8001f2c <HAL_GPIO_Init+0x1c4>
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	e060      	b.n	8001e38 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d76:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	005e      	lsls	r6, r3, #1
 8001d7a:	2403      	movs	r4, #3
 8001d7c:	40b4      	lsls	r4, r6
 8001d7e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	68cc      	ldr	r4, [r1, #12]
 8001d84:	40b4      	lsls	r4, r6
 8001d86:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001d88:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d90:	684c      	ldr	r4, [r1, #4]
 8001d92:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001d96:	409a      	lsls	r2, r3
 8001d98:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001d9a:	6042      	str	r2, [r0, #4]
 8001d9c:	e05a      	b.n	8001e54 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9e:	08dc      	lsrs	r4, r3, #3
 8001da0:	3408      	adds	r4, #8
 8001da2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	f003 0207 	and.w	r2, r3, #7
 8001daa:	0095      	lsls	r5, r2, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	40aa      	lsls	r2, r5
 8001db0:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	690a      	ldr	r2, [r1, #16]
 8001db6:	40aa      	lsls	r2, r5
 8001db8:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001dbc:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001dc0:	e05c      	b.n	8001e7c <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dcc:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dce:	3402      	adds	r4, #2
 8001dd0:	4d57      	ldr	r5, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x1c8>)
 8001dd2:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd6:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x1cc>)
 8001dd8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	ea6f 020c 	mvn.w	r2, ip
 8001dde:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de2:	684e      	ldr	r6, [r1, #4]
 8001de4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001de8:	d001      	beq.n	8001dee <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001dea:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001dee:	4c51      	ldr	r4, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x1cc>)
 8001df0:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001df2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	684e      	ldr	r6, [r1, #4]
 8001dfa:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001dfe:	d001      	beq.n	8001e04 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001e00:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001e04:	4c4b      	ldr	r4, [pc, #300]	; (8001f34 <HAL_GPIO_Init+0x1cc>)
 8001e06:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001e08:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0e:	684e      	ldr	r6, [r1, #4]
 8001e10:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001e14:	d001      	beq.n	8001e1a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001e16:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001e1a:	4c46      	ldr	r4, [pc, #280]	; (8001f34 <HAL_GPIO_Init+0x1cc>)
 8001e1c:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1e:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e22:	684d      	ldr	r5, [r1, #4]
 8001e24:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001e28:	d001      	beq.n	8001e2e <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001e2a:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001e2e:	4c41      	ldr	r4, [pc, #260]	; (8001f34 <HAL_GPIO_Init+0x1cc>)
 8001e30:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	3301      	adds	r3, #1
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d877      	bhi.n	8001f28 <HAL_GPIO_Init+0x1c0>
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3c:	680c      	ldr	r4, [r1, #0]
 8001e3e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001e42:	ea32 0404 	bics.w	r4, r2, r4
 8001e46:	d1f4      	bne.n	8001e32 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e48:	684c      	ldr	r4, [r1, #4]
 8001e4a:	f004 0403 	and.w	r4, r4, #3
 8001e4e:	3c01      	subs	r4, #1
 8001e50:	2c01      	cmp	r4, #1
 8001e52:	d990      	bls.n	8001d76 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e54:	684a      	ldr	r2, [r1, #4]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	2a03      	cmp	r2, #3
 8001e5c:	d009      	beq.n	8001e72 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8001e5e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e60:	005d      	lsls	r5, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	40aa      	lsls	r2, r5
 8001e66:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6a:	688a      	ldr	r2, [r1, #8]
 8001e6c:	40aa      	lsls	r2, r5
 8001e6e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001e70:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	684a      	ldr	r2, [r1, #4]
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	2a02      	cmp	r2, #2
 8001e7a:	d090      	beq.n	8001d9e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001e7c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e88:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	684a      	ldr	r2, [r1, #4]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e96:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001e98:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9a:	684a      	ldr	r2, [r1, #4]
 8001e9c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001ea0:	d0c7      	beq.n	8001e32 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x1d0>)
 8001ea8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001eaa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001eae:	6454      	str	r4, [r2, #68]	; 0x44
 8001eb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eb2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	089c      	lsrs	r4, r3, #2
 8001ebc:	1ca5      	adds	r5, r4, #2
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_GPIO_Init+0x1c8>)
 8001ec0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ed2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_GPIO_Init+0x1d4>)
 8001ed8:	4290      	cmp	r0, r2
 8001eda:	f43f af74 	beq.w	8001dc6 <HAL_GPIO_Init+0x5e>
 8001ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee2:	4290      	cmp	r0, r2
 8001ee4:	d016      	beq.n	8001f14 <HAL_GPIO_Init+0x1ac>
 8001ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d014      	beq.n	8001f18 <HAL_GPIO_Init+0x1b0>
 8001eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	d012      	beq.n	8001f1c <HAL_GPIO_Init+0x1b4>
 8001ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001efa:	4290      	cmp	r0, r2
 8001efc:	d010      	beq.n	8001f20 <HAL_GPIO_Init+0x1b8>
 8001efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_GPIO_Init+0x1bc>
 8001f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f0a:	4290      	cmp	r0, r2
 8001f0c:	f43f af59 	beq.w	8001dc2 <HAL_GPIO_Init+0x5a>
 8001f10:	2207      	movs	r2, #7
 8001f12:	e759      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001f14:	2201      	movs	r2, #1
 8001f16:	e757      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001f18:	2202      	movs	r2, #2
 8001f1a:	e755      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	e753      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001f20:	2204      	movs	r2, #4
 8001f22:	e751      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
 8001f24:	2205      	movs	r2, #5
 8001f26:	e74f      	b.n	8001dc8 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40013c00 	.word	0x40013c00
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	6903      	ldr	r3, [r0, #16]
 8001f42:	4219      	tst	r1, r3
 8001f44:	d001      	beq.n	8001f4a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001f46:	2001      	movs	r0, #1
 8001f48:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_PWREx_EnableOverDrive+0x70>)
 8001f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x74>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f72:	f7ff f831 	bl	8000fd8 <HAL_GetTick>
 8001f76:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f80:	d108      	bne.n	8001f94 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f82:	f7ff f829 	bl	8000fd8 <HAL_GetTick>
 8001f86:	1b00      	subs	r0, r0, r4
 8001f88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f8c:	d9f4      	bls.n	8001f78 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001f8e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001f90:	b002      	add	sp, #8
 8001f92:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_PWREx_EnableOverDrive+0x74>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001f9a:	f7ff f81d 	bl	8000fd8 <HAL_GetTick>
 8001f9e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fa8:	d107      	bne.n	8001fba <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001faa:	f7ff f815 	bl	8000fd8 <HAL_GetTick>
 8001fae:	1b00      	subs	r0, r0, r4
 8001fb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fb4:	d9f4      	bls.n	8001fa0 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	e7ea      	b.n	8001f90 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7e8      	b.n	8001f90 <HAL_PWREx_EnableOverDrive+0x40>
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	420e0000 	.word	0x420e0000
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	f000 809b 	beq.w	8002108 <HAL_RCC_ClockConfig+0x13c>
{
 8001fd2:	b570      	push	{r4, r5, r6, lr}
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_RCC_ClockConfig+0x14c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe4:	b2cb      	uxtb	r3, r1
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_RCC_ClockConfig+0x14c>)
 8001fe8:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	6813      	ldr	r3, [r2, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	428b      	cmp	r3, r1
 8001ff2:	f040 808b 	bne.w	800210c <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f013 0f02 	tst.w	r3, #2
 8001ffc:	d017      	beq.n	800202e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	f013 0f04 	tst.w	r3, #4
 8002002:	d004      	beq.n	800200e <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4a45      	ldr	r2, [pc, #276]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002006:	6893      	ldr	r3, [r2, #8]
 8002008:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200c:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	f013 0f08 	tst.w	r3, #8
 8002014:	d004      	beq.n	8002020 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002018:	6893      	ldr	r3, [r2, #8]
 800201a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4a3e      	ldr	r2, [pc, #248]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002022:	6893      	ldr	r3, [r2, #8]
 8002024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002028:	68a1      	ldr	r1, [r4, #8]
 800202a:	430b      	orrs	r3, r1
 800202c:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	f013 0f01 	tst.w	r3, #1
 8002034:	d032      	beq.n	800209c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	6863      	ldr	r3, [r4, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d021      	beq.n	8002080 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203c:	1e9a      	subs	r2, r3, #2
 800203e:	2a01      	cmp	r2, #1
 8002040:	d925      	bls.n	800208e <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4a36      	ldr	r2, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	f012 0f02 	tst.w	r2, #2
 800204a:	d061      	beq.n	8002110 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204c:	4933      	ldr	r1, [pc, #204]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 800204e:	688a      	ldr	r2, [r1, #8]
 8002050:	f022 0203 	bic.w	r2, r2, #3
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe ffbe 	bl	8000fd8 <HAL_GetTick>
 800205c:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	6862      	ldr	r2, [r4, #4]
 8002068:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800206c:	d016      	beq.n	800209c <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206e:	f7fe ffb3 	bl	8000fd8 <HAL_GetTick>
 8002072:	1b80      	subs	r0, r0, r6
 8002074:	f241 3388 	movw	r3, #5000	; 0x1388
 8002078:	4298      	cmp	r0, r3
 800207a:	d9f0      	bls.n	800205e <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	e042      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002088:	d1e0      	bne.n	800204c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800208a:	2001      	movs	r0, #1
 800208c:	e03b      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4a23      	ldr	r2, [pc, #140]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002096:	d1d9      	bne.n	800204c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002098:	2001      	movs	r0, #1
 800209a:	e034      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_ClockConfig+0x14c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	d907      	bls.n	80020b8 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a8:	b2ea      	uxtb	r2, r5
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_ClockConfig+0x14c>)
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	42ab      	cmp	r3, r5
 80020b6:	d12d      	bne.n	8002114 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	f013 0f04 	tst.w	r3, #4
 80020be:	d006      	beq.n	80020ce <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 80020c2:	6893      	ldr	r3, [r2, #8]
 80020c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80020c8:	68e1      	ldr	r1, [r4, #12]
 80020ca:	430b      	orrs	r3, r1
 80020cc:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f013 0f08 	tst.w	r3, #8
 80020d4:	d007      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 80020d8:	6893      	ldr	r3, [r2, #8]
 80020da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020de:	6921      	ldr	r1, [r4, #16]
 80020e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020e4:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 fa9f 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_RCC_ClockConfig+0x150>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x154>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	40d8      	lsrs	r0, r3
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x158>)
 80020fa:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x15c>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	f005 fa32 	bl	8007568 <HAL_InitTick>

  return HAL_OK;
 8002104:	2000      	movs	r0, #0
}
 8002106:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002108:	2001      	movs	r0, #1
}
 800210a:	4770      	bx	lr
      return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
 800210e:	e7fa      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
 8002112:	e7f8      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7f6      	b.n	8002106 <HAL_RCC_ClockConfig+0x13a>
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	0800c0fc 	.word	0x0800c0fc
 8002124:	20000010 	.word	0x20000010
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_RCC_GetHCLKFreq+0x8>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800213a:	f7ff fff7 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
}
 800214a:	40d8      	lsrs	r0, r3
 800214c:	bd08      	pop	{r3, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	0800c10c 	.word	0x0800c10c

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800215a:	f7ff ffe7 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002166:	4a03      	ldr	r2, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
}
 800216a:	40d8      	lsrs	r0, r3
 800216c:	bd08      	pop	{r3, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	0800c10c 	.word	0x0800c10c

08002178 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002178:	230f      	movs	r3, #15
 800217a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_GetClockConfig+0x34>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800218c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002194:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800219e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetClockConfig+0x38>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	600b      	str	r3, [r1, #0]
}
 80021aa:	4770      	bx	lr
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80021ba:	6806      	ldr	r6, [r0, #0]
 80021bc:	f016 0601 	ands.w	r6, r6, #1
 80021c0:	d00d      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80021c2:	4a96      	ldr	r2, [pc, #600]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021c4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80021c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021cc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80021ce:	430b      	orrs	r3, r1
 80021d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80021d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 809b 	beq.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 80021dc:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f013 0f02 	tst.w	r3, #2
 80021e4:	d00b      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80021e6:	4a8d      	ldr	r2, [pc, #564]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80021ec:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80021f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80021f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021fa:	b903      	cbnz	r3, 80021fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80021fc:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021fe:	6825      	ldr	r5, [r4, #0]
 8002200:	f015 0504 	ands.w	r5, r5, #4
 8002204:	d00f      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002206:	4a85      	ldr	r2, [pc, #532]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002208:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800220c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002210:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002212:	430b      	orrs	r3, r1
 8002214:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800221a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800221e:	d07a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002220:	2b00      	cmp	r3, #0
 8002222:	d07a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 8002224:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f013 0f08 	tst.w	r3, #8
 800222c:	d00e      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800222e:	4a7b      	ldr	r2, [pc, #492]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002230:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002234:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800223a:	430b      	orrs	r3, r1
 800223c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002246:	d06a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002248:	b903      	cbnz	r3, 800224c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 800224a:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	f013 0f20 	tst.w	r3, #32
 8002252:	d166      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	f013 0f10 	tst.w	r3, #16
 800225a:	d004      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800225c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002262:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	f013 0f80 	tst.w	r3, #128	; 0x80
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800226e:	4a6b      	ldr	r2, [pc, #428]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002270:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002274:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002278:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800227a:	430b      	orrs	r3, r1
 800227c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002286:	d008      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002288:	4a64      	ldr	r2, [pc, #400]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800228a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800228e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002292:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002294:	430b      	orrs	r3, r1
 8002296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022a0:	d00d      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022a2:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022a8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80022ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80022ae:	430b      	orrs	r3, r1
 80022b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80022b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ba:	f000 809b 	beq.w	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80022c4:	d008      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80022c6:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80022d2:	430b      	orrs	r3, r1
 80022d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022de:	d00c      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80022e0:	4a4e      	ldr	r2, [pc, #312]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80022ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80022ec:	430b      	orrs	r3, r1
 80022ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80022f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f8:	d07e      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80022fa:	2e00      	cmp	r6, #0
 80022fc:	d17c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002304:	d078      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002306:	2d01      	cmp	r5, #1
 8002308:	f000 8125 	beq.w	8002556 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800230c:	2000      	movs	r0, #0
}
 800230e:	b003      	add	sp, #12
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 8002312:	2601      	movs	r6, #1
 8002314:	e763      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 8002316:	2601      	movs	r6, #1
 8002318:	e782      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 800231a:	2501      	movs	r5, #1
 800231c:	e783      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 800231e:	2601      	movs	r6, #1
 8002320:	e792      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800233c:	6813      	ldr	r3, [r2, #0]
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002344:	f7fe fe48 	bl	8000fd8 <HAL_GetTick>
 8002348:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002352:	d106      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7fe fe40 	bl	8000fd8 <HAL_GetTick>
 8002358:	1bc0      	subs	r0, r0, r7
 800235a:	2802      	cmp	r0, #2
 800235c:	d9f5      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 800235e:	2003      	movs	r0, #3
 8002360:	e7d5      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002366:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800236a:	d014      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800236c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800236e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002372:	429a      	cmp	r2, r3
 8002374:	d00f      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800237a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800237e:	492a      	ldr	r1, [pc, #168]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002380:	2001      	movs	r0, #1
 8002382:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	2000      	movs	r0, #0
 8002388:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 800238c:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f013 0f01 	tst.w	r3, #1
 8002394:	d112      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002398:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800239c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80023a0:	d01d      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023a4:	6893      	ldr	r3, [r2, #8]
 80023a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023aa:	6093      	str	r3, [r2, #8]
 80023ac:	491b      	ldr	r1, [pc, #108]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ae:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80023b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023b2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80023b6:	4313      	orrs	r3, r2
 80023b8:	670b      	str	r3, [r1, #112]	; 0x70
 80023ba:	e74b      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 80023bc:	f7fe fe0c 	bl	8000fd8 <HAL_GetTick>
 80023c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f013 0f02 	tst.w	r3, #2
 80023ca:	d1e4      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fe04 	bl	8000fd8 <HAL_GetTick>
 80023d0:	1bc0      	subs	r0, r0, r7
 80023d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d9f3      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 80023da:	2003      	movs	r0, #3
 80023dc:	e797      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023de:	490f      	ldr	r1, [pc, #60]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e0:	688a      	ldr	r2, [r1, #8]
 80023e2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80023e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
 80023f2:	e7db      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 80023f4:	2501      	movs	r5, #1
 80023f6:	e762      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80023fe:	f7fe fdeb 	bl	8000fd8 <HAL_GetTick>
 8002402:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800240c:	d00e      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800240e:	f7fe fde3 	bl	8000fd8 <HAL_GetTick>
 8002412:	1b80      	subs	r0, r0, r6
 8002414:	2802      	cmp	r0, #2
 8002416:	d9f5      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 8002418:	2003      	movs	r0, #3
 800241a:	e778      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800241c:	40023800 	.word	0x40023800
 8002420:	42471000 	.word	0x42471000
 8002424:	40007000 	.word	0x40007000
 8002428:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	f013 0f01 	tst.w	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002434:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002436:	b122      	cbz	r2, 8002442 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002438:	f013 0f02 	tst.w	r3, #2
 800243c:	d015      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800243e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002440:	b99b      	cbnz	r3, 800246a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002442:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002444:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002448:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	68a6      	ldr	r6, [r4, #8]
 8002450:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002454:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002458:	4303      	orrs	r3, r0
 800245a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800245e:	430b      	orrs	r3, r1
 8002460:	6961      	ldr	r1, [r4, #20]
 8002462:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002466:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	f013 0f04 	tst.w	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8002472:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002474:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002478:	d006      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800247a:	f013 0f08 	tst.w	r3, #8
 800247e:	d020      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002486:	d11c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800248a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800248e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002492:	6863      	ldr	r3, [r4, #4]
 8002494:	68a6      	ldr	r6, [r4, #8]
 8002496:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800249a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800249e:	4303      	orrs	r3, r0
 80024a0:	6920      	ldr	r0, [r4, #16]
 80024a2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80024a6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80024aa:	430b      	orrs	r3, r1
 80024ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80024b4:	f023 031f 	bic.w	r3, r3, #31
 80024b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024ba:	3901      	subs	r1, #1
 80024bc:	430b      	orrs	r3, r1
 80024be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024c8:	d003      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80024ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d028      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80024d8:	d011      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	68a2      	ldr	r2, [r4, #8]
 80024de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024e2:	68e2      	ldr	r2, [r4, #12]
 80024e4:	0852      	lsrs	r2, r2, #1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024ec:	6922      	ldr	r2, [r4, #16]
 80024ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024f2:	6962      	ldr	r2, [r4, #20]
 80024f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80024f8:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80024fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002500:	2201      	movs	r2, #1
 8002502:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002504:	f7fe fd68 	bl	8000fd8 <HAL_GetTick>
 8002508:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002512:	f47f aef8 	bne.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002516:	f7fe fd5f 	bl	8000fd8 <HAL_GetTick>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f4      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
 8002522:	e6f4      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002524:	483e      	ldr	r0, [pc, #248]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002526:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800252a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800252e:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002530:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	68a1      	ldr	r1, [r4, #8]
 8002538:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800253c:	68e1      	ldr	r1, [r4, #12]
 800253e:	0849      	lsrs	r1, r1, #1
 8002540:	3901      	subs	r1, #1
 8002542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002546:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800254a:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8002554:	e7bd      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002558:	2200      	movs	r2, #0
 800255a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800255c:	f7fe fd3c 	bl	8000fd8 <HAL_GetTick>
 8002560:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800256a:	d006      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800256c:	f7fe fd34 	bl	8000fd8 <HAL_GetTick>
 8002570:	1b40      	subs	r0, r0, r5
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f5      	bls.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 8002576:	2003      	movs	r0, #3
 8002578:	e6c9      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	f013 0f04 	tst.w	r3, #4
 8002580:	d001      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002582:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002584:	b122      	cbz	r2, 8002590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8002586:	f013 0f08 	tst.w	r3, #8
 800258a:	d01a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800258c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800258e:	b9c3      	cbnz	r3, 80025c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002592:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002596:	69a3      	ldr	r3, [r4, #24]
 8002598:	69e0      	ldr	r0, [r4, #28]
 800259a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800259e:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80025aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025ae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80025b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025b8:	3901      	subs	r1, #1
 80025ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025c8:	d003      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 80025ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d0:	d011      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80025d8:	f7fe fcfe 	bl	8000fd8 <HAL_GetTick>
 80025dc:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80025e6:	d118      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025e8:	f7fe fcf6 	bl	8000fd8 <HAL_GetTick>
 80025ec:	1b00      	subs	r0, r0, r4
 80025ee:	2802      	cmp	r0, #2
 80025f0:	d9f5      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 80025f2:	2003      	movs	r0, #3
 80025f4:	e68b      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80025f8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80025fc:	69a3      	ldr	r3, [r4, #24]
 80025fe:	69e2      	ldr	r2, [r4, #28]
 8002600:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002604:	6a22      	ldr	r2, [r4, #32]
 8002606:	0852      	lsrs	r2, r2, #1
 8002608:	3a01      	subs	r2, #1
 800260a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800260e:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8002618:	e7db      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 800261a:	2000      	movs	r0, #0
 800261c:	e677      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000

08002628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262a:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	d007      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x1e>
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d05b      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0xca>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d001      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x1a>
 800263e:	4858      	ldr	r0, [pc, #352]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002640:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002642:	4858      	ldr	r0, [pc, #352]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002644:	e7fc      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002646:	4b55      	ldr	r3, [pc, #340]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002654:	d02a      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800265e:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002662:	ebb1 000c 	subs.w	r0, r1, ip
 8002666:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800266a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800266e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002672:	0181      	lsls	r1, r0, #6
 8002674:	1a09      	subs	r1, r1, r0
 8002676:	eb63 030e 	sbc.w	r3, r3, lr
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	eb11 0c0c 	adds.w	ip, r1, ip
 8002686:	f143 0300 	adc.w	r3, r3, #0
 800268a:	0259      	lsls	r1, r3, #9
 800268c:	2300      	movs	r3, #0
 800268e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002692:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002696:	f7fe faf7 	bl	8000c88 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80026a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80026aa:	e7c9      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ac:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80026b4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80026b8:	ebb1 000c 	subs.w	r0, r1, ip
 80026bc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80026c0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80026c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026c8:	0181      	lsls	r1, r0, #6
 80026ca:	1a09      	subs	r1, r1, r0
 80026cc:	eb63 030e 	sbc.w	r3, r3, lr
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d6:	00c9      	lsls	r1, r1, #3
 80026d8:	eb11 0c0c 	adds.w	ip, r1, ip
 80026dc:	f143 0300 	adc.w	r3, r3, #0
 80026e0:	0299      	lsls	r1, r3, #10
 80026e2:	2300      	movs	r3, #0
 80026e4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80026e8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80026ec:	f7fe facc 	bl	8000c88 <__aeabi_uldivmod>
 80026f0:	e7d3      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002700:	d028      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800270a:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800270e:	ebb1 000c 	subs.w	r0, r1, ip
 8002712:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002716:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800271a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800271e:	0181      	lsls	r1, r0, #6
 8002720:	1a09      	subs	r1, r1, r0
 8002722:	eb63 030e 	sbc.w	r3, r3, lr
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272c:	00c9      	lsls	r1, r1, #3
 800272e:	eb11 0c0c 	adds.w	ip, r1, ip
 8002732:	f143 0300 	adc.w	r3, r3, #0
 8002736:	0259      	lsls	r1, r3, #9
 8002738:	2300      	movs	r3, #0
 800273a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800273e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002742:	f7fe faa1 	bl	8000c88 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 800274e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002752:	e775      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_RCC_GetSysClockFreq+0x174>)
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800275c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002760:	ebb1 000c 	subs.w	r0, r1, ip
 8002764:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002768:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800276c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002770:	0181      	lsls	r1, r0, #6
 8002772:	1a09      	subs	r1, r1, r0
 8002774:	eb63 030e 	sbc.w	r3, r3, lr
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277e:	00c9      	lsls	r1, r1, #3
 8002780:	eb11 0c0c 	adds.w	ip, r1, ip
 8002784:	f143 0300 	adc.w	r3, r3, #0
 8002788:	0299      	lsls	r1, r3, #10
 800278a:	2300      	movs	r3, #0
 800278c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002790:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002794:	f7fe fa78 	bl	8000c88 <__aeabi_uldivmod>
 8002798:	e7d5      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x11e>
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200

080027a8 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	2800      	cmp	r0, #0
 80027aa:	f000 8201 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x408>
{
 80027ae:	b570      	push	{r4, r5, r6, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b4:	6803      	ldr	r3, [r0, #0]
 80027b6:	f013 0f01 	tst.w	r3, #1
 80027ba:	d041      	beq.n	8002840 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027bc:	4b99      	ldr	r3, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d032      	beq.n	800282e <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c8:	4b96      	ldr	r3, [pc, #600]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d027      	beq.n	8002824 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d4:	4b93      	ldr	r3, [pc, #588]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d059      	beq.n	8002894 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e6:	d05b      	beq.n	80028a0 <HAL_RCC_OscConfig+0xf8>
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ec:	d05e      	beq.n	80028ac <HAL_RCC_OscConfig+0x104>
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002800:	6863      	ldr	r3, [r4, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d05c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fbe7 	bl	8000fd8 <HAL_GetTick>
 800280a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280c:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002814:	d114      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002816:	f7fe fbdf 	bl	8000fd8 <HAL_GetTick>
 800281a:	1b40      	subs	r0, r0, r5
 800281c:	2864      	cmp	r0, #100	; 0x64
 800281e:	d9f5      	bls.n	800280c <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8002820:	2003      	movs	r0, #3
 8002822:	e1cc      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002824:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800282c:	d0d2      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	4b7d      	ldr	r3, [pc, #500]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002836:	d003      	beq.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002838:	6863      	ldr	r3, [r4, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 81ba 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	f013 0f02 	tst.w	r3, #2
 8002846:	d060      	beq.n	800290a <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f013 0f0c 	tst.w	r3, #12
 8002850:	d04a      	beq.n	80028e8 <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002852:	4b74      	ldr	r3, [pc, #464]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285a:	2b08      	cmp	r3, #8
 800285c:	d03f      	beq.n	80028de <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b71      	ldr	r3, [pc, #452]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d069      	beq.n	800293e <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800286a:	68e3      	ldr	r3, [r4, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d075      	beq.n	800295c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <HAL_RCC_OscConfig+0x280>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fbaf 	bl	8000fd8 <HAL_GetTick>
 800287a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f013 0f02 	tst.w	r3, #2
 8002884:	d161      	bne.n	800294a <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fba7 	bl	8000fd8 <HAL_GetTick>
 800288a:	1b40      	subs	r0, r0, r5
 800288c:	2802      	cmp	r0, #2
 800288e:	d9f5      	bls.n	800287c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002890:	2003      	movs	r0, #3
 8002892:	e194      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800289c:	d0a0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x38>
 800289e:	e7c6      	b.n	800282e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	4a60      	ldr	r2, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e7a9      	b.n	8002800 <HAL_RCC_OscConfig+0x58>
 80028ac:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e79f      	b.n	8002800 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80028c0:	f7fe fb8a 	bl	8000fd8 <HAL_GetTick>
 80028c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028ce:	d0b7      	beq.n	8002840 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe fb82 	bl	8000fd8 <HAL_GetTick>
 80028d4:	1b40      	subs	r0, r0, r5
 80028d6:	2864      	cmp	r0, #100	; 0x64
 80028d8:	d9f5      	bls.n	80028c6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80028da:	2003      	movs	r0, #3
 80028dc:	e16f      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028e6:	d1ba      	bne.n	800285e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028f2:	68e3      	ldr	r3, [r4, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f040 815f 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4a4a      	ldr	r2, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80028fc:	6813      	ldr	r3, [r2, #0]
 80028fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002902:	6921      	ldr	r1, [r4, #16]
 8002904:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002908:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	f013 0f08 	tst.w	r3, #8
 8002910:	d049      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002912:	6963      	ldr	r3, [r4, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d033      	beq.n	8002980 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCC_OscConfig+0x280>)
 800291a:	2201      	movs	r2, #1
 800291c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fb5a 	bl	8000fd8 <HAL_GetTick>
 8002924:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f013 0f02 	tst.w	r3, #2
 800292e:	d13a      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fb52 	bl	8000fd8 <HAL_GetTick>
 8002934:	1b40      	subs	r0, r0, r5
 8002936:	2802      	cmp	r0, #2
 8002938:	d9f5      	bls.n	8002926 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
 800293c:	e13f      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002946:	d190      	bne.n	800286a <HAL_RCC_OscConfig+0xc2>
 8002948:	e7ce      	b.n	80028e8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002952:	6921      	ldr	r1, [r4, #16]
 8002954:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e7d6      	b.n	800290a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x280>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002962:	f7fe fb39 	bl	8000fd8 <HAL_GetTick>
 8002966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f013 0f02 	tst.w	r3, #2
 8002970:	d0cb      	beq.n	800290a <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fb31 	bl	8000fd8 <HAL_GetTick>
 8002976:	1b40      	subs	r0, r0, r5
 8002978:	2802      	cmp	r0, #2
 800297a:	d9f5      	bls.n	8002968 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 800297c:	2003      	movs	r0, #3
 800297e:	e11e      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_RCC_OscConfig+0x280>)
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fb26 	bl	8000fd8 <HAL_GetTick>
 800298c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f013 0f02 	tst.w	r3, #2
 8002996:	d006      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe fb1e 	bl	8000fd8 <HAL_GetTick>
 800299c:	1b40      	subs	r0, r0, r5
 800299e:	2802      	cmp	r0, #2
 80029a0:	d9f5      	bls.n	800298e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80029a2:	2003      	movs	r0, #3
 80029a4:	e10b      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	f013 0f04 	tst.w	r3, #4
 80029ac:	d076      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029b6:	d133      	bne.n	8002a20 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029d0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCC_OscConfig+0x284>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029da:	d029      	beq.n	8002a30 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	68a3      	ldr	r3, [r4, #8]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d03a      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2b0>
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d03e      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2bc>
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	671a      	str	r2, [r3, #112]	; 0x70
 80029f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	68a3      	ldr	r3, [r4, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe faeb 	bl	8000fd8 <HAL_GetTick>
 8002a02:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f013 0f02 	tst.w	r3, #2
 8002a0c:	d145      	bne.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fae3 	bl	8000fd8 <HAL_GetTick>
 8002a12:	1b80      	subs	r0, r0, r6
 8002a14:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a18:	4298      	cmp	r0, r3
 8002a1a:	d9f3      	bls.n	8002a04 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	e0ce      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002a20:	2500      	movs	r5, #0
 8002a22:	e7d6      	b.n	80029d2 <HAL_RCC_OscConfig+0x22a>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4a6b      	ldr	r2, [pc, #428]	; (8002be0 <HAL_RCC_OscConfig+0x438>)
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a3a:	f7fe facd 	bl	8000fd8 <HAL_GetTick>
 8002a3e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <HAL_RCC_OscConfig+0x438>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a48:	d1c8      	bne.n	80029dc <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe fac5 	bl	8000fd8 <HAL_GetTick>
 8002a4e:	1b80      	subs	r0, r0, r6
 8002a50:	2802      	cmp	r0, #2
 8002a52:	d9f5      	bls.n	8002a40 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8002a54:	2003      	movs	r0, #3
 8002a56:	e0b2      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	4a62      	ldr	r2, [pc, #392]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002a5a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	e7c9      	b.n	80029f8 <HAL_RCC_OscConfig+0x250>
 8002a64:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	f042 0204 	orr.w	r2, r2, #4
 8002a6c:	671a      	str	r2, [r3, #112]	; 0x70
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	671a      	str	r2, [r3, #112]	; 0x70
 8002a76:	e7bf      	b.n	80029f8 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe faae 	bl	8000fd8 <HAL_GetTick>
 8002a7c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f013 0f02 	tst.w	r3, #2
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a88:	f7fe faa6 	bl	8000fd8 <HAL_GetTick>
 8002a8c:	1b80      	subs	r0, r0, r6
 8002a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a92:	4298      	cmp	r0, r3
 8002a94:	d9f3      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002a96:	2003      	movs	r0, #3
 8002a98:	e091      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	b9ed      	cbnz	r5, 8002ad8 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9c:	69a3      	ldr	r3, [r4, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 808c 	beq.w	8002bbc <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa4:	4a4f      	ldr	r2, [pc, #316]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	f002 020c 	and.w	r2, r2, #12
 8002aac:	2a08      	cmp	r2, #8
 8002aae:	d054      	beq.n	8002b5a <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d017      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_RCC_OscConfig+0x440>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fa8d 	bl	8000fd8 <HAL_GetTick>
 8002abe:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ac8:	d045      	beq.n	8002b56 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fa85 	bl	8000fd8 <HAL_GetTick>
 8002ace:	1b00      	subs	r0, r0, r4
 8002ad0:	2802      	cmp	r0, #2
 8002ad2:	d9f5      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e072      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002ada:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	e7db      	b.n	8002a9c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <HAL_RCC_OscConfig+0x440>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002aea:	f7fe fa75 	bl	8000fd8 <HAL_GetTick>
 8002aee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002af8:	d006      	beq.n	8002b08 <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fa6d 	bl	8000fd8 <HAL_GetTick>
 8002afe:	1b40      	subs	r0, r0, r5
 8002b00:	2802      	cmp	r0, #2
 8002b02:	d9f5      	bls.n	8002af0 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8002b04:	2003      	movs	r0, #3
 8002b06:	e05a      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b08:	69e3      	ldr	r3, [r4, #28]
 8002b0a:	6a22      	ldr	r2, [r4, #32]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b10:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b16:	0852      	lsrs	r2, r2, #1
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b26:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002b2c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_RCC_OscConfig+0x440>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002b34:	f7fe fa50 	bl	8000fd8 <HAL_GetTick>
 8002b38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fa48 	bl	8000fd8 <HAL_GetTick>
 8002b48:	1b00      	subs	r0, r0, r4
 8002b4a:	2802      	cmp	r0, #2
 8002b4c:	d9f5      	bls.n	8002b3a <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e035      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b52:	2000      	movs	r0, #0
 8002b54:	e033      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e031      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d031      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x43c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002b66:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	4291      	cmp	r1, r2
 8002b6a:	d12c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b70:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	428a      	cmp	r2, r1
 8002b74:	d129      	bne.n	8002bca <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b76:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b82:	d124      	bne.n	8002bce <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002b88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b8a:	0852      	lsrs	r2, r2, #1
 8002b8c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002b9e:	d11a      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ba0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002ba4:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002baa:	d116      	bne.n	8002bda <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8002bac:	2000      	movs	r0, #0
 8002bae:	e006      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002bb0:	2001      	movs	r0, #1
}
 8002bb2:	4770      	bx	lr
        return HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002bbc:	2000      	movs	r0, #0
}
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	e7fb      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	e7f9      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bca:	2001      	movs	r0, #1
 8002bcc:	e7f7      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e7f5      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	e7f3      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	e7f1      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e7ef      	b.n	8002bbe <HAL_RCC_OscConfig+0x416>
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000

08002bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bf0:	6802      	ldr	r2, [r0, #0]
 8002bf2:	68d3      	ldr	r3, [r2, #12]
 8002bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bf8:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfa:	f7fe f9ed 	bl	8000fd8 <HAL_GetTick>
 8002bfe:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f013 0f20 	tst.w	r3, #32
 8002c08:	d107      	bne.n	8002c1a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c0a:	f7fe f9e5 	bl	8000fd8 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c14:	d9f4      	bls.n	8002c00 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002c16:	2003      	movs	r0, #3
 8002c18:	e000      	b.n	8002c1c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
}
 8002c1c:	bd38      	pop	{r3, r4, r5, pc}

08002c1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c28:	d002      	beq.n	8002c30 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c38:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f9cd 	bl	8000fd8 <HAL_GetTick>
 8002c3e:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c4a:	d1ef      	bne.n	8002c2c <RTC_EnterInitMode+0xe>
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d1ed      	bne.n	8002c2c <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c50:	f7fe f9c2 	bl	8000fd8 <HAL_GetTick>
 8002c54:	1b83      	subs	r3, r0, r6
 8002c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c5a:	d9f2      	bls.n	8002c42 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8002c60:	2501      	movs	r5, #1
 8002c62:	e7ee      	b.n	8002c42 <RTC_EnterInitMode+0x24>

08002c64 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c64:	6802      	ldr	r2, [r0, #0]
 8002c66:	68d3      	ldr	r3, [r2, #12]
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c6e:	6803      	ldr	r3, [r0, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f013 0f20 	tst.w	r3, #32
 8002c76:	d001      	beq.n	8002c7c <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002c7a:	4770      	bx	lr
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c80:	f7ff ffb4 	bl	8002bec <HAL_RTC_WaitForSynchro>
 8002c84:	b110      	cbz	r0, 8002c8c <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c86:	2304      	movs	r3, #4
 8002c88:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
}
 8002c8c:	bd10      	pop	{r4, pc}

08002c8e <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d041      	beq.n	8002d16 <HAL_RTC_Init+0x88>
{
 8002c92:	b510      	push	{r4, lr}
 8002c94:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c96:	7f43      	ldrb	r3, [r0, #29]
 8002c98:	b1e3      	cbz	r3, 8002cd4 <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	22ca      	movs	r2, #202	; 0xca
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	2253      	movs	r2, #83	; 0x53
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff ffb7 	bl	8002c1e <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002cb0:	b1a0      	cbz	r0, 8002cdc <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 8002cb2:	b958      	cbnz	r0, 8002ccc <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cc2:	69a1      	ldr	r1, [r4, #24]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cd2:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002cd4:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002cd6:	f004 f9a3 	bl	8007020 <HAL_RTC_MspInit>
 8002cda:	e7de      	b.n	8002c9a <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	6893      	ldr	r3, [r2, #8]
 8002ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cea:	6821      	ldr	r1, [r4, #0]
 8002cec:	688a      	ldr	r2, [r1, #8]
 8002cee:	6863      	ldr	r3, [r4, #4]
 8002cf0:	6920      	ldr	r0, [r4, #16]
 8002cf2:	4303      	orrs	r3, r0
 8002cf4:	6960      	ldr	r0, [r4, #20]
 8002cf6:	4303      	orrs	r3, r0
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	68e2      	ldr	r2, [r4, #12]
 8002d00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	6913      	ldr	r3, [r2, #16]
 8002d06:	68a1      	ldr	r1, [r4, #8]
 8002d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002d0c:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff ffa8 	bl	8002c64 <RTC_ExitInitMode>
 8002d14:	e7cd      	b.n	8002cb2 <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 8002d16:	2001      	movs	r0, #1
}
 8002d18:	4770      	bx	lr

08002d1a <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 8002d1a:	2300      	movs	r3, #0

  while (number >= 10U)
 8002d1c:	e003      	b.n	8002d26 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8002d1e:	3301      	adds	r3, #1
 8002d20:	b2db      	uxtb	r3, r3
    number -= 10U;
 8002d22:	380a      	subs	r0, #10
 8002d24:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8002d26:	2809      	cmp	r0, #9
 8002d28:	d8f9      	bhi.n	8002d1e <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	b2db      	uxtb	r3, r3
}
 8002d2e:	4318      	orrs	r0, r3
 8002d30:	4770      	bx	lr

08002d32 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8002d32:	7f03      	ldrb	r3, [r0, #28]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d059      	beq.n	8002dec <HAL_RTC_SetTime+0xba>
{
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002d3e:	2301      	movs	r3, #1
 8002d40:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8002d46:	bb4a      	cbnz	r2, 8002d9c <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d48:	6803      	ldr	r3, [r0, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d50:	d101      	bne.n	8002d56 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d56:	7830      	ldrb	r0, [r6, #0]
 8002d58:	f7ff ffdf 	bl	8002d1a <RTC_ByteToBcd2>
 8002d5c:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d5e:	7870      	ldrb	r0, [r6, #1]
 8002d60:	f7ff ffdb 	bl	8002d1a <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d64:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d68:	78b0      	ldrb	r0, [r6, #2]
 8002d6a:	f7ff ffd6 	bl	8002d1a <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d6e:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002d70:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d72:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	22ca      	movs	r2, #202	; 0xca
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	2253      	movs	r2, #83	; 0x53
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ff4b 	bl	8002c1e <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002d88:	b1d0      	cbz	r0, 8002dc0 <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 8002d8a:	b908      	cbnz	r0, 8002d90 <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	22ff      	movs	r2, #255	; 0xff
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002d96:	2300      	movs	r3, #0
 8002d98:	7723      	strb	r3, [r4, #28]
}
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d9c:	6803      	ldr	r3, [r0, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002da4:	d101      	bne.n	8002daa <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002daa:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dac:	7875      	ldrb	r5, [r6, #1]
 8002dae:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002db0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8002db4:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002db6:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002db8:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dba:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 8002dbe:	e7da      	b.n	8002d76 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002dc6:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002dca:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	6893      	ldr	r3, [r2, #8]
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002dd6:	6821      	ldr	r1, [r4, #0]
 8002dd8:	688b      	ldr	r3, [r1, #8]
 8002dda:	68f2      	ldr	r2, [r6, #12]
 8002ddc:	6930      	ldr	r0, [r6, #16]
 8002dde:	4302      	orrs	r2, r0
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff ff3d 	bl	8002c64 <RTC_ExitInitMode>
 8002dea:	e7ce      	b.n	8002d8a <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8002dec:	2002      	movs	r0, #2
}
 8002dee:	4770      	bx	lr

08002df0 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8002df0:	7f03      	ldrb	r3, [r0, #28]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d048      	beq.n	8002e88 <HAL_RTC_SetDate+0x98>
{
 8002df6:	b570      	push	{r4, r5, r6, lr}
 8002df8:	4604      	mov	r4, r0
 8002dfa:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e04:	b93a      	cbnz	r2, 8002e16 <HAL_RTC_SetDate+0x26>
 8002e06:	784b      	ldrb	r3, [r1, #1]
 8002e08:	f013 0f10 	tst.w	r3, #16
 8002e0c:	d003      	beq.n	8002e16 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e0e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002e12:	330a      	adds	r3, #10
 8002e14:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 8002e16:	bb12      	cbnz	r2, 8002e5e <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e18:	78f0      	ldrb	r0, [r6, #3]
 8002e1a:	f7ff ff7e 	bl	8002d1a <RTC_ByteToBcd2>
 8002e1e:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e20:	7870      	ldrb	r0, [r6, #1]
 8002e22:	f7ff ff7a 	bl	8002d1a <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e26:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002e2a:	78b0      	ldrb	r0, [r6, #2]
 8002e2c:	f7ff ff75 	bl	8002d1a <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e30:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002e32:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e34:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	22ca      	movs	r2, #202	; 0xca
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	2253      	movs	r2, #83	; 0x53
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff feea 	bl	8002c1e <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002e4a:	b198      	cbz	r0, 8002e74 <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 8002e4c:	b908      	cbnz	r0, 8002e52 <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	7723      	strb	r3, [r4, #28]
}
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e5e:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e60:	7875      	ldrb	r5, [r6, #1]
 8002e62:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e64:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 8002e68:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e6a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e6c:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e6e:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8002e72:	e7e1      	b.n	8002e38 <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002e7a:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002e7e:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8002e80:	4620      	mov	r0, r4
 8002e82:	f7ff feef 	bl	8002c64 <RTC_ExitInitMode>
 8002e86:	e7e1      	b.n	8002e4c <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8002e88:	2002      	movs	r0, #2
}
 8002e8a:	4770      	bx	lr

08002e8c <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002e8c:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002e98:	4770      	bx	lr
	...

08002e9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	f001 fcd5 	bl	8004856 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eac:	4605      	mov	r5, r0
 8002eae:	b110      	cbz	r0, 8002eb6 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	f001 ffc6 	bl	8004e48 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ebc:	b938      	cbnz	r0, 8002ece <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002ec2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d00b      	beq.n	8002ee0 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ec8:	462e      	mov	r6, r5
 8002eca:	4628      	mov	r0, r5
 8002ecc:	e014      	b.n	8002ef8 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f001 fcbf 	bl	8004856 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d0f2      	beq.n	8002ec2 <SD_PowerON+0x26>
      return errorstate;
 8002edc:	4605      	mov	r5, r0
 8002ede:	e7e7      	b.n	8002eb0 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	f001 fe1e 	bl	8004b24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d0ed      	beq.n	8002ec8 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002eec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002ef0:	e7de      	b.n	8002eb0 <SD_PowerON+0x14>
    count++;
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ef8:	9a01      	ldr	r2, [sp, #4]
 8002efa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d813      	bhi.n	8002f2a <SD_PowerON+0x8e>
 8002f02:	b996      	cbnz	r6, 8002f2a <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f04:	2100      	movs	r1, #0
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	f001 fe0c 	bl	8004b24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f0c:	b9e0      	cbnz	r0, 8002f48 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002f0e:	4912      	ldr	r1, [pc, #72]	; (8002f58 <SD_PowerON+0xbc>)
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	f001 fee5 	bl	8004ce0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f16:	4606      	mov	r6, r0
 8002f18:	b9c0      	cbnz	r0, 8002f4c <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f001 fc85 	bl	800482c <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002f22:	0fc3      	lsrs	r3, r0, #31
 8002f24:	d0e5      	beq.n	8002ef2 <SD_PowerON+0x56>
 8002f26:	461e      	mov	r6, r3
 8002f28:	e7e3      	b.n	8002ef2 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002f2a:	9a01      	ldr	r2, [sp, #4]
 8002f2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d80e      	bhi.n	8002f52 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002f34:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8002f38:	d002      	beq.n	8002f40 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	6463      	str	r3, [r4, #68]	; 0x44
 8002f3e:	e7b7      	b.n	8002eb0 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8002f40:	2200      	movs	r2, #0
 8002f42:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8002f44:	461d      	mov	r5, r3
 8002f46:	e7b3      	b.n	8002eb0 <SD_PowerON+0x14>
      return errorstate;
 8002f48:	4605      	mov	r5, r0
 8002f4a:	e7b1      	b.n	8002eb0 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002f50:	e7ae      	b.n	8002eb0 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002f52:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002f56:	e7ab      	b.n	8002eb0 <SD_PowerON+0x14>
 8002f58:	c1100000 	.word	0xc1100000

08002f5c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002f5e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8002f60:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8002f62:	b9a6      	cbnz	r6, 8002f8e <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	f001 fc3b 	bl	80047e2 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8002f6c:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002f6e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002f72:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002f74:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002f78:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002f7a:	0e00      	lsrs	r0, r0, #24
 8002f7c:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8002f7e:	3404      	adds	r4, #4
      dataremaining--;
 8002f80:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8002f82:	3501      	adds	r5, #1
 8002f84:	2d07      	cmp	r5, #7
 8002f86:	d9ee      	bls.n	8002f66 <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 8002f88:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002f8a:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 8002f8c:	e7ea      	b.n	8002f64 <SD_Read_IT+0x8>
 8002f8e:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002f90:	2500      	movs	r5, #0
 8002f92:	e7f7      	b.n	8002f84 <SD_Read_IT+0x28>

08002f94 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f96:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002f98:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 8002f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 8002f9c:	b9de      	cbnz	r6, 8002fd6 <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 8002f9e:	b003      	add	sp, #12
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8002fa2:	7823      	ldrb	r3, [r4, #0]
 8002fa4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8002fa6:	7862      	ldrb	r2, [r4, #1]
 8002fa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002fac:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8002fae:	78a2      	ldrb	r2, [r4, #2]
 8002fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fb4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002fb6:	78e2      	ldrb	r2, [r4, #3]
 8002fb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fbc:	9301      	str	r3, [sp, #4]
      tmp++;
 8002fbe:	3404      	adds	r4, #4
      dataremaining--;
 8002fc0:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002fc2:	a901      	add	r1, sp, #4
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f001 fc0f 	bl	80047e8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002fca:	3501      	adds	r5, #1
 8002fcc:	2d07      	cmp	r5, #7
 8002fce:	d9e8      	bls.n	8002fa2 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8002fd0:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8002fd2:	627e      	str	r6, [r7, #36]	; 0x24
}
 8002fd4:	e7e3      	b.n	8002f9e <SD_Write_IT+0xa>
 8002fd6:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002fd8:	2500      	movs	r5, #0
 8002fda:	e7f7      	b.n	8002fcc <SD_Write_IT+0x38>

08002fdc <SD_FindSCR>:
{
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7fd fff8 	bl	8000fd8 <HAL_GetTick>
 8002fe8:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	f001 fcec 	bl	80049d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	b110      	cbz	r0, 8003002 <SD_FindSCR+0x26>
}
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	b009      	add	sp, #36	; 0x24
 8003000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003002:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003004:	0409      	lsls	r1, r1, #16
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	f001 fd8c 	bl	8004b24 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800300c:	4605      	mov	r5, r0
 800300e:	2800      	cmp	r0, #0
 8003010:	d1f4      	bne.n	8002ffc <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003018:	2308      	movs	r3, #8
 800301a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800301c:	2330      	movs	r3, #48	; 0x30
 800301e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003020:	2302      	movs	r3, #2
 8003022:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003024:	2300      	movs	r3, #0
 8003026:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003028:	2301      	movs	r3, #1
 800302a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800302c:	a902      	add	r1, sp, #8
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	f001 fbff 	bl	8004832 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	f001 fda5 	bl	8004b84 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800303a:	4605      	mov	r5, r0
 800303c:	b158      	cbz	r0, 8003056 <SD_FindSCR+0x7a>
 800303e:	e7dd      	b.n	8002ffc <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003040:	f001 fbcf 	bl	80047e2 <SDIO_ReadFIFO>
 8003044:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8003048:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800304a:	f7fd ffc5 	bl	8000fd8 <HAL_GetTick>
 800304e:	1b83      	subs	r3, r0, r6
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d03f      	beq.n	80030d6 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800305a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800305e:	d107      	bne.n	8003070 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003060:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003062:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003066:	d1eb      	bne.n	8003040 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003068:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800306a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800306e:	d1ec      	bne.n	800304a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003072:	f013 0f08 	tst.w	r3, #8
 8003076:	d125      	bne.n	80030c4 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003078:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800307a:	f013 0f02 	tst.w	r3, #2
 800307e:	d124      	bne.n	80030ca <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003080:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003082:	f015 0520 	ands.w	r5, r5, #32
 8003086:	d123      	bne.n	80030d0 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003088:	f240 533a 	movw	r3, #1338	; 0x53a
 800308c:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800308e:	9a01      	ldr	r2, [sp, #4]
 8003090:	0213      	lsls	r3, r2, #8
 8003092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800309a:	0a11      	lsrs	r1, r2, #8
 800309c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80030a0:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80030a2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80030a6:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030a8:	9a00      	ldr	r2, [sp, #0]
 80030aa:	0213      	lsls	r3, r2, #8
 80030ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80030b4:	0a11      	lsrs	r1, r2, #8
 80030b6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030ba:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80030bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030c0:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80030c2:	e79b      	b.n	8002ffc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80030c4:	2508      	movs	r5, #8
 80030c6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80030c8:	e798      	b.n	8002ffc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80030ca:	2502      	movs	r5, #2
 80030cc:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80030ce:	e795      	b.n	8002ffc <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80030d0:	2520      	movs	r5, #32
 80030d2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80030d4:	e792      	b.n	8002ffc <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80030d6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80030da:	e78f      	b.n	8002ffc <SD_FindSCR+0x20>

080030dc <SD_WideBus_Enable>:
{
 80030dc:	b510      	push	{r4, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80030e2:	2100      	movs	r1, #0
 80030e4:	9100      	str	r1, [sp, #0]
 80030e6:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80030e8:	6800      	ldr	r0, [r0, #0]
 80030ea:	f001 fb9f 	bl	800482c <SDIO_GetResponse>
 80030ee:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80030f2:	d113      	bne.n	800311c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80030f4:	4669      	mov	r1, sp
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff ff70 	bl	8002fdc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80030fc:	b980      	cbnz	r0, 8003120 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003104:	d00e      	beq.n	8003124 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003106:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003108:	0409      	lsls	r1, r1, #16
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	f001 fd0a 	bl	8004b24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003110:	b930      	cbnz	r0, 8003120 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003112:	2102      	movs	r1, #2
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	f001 fd1d 	bl	8004b54 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800311a:	e001      	b.n	8003120 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800311c:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8003120:	b002      	add	sp, #8
 8003122:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003124:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003128:	e7fa      	b.n	8003120 <SD_WideBus_Enable+0x44>

0800312a <SD_WideBus_Disable>:
{
 800312a:	b510      	push	{r4, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003130:	2100      	movs	r1, #0
 8003132:	9100      	str	r1, [sp, #0]
 8003134:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003136:	6800      	ldr	r0, [r0, #0]
 8003138:	f001 fb78 	bl	800482c <SDIO_GetResponse>
 800313c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003140:	d113      	bne.n	800316a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8003142:	4669      	mov	r1, sp
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff ff49 	bl	8002fdc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800314a:	b980      	cbnz	r0, 800316e <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003152:	d00e      	beq.n	8003172 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003154:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003156:	0409      	lsls	r1, r1, #16
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	f001 fce3 	bl	8004b24 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800315e:	b930      	cbnz	r0, 800316e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003160:	2100      	movs	r1, #0
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	f001 fcf6 	bl	8004b54 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003168:	e001      	b.n	800316e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800316a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800316e:	b002      	add	sp, #8
 8003170:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003172:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003176:	e7fa      	b.n	800316e <SD_WideBus_Disable+0x44>

08003178 <SD_SendStatus>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800317a:	b181      	cbz	r1, 800319e <SD_SendStatus+0x26>
 800317c:	4604      	mov	r4, r0
 800317e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003180:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003182:	0409      	lsls	r1, r1, #16
 8003184:	6800      	ldr	r0, [r0, #0]
 8003186:	f001 fd15 	bl	8004bb4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800318a:	4605      	mov	r5, r0
 800318c:	b108      	cbz	r0, 8003192 <SD_SendStatus+0x1a>
}
 800318e:	4628      	mov	r0, r5
 8003190:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003192:	2100      	movs	r1, #0
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	f001 fb49 	bl	800482c <SDIO_GetResponse>
 800319a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800319c:	e7f7      	b.n	800318e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800319e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80031a2:	e7f4      	b.n	800318e <SD_SendStatus+0x16>

080031a4 <HAL_SD_ReadBlocks_DMA>:
{
 80031a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a8:	b087      	sub	sp, #28
 80031aa:	4604      	mov	r4, r0
  if(NULL == pData)
 80031ac:	b191      	cbz	r1, 80031d4 <HAL_SD_ReadBlocks_DMA+0x30>
 80031ae:	4616      	mov	r6, r2
 80031b0:	461f      	mov	r7, r3
 80031b2:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80031b4:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80031b8:	b2ed      	uxtb	r5, r5
 80031ba:	2d01      	cmp	r5, #1
 80031bc:	d17d      	bne.n	80032ba <HAL_SD_ReadBlocks_DMA+0x116>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031be:	2300      	movs	r3, #0
 80031c0:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031c2:	19f0      	adds	r0, r6, r7
 80031c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031c6:	4298      	cmp	r0, r3
 80031c8:	d90a      	bls.n	80031e0 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80031d2:	e073      	b.n	80032bc <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80031d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031da:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80031dc:	2501      	movs	r5, #1
 80031de:	e06d      	b.n	80032bc <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->State = HAL_SD_STATE_BUSY;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	62cb      	str	r3, [r1, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80031f0:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 80031f4:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80031f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80031f8:	4833      	ldr	r0, [pc, #204]	; (80032c8 <HAL_SD_ReadBlocks_DMA+0x124>)
 80031fa:	63c8      	str	r0, [r1, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80031fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80031fe:	4833      	ldr	r0, [pc, #204]	; (80032cc <HAL_SD_ReadBlocks_DMA+0x128>)
 8003200:	64c8      	str	r0, [r1, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8003202:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003204:	650b      	str	r3, [r1, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003208:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800320a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800320c:	6801      	ldr	r1, [r0, #0]
 800320e:	680b      	ldr	r3, [r1, #0]
 8003210:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003214:	6880      	ldr	r0, [r0, #8]
 8003216:	4303      	orrs	r3, r0
 8003218:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800321a:	6821      	ldr	r1, [r4, #0]
 800321c:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8003220:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8003224:	3180      	adds	r1, #128	; 0x80
 8003226:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003228:	f7fe fc66 	bl	8001af8 <HAL_DMA_Start_IT>
 800322c:	4680      	mov	r8, r0
 800322e:	bb68      	cbnz	r0, 800328c <HAL_SD_ReadBlocks_DMA+0xe8>
      __HAL_SD_DMA_ENABLE(hsd);
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8003232:	2201      	movs	r2, #1
 8003234:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003238:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800323a:	4293      	cmp	r3, r2
 800323c:	d000      	beq.n	8003240 <HAL_SD_ReadBlocks_DMA+0x9c>
        add *= 512U;
 800323e:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003246:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800324a:	2390      	movs	r3, #144	; 0x90
 800324c:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800324e:	2302      	movs	r3, #2
 8003250:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003252:	2300      	movs	r3, #0
 8003254:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003256:	2301      	movs	r3, #1
 8003258:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800325a:	4669      	mov	r1, sp
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	f001 fae8 	bl	8004832 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8003262:	2f01      	cmp	r7, #1
 8003264:	d922      	bls.n	80032ac <HAL_SD_ReadBlocks_DMA+0x108>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003266:	2382      	movs	r3, #130	; 0x82
 8003268:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800326a:	4631      	mov	r1, r6
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	f001 fbdf 	bl	8004a30 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003272:	b338      	cbz	r0, 80032c4 <HAL_SD_ReadBlocks_DMA+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_SD_ReadBlocks_DMA+0x130>)
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800327a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800327c:	4318      	orrs	r0, r3
 800327e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003280:	2301      	movs	r3, #1
 8003282:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003286:	2300      	movs	r3, #0
 8003288:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 800328a:	e017      	b.n	80032bc <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003290:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8003294:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_SD_ReadBlocks_DMA+0x130>)
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800329c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800329e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80032aa:	e007      	b.n	80032bc <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80032ac:	2381      	movs	r3, #129	; 0x81
 80032ae:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80032b0:	4631      	mov	r1, r6
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	f001 fba4 	bl	8004a00 <SDMMC_CmdReadSingleBlock>
 80032b8:	e7db      	b.n	8003272 <HAL_SD_ReadBlocks_DMA+0xce>
    return HAL_BUSY;
 80032ba:	2502      	movs	r5, #2
}
 80032bc:	4628      	mov	r0, r5
 80032be:	b007      	add	sp, #28
 80032c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 80032c4:	4645      	mov	r5, r8
 80032c6:	e7f9      	b.n	80032bc <HAL_SD_ReadBlocks_DMA+0x118>
 80032c8:	0800340b 	.word	0x0800340b
 80032cc:	080038f5 	.word	0x080038f5
 80032d0:	42258000 	.word	0x42258000
 80032d4:	004005ff 	.word	0x004005ff

080032d8 <HAL_SD_WriteBlocks_DMA>:
{
 80032d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032da:	b087      	sub	sp, #28
 80032dc:	4604      	mov	r4, r0
  if(NULL == pData)
 80032de:	2900      	cmp	r1, #0
 80032e0:	d038      	beq.n	8003354 <HAL_SD_WriteBlocks_DMA+0x7c>
 80032e2:	461e      	mov	r6, r3
 80032e4:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80032e6:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80032ea:	b2ed      	uxtb	r5, r5
 80032ec:	2d01      	cmp	r5, #1
 80032ee:	d17f      	bne.n	80033f0 <HAL_SD_WriteBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032f4:	1993      	adds	r3, r2, r6
 80032f6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d831      	bhi.n	8003360 <HAL_SD_WriteBlocks_DMA+0x88>
    hsd->State = HAL_SD_STATE_BUSY;
 80032fc:	2303      	movs	r3, #3
 80032fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003302:	6803      	ldr	r3, [r0, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003308:	6800      	ldr	r0, [r0, #0]
 800330a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800330c:	f043 031a 	orr.w	r3, r3, #26
 8003310:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003314:	4838      	ldr	r0, [pc, #224]	; (80033f8 <HAL_SD_WriteBlocks_DMA+0x120>)
 8003316:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800331a:	4838      	ldr	r0, [pc, #224]	; (80033fc <HAL_SD_WriteBlocks_DMA+0x124>)
 800331c:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 800331e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003320:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003324:	2b01      	cmp	r3, #1
 8003326:	d000      	beq.n	800332a <HAL_SD_WriteBlocks_DMA+0x52>
      add *= 512U;
 8003328:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 800332a:	2e01      	cmp	r6, #1
 800332c:	d91d      	bls.n	800336a <HAL_SD_WriteBlocks_DMA+0x92>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003332:	4611      	mov	r1, r2
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	f001 fbab 	bl	8004a90 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	b1e8      	cbz	r0, 8003378 <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	4a30      	ldr	r2, [pc, #192]	; (8003400 <HAL_SD_WriteBlocks_DMA+0x128>)
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003344:	4318      	orrs	r0, r3
 8003346:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003348:	2301      	movs	r3, #1
 800334a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800334e:	2300      	movs	r3, #0
 8003350:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003352:	e04e      	b.n	80033f2 <HAL_SD_WriteBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003354:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800335a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800335c:	2501      	movs	r5, #1
 800335e:	e048      	b.n	80033f2 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003360:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003366:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8003368:	e043      	b.n	80033f2 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800336a:	2390      	movs	r3, #144	; 0x90
 800336c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800336e:	4611      	mov	r1, r2
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	f001 fb75 	bl	8004a60 <SDMMC_CmdWriteSingleBlock>
 8003376:	e7e0      	b.n	800333a <HAL_SD_WriteBlocks_DMA+0x62>
    __HAL_SD_DMA_ENABLE(hsd);
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_SD_WriteBlocks_DMA+0x12c>)
 800337a:	2201      	movs	r2, #1
 800337c:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003386:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003388:	680a      	ldr	r2, [r1, #0]
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003390:	6889      	ldr	r1, [r1, #8]
 8003392:	430b      	orrs	r3, r1
 8003394:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	0276      	lsls	r6, r6, #9
 800339a:	08b3      	lsrs	r3, r6, #2
 800339c:	3280      	adds	r2, #128	; 0x80
 800339e:	4639      	mov	r1, r7
 80033a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80033a2:	f7fe fba9 	bl	8001af8 <HAL_DMA_Start_IT>
 80033a6:	4607      	mov	r7, r0
 80033a8:	b188      	cbz	r0, 80033ce <HAL_SD_WriteBlocks_DMA+0xf6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80033ae:	f023 031a 	bic.w	r3, r3, #26
 80033b2:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_SD_WriteBlocks_DMA+0x128>)
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80033ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80033cc:	e011      	b.n	80033f2 <HAL_SD_WriteBlocks_DMA+0x11a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033d4:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033d6:	2390      	movs	r3, #144	; 0x90
 80033d8:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80033da:	2300      	movs	r3, #0
 80033dc:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033de:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80033e4:	4669      	mov	r1, sp
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	f001 fa23 	bl	8004832 <SDIO_ConfigData>
      return HAL_OK;
 80033ec:	463d      	mov	r5, r7
 80033ee:	e000      	b.n	80033f2 <HAL_SD_WriteBlocks_DMA+0x11a>
    return HAL_BUSY;
 80033f0:	2502      	movs	r5, #2
}
 80033f2:	4628      	mov	r0, r5
 80033f4:	b007      	add	sp, #28
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f8:	08002e8d 	.word	0x08002e8d
 80033fc:	080038f5 	.word	0x080038f5
 8003400:	004005ff 	.word	0x004005ff
 8003404:	42258000 	.word	0x42258000

08003408 <HAL_SD_ErrorCallback>:
}
 8003408:	4770      	bx	lr

0800340a <SD_DMAReceiveCplt>:
{
 800340a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800340c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800340e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003410:	2b82      	cmp	r3, #130	; 0x82
 8003412:	d011      	beq.n	8003438 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003418:	f023 0308 	bic.w	r3, r3, #8
 800341c:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	f240 523a 	movw	r2, #1338	; 0x53a
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8003426:	2301      	movs	r3, #1
 8003428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800342c:	2300      	movs	r3, #0
 800342e:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8003430:	4620      	mov	r0, r4
 8003432:	f003 fb7a 	bl	8006b2a <HAL_SD_RxCpltCallback>
}
 8003436:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	f001 fb41 	bl	8004ac0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800343e:	4603      	mov	r3, r0
 8003440:	2800      	cmp	r0, #0
 8003442:	d0e7      	beq.n	8003414 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8003444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003446:	4313      	orrs	r3, r2
 8003448:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800344a:	4620      	mov	r0, r4
 800344c:	f7ff ffdc 	bl	8003408 <HAL_SD_ErrorCallback>
 8003450:	e7e0      	b.n	8003414 <SD_DMAReceiveCplt+0xa>
	...

08003454 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003454:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003456:	0f9b      	lsrs	r3, r3, #30
 8003458:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800345a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800345c:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003460:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003462:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800346c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003470:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003472:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8003476:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003478:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800347c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800347e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003480:	0d1b      	lsrs	r3, r3, #20
 8003482:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003484:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800348e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003490:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003494:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003496:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003498:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800349c:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800349e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80034a0:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80034a4:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034a6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80034a8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80034ac:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034ae:	2300      	movs	r3, #0
 80034b0:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80034b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 8086 	bne.w	80035c6 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034ba:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80034bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c0:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80034c4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80034c6:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80034ca:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80034ce:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80034d2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034d4:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034de:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80034e0:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80034e4:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80034e8:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80034ec:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80034f0:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80034f4:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034f6:	690b      	ldr	r3, [r1, #16]
 80034f8:	3301      	adds	r3, #1
 80034fa:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034fc:	7e0a      	ldrb	r2, [r1, #24]
 80034fe:	f002 0207 	and.w	r2, r2, #7
 8003502:	3202      	adds	r2, #2
 8003504:	4093      	lsls	r3, r2
 8003506:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003508:	7a0a      	ldrb	r2, [r1, #8]
 800350a:	f002 0c0f 	and.w	ip, r2, #15
 800350e:	2201      	movs	r2, #1
 8003510:	fa02 f20c 	lsl.w	r2, r2, ip
 8003514:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003516:	0a52      	lsrs	r2, r2, #9
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800351e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003522:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003524:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003526:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800352a:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800352c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800352e:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003532:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003534:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800353c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800353e:	0fdb      	lsrs	r3, r3, #31
 8003540:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003542:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003544:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8003548:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800354a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800354c:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003550:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003552:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003554:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8003558:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800355a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800355c:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003560:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800356a:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 800356e:	f002 0201 	and.w	r2, r2, #1
 8003572:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003576:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003578:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800357c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003580:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003582:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003586:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800358a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800358c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003590:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003594:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003596:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800359a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800359e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80035a0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80035a4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80035a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80035aa:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80035ae:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80035b2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80035b4:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80035b8:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80035bc:	2201      	movs	r2, #1
 80035be:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80035c2:	4618      	mov	r0, r3
}
 80035c4:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d111      	bne.n	80035ee <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035ca:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80035d2:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	3301      	adds	r3, #1
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035e2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e8:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035ea:	6603      	str	r3, [r0, #96]	; 0x60
 80035ec:	e79a      	b.n	8003524 <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ee:	6803      	ldr	r3, [r0, #0]
 80035f0:	4a05      	ldr	r2, [pc, #20]	; (8003608 <HAL_SD_GetCardCSD+0x1b4>)
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003602:	4618      	mov	r0, r3
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	004005ff 	.word	0x004005ff

0800360c <SD_InitCard>:
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	b090      	sub	sp, #64	; 0x40
 8003610:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003612:	2301      	movs	r3, #1
 8003614:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003618:	6800      	ldr	r0, [r0, #0]
 800361a:	f001 f8ee 	bl	80047fa <SDIO_GetPowerState>
 800361e:	2800      	cmp	r0, #0
 8003620:	d06c      	beq.n	80036fc <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003622:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003624:	2b03      	cmp	r3, #3
 8003626:	d145      	bne.n	80036b4 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003628:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800362a:	2b03      	cmp	r3, #3
 800362c:	d15d      	bne.n	80036ea <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800362e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003630:	2b03      	cmp	r3, #3
 8003632:	d01d      	beq.n	8003670 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003634:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8003638:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800363a:	0409      	lsls	r1, r1, #16
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	f001 fb14 	bl	8004c6a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003642:	4605      	mov	r5, r0
 8003644:	2800      	cmp	r0, #0
 8003646:	d15b      	bne.n	8003700 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003648:	2100      	movs	r1, #0
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	f001 f8ee 	bl	800482c <SDIO_GetResponse>
 8003650:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003652:	2104      	movs	r1, #4
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	f001 f8e9 	bl	800482c <SDIO_GetResponse>
 800365a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800365c:	2108      	movs	r1, #8
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	f001 f8e4 	bl	800482c <SDIO_GetResponse>
 8003664:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003666:	210c      	movs	r1, #12
 8003668:	6820      	ldr	r0, [r4, #0]
 800366a:	f001 f8df 	bl	800482c <SDIO_GetResponse>
 800366e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003670:	2104      	movs	r1, #4
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	f001 f8da 	bl	800482c <SDIO_GetResponse>
 8003678:	0d00      	lsrs	r0, r0, #20
 800367a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800367c:	a905      	add	r1, sp, #20
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff fee8 	bl	8003454 <HAL_SD_GetCardCSD>
 8003684:	2800      	cmp	r0, #0
 8003686:	d13e      	bne.n	8003706 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003688:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800368a:	0412      	lsls	r2, r2, #16
 800368c:	2300      	movs	r3, #0
 800368e:	6820      	ldr	r0, [r4, #0]
 8003690:	f001 fa30 	bl	8004af4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003694:	4605      	mov	r5, r0
 8003696:	bb98      	cbnz	r0, 8003700 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003698:	4623      	mov	r3, r4
 800369a:	f853 6b10 	ldr.w	r6, [r3], #16
 800369e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80036a6:	3404      	adds	r4, #4
 80036a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036ac:	4630      	mov	r0, r6
 80036ae:	f001 f87f 	bl	80047b0 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80036b2:	e025      	b.n	8003700 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	f001 fac3 	bl	8004c40 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ba:	4605      	mov	r5, r0
 80036bc:	bb00      	cbnz	r0, 8003700 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036be:	2100      	movs	r1, #0
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	f001 f8b3 	bl	800482c <SDIO_GetResponse>
 80036c6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036c8:	2104      	movs	r1, #4
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	f001 f8ae 	bl	800482c <SDIO_GetResponse>
 80036d0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036d2:	2108      	movs	r1, #8
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	f001 f8a9 	bl	800482c <SDIO_GetResponse>
 80036da:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036dc:	210c      	movs	r1, #12
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	f001 f8a4 	bl	800482c <SDIO_GetResponse>
 80036e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80036e8:	e79e      	b.n	8003628 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036ea:	f10d 0112 	add.w	r1, sp, #18
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	f001 fb60 	bl	8004db4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036f4:	4605      	mov	r5, r0
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d099      	beq.n	800362e <SD_InitCard+0x22>
 80036fa:	e001      	b.n	8003700 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036fc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003700:	4628      	mov	r0, r5
 8003702:	b010      	add	sp, #64	; 0x40
 8003704:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003706:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800370a:	e7f9      	b.n	8003700 <SD_InitCard+0xf4>

0800370c <HAL_SD_InitCard>:
{
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003712:	2300      	movs	r3, #0
 8003714:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003716:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003718:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800371a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800371c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800371e:	2376      	movs	r3, #118	; 0x76
 8003720:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8003722:	ab0a      	add	r3, sp, #40	; 0x28
 8003724:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003728:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800372c:	ab04      	add	r3, sp, #16
 800372e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	f001 f83d 	bl	80047b0 <SDIO_Init>
  if(status != HAL_OK)
 8003736:	b118      	cbz	r0, 8003740 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8003738:	2501      	movs	r5, #1
}
 800373a:	4628      	mov	r0, r5
 800373c:	b00a      	add	sp, #40	; 0x28
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8003742:	4e1a      	ldr	r6, [pc, #104]	; (80037ac <HAL_SD_InitCard+0xa0>)
 8003744:	2300      	movs	r3, #0
 8003746:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	f001 f851 	bl	80047f2 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003750:	2301      	movs	r3, #1
 8003752:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  HAL_Delay(2);
 8003756:	2002      	movs	r0, #2
 8003758:	f7fd fc44 	bl	8000fe4 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff fb9d 	bl	8002e9c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003762:	b130      	cbz	r0, 8003772 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8003764:	2501      	movs	r5, #1
 8003766:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800376a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800376c:	4303      	orrs	r3, r0
 800376e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003770:	e7e3      	b.n	800373a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ff4a 	bl	800360c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003778:	b130      	cbz	r0, 8003788 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 800377a:	2501      	movs	r5, #1
 800377c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003782:	4303      	orrs	r3, r0
 8003784:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003786:	e7d8      	b.n	800373a <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	f001 f91f 	bl	80049d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003792:	2800      	cmp	r0, #0
 8003794:	d0d1      	beq.n	800373a <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	4905      	ldr	r1, [pc, #20]	; (80037b0 <HAL_SD_InitCard+0xa4>)
 800379a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800379c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800379e:	4303      	orrs	r3, r0
 80037a0:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037a2:	2501      	movs	r5, #1
 80037a4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80037a8:	e7c7      	b.n	800373a <HAL_SD_InitCard+0x2e>
 80037aa:	bf00      	nop
 80037ac:	42258000 	.word	0x42258000
 80037b0:	004005ff 	.word	0x004005ff

080037b4 <HAL_SD_Init>:
  if(hsd == NULL)
 80037b4:	b1a8      	cbz	r0, 80037e2 <HAL_SD_Init+0x2e>
{
 80037b6:	b510      	push	{r4, lr}
 80037b8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80037ba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80037be:	b163      	cbz	r3, 80037da <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff ffa0 	bl	800370c <HAL_SD_InitCard>
 80037cc:	b958      	cbnz	r0, 80037e6 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037ce:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80037d0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80037d8:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80037da:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80037dc:	f003 fda4 	bl	8007328 <HAL_SD_MspInit>
 80037e0:	e7ee      	b.n	80037c0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
}
 80037e4:	4770      	bx	lr
    return HAL_ERROR;
 80037e6:	2001      	movs	r0, #1
 80037e8:	e7f6      	b.n	80037d8 <HAL_SD_Init+0x24>

080037ea <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037ec:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037ee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80037f0:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80037f4:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80037f8:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80037fc:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80037fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003800:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003802:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003804:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003806:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003808:	61cb      	str	r3, [r1, #28]
}
 800380a:	2000      	movs	r0, #0
 800380c:	4770      	bx	lr
	...

08003810 <HAL_SD_ConfigWideBusOperation>:
{
 8003810:	b530      	push	{r4, r5, lr}
 8003812:	b08b      	sub	sp, #44	; 0x2c
 8003814:	4604      	mov	r4, r0
 8003816:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003818:	2303      	movs	r3, #3
 800381a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800381e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003820:	2b03      	cmp	r3, #3
 8003822:	d01c      	beq.n	800385e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003824:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003828:	d008      	beq.n	800383c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800382a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800382e:	d00a      	beq.n	8003846 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003830:	b179      	cbz	r1, 8003852 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003832:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003838:	6383      	str	r3, [r0, #56]	; 0x38
 800383a:	e014      	b.n	8003866 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800383c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003842:	6383      	str	r3, [r0, #56]	; 0x38
 8003844:	e00f      	b.n	8003866 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003846:	f7ff fc49 	bl	80030dc <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800384a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800384c:	4303      	orrs	r3, r0
 800384e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003850:	e009      	b.n	8003866 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8003852:	f7ff fc6a 	bl	800312a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003858:	4303      	orrs	r3, r0
 800385a:	63a3      	str	r3, [r4, #56]	; 0x38
 800385c:	e003      	b.n	8003866 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800385e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003868:	b1c3      	cbz	r3, 800389c <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_SD_ConfigWideBusOperation+0xbc>)
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003870:	2501      	movs	r5, #1
 8003872:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f001 f8a8 	bl	80049d0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003880:	b130      	cbz	r0, 8003890 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	4911      	ldr	r1, [pc, #68]	; (80038cc <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003886:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800388a:	4303      	orrs	r3, r0
 800388c:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800388e:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003890:	2301      	movs	r3, #1
 8003892:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003896:	4628      	mov	r0, r5
 8003898:	b00b      	add	sp, #44	; 0x2c
 800389a:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038a0:	68a3      	ldr	r3, [r4, #8]
 80038a2:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038a4:	68e3      	ldr	r3, [r4, #12]
 80038a6:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 80038a8:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038ae:	69a3      	ldr	r3, [r4, #24]
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80038b2:	ab0a      	add	r3, sp, #40	; 0x28
 80038b4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80038b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038bc:	ab04      	add	r3, sp, #16
 80038be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	f000 ff75 	bl	80047b0 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2500      	movs	r5, #0
 80038c8:	e7d5      	b.n	8003876 <HAL_SD_ConfigWideBusOperation+0x66>
 80038ca:	bf00      	nop
 80038cc:	004005ff 	.word	0x004005ff

080038d0 <HAL_SD_GetCardState>:
{
 80038d0:	b510      	push	{r4, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80038da:	a901      	add	r1, sp, #4
 80038dc:	f7ff fc4c 	bl	8003178 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038e0:	b110      	cbz	r0, 80038e8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80038e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038e4:	4303      	orrs	r3, r0
 80038e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80038e8:	9801      	ldr	r0, [sp, #4]
 80038ea:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80038ee:	b002      	add	sp, #8
 80038f0:	bd10      	pop	{r4, pc}
	...

080038f4 <SD_DMAError>:
{
 80038f4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80038f8:	f7fe fa34 	bl	8001d64 <HAL_DMA_GetError>
 80038fc:	2802      	cmp	r0, #2
 80038fe:	d00a      	beq.n	8003916 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003904:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003906:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003908:	2b01      	cmp	r3, #1
 800390a:	d005      	beq.n	8003918 <SD_DMAError+0x24>
 800390c:	2a01      	cmp	r2, #1
 800390e:	d003      	beq.n	8003918 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff fd79 	bl	8003408 <HAL_SD_ErrorCallback>
}
 8003916:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <SD_DMAError+0x64>)
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003922:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8003926:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800392a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800392e:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff ffcd 	bl	80038d0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003936:	3805      	subs	r0, #5
 8003938:	2801      	cmp	r0, #1
 800393a:	d905      	bls.n	8003948 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 800393c:	2301      	movs	r3, #1
 800393e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003942:	2300      	movs	r3, #0
 8003944:	6323      	str	r3, [r4, #48]	; 0x30
 8003946:	e7e3      	b.n	8003910 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	f001 f8b9 	bl	8004ac0 <SDMMC_CmdStopTransfer>
 800394e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003950:	4303      	orrs	r3, r0
 8003952:	63a3      	str	r3, [r4, #56]	; 0x38
 8003954:	e7f2      	b.n	800393c <SD_DMAError+0x48>
 8003956:	bf00      	nop
 8003958:	004005ff 	.word	0x004005ff

0800395c <SD_DMATxAbort>:
{
 800395c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800395e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	f240 523a 	movw	r2, #1338	; 0x53a
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ffb1 	bl	80038d0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800396e:	2301      	movs	r3, #1
 8003970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003974:	2300      	movs	r3, #0
 8003976:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003978:	3805      	subs	r0, #5
 800397a:	2801      	cmp	r0, #1
 800397c:	d905      	bls.n	800398a <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800397e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003980:	b953      	cbnz	r3, 8003998 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8003982:	4620      	mov	r0, r4
 8003984:	f003 f8c9 	bl	8006b1a <HAL_SD_AbortCallback>
}
 8003988:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	f001 f898 	bl	8004ac0 <SDMMC_CmdStopTransfer>
 8003990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003992:	4303      	orrs	r3, r0
 8003994:	63a3      	str	r3, [r4, #56]	; 0x38
 8003996:	e7f2      	b.n	800397e <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff fd35 	bl	8003408 <HAL_SD_ErrorCallback>
}
 800399e:	e7f3      	b.n	8003988 <SD_DMATxAbort+0x2c>

080039a0 <SD_DMARxAbort>:
{
 80039a0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff ff8f 	bl	80038d0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039bc:	3805      	subs	r0, #5
 80039be:	2801      	cmp	r0, #1
 80039c0:	d905      	bls.n	80039ce <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80039c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039c4:	b953      	cbnz	r3, 80039dc <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80039c6:	4620      	mov	r0, r4
 80039c8:	f003 f8a7 	bl	8006b1a <HAL_SD_AbortCallback>
}
 80039cc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	f001 f876 	bl	8004ac0 <SDMMC_CmdStopTransfer>
 80039d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039d6:	4303      	orrs	r3, r0
 80039d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80039da:	e7f2      	b.n	80039c2 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80039dc:	4620      	mov	r0, r4
 80039de:	f7ff fd13 	bl	8003408 <HAL_SD_ErrorCallback>
}
 80039e2:	e7f3      	b.n	80039cc <SD_DMARxAbort+0x2c>

080039e4 <HAL_SD_IRQHandler>:
{
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80039e8:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039ea:	6803      	ldr	r3, [r0, #0]
 80039ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80039f2:	d002      	beq.n	80039fa <HAL_SD_IRQHandler+0x16>
 80039f4:	f015 0f08 	tst.w	r5, #8
 80039f8:	d128      	bne.n	8003a4c <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80039fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003a00:	d05a      	beq.n	8003ab8 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003a0c:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003a10:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003a14:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003a20:	f015 0f08 	tst.w	r5, #8
 8003a24:	d026      	beq.n	8003a74 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a26:	f015 0f22 	tst.w	r5, #34	; 0x22
 8003a2a:	d112      	bne.n	8003a52 <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a3e:	f015 0f03 	tst.w	r5, #3
 8003a42:	d013      	beq.n	8003a6c <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f003 f870 	bl	8006b2a <HAL_SD_RxCpltCallback>
 8003a4a:	e001      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8003a4c:	f7ff fa86 	bl	8002f5c <SD_Read_IT>
}
 8003a50:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	f001 f834 	bl	8004ac0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d0e6      	beq.n	8003a2c <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8003a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a60:	4313      	orrs	r3, r2
 8003a62:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff fccf 	bl	8003408 <HAL_SD_ErrorCallback>
 8003a6a:	e7df      	b.n	8003a2c <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f003 f858 	bl	8006b22 <HAL_SD_TxCpltCallback>
 8003a72:	e7ed      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a74:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003a78:	d0ea      	beq.n	8003a50 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a7a:	f015 0f20 	tst.w	r5, #32
 8003a7e:	d10e      	bne.n	8003a9e <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003a80:	f015 0f03 	tst.w	r5, #3
 8003a84:	d1e4      	bne.n	8003a50 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a8a:	f023 0308 	bic.w	r3, r3, #8
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003a96:	4620      	mov	r0, r4
 8003a98:	f003 f843 	bl	8006b22 <HAL_SD_TxCpltCallback>
 8003a9c:	e7d8      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	f001 f80e 	bl	8004ac0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d0ea      	beq.n	8003a80 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003aaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003aac:	4313      	orrs	r3, r2
 8003aae:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7ff fca9 	bl	8003408 <HAL_SD_ErrorCallback>
 8003ab6:	e7e3      	b.n	8003a80 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aba:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003abe:	d002      	beq.n	8003ac6 <HAL_SD_IRQHandler+0xe2>
 8003ac0:	f015 0f08 	tst.w	r5, #8
 8003ac4:	d14a      	bne.n	8003b5c <HAL_SD_IRQHandler+0x178>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac8:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8003acc:	d0c0      	beq.n	8003a50 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad0:	f012 0f02 	tst.w	r2, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_SD_IRQHandler+0xfa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ad6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ad8:	f042 0202 	orr.w	r2, r2, #2
 8003adc:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae0:	f012 0f08 	tst.w	r2, #8
 8003ae4:	d003      	beq.n	8003aee <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ae8:	f042 0208 	orr.w	r2, r2, #8
 8003aec:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af0:	f012 0f20 	tst.w	r2, #32
 8003af4:	d003      	beq.n	8003afe <HAL_SD_IRQHandler+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003af6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b00:	f012 0f10 	tst.w	r2, #16
 8003b04:	d003      	beq.n	8003b0e <HAL_SD_IRQHandler+0x12a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b08:	f042 0210 	orr.w	r2, r2, #16
 8003b0c:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003b18:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8003b1c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	f000 ffce 	bl	8004ac0 <SDMMC_CmdStopTransfer>
 8003b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b26:	4303      	orrs	r3, r0
 8003b28:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003b2a:	f015 0f08 	tst.w	r5, #8
 8003b2e:	d119      	bne.n	8003b64 <HAL_SD_IRQHandler+0x180>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b30:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003b34:	d08c      	beq.n	8003a50 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b36:	f015 0f30 	tst.w	r5, #48	; 0x30
 8003b3a:	d11c      	bne.n	8003b76 <HAL_SD_IRQHandler+0x192>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b3c:	f015 0f03 	tst.w	r5, #3
 8003b40:	d026      	beq.n	8003b90 <HAL_SD_IRQHandler+0x1ac>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_SD_IRQHandler+0x1c0>)
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003b48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b4a:	f7fe f80a 	bl	8001b62 <HAL_DMA_Abort_IT>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f43f af7e 	beq.w	8003a50 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8003b54:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b56:	f7ff ff23 	bl	80039a0 <SD_DMARxAbort>
 8003b5a:	e779      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f7ff fa19 	bl	8002f94 <SD_Write_IT>
 8003b62:	e775      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff fc4a 	bl	8003408 <HAL_SD_ErrorCallback>
 8003b74:	e76c      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003b76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <HAL_SD_IRQHandler+0x1c4>)
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003b7c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b7e:	f7fd fff0 	bl	8001b62 <HAL_DMA_Abort_IT>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	f43f af64 	beq.w	8003a50 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003b88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b8a:	f7ff fee7 	bl	800395c <SD_DMATxAbort>
 8003b8e:	e75f      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b94:	2201      	movs	r2, #1
 8003b96:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b9a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f002 ffbc 	bl	8006b1a <HAL_SD_AbortCallback>
}
 8003ba2:	e755      	b.n	8003a50 <HAL_SD_IRQHandler+0x6c>
 8003ba4:	080039a1 	.word	0x080039a1
 8003ba8:	0800395d 	.word	0x0800395d

08003bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb0:	6a04      	ldr	r4, [r0, #32]
 8003bb2:	f024 0401 	bic.w	r4, r4, #1
 8003bb6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bba:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bbe:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003bc6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bca:	6203      	str	r3, [r0, #32]
}
 8003bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bd2:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd4:	6a04      	ldr	r4, [r0, #32]
 8003bd6:	f024 0410 	bic.w	r4, r4, #16
 8003bda:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bdc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003bde:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003be0:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003be4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be8:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf4:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bf8:	0109      	lsls	r1, r1, #4
 8003bfa:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003bfe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c00:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c02:	6201      	str	r1, [r0, #32]
}
 8003c04:	bc30      	pop	{r4, r5}
 8003c06:	4770      	bx	lr

08003c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0a:	6a04      	ldr	r4, [r0, #32]
 8003c0c:	f024 0410 	bic.w	r4, r4, #16
 8003c10:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003c14:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c16:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c22:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c26:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c28:	6203      	str	r3, [r0, #32]
}
 8003c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c30:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c32:	6a04      	ldr	r4, [r0, #32]
 8003c34:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003c38:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c3a:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003c3c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c3e:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003c42:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c46:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c52:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c56:	0209      	lsls	r1, r1, #8
 8003c58:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003c5c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c5e:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003c60:	6201      	str	r1, [r0, #32]
}
 8003c62:	bc30      	pop	{r4, r5}
 8003c64:	4770      	bx	lr

08003c66 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c66:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c68:	6a04      	ldr	r4, [r0, #32]
 8003c6a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003c6e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c70:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003c72:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c74:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c78:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c7c:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c88:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c8c:	0309      	lsls	r1, r1, #12
 8003c8e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003c92:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c94:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003c96:	6201      	str	r1, [r0, #32]
}
 8003c98:	bc30      	pop	{r4, r5}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c9c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca8:	6083      	str	r3, [r0, #8]
}
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d137      	bne.n	8003d26 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	6802      	ldr	r2, [r0, #0]
 8003cbe:	68d3      	ldr	r3, [r2, #12]
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_TIM_Base_Start_IT+0x84>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d020      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d01d      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cd4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d019      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d015      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d011      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00d      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cf4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
 8003cfc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d005      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	2a06      	cmp	r2, #6
 8003d18:	d007      	beq.n	8003d2a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d22:	2000      	movs	r0, #0
 8003d24:	4770      	bx	lr
    return HAL_ERROR;
 8003d26:	2001      	movs	r0, #1
 8003d28:	4770      	bx	lr
  return HAL_OK;
 8003d2a:	2000      	movs	r0, #0
}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000

08003d34 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_TriggerCallback>:
}
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_IRQHandler>:
{
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	f012 0f02 	tst.w	r2, #2
 8003d46:	d011      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	f012 0f02 	tst.w	r2, #2
 8003d4e:	d00d      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5a:	6803      	ldr	r3, [r0, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f013 0f03 	tst.w	r3, #3
 8003d62:	d070      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d64:	f004 f81c 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	f012 0f04 	tst.w	r2, #4
 8003d74:	d012      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	f012 0f04 	tst.w	r2, #4
 8003d7c:	d00e      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7e:	f06f 0204 	mvn.w	r2, #4
 8003d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d84:	2302      	movs	r3, #2
 8003d86:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003d90:	d05f      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	4620      	mov	r0, r4
 8003d94:	f004 f804 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	f012 0f08 	tst.w	r2, #8
 8003da4:	d012      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	f012 0f08 	tst.w	r2, #8
 8003dac:	d00e      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dae:	f06f 0208 	mvn.w	r2, #8
 8003db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db4:	2304      	movs	r3, #4
 8003db6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f013 0f03 	tst.w	r3, #3
 8003dc0:	d04e      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f003 ffec 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	f012 0f10 	tst.w	r2, #16
 8003dd4:	d012      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	f012 0f10 	tst.w	r2, #16
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dde:	f06f 0210 	mvn.w	r2, #16
 8003de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de4:	2308      	movs	r3, #8
 8003de6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003df0:	d03d      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	4620      	mov	r0, r4
 8003df4:	f003 ffd4 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	f012 0f01 	tst.w	r2, #1
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	f012 0f01 	tst.w	r2, #1
 8003e0c:	d136      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e16:	d003      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e1e:	d134      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e30:	d132      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	f012 0f20 	tst.w	r2, #32
 8003e3a:	d003      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	f012 0f20 	tst.w	r2, #32
 8003e42:	d130      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x16c>
}
 8003e44:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	f7ff ff75 	bl	8003d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7ff ff73 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e50:	e78a      	b.n	8003d68 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7ff ff6e 	bl	8003d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7ff ff6c 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e5e:	e79b      	b.n	8003d98 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e60:	4620      	mov	r0, r4
 8003e62:	f7ff ff67 	bl	8003d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7ff ff65 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e6c:	e7ac      	b.n	8003dc8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7ff ff60 	bl	8003d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ff5e 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e7a:	e7bd      	b.n	8003df8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7c:	f06f 0201 	mvn.w	r2, #1
 8003e80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f003 f85c 	bl	8006f40 <HAL_TIM_PeriodElapsedCallback>
 8003e88:	e7c1      	b.n	8003e0e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 fb08 	bl	80044a6 <HAL_TIMEx_BreakCallback>
 8003e96:	e7c3      	b.n	8003e20 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff ff4a 	bl	8003d38 <HAL_TIM_TriggerCallback>
 8003ea4:	e7c5      	b.n	8003e32 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea6:	f06f 0220 	mvn.w	r2, #32
 8003eaa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 faf9 	bl	80044a4 <HAL_TIMEx_CommutCallback>
}
 8003eb2:	e7c7      	b.n	8003e44 <HAL_TIM_IRQHandler+0x10a>

08003eb4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003eb4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb6:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <TIM_Base_SetConfig+0xc4>)
 8003eb8:	4290      	cmp	r0, r2
 8003eba:	d012      	beq.n	8003ee2 <TIM_Base_SetConfig+0x2e>
 8003ebc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x2e>
 8003ec2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ec6:	4290      	cmp	r0, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x2e>
 8003eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ece:	4290      	cmp	r0, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x2e>
 8003ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ed6:	4290      	cmp	r0, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x2e>
 8003eda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ede:	4290      	cmp	r0, r2
 8003ee0:	d103      	bne.n	8003eea <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ee6:	684a      	ldr	r2, [r1, #4]
 8003ee8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <TIM_Base_SetConfig+0xc4>)
 8003eec:	4290      	cmp	r0, r2
 8003eee:	d02a      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003ef0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ef4:	d027      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003ef6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003efa:	4290      	cmp	r0, r2
 8003efc:	d023      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f02:	4290      	cmp	r0, r2
 8003f04:	d01f      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0a:	4290      	cmp	r0, r2
 8003f0c:	d01b      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f0e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f12:	4290      	cmp	r0, r2
 8003f14:	d017      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f16:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f1a:	4290      	cmp	r0, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f22:	4290      	cmp	r0, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2a:	4290      	cmp	r0, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f2e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3a:	4290      	cmp	r0, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0x92>
 8003f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f42:	4290      	cmp	r0, r2
 8003f44:	d103      	bne.n	8003f4e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	68ca      	ldr	r2, [r1, #12]
 8003f4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f52:	694a      	ldr	r2, [r1, #20]
 8003f54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	688b      	ldr	r3, [r1, #8]
 8003f5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	680b      	ldr	r3, [r1, #0]
 8003f5e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <TIM_Base_SetConfig+0xc4>)
 8003f62:	4298      	cmp	r0, r3
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0xba>
 8003f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6a:	4298      	cmp	r0, r3
 8003f6c:	d101      	bne.n	8003f72 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003f72:	2301      	movs	r3, #1
 8003f74:	6143      	str	r3, [r0, #20]
}
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000

08003f7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f7c:	b340      	cbz	r0, 8003fd0 <HAL_TIM_Base_Init+0x54>
{
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f86:	b1f3      	cbz	r3, 8003fc6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8e:	4621      	mov	r1, r4
 8003f90:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f94:	f7ff ff8e 	bl	8003eb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fa2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fa6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003faa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fc2:	2000      	movs	r0, #0
}
 8003fc4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fca:	f003 fdbf 	bl	8007b4c <HAL_TIM_Base_MspInit>
 8003fce:	e7db      	b.n	8003f88 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003fd0:	2001      	movs	r0, #1
}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003fd4:	b340      	cbz	r0, 8004028 <HAL_TIM_IC_Init+0x54>
{
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fde:	b1f3      	cbz	r3, 800401e <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	f851 0b04 	ldr.w	r0, [r1], #4
 8003fec:	f7ff ff62 	bl	8003eb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ffa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ffe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004002:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004016:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800401a:	2000      	movs	r0, #0
}
 800401c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800401e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004022:	f003 fe19 	bl	8007c58 <HAL_TIM_IC_MspInit>
 8004026:	e7db      	b.n	8003fe0 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004028:	2001      	movs	r0, #1
}
 800402a:	4770      	bx	lr

0800402c <TIM_TI1_SetConfig>:
{
 800402c:	b470      	push	{r4, r5, r6}
 800402e:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004030:	6a04      	ldr	r4, [r0, #32]
 8004032:	f024 0401 	bic.w	r4, r4, #1
 8004036:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004038:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800403a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800403c:	4d18      	ldr	r5, [pc, #96]	; (80040a0 <TIM_TI1_SetConfig+0x74>)
 800403e:	42a8      	cmp	r0, r5
 8004040:	d01c      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 8004042:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004046:	d019      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <TIM_TI1_SetConfig+0x78>)
 800404a:	4290      	cmp	r0, r2
 800404c:	d016      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 800404e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004052:	4290      	cmp	r0, r2
 8004054:	d012      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 8004056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800405a:	4290      	cmp	r0, r2
 800405c:	d00e      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 800405e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004062:	4290      	cmp	r0, r2
 8004064:	d00a      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 8004066:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800406a:	4290      	cmp	r0, r2
 800406c:	d006      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
 800406e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004072:	4290      	cmp	r0, r2
 8004074:	d002      	beq.n	800407c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004076:	f044 0201 	orr.w	r2, r4, #1
 800407a:	e003      	b.n	8004084 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800407c:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004080:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004084:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	b2db      	uxtb	r3, r3
 800408c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004092:	f001 010a 	and.w	r1, r1, #10
 8004096:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8004098:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800409a:	6201      	str	r1, [r0, #32]
}
 800409c:	bc70      	pop	{r4, r5, r6}
 800409e:	4770      	bx	lr
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400

080040a8 <HAL_TIM_IC_ConfigChannel>:
{
 80040a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80040aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d05a      	beq.n	8004168 <HAL_TIM_IC_ConfigChannel+0xc0>
 80040b2:	4604      	mov	r4, r0
 80040b4:	460d      	mov	r5, r1
 80040b6:	2301      	movs	r3, #1
 80040b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80040bc:	b152      	cbz	r2, 80040d4 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 80040be:	2a04      	cmp	r2, #4
 80040c0:	d01a      	beq.n	80040f8 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 80040c2:	2a08      	cmp	r2, #8
 80040c4:	d02b      	beq.n	800411e <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 80040c6:	2a0c      	cmp	r2, #12
 80040c8:	d03b      	beq.n	8004142 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 80040ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80040d4:	68cb      	ldr	r3, [r1, #12]
 80040d6:	684a      	ldr	r2, [r1, #4]
 80040d8:	6809      	ldr	r1, [r1, #0]
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	f7ff ffa6 	bl	800402c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	6993      	ldr	r3, [r2, #24]
 80040e4:	f023 030c 	bic.w	r3, r3, #12
 80040e8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	6993      	ldr	r3, [r2, #24]
 80040ee:	68a9      	ldr	r1, [r5, #8]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2000      	movs	r0, #0
 80040f6:	e7e9      	b.n	80040cc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80040f8:	68cb      	ldr	r3, [r1, #12]
 80040fa:	684a      	ldr	r2, [r1, #4]
 80040fc:	6809      	ldr	r1, [r1, #0]
 80040fe:	6800      	ldr	r0, [r0, #0]
 8004100:	f7ff fd67 	bl	8003bd2 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	6993      	ldr	r3, [r2, #24]
 8004108:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800410c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	6993      	ldr	r3, [r2, #24]
 8004112:	68a9      	ldr	r1, [r5, #8]
 8004114:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004118:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2000      	movs	r0, #0
 800411c:	e7d6      	b.n	80040cc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800411e:	68cb      	ldr	r3, [r1, #12]
 8004120:	684a      	ldr	r2, [r1, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	6800      	ldr	r0, [r0, #0]
 8004126:	f7ff fd83 	bl	8003c30 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	69d3      	ldr	r3, [r2, #28]
 800412e:	f023 030c 	bic.w	r3, r3, #12
 8004132:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	69d3      	ldr	r3, [r2, #28]
 8004138:	68a9      	ldr	r1, [r5, #8]
 800413a:	430b      	orrs	r3, r1
 800413c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2000      	movs	r0, #0
 8004140:	e7c4      	b.n	80040cc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004142:	68cb      	ldr	r3, [r1, #12]
 8004144:	684a      	ldr	r2, [r1, #4]
 8004146:	6809      	ldr	r1, [r1, #0]
 8004148:	6800      	ldr	r0, [r0, #0]
 800414a:	f7ff fd8c 	bl	8003c66 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	69d3      	ldr	r3, [r2, #28]
 8004152:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004156:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	69d3      	ldr	r3, [r2, #28]
 800415c:	68a9      	ldr	r1, [r5, #8]
 800415e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004162:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2000      	movs	r0, #0
 8004166:	e7b1      	b.n	80040cc <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8004168:	2002      	movs	r0, #2
 800416a:	e7b2      	b.n	80040d2 <HAL_TIM_IC_ConfigChannel+0x2a>

0800416c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800416c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004170:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004174:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004178:	430a      	orrs	r2, r1
 800417a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417e:	6082      	str	r2, [r0, #8]
}
 8004180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004186:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d078      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0xfa>
{
 800418e:	b510      	push	{r4, lr}
 8004190:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004192:	2301      	movs	r3, #1
 8004194:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	2302      	movs	r3, #2
 800419a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800419e:	6802      	ldr	r2, [r0, #0]
 80041a0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80041aa:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	2b60      	cmp	r3, #96	; 0x60
 80041b0:	d04c      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xc6>
 80041b2:	d829      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x82>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d054      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xdc>
 80041b8:	d90c      	bls.n	80041d4 <HAL_TIM_ConfigClockSource+0x4e>
 80041ba:	2b50      	cmp	r3, #80	; 0x50
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	68ca      	ldr	r2, [r1, #12]
 80041c0:	6849      	ldr	r1, [r1, #4]
 80041c2:	6800      	ldr	r0, [r0, #0]
 80041c4:	f7ff fcf2 	bl	8003bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c8:	2150      	movs	r1, #80	; 0x50
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f7ff fd66 	bl	8003c9c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2000      	movs	r0, #0
      break;
 80041d2:	e005      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d00d      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0x6e>
 80041d8:	d909      	bls.n	80041ee <HAL_TIM_ConfigClockSource+0x68>
 80041da:	2b30      	cmp	r3, #48	; 0x30
 80041dc:	d00a      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80041de:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80041e6:	2300      	movs	r3, #0
 80041e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80041ec:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80041ee:	b10b      	cbz	r3, 80041f4 <HAL_TIM_ConfigClockSource+0x6e>
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d105      	bne.n	8004200 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f4:	4619      	mov	r1, r3
 80041f6:	6820      	ldr	r0, [r4, #0]
 80041f8:	f7ff fd50 	bl	8003c9c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2000      	movs	r0, #0
      break;
 80041fe:	e7ef      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004200:	2001      	movs	r0, #1
 8004202:	e7ed      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
 8004204:	2001      	movs	r0, #1
 8004206:	e7eb      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d034      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0xf2>
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	d10c      	bne.n	800422e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004214:	68cb      	ldr	r3, [r1, #12]
 8004216:	684a      	ldr	r2, [r1, #4]
 8004218:	6889      	ldr	r1, [r1, #8]
 800421a:	6800      	ldr	r0, [r0, #0]
 800421c:	f7ff ffa6 	bl	800416c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	6893      	ldr	r3, [r2, #8]
 8004224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004228:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2000      	movs	r0, #0
      break;
 800422c:	e7d8      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800422e:	2b70      	cmp	r3, #112	; 0x70
 8004230:	d124      	bne.n	800427c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	68cb      	ldr	r3, [r1, #12]
 8004234:	684a      	ldr	r2, [r1, #4]
 8004236:	6889      	ldr	r1, [r1, #8]
 8004238:	6800      	ldr	r0, [r0, #0]
 800423a:	f7ff ff97 	bl	800416c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004242:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004246:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2000      	movs	r0, #0
      break;
 800424a:	e7c9      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800424c:	68ca      	ldr	r2, [r1, #12]
 800424e:	6849      	ldr	r1, [r1, #4]
 8004250:	6800      	ldr	r0, [r0, #0]
 8004252:	f7ff fcd9 	bl	8003c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004256:	2160      	movs	r1, #96	; 0x60
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	f7ff fd1f 	bl	8003c9c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2000      	movs	r0, #0
      break;
 8004260:	e7be      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	68ca      	ldr	r2, [r1, #12]
 8004264:	6849      	ldr	r1, [r1, #4]
 8004266:	6800      	ldr	r0, [r0, #0]
 8004268:	f7ff fca0 	bl	8003bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	f7ff fd14 	bl	8003c9c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2000      	movs	r0, #0
      break;
 8004276:	e7b3      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004278:	2000      	movs	r0, #0
 800427a:	e7b1      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800427c:	2001      	movs	r0, #1
 800427e:	e7af      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004280:	2002      	movs	r0, #2
}
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	f001 011f 	and.w	r1, r1, #31
 8004288:	2301      	movs	r3, #1
 800428a:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428e:	6a03      	ldr	r3, [r0, #32]
 8004290:	ea23 030c 	bic.w	r3, r3, ip
 8004294:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004296:	6a03      	ldr	r3, [r0, #32]
 8004298:	fa02 f101 	lsl.w	r1, r2, r1
 800429c:	430b      	orrs	r3, r1
 800429e:	6203      	str	r3, [r0, #32]
}
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIM_IC_Start_IT>:
{
 80042a4:	b510      	push	{r4, lr}
 80042a6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80042a8:	460b      	mov	r3, r1
 80042aa:	bb09      	cbnz	r1, 80042f0 <HAL_TIM_IC_Start_IT+0x4c>
 80042ac:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80042b0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80042b2:	bb6b      	cbnz	r3, 8004310 <HAL_TIM_IC_Start_IT+0x6c>
 80042b4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80042b8:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ba:	2801      	cmp	r0, #1
 80042bc:	f040 80a4 	bne.w	8004408 <HAL_TIM_IC_Start_IT+0x164>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80042c0:	2a01      	cmp	r2, #1
 80042c2:	f040 80a2 	bne.w	800440a <HAL_TIM_IC_Start_IT+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	bb9b      	cbnz	r3, 8004330 <HAL_TIM_IC_Start_IT+0x8c>
 80042c8:	2102      	movs	r1, #2
 80042ca:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13e      	bne.n	8004350 <HAL_TIM_IC_Start_IT+0xac>
 80042d2:	2102      	movs	r1, #2
 80042d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	f200 8097 	bhi.w	800440c <HAL_TIM_IC_Start_IT+0x168>
 80042de:	e8df f003 	tbb	[pc, r3]
 80042e2:	9547      	.short	0x9547
 80042e4:	95769595 	.word	0x95769595
 80042e8:	957c9595 	.word	0x957c9595
 80042ec:	9595      	.short	0x9595
 80042ee:	82          	.byte	0x82
 80042ef:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80042f0:	2904      	cmp	r1, #4
 80042f2:	d005      	beq.n	8004300 <HAL_TIM_IC_Start_IT+0x5c>
 80042f4:	2908      	cmp	r1, #8
 80042f6:	d007      	beq.n	8004308 <HAL_TIM_IC_Start_IT+0x64>
 80042f8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80042fc:	b2c0      	uxtb	r0, r0
 80042fe:	e7d8      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0xe>
 8004300:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004304:	b2c0      	uxtb	r0, r0
 8004306:	e7d4      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0xe>
 8004308:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800430c:	b2c0      	uxtb	r0, r0
 800430e:	e7d0      	b.n	80042b2 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004310:	2b04      	cmp	r3, #4
 8004312:	d005      	beq.n	8004320 <HAL_TIM_IC_Start_IT+0x7c>
 8004314:	2b08      	cmp	r3, #8
 8004316:	d007      	beq.n	8004328 <HAL_TIM_IC_Start_IT+0x84>
 8004318:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	e7cc      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x16>
 8004320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	e7c8      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x16>
 8004328:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	e7c4      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004330:	2b04      	cmp	r3, #4
 8004332:	d005      	beq.n	8004340 <HAL_TIM_IC_Start_IT+0x9c>
 8004334:	2b08      	cmp	r3, #8
 8004336:	d007      	beq.n	8004348 <HAL_TIM_IC_Start_IT+0xa4>
 8004338:	2102      	movs	r1, #2
 800433a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800433e:	e7c6      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x2a>
 8004340:	2102      	movs	r1, #2
 8004342:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8004346:	e7c2      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x2a>
 8004348:	2102      	movs	r1, #2
 800434a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800434e:	e7be      	b.n	80042ce <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004350:	2b04      	cmp	r3, #4
 8004352:	d005      	beq.n	8004360 <HAL_TIM_IC_Start_IT+0xbc>
 8004354:	2b08      	cmp	r3, #8
 8004356:	d007      	beq.n	8004368 <HAL_TIM_IC_Start_IT+0xc4>
 8004358:	2102      	movs	r1, #2
 800435a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800435e:	e7bb      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x34>
 8004360:	2102      	movs	r1, #2
 8004362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004366:	e7b7      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x34>
 8004368:	2102      	movs	r1, #2
 800436a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 800436e:	e7b3      	b.n	80042d8 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004370:	6821      	ldr	r1, [r4, #0]
 8004372:	68ca      	ldr	r2, [r1, #12]
 8004374:	f042 0202 	orr.w	r2, r2, #2
 8004378:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437a:	2201      	movs	r2, #1
 800437c:	4619      	mov	r1, r3
 800437e:	6820      	ldr	r0, [r4, #0]
 8004380:	f7ff ff80 	bl	8004284 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_TIM_IC_Start_IT+0x170>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d032      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d02f      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 8004392:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004396:	4293      	cmp	r3, r2
 8004398:	d02b      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 800439a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800439e:	4293      	cmp	r3, r2
 80043a0:	d027      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 80043a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d023      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 80043aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01f      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 80043b2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
 80043ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80043be:	4293      	cmp	r3, r2
 80043c0:	d017      	beq.n	80043f2 <HAL_TIM_IC_Start_IT+0x14e>
      __HAL_TIM_ENABLE(htim);
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	2000      	movs	r0, #0
 80043cc:	e01d      	b.n	800440a <HAL_TIM_IC_Start_IT+0x166>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	68ca      	ldr	r2, [r1, #12]
 80043d2:	f042 0204 	orr.w	r2, r2, #4
 80043d6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80043d8:	e7cf      	b.n	800437a <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	68ca      	ldr	r2, [r1, #12]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80043e4:	e7c9      	b.n	800437a <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	68ca      	ldr	r2, [r1, #12]
 80043ea:	f042 0210 	orr.w	r2, r2, #16
 80043ee:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80043f0:	e7c3      	b.n	800437a <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f8:	2a06      	cmp	r2, #6
 80043fa:	d009      	beq.n	8004410 <HAL_TIM_IC_Start_IT+0x16c>
        __HAL_TIM_ENABLE(htim);
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	2000      	movs	r0, #0
 8004406:	e000      	b.n	800440a <HAL_TIM_IC_Start_IT+0x166>
    return HAL_ERROR;
 8004408:	2001      	movs	r0, #1
}
 800440a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800440c:	4610      	mov	r0, r2
 800440e:	e7fc      	b.n	800440a <HAL_TIM_IC_Start_IT+0x166>
 8004410:	2000      	movs	r0, #0
 8004412:	e7fa      	b.n	800440a <HAL_TIM_IC_Start_IT+0x166>
 8004414:	40010000 	.word	0x40010000

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004418:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d03d      	beq.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8004420:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004422:	2301      	movs	r3, #1
 8004424:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442e:	6803      	ldr	r3, [r0, #0]
 8004430:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004432:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004434:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004438:	680a      	ldr	r2, [r1, #0]
 800443a:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004440:	6803      	ldr	r3, [r0, #0]
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01a      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d017      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800444e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800445a:	4293      	cmp	r3, r2
 800445c:	d00f      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800445e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004462:	4293      	cmp	r3, r2
 8004464:	d00b      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004466:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800446e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004476:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800447a:	4293      	cmp	r3, r2
 800447c:	d104      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004482:	684a      	ldr	r2, [r1, #4]
 8004484:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004486:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004488:	2301      	movs	r3, #1
 800448a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800448e:	2300      	movs	r3, #0
 8004490:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004494:	4618      	mov	r0, r3
}
 8004496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800449c:	2002      	movs	r0, #2
}
 800449e:	4770      	bx	lr
 80044a0:	40010000 	.word	0x40010000

080044a4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a6:	4770      	bx	lr

080044a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	6802      	ldr	r2, [r0, #0]
 80044ae:	6913      	ldr	r3, [r2, #16]
 80044b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044b4:	68c1      	ldr	r1, [r0, #12]
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ba:	6883      	ldr	r3, [r0, #8]
 80044bc:	6902      	ldr	r2, [r0, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	6942      	ldr	r2, [r0, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	69c2      	ldr	r2, [r0, #28]
 80044c6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	68cb      	ldr	r3, [r1, #12]
 80044cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044d0:	f023 030c 	bic.w	r3, r3, #12
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d8:	6802      	ldr	r2, [r0, #0]
 80044da:	6953      	ldr	r3, [r2, #20]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	6981      	ldr	r1, [r0, #24]
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e6:	6803      	ldr	r3, [r0, #0]
 80044e8:	4a31      	ldr	r2, [pc, #196]	; (80045b0 <UART_SetConfig+0x108>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d006      	beq.n	80044fc <UART_SetConfig+0x54>
 80044ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d002      	beq.n	80044fc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f6:	f7fd fe1f 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 80044fa:	e001      	b.n	8004500 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7fd fe2c 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004500:	69e3      	ldr	r3, [r4, #28]
 8004502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004506:	d029      	beq.n	800455c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004508:	2100      	movs	r1, #0
 800450a:	1803      	adds	r3, r0, r0
 800450c:	4149      	adcs	r1, r1
 800450e:	181b      	adds	r3, r3, r0
 8004510:	f141 0100 	adc.w	r1, r1, #0
 8004514:	00c9      	lsls	r1, r1, #3
 8004516:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1818      	adds	r0, r3, r0
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004524:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004528:	f141 0100 	adc.w	r1, r1, #0
 800452c:	f7fc fbac 	bl	8000c88 <__aeabi_uldivmod>
 8004530:	4d20      	ldr	r5, [pc, #128]	; (80045b4 <UART_SetConfig+0x10c>)
 8004532:	fba5 3200 	umull	r3, r2, r5, r0
 8004536:	0951      	lsrs	r1, r2, #5
 8004538:	2364      	movs	r3, #100	; 0x64
 800453a:	fb03 0311 	mls	r3, r3, r1, r0
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	fba5 2303 	umull	r2, r3, r5, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800454c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	4413      	add	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }
}
 800455a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800455c:	2300      	movs	r3, #0
 800455e:	1802      	adds	r2, r0, r0
 8004560:	eb43 0103 	adc.w	r1, r3, r3
 8004564:	1812      	adds	r2, r2, r0
 8004566:	f141 0100 	adc.w	r1, r1, #0
 800456a:	00c9      	lsls	r1, r1, #3
 800456c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004570:	00d2      	lsls	r2, r2, #3
 8004572:	1810      	adds	r0, r2, r0
 8004574:	f141 0100 	adc.w	r1, r1, #0
 8004578:	6862      	ldr	r2, [r4, #4]
 800457a:	1892      	adds	r2, r2, r2
 800457c:	415b      	adcs	r3, r3
 800457e:	f7fc fb83 	bl	8000c88 <__aeabi_uldivmod>
 8004582:	4d0c      	ldr	r5, [pc, #48]	; (80045b4 <UART_SetConfig+0x10c>)
 8004584:	fba5 3200 	umull	r3, r2, r5, r0
 8004588:	0951      	lsrs	r1, r2, #5
 800458a:	2364      	movs	r3, #100	; 0x64
 800458c:	fb03 0311 	mls	r3, r3, r1, r0
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	3332      	adds	r3, #50	; 0x32
 8004594:	fba5 2303 	umull	r2, r3, r5, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	005a      	lsls	r2, r3, #1
 800459c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80045a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	6821      	ldr	r1, [r4, #0]
 80045aa:	4413      	add	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
 80045ae:	e7d4      	b.n	800455a <UART_SetConfig+0xb2>
 80045b0:	40011000 	.word	0x40011000
 80045b4:	51eb851f 	.word	0x51eb851f

080045b8 <UART_WaitOnFlagUntilTimeout>:
{
 80045b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045bc:	4605      	mov	r5, r0
 80045be:	460f      	mov	r7, r1
 80045c0:	4616      	mov	r6, r2
 80045c2:	4699      	mov	r9, r3
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	682c      	ldr	r4, [r5, #0]
 80045ca:	6824      	ldr	r4, [r4, #0]
 80045cc:	ea37 0304 	bics.w	r3, r7, r4
 80045d0:	bf0c      	ite	eq
 80045d2:	f04f 0c01 	moveq.w	ip, #1
 80045d6:	f04f 0c00 	movne.w	ip, #0
 80045da:	45b4      	cmp	ip, r6
 80045dc:	d12d      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 80045de:	f1b8 3fff 	cmp.w	r8, #4294967295
 80045e2:	d0f1      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e4:	f1b8 0f00 	cmp.w	r8, #0
 80045e8:	d005      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x3e>
 80045ea:	f7fc fcf5 	bl	8000fd8 <HAL_GetTick>
 80045ee:	eba0 0009 	sub.w	r0, r0, r9
 80045f2:	4540      	cmp	r0, r8
 80045f4:	d9e8      	bls.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f6:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f102 030c 	add.w	r3, r2, #12
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	320c      	adds	r2, #12
 8004606:	e842 3100 	strex	r1, r3, [r2]
 800460a:	2900      	cmp	r1, #0
 800460c:	d1f3      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	f102 0314 	add.w	r3, r2, #20
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	3214      	adds	r2, #20
 800461e:	e842 3100 	strex	r1, r3, [r2]
 8004622:	2900      	cmp	r1, #0
 8004624:	d1f3      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 8004626:	2320      	movs	r3, #32
 8004628:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800462c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004630:	2300      	movs	r3, #0
 8004632:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004636:	2003      	movs	r0, #3
 8004638:	e000      	b.n	800463c <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 800463a:	2000      	movs	r0, #0
}
 800463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004640 <HAL_UART_Init>:
  if (huart == NULL)
 8004640:	b358      	cbz	r0, 800469a <HAL_UART_Init+0x5a>
{
 8004642:	b510      	push	{r4, lr}
 8004644:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004646:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800464a:	b30b      	cbz	r3, 8004690 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	2324      	movs	r3, #36	; 0x24
 800464e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	68d3      	ldr	r3, [r2, #12]
 8004656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff ff23 	bl	80044a8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	6913      	ldr	r3, [r2, #16]
 8004666:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800466a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466c:	6822      	ldr	r2, [r4, #0]
 800466e:	6953      	ldr	r3, [r2, #20]
 8004670:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004674:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	68d3      	ldr	r3, [r2, #12]
 800467a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800467e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	2000      	movs	r0, #0
 8004682:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004684:	2320      	movs	r3, #32
 8004686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800468e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004690:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004694:	f003 fb4a 	bl	8007d2c <HAL_UART_MspInit>
 8004698:	e7d8      	b.n	800464c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800469a:	2001      	movs	r0, #1
}
 800469c:	4770      	bx	lr

0800469e <HAL_UART_Transmit>:
{
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80046a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d154      	bne.n	800475a <HAL_UART_Transmit+0xbc>
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80046b6:	2900      	cmp	r1, #0
 80046b8:	d053      	beq.n	8004762 <HAL_UART_Transmit+0xc4>
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d053      	beq.n	8004766 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80046be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d051      	beq.n	800476a <HAL_UART_Transmit+0xcc>
 80046c6:	2301      	movs	r3, #1
 80046c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	2321      	movs	r3, #33	; 0x21
 80046d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80046d6:	f7fc fc7f 	bl	8000fd8 <HAL_GetTick>
 80046da:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80046dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e4:	68a3      	ldr	r3, [r4, #8]
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	d005      	beq.n	80046f8 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80046ec:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80046f0:	2300      	movs	r3, #0
 80046f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80046f6:	e012      	b.n	800471e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	b113      	cbz	r3, 8004702 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80046fc:	f04f 0800 	mov.w	r8, #0
 8004700:	e7f6      	b.n	80046f0 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8004702:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004704:	2500      	movs	r5, #0
 8004706:	e7f3      	b.n	80046f0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004708:	f838 3b02 	ldrh.w	r3, [r8], #2
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004714:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004716:	b292      	uxth	r2, r2
 8004718:	3a01      	subs	r2, #1
 800471a:	b292      	uxth	r2, r2
 800471c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800471e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	b173      	cbz	r3, 8004742 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004724:	9600      	str	r6, [sp, #0]
 8004726:	463b      	mov	r3, r7
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff ff43 	bl	80045b8 <UART_WaitOnFlagUntilTimeout>
 8004732:	b9e0      	cbnz	r0, 800476e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8004734:	2d00      	cmp	r5, #0
 8004736:	d0e7      	beq.n	8004708 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004738:	f815 2b01 	ldrb.w	r2, [r5], #1
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004740:	e7e8      	b.n	8004714 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	9600      	str	r6, [sp, #0]
 8004744:	463b      	mov	r3, r7
 8004746:	2200      	movs	r2, #0
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	4620      	mov	r0, r4
 800474c:	f7ff ff34 	bl	80045b8 <UART_WaitOnFlagUntilTimeout>
 8004750:	b978      	cbnz	r0, 8004772 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8004752:	2320      	movs	r3, #32
 8004754:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004758:	e000      	b.n	800475c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800475a:	2002      	movs	r0, #2
}
 800475c:	b002      	add	sp, #8
 800475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004762:	2001      	movs	r0, #1
 8004764:	e7fa      	b.n	800475c <HAL_UART_Transmit+0xbe>
 8004766:	2001      	movs	r0, #1
 8004768:	e7f8      	b.n	800475c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800476a:	2002      	movs	r0, #2
 800476c:	e7f6      	b.n	800475c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
 8004770:	e7f4      	b.n	800475c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8004772:	2003      	movs	r0, #3
 8004774:	e7f2      	b.n	800475c <HAL_UART_Transmit+0xbe>
	...

08004778 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <SDMMC_GetCmdError+0x30>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <SDMMC_GetCmdError+0x34>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0a5b      	lsrs	r3, r3, #9
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800478c:	461a      	mov	r2, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b13a      	cbz	r2, 80047a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004792:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004794:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004798:	d0f8      	beq.n	800478c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800479a:	23c5      	movs	r3, #197	; 0xc5
 800479c:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800479e:	2000      	movs	r0, #0
 80047a0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80047a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80047a6:	4770      	bx	lr
 80047a8:	20000010 	.word	0x20000010
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <SDIO_Init>:
{
 80047b0:	b084      	sub	sp, #16
 80047b2:	f10d 0c04 	add.w	ip, sp, #4
 80047b6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80047be:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 80047c0:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80047c2:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 80047c4:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80047c6:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 80047c8:	4313      	orrs	r3, r2
             Init.ClockDiv
 80047ca:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 80047cc:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047ce:	6842      	ldr	r2, [r0, #4]
 80047d0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80047d4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80047d8:	4313      	orrs	r3, r2
 80047da:	6043      	str	r3, [r0, #4]
}
 80047dc:	2000      	movs	r0, #0
 80047de:	b004      	add	sp, #16
 80047e0:	4770      	bx	lr

080047e2 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80047e2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80047e6:	4770      	bx	lr

080047e8 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80047e8:	680b      	ldr	r3, [r1, #0]
 80047ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr

080047f2 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047f2:	2303      	movs	r3, #3
 80047f4:	6003      	str	r3, [r0, #0]
}
 80047f6:	2000      	movs	r0, #0
 80047f8:	4770      	bx	lr

080047fa <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80047fa:	6800      	ldr	r0, [r0, #0]
}
 80047fc:	f000 0003 	and.w	r0, r0, #3
 8004800:	4770      	bx	lr

08004802 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8004802:	680b      	ldr	r3, [r1, #0]
 8004804:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004806:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8004808:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800480a:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800480c:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800480e:	4313      	orrs	r3, r2
                       Command->CPSM);
 8004810:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004812:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004814:	68c2      	ldr	r2, [r0, #12]
 8004816:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800481a:	f022 020f 	bic.w	r2, r2, #15
 800481e:	4313      	orrs	r3, r2
 8004820:	60c3      	str	r3, [r0, #12]
}
 8004822:	2000      	movs	r0, #0
 8004824:	4770      	bx	lr

08004826 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8004826:	6900      	ldr	r0, [r0, #16]
}
 8004828:	b2c0      	uxtb	r0, r0
 800482a:	4770      	bx	lr

0800482c <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800482c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800482e:	5840      	ldr	r0, [r0, r1]
}  
 8004830:	4770      	bx	lr

08004832 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8004832:	680b      	ldr	r3, [r1, #0]
 8004834:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8004836:	684b      	ldr	r3, [r1, #4]
 8004838:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800483a:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800483c:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800483e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004840:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004842:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004844:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004846:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004848:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800484a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800484e:	4313      	orrs	r3, r2
 8004850:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004852:	2000      	movs	r0, #0
 8004854:	4770      	bx	lr

08004856 <SDMMC_CmdGoIdleState>:
{
 8004856:	b510      	push	{r4, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004860:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004862:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004864:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800486c:	a901      	add	r1, sp, #4
 800486e:	f7ff ffc8 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004872:	4620      	mov	r0, r4
 8004874:	f7ff ff80 	bl	8004778 <SDMMC_GetCmdError>
}
 8004878:	b006      	add	sp, #24
 800487a:	bd10      	pop	{r4, pc}

0800487c <SDMMC_GetCmdResp1>:
{
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004882:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <SDMMC_GetCmdResp1+0x148>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4950      	ldr	r1, [pc, #320]	; (80049c8 <SDMMC_GetCmdResp1+0x14c>)
 8004888:	fba1 1303 	umull	r1, r3, r1, r3
 800488c:	0a5b      	lsrs	r3, r3, #9
 800488e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8004892:	4613      	mov	r3, r2
 8004894:	3a01      	subs	r2, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d05d      	beq.n	8004956 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 800489a:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800489c:	f013 0f45 	tst.w	r3, #69	; 0x45
 80048a0:	d0f7      	beq.n	8004892 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80048a6:	d1f4      	bne.n	8004892 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048aa:	f013 0f04 	tst.w	r3, #4
 80048ae:	d106      	bne.n	80048be <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b2:	f013 0f01 	tst.w	r3, #1
 80048b6:	d005      	beq.n	80048c4 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048b8:	2001      	movs	r0, #1
 80048ba:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048bc:	e04d      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048be:	2004      	movs	r0, #4
 80048c0:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048c2:	e04a      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048c4:	23c5      	movs	r3, #197	; 0xc5
 80048c6:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7ff ffac 	bl	8004826 <SDIO_GetCommandResponse>
 80048ce:	42a8      	cmp	r0, r5
 80048d0:	d001      	beq.n	80048d6 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048d2:	2001      	movs	r0, #1
 80048d4:	e041      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80048d6:	2100      	movs	r1, #0
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff ffa7 	bl	800482c <SDIO_GetResponse>
 80048de:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80048e0:	483a      	ldr	r0, [pc, #232]	; (80049cc <SDMMC_GetCmdResp1+0x150>)
 80048e2:	4018      	ands	r0, r3
 80048e4:	b3c8      	cbz	r0, 800495a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	db38      	blt.n	800495c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80048ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80048ee:	d138      	bne.n	8004962 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80048f0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80048f4:	d137      	bne.n	8004966 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80048f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80048fa:	d136      	bne.n	800496a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80048fc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004900:	d136      	bne.n	8004970 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004902:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004906:	d136      	bne.n	8004976 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004908:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800490c:	d136      	bne.n	800497c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800490e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004912:	d136      	bne.n	8004982 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004914:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004918:	d136      	bne.n	8004988 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800491a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800491e:	d136      	bne.n	800498e <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004920:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004924:	d136      	bne.n	8004994 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004926:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800492a:	d136      	bne.n	800499a <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800492c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004930:	d136      	bne.n	80049a0 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004932:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004936:	d136      	bne.n	80049a6 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004938:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800493c:	d136      	bne.n	80049ac <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800493e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004942:	d136      	bne.n	80049b2 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004944:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004948:	d136      	bne.n	80049b8 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800494a:	f013 0f08 	tst.w	r3, #8
 800494e:	d036      	beq.n	80049be <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004950:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004954:	e001      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8004956:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800495a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800495c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004960:	e7fb      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004962:	2040      	movs	r0, #64	; 0x40
 8004964:	e7f9      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004966:	2080      	movs	r0, #128	; 0x80
 8004968:	e7f7      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800496a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800496e:	e7f4      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004970:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004974:	e7f1      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004976:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800497a:	e7ee      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800497c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004980:	e7eb      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004982:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004986:	e7e8      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004988:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800498c:	e7e5      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800498e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004992:	e7e2      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004994:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004998:	e7df      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800499a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800499e:	e7dc      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80049a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80049a4:	e7d9      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80049a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049aa:	e7d6      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80049ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049b0:	e7d3      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80049b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80049b6:	e7d0      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80049b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80049bc:	e7cd      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80049be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80049c2:	e7ca      	b.n	800495a <SDMMC_GetCmdResp1+0xde>
 80049c4:	20000010 	.word	0x20000010
 80049c8:	10624dd3 	.word	0x10624dd3
 80049cc:	fdffe008 	.word	0xfdffe008

080049d0 <SDMMC_CmdBlockLength>:
{
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80049d8:	2510      	movs	r5, #16
 80049da:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049dc:	2340      	movs	r3, #64	; 0x40
 80049de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049e0:	2300      	movs	r3, #0
 80049e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ea:	a901      	add	r1, sp, #4
 80049ec:	f7ff ff09 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4629      	mov	r1, r5
 80049f6:	4620      	mov	r0, r4
 80049f8:	f7ff ff40 	bl	800487c <SDMMC_GetCmdResp1>
}
 80049fc:	b007      	add	sp, #28
 80049fe:	bd30      	pop	{r4, r5, pc}

08004a00 <SDMMC_CmdReadSingleBlock>:
{
 8004a00:	b530      	push	{r4, r5, lr}
 8004a02:	b087      	sub	sp, #28
 8004a04:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a06:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004a08:	2511      	movs	r5, #17
 8004a0a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a10:	2300      	movs	r3, #0
 8004a12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1a:	a901      	add	r1, sp, #4
 8004a1c:	f7ff fef1 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4629      	mov	r1, r5
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff ff28 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004a2c:	b007      	add	sp, #28
 8004a2e:	bd30      	pop	{r4, r5, pc}

08004a30 <SDMMC_CmdReadMultiBlock>:
{
 8004a30:	b530      	push	{r4, r5, lr}
 8004a32:	b087      	sub	sp, #28
 8004a34:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a36:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a38:	2512      	movs	r5, #18
 8004a3a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a40:	2300      	movs	r3, #0
 8004a42:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a48:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a4a:	a901      	add	r1, sp, #4
 8004a4c:	f7ff fed9 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4629      	mov	r1, r5
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff ff10 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004a5c:	b007      	add	sp, #28
 8004a5e:	bd30      	pop	{r4, r5, pc}

08004a60 <SDMMC_CmdWriteSingleBlock>:
{
 8004a60:	b530      	push	{r4, r5, lr}
 8004a62:	b087      	sub	sp, #28
 8004a64:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004a68:	2518      	movs	r5, #24
 8004a6a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a6c:	2340      	movs	r3, #64	; 0x40
 8004a6e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a70:	2300      	movs	r3, #0
 8004a72:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a78:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a7a:	a901      	add	r1, sp, #4
 8004a7c:	f7ff fec1 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4629      	mov	r1, r5
 8004a86:	4620      	mov	r0, r4
 8004a88:	f7ff fef8 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004a8c:	b007      	add	sp, #28
 8004a8e:	bd30      	pop	{r4, r5, pc}

08004a90 <SDMMC_CmdWriteMultiBlock>:
{
 8004a90:	b530      	push	{r4, r5, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a98:	2519      	movs	r5, #25
 8004a9a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aaa:	a901      	add	r1, sp, #4
 8004aac:	f7ff fea9 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fee0 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004abc:	b007      	add	sp, #28
 8004abe:	bd30      	pop	{r4, r5, pc}

08004ac0 <SDMMC_CmdStopTransfer>:
{
 8004ac0:	b530      	push	{r4, r5, lr}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004aca:	250c      	movs	r5, #12
 8004acc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ad2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ada:	a901      	add	r1, sp, #4
 8004adc:	f7ff fe91 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004ae0:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <SDMMC_CmdStopTransfer+0x30>)
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff fec9 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004aea:	b007      	add	sp, #28
 8004aec:	bd30      	pop	{r4, r5, pc}
 8004aee:	bf00      	nop
 8004af0:	05f5e100 	.word	0x05f5e100

08004af4 <SDMMC_CmdSelDesel>:
{
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	b087      	sub	sp, #28
 8004af8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004afa:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004afc:	2507      	movs	r5, #7
 8004afe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b04:	2300      	movs	r3, #0
 8004b06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b0e:	a901      	add	r1, sp, #4
 8004b10:	f7ff fe77 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff feae 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004b20:	b007      	add	sp, #28
 8004b22:	bd30      	pop	{r4, r5, pc}

08004b24 <SDMMC_CmdAppCommand>:
{
 8004b24:	b530      	push	{r4, r5, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b2a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b2c:	2537      	movs	r5, #55	; 0x37
 8004b2e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b34:	2300      	movs	r3, #0
 8004b36:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b3e:	a901      	add	r1, sp, #4
 8004b40:	f7ff fe5f 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f7ff fe96 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004b50:	b007      	add	sp, #28
 8004b52:	bd30      	pop	{r4, r5, pc}

08004b54 <SDMMC_CmdBusWidth>:
{
 8004b54:	b530      	push	{r4, r5, lr}
 8004b56:	b087      	sub	sp, #28
 8004b58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004b5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004b5c:	2506      	movs	r5, #6
 8004b5e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b64:	2300      	movs	r3, #0
 8004b66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b6e:	a901      	add	r1, sp, #4
 8004b70:	f7ff fe47 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7ff fe7e 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004b80:	b007      	add	sp, #28
 8004b82:	bd30      	pop	{r4, r5, pc}

08004b84 <SDMMC_CmdSendSCR>:
{
 8004b84:	b530      	push	{r4, r5, lr}
 8004b86:	b087      	sub	sp, #28
 8004b88:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004b8e:	2533      	movs	r5, #51	; 0x33
 8004b90:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b9e:	a901      	add	r1, sp, #4
 8004ba0:	f7ff fe2f 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7ff fe66 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004bb0:	b007      	add	sp, #28
 8004bb2:	bd30      	pop	{r4, r5, pc}

08004bb4 <SDMMC_CmdSendStatus>:
{
 8004bb4:	b530      	push	{r4, r5, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004bba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004bbc:	250d      	movs	r5, #13
 8004bbe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bcc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bce:	a901      	add	r1, sp, #4
 8004bd0:	f7ff fe17 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff fe4e 	bl	800487c <SDMMC_GetCmdResp1>
}
 8004be0:	b007      	add	sp, #28
 8004be2:	bd30      	pop	{r4, r5, pc}

08004be4 <SDMMC_GetCmdResp2>:
{
 8004be4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <SDMMC_GetCmdResp2+0x54>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <SDMMC_GetCmdResp2+0x58>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	0a5b      	lsrs	r3, r3, #9
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b1ba      	cbz	r2, 8004c30 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004c00:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004c06:	d0f8      	beq.n	8004bfa <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c08:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004c0c:	d1f5      	bne.n	8004bfa <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c0e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004c10:	f013 0f04 	tst.w	r3, #4
 8004c14:	d106      	bne.n	8004c24 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c16:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004c18:	f010 0001 	ands.w	r0, r0, #1
 8004c1c:	d105      	bne.n	8004c2a <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c1e:	23c5      	movs	r3, #197	; 0xc5
 8004c20:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004c22:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c24:	2004      	movs	r0, #4
 8004c26:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c28:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c2e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004c30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000010 	.word	0x20000010
 8004c3c:	10624dd3 	.word	0x10624dd3

08004c40 <SDMMC_CmdSendCID>:
{
 8004c40:	b510      	push	{r4, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c4e:	22c0      	movs	r2, #192	; 0xc0
 8004c50:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c52:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c58:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5a:	a901      	add	r1, sp, #4
 8004c5c:	f7ff fdd1 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7ff ffbf 	bl	8004be4 <SDMMC_GetCmdResp2>
}
 8004c66:	b006      	add	sp, #24
 8004c68:	bd10      	pop	{r4, pc}

08004c6a <SDMMC_CmdSendCSD>:
{
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004c70:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c72:	2309      	movs	r3, #9
 8004c74:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c76:	23c0      	movs	r3, #192	; 0xc0
 8004c78:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c82:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c84:	a901      	add	r1, sp, #4
 8004c86:	f7ff fdbc 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7ff ffaa 	bl	8004be4 <SDMMC_GetCmdResp2>
}
 8004c90:	b006      	add	sp, #24
 8004c92:	bd10      	pop	{r4, pc}

08004c94 <SDMMC_GetCmdResp3>:
{
 8004c94:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <SDMMC_GetCmdResp3+0x44>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <SDMMC_GetCmdResp3+0x48>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0a5b      	lsrs	r3, r3, #9
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004caa:	461a      	mov	r2, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b182      	cbz	r2, 8004cd2 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8004cb0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cb2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004cb6:	d0f8      	beq.n	8004caa <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cb8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004cbc:	d1f5      	bne.n	8004caa <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cbe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004cc0:	f010 0004 	ands.w	r0, r0, #4
 8004cc4:	d102      	bne.n	8004ccc <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cc6:	23c5      	movs	r3, #197	; 0xc5
 8004cc8:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004cca:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ccc:	2004      	movs	r0, #4
 8004cce:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cd0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004cd2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004cd6:	4770      	bx	lr
 8004cd8:	20000010 	.word	0x20000010
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <SDMMC_CmdAppOperCommand>:
{
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004ce6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004cee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004cf0:	2329      	movs	r3, #41	; 0x29
 8004cf2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cf4:	2340      	movs	r3, #64	; 0x40
 8004cf6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d00:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d02:	a901      	add	r1, sp, #4
 8004d04:	f7ff fd7d 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff ffc3 	bl	8004c94 <SDMMC_GetCmdResp3>
}
 8004d0e:	b006      	add	sp, #24
 8004d10:	bd10      	pop	{r4, pc}
	...

08004d14 <SDMMC_GetCmdResp6>:
{
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	4605      	mov	r5, r0
 8004d18:	460e      	mov	r6, r1
 8004d1a:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <SDMMC_GetCmdResp6+0x98>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <SDMMC_GetCmdResp6+0x9c>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	0a5b      	lsrs	r3, r3, #9
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004d30:	461a      	mov	r2, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b38a      	cbz	r2, 8004d9a <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8004d36:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d38:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004d3c:	d0f8      	beq.n	8004d30 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d3e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004d42:	d1f5      	bne.n	8004d30 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d44:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004d46:	f013 0f04 	tst.w	r3, #4
 8004d4a:	d106      	bne.n	8004d5a <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004d4e:	f013 0f01 	tst.w	r3, #1
 8004d52:	d005      	beq.n	8004d60 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d54:	2001      	movs	r0, #1
 8004d56:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d58:	e021      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d5a:	2004      	movs	r0, #4
 8004d5c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d5e:	e01e      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d60:	4628      	mov	r0, r5
 8004d62:	f7ff fd60 	bl	8004826 <SDIO_GetCommandResponse>
 8004d66:	42b0      	cmp	r0, r6
 8004d68:	d001      	beq.n	8004d6e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	e017      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d6e:	23c5      	movs	r3, #197	; 0xc5
 8004d70:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d72:	2100      	movs	r1, #0
 8004d74:	4628      	mov	r0, r5
 8004d76:	f7ff fd59 	bl	800482c <SDIO_GetResponse>
 8004d7a:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d7c:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8004d80:	d008      	beq.n	8004d94 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004d82:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d86:	d10b      	bne.n	8004da0 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004d88:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d8c:	d00b      	beq.n	8004da6 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d92:	e004      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004d98:	e001      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8004d9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004da0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004da4:	e7fb      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004da6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004daa:	e7f8      	b.n	8004d9e <SDMMC_GetCmdResp6+0x8a>
 8004dac:	20000010 	.word	0x20000010
 8004db0:	10624dd3 	.word	0x10624dd3

08004db4 <SDMMC_CmdSetRelAdd>:
{
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	4604      	mov	r4, r0
 8004dba:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004dc0:	2603      	movs	r6, #3
 8004dc2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dc8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dce:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dd0:	a901      	add	r1, sp, #4
 8004dd2:	f7ff fd16 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004dd6:	462a      	mov	r2, r5
 8004dd8:	4631      	mov	r1, r6
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7ff ff9a 	bl	8004d14 <SDMMC_GetCmdResp6>
}
 8004de0:	b006      	add	sp, #24
 8004de2:	bd70      	pop	{r4, r5, r6, pc}

08004de4 <SDMMC_GetCmdResp7>:
{
 8004de4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <SDMMC_GetCmdResp7+0x5c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <SDMMC_GetCmdResp7+0x60>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b1e2      	cbz	r2, 8004e3a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004e00:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004e06:	d0f8      	beq.n	8004dfa <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e08:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004e0c:	d1f5      	bne.n	8004dfa <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e0e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e10:	f013 0f04 	tst.w	r3, #4
 8004e14:	d10b      	bne.n	8004e2e <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e16:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e18:	f013 0301 	ands.w	r3, r3, #1
 8004e1c:	d10a      	bne.n	8004e34 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004e1e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004e20:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004e24:	d00b      	beq.n	8004e3e <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e2e:	2004      	movs	r0, #4
 8004e30:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e32:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e34:	2001      	movs	r0, #1
 8004e36:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e38:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004e3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004e3e:	4770      	bx	lr
 8004e40:	20000010 	.word	0x20000010
 8004e44:	10624dd3 	.word	0x10624dd3

08004e48 <SDMMC_CmdOperCond>:
{
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e52:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e54:	2308      	movs	r3, #8
 8004e56:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e64:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e66:	a901      	add	r1, sp, #4
 8004e68:	f7ff fccb 	bl	8004802 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7ff ffb9 	bl	8004de4 <SDMMC_GetCmdResp7>
}
 8004e72:	b006      	add	sp, #24
 8004e74:	bd10      	pop	{r4, pc}
	...

08004e78 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <FATFS_LinkDriverEx+0x50>)
 8004e7a:	7a5b      	ldrb	r3, [r3, #9]
 8004e7c:	bb13      	cbnz	r3, 8004ec4 <FATFS_LinkDriverEx+0x4c>
{
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <FATFS_LinkDriverEx+0x50>)
 8004e88:	f893 c009 	ldrb.w	ip, [r3, #9]
 8004e8c:	fa5f fc8c 	uxtb.w	ip, ip
 8004e90:	f04f 0e00 	mov.w	lr, #0
 8004e94:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8004e98:	f893 c009 	ldrb.w	ip, [r3, #9]
 8004e9c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004ea0:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8004ea4:	7a5c      	ldrb	r4, [r3, #9]
 8004ea6:	441c      	add	r4, r3
 8004ea8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8004eaa:	7a5a      	ldrb	r2, [r3, #9]
 8004eac:	1c54      	adds	r4, r2, #1
 8004eae:	b2e4      	uxtb	r4, r4
 8004eb0:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8004eb2:	3230      	adds	r2, #48	; 0x30
 8004eb4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004eb6:	233a      	movs	r3, #58	; 0x3a
 8004eb8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004eba:	232f      	movs	r3, #47	; 0x2f
 8004ebc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004ebe:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8004ec2:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8004ec4:	2001      	movs	r0, #1
}
 8004ec6:	4770      	bx	lr
 8004ec8:	20000208 	.word	0x20000208

08004ecc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004ecc:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f7ff ffd2 	bl	8004e78 <FATFS_LinkDriverEx>
}
 8004ed4:	bd08      	pop	{r3, pc}

08004ed6 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8004ed6:	2884      	cmp	r0, #132	; 0x84
 8004ed8:	d001      	beq.n	8004ede <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8004eda:	3003      	adds	r0, #3
 8004edc:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ede:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8004ee0:	4770      	bx	lr

08004ee2 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee2:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8004ee6:	3800      	subs	r0, #0
 8004ee8:	bf18      	it	ne
 8004eea:	2001      	movne	r0, #1
 8004eec:	4770      	bx	lr

08004eee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004eee:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004ef0:	f000 feb2 	bl	8005c58 <vTaskStartScheduler>
  
  return osOK;
}
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	bd08      	pop	{r3, pc}

08004ef8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8004ef8:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8004efa:	f001 f93f 	bl	800617c <xTaskGetSchedulerState>
 8004efe:	2801      	cmp	r0, #1
 8004f00:	d001      	beq.n	8004f06 <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 8004f02:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 8004f04:	bd08      	pop	{r3, pc}
    return 0;
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7fc      	b.n	8004f04 <osKernelRunning+0xc>

08004f0a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004f0a:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8004f0c:	f7ff ffe9 	bl	8004ee2 <inHandlerMode>
 8004f10:	b110      	cbz	r0, 8004f18 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 8004f12:	f000 feef 	bl	8005cf4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 8004f16:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 8004f18:	f000 fee6 	bl	8005ce8 <xTaskGetTickCount>
 8004f1c:	e7fb      	b.n	8004f16 <osKernelSysTick+0xc>

08004f1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f22:	b087      	sub	sp, #28
 8004f24:	4604      	mov	r4, r0
 8004f26:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f28:	6945      	ldr	r5, [r0, #20]
 8004f2a:	b1bd      	cbz	r5, 8004f5c <osThreadCreate+0x3e>
 8004f2c:	6986      	ldr	r6, [r0, #24]
 8004f2e:	b1ae      	cbz	r6, 8004f5c <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f30:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004f34:	f8d0 9000 	ldr.w	r9, [r0]
 8004f38:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8004f3c:	f7ff ffcb 	bl	8004ed6 <makeFreeRtosPriority>
 8004f40:	9602      	str	r6, [sp, #8]
 8004f42:	9501      	str	r5, [sp, #4]
 8004f44:	9000      	str	r0, [sp, #0]
 8004f46:	463b      	mov	r3, r7
 8004f48:	6922      	ldr	r2, [r4, #16]
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f000 fe13 	bl	8005b78 <xTaskCreateStatic>
 8004f52:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f54:	9805      	ldr	r0, [sp, #20]
}
 8004f56:	b007      	add	sp, #28
 8004f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5c:	6865      	ldr	r5, [r4, #4]
 8004f5e:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f60:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f64:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8004f68:	f7ff ffb5 	bl	8004ed6 <makeFreeRtosPriority>
 8004f6c:	ab05      	add	r3, sp, #20
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	9000      	str	r0, [sp, #0]
 8004f72:	463b      	mov	r3, r7
 8004f74:	fa1f f288 	uxth.w	r2, r8
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fe37 	bl	8005bee <xTaskCreate>
 8004f80:	2801      	cmp	r0, #1
 8004f82:	d0e7      	beq.n	8004f54 <osThreadCreate+0x36>
      return NULL;
 8004f84:	2000      	movs	r0, #0
 8004f86:	e7e6      	b.n	8004f56 <osThreadCreate+0x38>

08004f88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f88:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f8a:	b900      	cbnz	r0, 8004f8e <osDelay+0x6>
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f000 ffbf 	bl	8005f10 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f92:	2000      	movs	r0, #0
 8004f94:	bd08      	pop	{r3, pc}

08004f96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f96:	b500      	push	{lr}
 8004f98:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f9a:	6882      	ldr	r2, [r0, #8]
 8004f9c:	b142      	cbz	r2, 8004fb0 <osMessageCreate+0x1a>
 8004f9e:	68c3      	ldr	r3, [r0, #12]
 8004fa0:	b133      	cbz	r3, 8004fb0 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	9100      	str	r1, [sp, #0]
 8004fa6:	6841      	ldr	r1, [r0, #4]
 8004fa8:	6800      	ldr	r0, [r0, #0]
 8004faa:	f000 f9b5 	bl	8005318 <xQueueGenericCreateStatic>
 8004fae:	e004      	b.n	8004fba <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	6841      	ldr	r1, [r0, #4]
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f000 f9f9 	bl	80053ac <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004fba:	b003      	add	sp, #12
 8004fbc:	f85d fb04 	ldr.w	pc, [sp], #4

08004fc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fc0:	b530      	push	{r4, r5, lr}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8004fcc:	4615      	mov	r5, r2
 8004fce:	b902      	cbnz	r2, 8004fd2 <osMessagePut+0x12>
    ticks = 1;
 8004fd0:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8004fd2:	f7ff ff86 	bl	8004ee2 <inHandlerMode>
 8004fd6:	b1a8      	cbz	r0, 8005004 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004fd8:	2300      	movs	r3, #0
 8004fda:	aa03      	add	r2, sp, #12
 8004fdc:	a901      	add	r1, sp, #4
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 facc 	bl	800557c <xQueueGenericSendFromISR>
 8004fe4:	2801      	cmp	r0, #1
 8004fe6:	d118      	bne.n	800501a <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	b1c3      	cbz	r3, 800501e <osMessagePut+0x5e>
 8004fec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005000:	2000      	movs	r0, #0
 8005002:	e008      	b.n	8005016 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005004:	2300      	movs	r3, #0
 8005006:	462a      	mov	r2, r5
 8005008:	a901      	add	r1, sp, #4
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f9f2 	bl	80053f4 <xQueueGenericSend>
 8005010:	2801      	cmp	r0, #1
 8005012:	d106      	bne.n	8005022 <osMessagePut+0x62>
  return osOK;
 8005014:	2000      	movs	r0, #0
}
 8005016:	b005      	add	sp, #20
 8005018:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 800501a:	20ff      	movs	r0, #255	; 0xff
 800501c:	e7fb      	b.n	8005016 <osMessagePut+0x56>
  return osOK;
 800501e:	2000      	movs	r0, #0
 8005020:	e7f9      	b.n	8005016 <osMessagePut+0x56>
      return osErrorOS;
 8005022:	20ff      	movs	r0, #255	; 0xff
 8005024:	e7f7      	b.n	8005016 <osMessagePut+0x56>

08005026 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005026:	b570      	push	{r4, r5, r6, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800502c:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8005032:	b1e1      	cbz	r1, 800506e <osMessageGet+0x48>
 8005034:	460d      	mov	r5, r1
 8005036:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800503c:	f7ff ff51 	bl	8004ee2 <inHandlerMode>
 8005040:	b300      	cbz	r0, 8005084 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005042:	aa03      	add	r2, sp, #12
 8005044:	a901      	add	r1, sp, #4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 fbae 	bl	80057a8 <xQueueReceiveFromISR>
 800504c:	2801      	cmp	r0, #1
 800504e:	d016      	beq.n	800507e <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	b1fb      	cbz	r3, 8005098 <osMessageGet+0x72>
 8005058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800505c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005060:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e014      	b.n	8005098 <osMessageGet+0x72>
    event.status = osErrorParameter;
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	9300      	str	r3, [sp, #0]
    return event;
 8005072:	466b      	mov	r3, sp
 8005074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800507c:	e011      	b.n	80050a2 <osMessageGet+0x7c>
      event.status = osEventMessage;
 800507e:	2310      	movs	r3, #16
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	e7e7      	b.n	8005054 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005084:	4632      	mov	r2, r6
 8005086:	a901      	add	r1, sp, #4
 8005088:	4628      	mov	r0, r5
 800508a:	f000 fade 	bl	800564a <xQueueReceive>
 800508e:	2801      	cmp	r0, #1
 8005090:	d00a      	beq.n	80050a8 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005092:	b106      	cbz	r6, 8005096 <osMessageGet+0x70>
 8005094:	2640      	movs	r6, #64	; 0x40
 8005096:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8005098:	466b      	mov	r3, sp
 800509a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800509e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050a2:	4620      	mov	r0, r4
 80050a4:	b004      	add	sp, #16
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80050a8:	2310      	movs	r3, #16
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	e7f4      	b.n	8005098 <osMessageGet+0x72>

080050ae <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ae:	f100 0308 	add.w	r3, r0, #8
 80050b2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050b4:	f04f 32ff 	mov.w	r2, #4294967295
 80050b8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ba:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050bc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c2:	4770      	bx	lr

080050c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050c8:	4770      	bx	lr

080050ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80050ca:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050d2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050d4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80050d8:	6803      	ldr	r3, [r0, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	6003      	str	r3, [r0, #0]
}
 80050de:	4770      	bx	lr

080050e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050e0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050e2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050e4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80050e8:	d011      	beq.n	800510e <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050ea:	f100 0308 	add.w	r3, r0, #8
 80050ee:	461c      	mov	r4, r3
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	42aa      	cmp	r2, r5
 80050f6:	d9fa      	bls.n	80050ee <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050fc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050fe:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005100:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005102:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005104:	6803      	ldr	r3, [r0, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	6003      	str	r3, [r0, #0]
}
 800510a:	bc30      	pop	{r4, r5}
 800510c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800510e:	6904      	ldr	r4, [r0, #16]
 8005110:	e7f2      	b.n	80050f8 <vListInsert+0x18>

08005112 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005112:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005114:	6841      	ldr	r1, [r0, #4]
 8005116:	6882      	ldr	r2, [r0, #8]
 8005118:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800511a:	6841      	ldr	r1, [r0, #4]
 800511c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4282      	cmp	r2, r0
 8005122:	d006      	beq.n	8005132 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005124:	2200      	movs	r2, #0
 8005126:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	3a01      	subs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800512e:	6818      	ldr	r0, [r3, #0]
}
 8005130:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005132:	6882      	ldr	r2, [r0, #8]
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	e7f5      	b.n	8005124 <uxListRemove+0x12>

08005138 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005138:	b510      	push	{r4, lr}
 800513a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800513c:	f001 f8f2 	bl	8006324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005140:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005144:	429a      	cmp	r2, r3
 8005146:	d004      	beq.n	8005152 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005148:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800514a:	f001 f90d 	bl	8006368 <vPortExitCritical>

	return xReturn;
}
 800514e:	4620      	mov	r0, r4
 8005150:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005152:	2401      	movs	r4, #1
 8005154:	e7f9      	b.n	800514a <prvIsQueueFull+0x12>

08005156 <prvIsQueueEmpty>:
{
 8005156:	b510      	push	{r4, lr}
 8005158:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800515a:	f001 f8e3 	bl	8006324 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800515e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005160:	b923      	cbnz	r3, 800516c <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8005162:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005164:	f001 f900 	bl	8006368 <vPortExitCritical>
}
 8005168:	4620      	mov	r0, r4
 800516a:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800516c:	2400      	movs	r4, #0
 800516e:	e7f9      	b.n	8005164 <prvIsQueueEmpty+0xe>

08005170 <prvCopyDataToQueue>:
{
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	4604      	mov	r4, r0
 8005174:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005176:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005178:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800517a:	b95a      	cbnz	r2, 8005194 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800517c:	6803      	ldr	r3, [r0, #0]
 800517e:	b11b      	cbz	r3, 8005188 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005180:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005182:	3601      	adds	r6, #1
 8005184:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005186:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005188:	6880      	ldr	r0, [r0, #8]
 800518a:	f001 f807 	bl	800619c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60a3      	str	r3, [r4, #8]
 8005192:	e7f6      	b.n	8005182 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005194:	b96d      	cbnz	r5, 80051b2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005196:	6840      	ldr	r0, [r0, #4]
 8005198:	f002 ff91 	bl	80080be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800519c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a4:	68a2      	ldr	r2, [r4, #8]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d319      	bcc.n	80051de <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80051ae:	4628      	mov	r0, r5
 80051b0:	e7e7      	b.n	8005182 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051b2:	68c0      	ldr	r0, [r0, #12]
 80051b4:	f002 ff83 	bl	80080be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051ba:	4251      	negs	r1, r2
 80051bc:	68e3      	ldr	r3, [r4, #12]
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d202      	bcs.n	80051ce <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051c8:	68a3      	ldr	r3, [r4, #8]
 80051ca:	440b      	add	r3, r1
 80051cc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80051ce:	2d02      	cmp	r5, #2
 80051d0:	d001      	beq.n	80051d6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80051d2:	2000      	movs	r0, #0
 80051d4:	e7d5      	b.n	8005182 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d6:	b126      	cbz	r6, 80051e2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80051d8:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80051da:	2000      	movs	r0, #0
 80051dc:	e7d1      	b.n	8005182 <prvCopyDataToQueue+0x12>
 80051de:	4628      	mov	r0, r5
 80051e0:	e7cf      	b.n	8005182 <prvCopyDataToQueue+0x12>
 80051e2:	2000      	movs	r0, #0
 80051e4:	e7cd      	b.n	8005182 <prvCopyDataToQueue+0x12>

080051e6 <prvCopyDataFromQueue>:
{
 80051e6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80051ea:	b16a      	cbz	r2, 8005208 <prvCopyDataFromQueue+0x22>
{
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	4411      	add	r1, r2
 80051f4:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051f6:	689c      	ldr	r4, [r3, #8]
 80051f8:	42a1      	cmp	r1, r4
 80051fa:	d301      	bcc.n	8005200 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	f002 ff5c 	bl	80080be <memcpy>
}
 8005206:	bd10      	pop	{r4, pc}
 8005208:	4770      	bx	lr

0800520a <prvUnlockQueue>:
{
 800520a:	b538      	push	{r3, r4, r5, lr}
 800520c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800520e:	f001 f889 	bl	8006324 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005212:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005216:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005218:	e001      	b.n	800521e <prvUnlockQueue+0x14>
			--cTxLock;
 800521a:	3c01      	subs	r4, #1
 800521c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800521e:	2c00      	cmp	r4, #0
 8005220:	dd0a      	ble.n	8005238 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005224:	b143      	cbz	r3, 8005238 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005226:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800522a:	f000 ff11 	bl	8006050 <xTaskRemoveFromEventList>
 800522e:	2800      	cmp	r0, #0
 8005230:	d0f3      	beq.n	800521a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8005232:	f000 ff9b 	bl	800616c <vTaskMissedYield>
 8005236:	e7f0      	b.n	800521a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005238:	23ff      	movs	r3, #255	; 0xff
 800523a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800523e:	f001 f893 	bl	8006368 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005242:	f001 f86f 	bl	8006324 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005246:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800524a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800524c:	e001      	b.n	8005252 <prvUnlockQueue+0x48>
				--cRxLock;
 800524e:	3c01      	subs	r4, #1
 8005250:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005252:	2c00      	cmp	r4, #0
 8005254:	dd0a      	ble.n	800526c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005256:	692b      	ldr	r3, [r5, #16]
 8005258:	b143      	cbz	r3, 800526c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800525a:	f105 0010 	add.w	r0, r5, #16
 800525e:	f000 fef7 	bl	8006050 <xTaskRemoveFromEventList>
 8005262:	2800      	cmp	r0, #0
 8005264:	d0f3      	beq.n	800524e <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8005266:	f000 ff81 	bl	800616c <vTaskMissedYield>
 800526a:	e7f0      	b.n	800524e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800526c:	23ff      	movs	r3, #255	; 0xff
 800526e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005272:	f001 f879 	bl	8006368 <vPortExitCritical>
}
 8005276:	bd38      	pop	{r3, r4, r5, pc}

08005278 <xQueueGenericReset>:
{
 8005278:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800527a:	b1e0      	cbz	r0, 80052b6 <xQueueGenericReset+0x3e>
 800527c:	460d      	mov	r5, r1
 800527e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005280:	f001 f850 	bl	8006324 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005288:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800528a:	fb01 3002 	mla	r0, r1, r2, r3
 800528e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005290:	2000      	movs	r0, #0
 8005292:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005294:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005296:	3a01      	subs	r2, #1
 8005298:	fb02 3301 	mla	r3, r2, r1, r3
 800529c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800529e:	23ff      	movs	r3, #255	; 0xff
 80052a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80052a8:	b9fd      	cbnz	r5, 80052ea <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	b963      	cbnz	r3, 80052c8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80052ae:	f001 f85b 	bl	8006368 <vPortExitCritical>
}
 80052b2:	2001      	movs	r0, #1
 80052b4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80052c6:	e7fe      	b.n	80052c6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	f104 0010 	add.w	r0, r4, #16
 80052cc:	f000 fec0 	bl	8006050 <xTaskRemoveFromEventList>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d0ec      	beq.n	80052ae <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80052d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e7e1      	b.n	80052ae <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052ea:	f104 0010 	add.w	r0, r4, #16
 80052ee:	f7ff fede 	bl	80050ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052f6:	f7ff feda 	bl	80050ae <vListInitialise>
 80052fa:	e7d8      	b.n	80052ae <xQueueGenericReset+0x36>

080052fc <prvInitialiseNewQueue>:
{
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4603      	mov	r3, r0
 8005300:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005302:	460c      	mov	r4, r1
 8005304:	b931      	cbnz	r1, 8005314 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005306:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005308:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800530a:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800530c:	2101      	movs	r1, #1
 800530e:	f7ff ffb3 	bl	8005278 <xQueueGenericReset>
}
 8005312:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005314:	6002      	str	r2, [r0, #0]
 8005316:	e7f7      	b.n	8005308 <prvInitialiseNewQueue+0xc>

08005318 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005318:	b940      	cbnz	r0, 800532c <xQueueGenericCreateStatic+0x14>
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	e7fe      	b.n	800532a <xQueueGenericCreateStatic+0x12>
	{
 800532c:	b510      	push	{r4, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	461c      	mov	r4, r3
 8005332:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8005334:	b153      	cbz	r3, 800534c <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005336:	b192      	cbz	r2, 800535e <xQueueGenericCreateStatic+0x46>
 8005338:	b989      	cbnz	r1, 800535e <xQueueGenericCreateStatic+0x46>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	e7fe      	b.n	800534a <xQueueGenericCreateStatic+0x32>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800535c:	e7fe      	b.n	800535c <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800535e:	b16a      	cbz	r2, 800537c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005360:	2348      	movs	r3, #72	; 0x48
 8005362:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	2b48      	cmp	r3, #72	; 0x48
 8005368:	d013      	beq.n	8005392 <xQueueGenericCreateStatic+0x7a>
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	e7fe      	b.n	800537a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800537c:	2900      	cmp	r1, #0
 800537e:	d0ef      	beq.n	8005360 <xQueueGenericCreateStatic+0x48>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	e7fe      	b.n	8005390 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005392:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800539a:	9400      	str	r4, [sp, #0]
 800539c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80053a0:	4660      	mov	r0, ip
 80053a2:	f7ff ffab 	bl	80052fc <prvInitialiseNewQueue>
	}
 80053a6:	4620      	mov	r0, r4
 80053a8:	b004      	add	sp, #16
 80053aa:	bd10      	pop	{r4, pc}

080053ac <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ac:	b940      	cbnz	r0, 80053c0 <xQueueGenericCreate+0x14>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	e7fe      	b.n	80053be <xQueueGenericCreate+0x12>
	{
 80053c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c2:	b083      	sub	sp, #12
 80053c4:	460d      	mov	r5, r1
 80053c6:	4614      	mov	r4, r2
 80053c8:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053ce:	3048      	adds	r0, #72	; 0x48
 80053d0:	f001 f94e 	bl	8006670 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80053d4:	4607      	mov	r7, r0
 80053d6:	b150      	cbz	r0, 80053ee <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053de:	9000      	str	r0, [sp, #0]
 80053e0:	4623      	mov	r3, r4
 80053e2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80053e6:	4629      	mov	r1, r5
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff ff87 	bl	80052fc <prvInitialiseNewQueue>
	}
 80053ee:	4638      	mov	r0, r7
 80053f0:	b003      	add	sp, #12
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053f4 <xQueueGenericSend>:
{
 80053f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f6:	b085      	sub	sp, #20
 80053f8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80053fa:	b188      	cbz	r0, 8005420 <xQueueGenericSend+0x2c>
 80053fc:	460f      	mov	r7, r1
 80053fe:	461d      	mov	r5, r3
 8005400:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005402:	b1b1      	cbz	r1, 8005432 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005404:	2d02      	cmp	r5, #2
 8005406:	d120      	bne.n	800544a <xQueueGenericSend+0x56>
 8005408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d01d      	beq.n	800544a <xQueueGenericSend+0x56>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	e7fe      	b.n	800541e <xQueueGenericSend+0x2a>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005430:	e7fe      	b.n	8005430 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005432:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0e5      	beq.n	8005404 <xQueueGenericSend+0x10>
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800544a:	f000 fe97 	bl	800617c <xTaskGetSchedulerState>
 800544e:	4606      	mov	r6, r0
 8005450:	b958      	cbnz	r0, 800546a <xQueueGenericSend+0x76>
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d048      	beq.n	80054ea <xQueueGenericSend+0xf6>
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	e7fe      	b.n	8005468 <xQueueGenericSend+0x74>
 800546a:	2600      	movs	r6, #0
 800546c:	e03d      	b.n	80054ea <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800546e:	462a      	mov	r2, r5
 8005470:	4639      	mov	r1, r7
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff fe7c 	bl	8005170 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800547a:	b97b      	cbnz	r3, 800549c <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800547c:	b148      	cbz	r0, 8005492 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800547e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005492:	f000 ff69 	bl	8006368 <vPortExitCritical>
				return pdPASS;
 8005496:	2001      	movs	r0, #1
}
 8005498:	b005      	add	sp, #20
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054a0:	f000 fdd6 	bl	8006050 <xTaskRemoveFromEventList>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d0f4      	beq.n	8005492 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80054a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	e7e9      	b.n	8005492 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80054be:	f000 ff53 	bl	8006368 <vPortExitCritical>
					return errQUEUE_FULL;
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7e8      	b.n	8005498 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c6:	a802      	add	r0, sp, #8
 80054c8:	f000 fe04 	bl	80060d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2601      	movs	r6, #1
 80054ce:	e019      	b.n	8005504 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80054d0:	2300      	movs	r3, #0
 80054d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80054d6:	e021      	b.n	800551c <xQueueGenericSend+0x128>
 80054d8:	2300      	movs	r3, #0
 80054da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054de:	e023      	b.n	8005528 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff fe92 	bl	800520a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054e6:	f000 fc9b 	bl	8005e20 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80054ea:	f000 ff1b 	bl	8006324 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3bb      	bcc.n	800546e <xQueueGenericSend+0x7a>
 80054f6:	2d02      	cmp	r5, #2
 80054f8:	d0b9      	beq.n	800546e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0de      	beq.n	80054be <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8005500:	2e00      	cmp	r6, #0
 8005502:	d0e0      	beq.n	80054c6 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8005504:	f000 ff30 	bl	8006368 <vPortExitCritical>
		vTaskSuspendAll();
 8005508:	f000 fbe4 	bl	8005cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800550c:	f000 ff0a 	bl	8006324 <vPortEnterCritical>
 8005510:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005514:	b252      	sxtb	r2, r2
 8005516:	f1b2 3fff 	cmp.w	r2, #4294967295
 800551a:	d0d9      	beq.n	80054d0 <xQueueGenericSend+0xdc>
 800551c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005520:	b252      	sxtb	r2, r2
 8005522:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005526:	d0d7      	beq.n	80054d8 <xQueueGenericSend+0xe4>
 8005528:	f000 ff1e 	bl	8006368 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800552c:	a901      	add	r1, sp, #4
 800552e:	a802      	add	r0, sp, #8
 8005530:	f000 fdda 	bl	80060e8 <xTaskCheckForTimeOut>
 8005534:	b9d8      	cbnz	r0, 800556e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fdfe 	bl	8005138 <prvIsQueueFull>
 800553c:	2800      	cmp	r0, #0
 800553e:	d0cf      	beq.n	80054e0 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	f104 0010 	add.w	r0, r4, #16
 8005546:	f000 fd69 	bl	800601c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fe5d 	bl	800520a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005550:	f000 fc66 	bl	8005e20 <xTaskResumeAll>
 8005554:	2800      	cmp	r0, #0
 8005556:	d1c8      	bne.n	80054ea <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8005558:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800555c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005560:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	e7bd      	b.n	80054ea <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800556e:	4620      	mov	r0, r4
 8005570:	f7ff fe4b 	bl	800520a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005574:	f000 fc54 	bl	8005e20 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005578:	2000      	movs	r0, #0
 800557a:	e78d      	b.n	8005498 <xQueueGenericSend+0xa4>

0800557c <xQueueGenericSendFromISR>:
{
 800557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005580:	b190      	cbz	r0, 80055a8 <xQueueGenericSendFromISR+0x2c>
 8005582:	460f      	mov	r7, r1
 8005584:	4616      	mov	r6, r2
 8005586:	461c      	mov	r4, r3
 8005588:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800558a:	b1b1      	cbz	r1, 80055ba <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800558c:	2c02      	cmp	r4, #2
 800558e:	d120      	bne.n	80055d2 <xQueueGenericSendFromISR+0x56>
 8005590:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d01d      	beq.n	80055d2 <xQueueGenericSendFromISR+0x56>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	e7fe      	b.n	80055a6 <xQueueGenericSendFromISR+0x2a>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0e5      	beq.n	800558c <xQueueGenericSendFromISR+0x10>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055d2:	f000 ffcb 	bl	800656c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055d6:	f3ef 8911 	mrs	r9, BASEPRI
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ea:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80055ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d306      	bcc.n	8005600 <xQueueGenericSendFromISR+0x84>
 80055f2:	2c02      	cmp	r4, #2
 80055f4:	d004      	beq.n	8005600 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80055f6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055f8:	f389 8811 	msr	BASEPRI, r9
}
 80055fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005600:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005604:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005608:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800560a:	4622      	mov	r2, r4
 800560c:	4639      	mov	r1, r7
 800560e:	4628      	mov	r0, r5
 8005610:	f7ff fdae 	bl	8005170 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005614:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005618:	d006      	beq.n	8005628 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800561a:	f108 0301 	add.w	r3, r8, #1
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005624:	2001      	movs	r0, #1
 8005626:	e7e7      	b.n	80055f8 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005628:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800562a:	b90b      	cbnz	r3, 8005630 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800562c:	2001      	movs	r0, #1
 800562e:	e7e3      	b.n	80055f8 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005630:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005634:	f000 fd0c 	bl	8006050 <xTaskRemoveFromEventList>
 8005638:	b118      	cbz	r0, 8005642 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800563a:	b126      	cbz	r6, 8005646 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800563c:	2001      	movs	r0, #1
 800563e:	6030      	str	r0, [r6, #0]
 8005640:	e7da      	b.n	80055f8 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005642:	2001      	movs	r0, #1
 8005644:	e7d8      	b.n	80055f8 <xQueueGenericSendFromISR+0x7c>
 8005646:	2001      	movs	r0, #1
 8005648:	e7d6      	b.n	80055f8 <xQueueGenericSendFromISR+0x7c>

0800564a <xQueueReceive>:
{
 800564a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564c:	b085      	sub	sp, #20
 800564e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005650:	b190      	cbz	r0, 8005678 <xQueueReceive+0x2e>
 8005652:	460f      	mov	r7, r1
 8005654:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005656:	b1c1      	cbz	r1, 800568a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005658:	f000 fd90 	bl	800617c <xTaskGetSchedulerState>
 800565c:	4606      	mov	r6, r0
 800565e:	bb00      	cbnz	r0, 80056a2 <xQueueReceive+0x58>
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d05e      	beq.n	8005724 <xQueueReceive+0xda>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	e7fe      	b.n	8005676 <xQueueReceive+0x2c>
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005688:	e7fe      	b.n	8005688 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e3      	beq.n	8005658 <xQueueReceive+0xe>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	e7fe      	b.n	80056a0 <xQueueReceive+0x56>
 80056a2:	2600      	movs	r6, #0
 80056a4:	e03e      	b.n	8005724 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056a6:	4639      	mov	r1, r7
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fd9c 	bl	80051e6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056ae:	3d01      	subs	r5, #1
 80056b0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	b923      	cbnz	r3, 80056c0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80056b6:	f000 fe57 	bl	8006368 <vPortExitCritical>
				return pdPASS;
 80056ba:	2001      	movs	r0, #1
}
 80056bc:	b005      	add	sp, #20
 80056be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c0:	f104 0010 	add.w	r0, r4, #16
 80056c4:	f000 fcc4 	bl	8006050 <xTaskRemoveFromEventList>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d0f4      	beq.n	80056b6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80056cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	e7e9      	b.n	80056b6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80056e2:	f000 fe41 	bl	8006368 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80056e6:	2000      	movs	r0, #0
 80056e8:	e7e8      	b.n	80056bc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ea:	a802      	add	r0, sp, #8
 80056ec:	f000 fcf2 	bl	80060d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056f0:	2601      	movs	r6, #1
 80056f2:	e021      	b.n	8005738 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80056f4:	2300      	movs	r3, #0
 80056f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80056fa:	e029      	b.n	8005750 <xQueueReceive+0x106>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005702:	e02b      	b.n	800575c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8005704:	4620      	mov	r0, r4
 8005706:	f7ff fd80 	bl	800520a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800570a:	f000 fb89 	bl	8005e20 <xTaskResumeAll>
 800570e:	e009      	b.n	8005724 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff fd7a 	bl	800520a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005716:	f000 fb83 	bl	8005e20 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fd1b 	bl	8005156 <prvIsQueueEmpty>
 8005720:	2800      	cmp	r0, #0
 8005722:	d13f      	bne.n	80057a4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8005724:	f000 fdfe 	bl	8006324 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005728:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800572a:	2d00      	cmp	r5, #0
 800572c:	d1bb      	bne.n	80056a6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0d6      	beq.n	80056e2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8005734:	2e00      	cmp	r6, #0
 8005736:	d0d8      	beq.n	80056ea <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8005738:	f000 fe16 	bl	8006368 <vPortExitCritical>
		vTaskSuspendAll();
 800573c:	f000 faca 	bl	8005cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005740:	f000 fdf0 	bl	8006324 <vPortEnterCritical>
 8005744:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005748:	b25b      	sxtb	r3, r3
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d0d1      	beq.n	80056f4 <xQueueReceive+0xaa>
 8005750:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005754:	b25b      	sxtb	r3, r3
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d0cf      	beq.n	80056fc <xQueueReceive+0xb2>
 800575c:	f000 fe04 	bl	8006368 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005760:	a901      	add	r1, sp, #4
 8005762:	a802      	add	r0, sp, #8
 8005764:	f000 fcc0 	bl	80060e8 <xTaskCheckForTimeOut>
 8005768:	2800      	cmp	r0, #0
 800576a:	d1d1      	bne.n	8005710 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800576c:	4620      	mov	r0, r4
 800576e:	f7ff fcf2 	bl	8005156 <prvIsQueueEmpty>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0c6      	beq.n	8005704 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005776:	9901      	ldr	r1, [sp, #4]
 8005778:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800577c:	f000 fc4e 	bl	800601c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff fd42 	bl	800520a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005786:	f000 fb4b 	bl	8005e20 <xTaskResumeAll>
 800578a:	2800      	cmp	r0, #0
 800578c:	d1ca      	bne.n	8005724 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800578e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	e7bf      	b.n	8005724 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80057a4:	2000      	movs	r0, #0
 80057a6:	e789      	b.n	80056bc <xQueueReceive+0x72>

080057a8 <xQueueReceiveFromISR>:
{
 80057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80057ac:	b1b0      	cbz	r0, 80057dc <xQueueReceiveFromISR+0x34>
 80057ae:	460d      	mov	r5, r1
 80057b0:	4616      	mov	r6, r2
 80057b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b4:	b1d9      	cbz	r1, 80057ee <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057b6:	f000 fed9 	bl	800656c <vPortValidateInterruptPriority>
	__asm volatile
 80057ba:	f3ef 8811 	mrs	r8, BASEPRI
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ce:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d0:	b9cf      	cbnz	r7, 8005806 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80057d2:	2000      	movs	r0, #0
	__asm volatile
 80057d4:	f388 8811 	msr	BASEPRI, r8
}
 80057d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80057ec:	e7fe      	b.n	80057ec <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0e0      	beq.n	80057b6 <xQueueReceiveFromISR+0xe>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	e7fe      	b.n	8005804 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005806:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800580a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800580e:	4629      	mov	r1, r5
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff fce8 	bl	80051e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005816:	3f01      	subs	r7, #1
 8005818:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800581a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800581e:	d006      	beq.n	800582e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005820:	f109 0301 	add.w	r3, r9, #1
 8005824:	b25b      	sxtb	r3, r3
 8005826:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800582a:	2001      	movs	r0, #1
 800582c:	e7d2      	b.n	80057d4 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	b90b      	cbnz	r3, 8005836 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8005832:	2001      	movs	r0, #1
 8005834:	e7ce      	b.n	80057d4 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005836:	f104 0010 	add.w	r0, r4, #16
 800583a:	f000 fc09 	bl	8006050 <xTaskRemoveFromEventList>
 800583e:	b118      	cbz	r0, 8005848 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8005840:	b126      	cbz	r6, 800584c <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005842:	2001      	movs	r0, #1
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	e7c5      	b.n	80057d4 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8005848:	2001      	movs	r0, #1
 800584a:	e7c3      	b.n	80057d4 <xQueueReceiveFromISR+0x2c>
 800584c:	2001      	movs	r0, #1
 800584e:	e7c1      	b.n	80057d4 <xQueueReceiveFromISR+0x2c>

08005850 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <prvResetNextTaskUnblockTime+0x20>)
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	b923      	cbnz	r3, 8005862 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <prvResetNextTaskUnblockTime+0x20>)
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005860:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005862:	4b03      	ldr	r3, [pc, #12]	; (8005870 <prvResetNextTaskUnblockTime+0x20>)
 8005864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005866:	68d2      	ldr	r2, [r2, #12]
 8005868:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800586e:	4770      	bx	lr
 8005870:	20000214 	.word	0x20000214

08005874 <prvInitialiseNewTask>:
{
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	4607      	mov	r7, r0
 800587a:	4698      	mov	r8, r3
 800587c:	9d08      	ldr	r5, [sp, #32]
 800587e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005882:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005884:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8005886:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800588a:	3a01      	subs	r2, #1
 800588c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005890:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005894:	2900      	cmp	r1, #0
 8005896:	d048      	beq.n	800592a <prvInitialiseNewTask+0xb6>
 8005898:	468e      	mov	lr, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589a:	f04f 0c00 	mov.w	ip, #0
 800589e:	f1bc 0f0f 	cmp.w	ip, #15
 80058a2:	d80b      	bhi.n	80058bc <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a4:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80058a8:	eb04 030c 	add.w	r3, r4, ip
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80058b0:	f81e 300c 	ldrb.w	r3, [lr, ip]
 80058b4:	b113      	cbz	r3, 80058bc <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b6:	f10c 0c01 	add.w	ip, ip, #1
 80058ba:	e7f0      	b.n	800589e <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058bc:	2300      	movs	r3, #0
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058c2:	2d06      	cmp	r5, #6
 80058c4:	d900      	bls.n	80058c8 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058c6:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80058c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80058ca:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058cc:	f04f 0a00 	mov.w	sl, #0
 80058d0:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058d4:	1d20      	adds	r0, r4, #4
 80058d6:	f7ff fbf5 	bl	80050c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058da:	f104 0018 	add.w	r0, r4, #24
 80058de:	f7ff fbf1 	bl	80050c4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058e2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	f1c5 0507 	rsb	r5, r5, #7
 80058e8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058ea:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80058ec:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80058f0:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058f4:	f884 a0b4 	strb.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058f8:	2260      	movs	r2, #96	; 0x60
 80058fa:	4651      	mov	r1, sl
 80058fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005900:	f002 fbeb 	bl	80080da <memset>
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <prvInitialiseNewTask+0xc0>)
 8005906:	6563      	str	r3, [r4, #84]	; 0x54
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <prvInitialiseNewTask+0xc4>)
 800590a:	65a3      	str	r3, [r4, #88]	; 0x58
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvInitialiseNewTask+0xc8>)
 800590e:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005910:	4642      	mov	r2, r8
 8005912:	4639      	mov	r1, r7
 8005914:	4630      	mov	r0, r6
 8005916:	f000 fcdb 	bl	80062d0 <pxPortInitialiseStack>
 800591a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800591c:	f1b9 0f00 	cmp.w	r9, #0
 8005920:	d001      	beq.n	8005926 <prvInitialiseNewTask+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005922:	f8c9 4000 	str.w	r4, [r9]
}
 8005926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800592a:	2300      	movs	r3, #0
 800592c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005930:	e7c7      	b.n	80058c2 <prvInitialiseNewTask+0x4e>
 8005932:	bf00      	nop
 8005934:	0800c17c 	.word	0x0800c17c
 8005938:	0800c19c 	.word	0x0800c19c
 800593c:	0800c15c 	.word	0x0800c15c

08005940 <prvInitialiseTaskLists>:
{
 8005940:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005942:	2400      	movs	r4, #0
 8005944:	e007      	b.n	8005956 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005946:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800594a:	0093      	lsls	r3, r2, #2
 800594c:	4810      	ldr	r0, [pc, #64]	; (8005990 <prvInitialiseTaskLists+0x50>)
 800594e:	4418      	add	r0, r3
 8005950:	f7ff fbad 	bl	80050ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005954:	3401      	adds	r4, #1
 8005956:	2c06      	cmp	r4, #6
 8005958:	d9f5      	bls.n	8005946 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800595a:	4c0e      	ldr	r4, [pc, #56]	; (8005994 <prvInitialiseTaskLists+0x54>)
 800595c:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8005960:	4630      	mov	r0, r6
 8005962:	f7ff fba4 	bl	80050ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005966:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 800596a:	4628      	mov	r0, r5
 800596c:	f7ff fb9f 	bl	80050ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005970:	f104 0014 	add.w	r0, r4, #20
 8005974:	f7ff fb9b 	bl	80050ae <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005978:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800597c:	f7ff fb97 	bl	80050ae <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff fb94 	bl	80050ae <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005986:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005988:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	bf00      	nop
 8005990:	20000244 	.word	0x20000244
 8005994:	20000214 	.word	0x20000214

08005998 <prvAddNewTaskToReadyList>:
{
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800599c:	f000 fcc2 	bl	8006324 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059a2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80059a6:	3201      	adds	r2, #1
 80059a8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 80059ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059b0:	b173      	cbz	r3, 80059d0 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80059b8:	b98b      	cbnz	r3, 80059de <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d80a      	bhi.n	80059de <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059ca:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 80059ce:	e006      	b.n	80059de <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059d2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d02c      	beq.n	8005a38 <prvAddNewTaskToReadyList+0xa0>
		uxTaskNumber++;
 80059de:	4c18      	ldr	r4, [pc, #96]	; (8005a40 <prvAddNewTaskToReadyList+0xa8>)
 80059e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059e4:	3301      	adds	r3, #1
 80059e6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 80059ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80059ec:	2201      	movs	r2, #1
 80059ee:	409a      	lsls	r2, r3
 80059f0:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80059f4:	430a      	orrs	r2, r1
 80059f6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 80059fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80059fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a02:	1d29      	adds	r1, r5, #4
 8005a04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005a08:	f7ff fb5f 	bl	80050ca <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005a0c:	f000 fcac 	bl	8006368 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005a10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005a14:	b17b      	cbz	r3, 8005a36 <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a16:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d209      	bcs.n	8005a36 <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 8005a22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
}
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8005a38:	f7ff ff82 	bl	8005940 <prvInitialiseTaskLists>
 8005a3c:	e7cf      	b.n	80059de <prvAddNewTaskToReadyList+0x46>
 8005a3e:	bf00      	nop
 8005a40:	20000214 	.word	0x20000214

08005a44 <prvDeleteTCB>:
	{
 8005a44:	b510      	push	{r4, lr}
 8005a46:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a48:	3050      	adds	r0, #80	; 0x50
 8005a4a:	f003 f85b 	bl	8008b04 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a4e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8005a52:	b163      	cbz	r3, 8005a6e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d011      	beq.n	8005a7c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d00e      	beq.n	8005a7a <prvDeleteTCB+0x36>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	e7fe      	b.n	8005a6c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005a6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005a70:	f000 fe70 	bl	8006754 <vPortFree>
				vPortFree( pxTCB );
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fe6d 	bl	8006754 <vPortFree>
	}
 8005a7a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fe69 	bl	8006754 <vPortFree>
 8005a82:	e7fa      	b.n	8005a7a <prvDeleteTCB+0x36>

08005a84 <prvCheckTasksWaitingTermination>:
{
 8005a84:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a86:	e017      	b.n	8005ab8 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8005a88:	f000 fc4c 	bl	8006324 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8c:	4c0d      	ldr	r4, [pc, #52]	; (8005ac4 <prvCheckTasksWaitingTermination+0x40>)
 8005a8e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8005a92:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a94:	1d28      	adds	r0, r5, #4
 8005a96:	f7ff fb3c 	bl	8005112 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a9a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 8005aa4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 8005aae:	f000 fc5b 	bl	8006368 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7ff ffc6 	bl	8005a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ab8:	4b02      	ldr	r3, [pc, #8]	; (8005ac4 <prvCheckTasksWaitingTermination+0x40>)
 8005aba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e2      	bne.n	8005a88 <prvCheckTasksWaitingTermination+0x4>
}
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000214 	.word	0x20000214

08005ac8 <prvIdleTask>:
{
 8005ac8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005aca:	f7ff ffdb 	bl	8005a84 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <prvIdleTask+0x24>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d9f9      	bls.n	8005aca <prvIdleTask+0x2>
				taskYIELD();
 8005ad6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	e7ee      	b.n	8005aca <prvIdleTask+0x2>
 8005aec:	20000214 	.word	0x20000214

08005af0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005af6:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005af8:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005afc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8005b00:	3004      	adds	r0, #4
 8005b02:	f7ff fb06 	bl	8005112 <uxListRemove>
 8005b06:	b960      	cbnz	r0, 8005b22 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005b0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005b0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b10:	2201      	movs	r2, #1
 8005b12:	fa02 f101 	lsl.w	r1, r2, r1
 8005b16:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005b1a:	ea22 0201 	bic.w	r2, r2, r1
 8005b1e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b22:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b26:	d00f      	beq.n	8005b48 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b28:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005b2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005b30:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d911      	bls.n	8005b5a <prvAddCurrentTaskToDelayedList+0x6a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b36:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005b38:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8005b3c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8005b40:	3104      	adds	r1, #4
 8005b42:	f7ff facd 	bl	80050e0 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	d0ed      	beq.n	8005b28 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4c:	4809      	ldr	r0, [pc, #36]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005b4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b52:	3104      	adds	r1, #4
 8005b54:	f7ff fab9 	bl	80050ca <vListInsertEnd>
 8005b58:	e7f5      	b.n	8005b46 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5a:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <prvAddCurrentTaskToDelayedList+0x84>)
 8005b5c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005b5e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b62:	3104      	adds	r1, #4
 8005b64:	f7ff fabc 	bl	80050e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d9eb      	bls.n	8005b46 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8005b6e:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8005b70:	e7e9      	b.n	8005b46 <prvAddCurrentTaskToDelayedList+0x56>
 8005b72:	bf00      	nop
 8005b74:	20000214 	.word	0x20000214

08005b78 <xTaskCreateStatic>:
	{
 8005b78:	b530      	push	{r4, r5, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005b7e:	b17c      	cbz	r4, 8005ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b82:	b1b5      	cbz	r5, 8005bb2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b84:	25b8      	movs	r5, #184	; 0xb8
 8005b86:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b88:	9d04      	ldr	r5, [sp, #16]
 8005b8a:	2db8      	cmp	r5, #184	; 0xb8
 8005b8c:	d01a      	beq.n	8005bc4 <xTaskCreateStatic+0x4c>
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	e7fe      	b.n	8005b9e <xTaskCreateStatic+0x26>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005bb0:	e7fe      	b.n	8005bb0 <xTaskCreateStatic+0x38>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bc4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc8:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bca:	2402      	movs	r4, #2
 8005bcc:	f885 40b5 	strb.w	r4, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	9403      	str	r4, [sp, #12]
 8005bd4:	9502      	str	r5, [sp, #8]
 8005bd6:	ac05      	add	r4, sp, #20
 8005bd8:	9401      	str	r4, [sp, #4]
 8005bda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bdc:	9400      	str	r4, [sp, #0]
 8005bde:	f7ff fe49 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005be4:	f7ff fed8 	bl	8005998 <prvAddNewTaskToReadyList>
	}
 8005be8:	9805      	ldr	r0, [sp, #20]
 8005bea:	b007      	add	sp, #28
 8005bec:	bd30      	pop	{r4, r5, pc}

08005bee <xTaskCreate>:
	{
 8005bee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	4688      	mov	r8, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bfc:	0090      	lsls	r0, r2, #2
 8005bfe:	f000 fd37 	bl	8006670 <pvPortMalloc>
			if( pxStack != NULL )
 8005c02:	b300      	cbz	r0, 8005c46 <xTaskCreate+0x58>
 8005c04:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c06:	20b8      	movs	r0, #184	; 0xb8
 8005c08:	f000 fd32 	bl	8006670 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	b1b0      	cbz	r0, 8005c3e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005c10:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005c14:	b1e5      	cbz	r5, 8005c50 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	9502      	str	r5, [sp, #8]
 8005c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	4633      	mov	r3, r6
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff fe20 	bl	8005874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c34:	4628      	mov	r0, r5
 8005c36:	f7ff feaf 	bl	8005998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e005      	b.n	8005c4a <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8005c3e:	4648      	mov	r0, r9
 8005c40:	f000 fd88 	bl	8006754 <vPortFree>
 8005c44:	e7e6      	b.n	8005c14 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c46:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005c4a:	b005      	add	sp, #20
 8005c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005c54:	e7f9      	b.n	8005c4a <xTaskCreate+0x5c>
	...

08005c58 <vTaskStartScheduler>:
{
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c5c:	2400      	movs	r4, #0
 8005c5e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c60:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c62:	aa07      	add	r2, sp, #28
 8005c64:	a906      	add	r1, sp, #24
 8005c66:	a805      	add	r0, sp, #20
 8005c68:	f001 f858 	bl	8006d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c6c:	9b05      	ldr	r3, [sp, #20]
 8005c6e:	9302      	str	r3, [sp, #8]
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	9400      	str	r4, [sp, #0]
 8005c76:	4623      	mov	r3, r4
 8005c78:	9a07      	ldr	r2, [sp, #28]
 8005c7a:	4912      	ldr	r1, [pc, #72]	; (8005cc4 <vTaskStartScheduler+0x6c>)
 8005c7c:	4812      	ldr	r0, [pc, #72]	; (8005cc8 <vTaskStartScheduler+0x70>)
 8005c7e:	f7ff ff7b 	bl	8005b78 <xTaskCreateStatic>
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <vTaskStartScheduler+0x74>)
 8005c84:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
		if( xIdleTaskHandle != NULL )
 8005c88:	b1c8      	cbz	r0, 8005cbe <vTaskStartScheduler+0x66>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <vTaskStartScheduler+0x74>)
 8005c9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005ca0:	3250      	adds	r2, #80	; 0x50
 8005ca2:	490b      	ldr	r1, [pc, #44]	; (8005cd0 <vTaskStartScheduler+0x78>)
 8005ca4:	600a      	str	r2, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8005cac:	2201      	movs	r2, #1
 8005cae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cb2:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005cb6:	f001 f82e 	bl	8006d16 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8005cba:	f000 fbcd 	bl	8006458 <xPortStartScheduler>
}
 8005cbe:	b008      	add	sp, #32
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	bf00      	nop
 8005cc4:	0800c114 	.word	0x0800c114
 8005cc8:	08005ac9 	.word	0x08005ac9
 8005ccc:	20000214 	.word	0x20000214
 8005cd0:	20000014 	.word	0x20000014

08005cd4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005cd4:	4a03      	ldr	r2, [pc, #12]	; (8005ce4 <vTaskSuspendAll+0x10>)
 8005cd6:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000214 	.word	0x20000214

08005ce8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005ce8:	4b01      	ldr	r3, [pc, #4]	; (8005cf0 <xTaskGetTickCount+0x8>)
 8005cea:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 8005cee:	4770      	bx	lr
 8005cf0:	20000214 	.word	0x20000214

08005cf4 <xTaskGetTickCountFromISR>:
{
 8005cf4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf6:	f000 fc39 	bl	800656c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005cfa:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <xTaskGetTickCountFromISR+0x10>)
 8005cfc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 8005d00:	bd08      	pop	{r3, pc}
 8005d02:	bf00      	nop
 8005d04:	20000214 	.word	0x20000214

08005d08 <xTaskIncrementTick>:
{
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0c:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d0e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d176      	bne.n	8005e04 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d18:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
 8005d1c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005d1e:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d22:	b9ce      	cbnz	r6, 8005d58 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	b143      	cbz	r3, 8005d3c <xTaskIncrementTick+0x34>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	e7fe      	b.n	8005d3a <xTaskIncrementTick+0x32>
 8005d3c:	4b37      	ldr	r3, [pc, #220]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d40:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8005d44:	6299      	str	r1, [r3, #40]	; 0x28
 8005d46:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8005d4a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8005d4e:	3201      	adds	r2, #1
 8005d50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8005d54:	f7ff fd7c 	bl	8005850 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d58:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	42b3      	cmp	r3, r6
 8005d5e:	d946      	bls.n	8005dee <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
 8005d60:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d64:	4a2d      	ldr	r2, [pc, #180]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d66:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d70:	0099      	lsls	r1, r3, #2
 8005d72:	440a      	add	r2, r1
 8005d74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d901      	bls.n	8005d7e <xTaskIncrementTick+0x76>
				xSwitchRequired = pdTRUE;
 8005d7a:	f04f 0801 	mov.w	r8, #1
			if( xYieldPending != pdFALSE )
 8005d7e:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d80:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d045      	beq.n	8005e14 <xTaskIncrementTick+0x10c>
				xSwitchRequired = pdTRUE;
 8005d88:	f04f 0801 	mov.w	r8, #1
	return xSwitchRequired;
 8005d8c:	e042      	b.n	8005e14 <xTaskIncrementTick+0x10c>
							xSwitchRequired = pdTRUE;
 8005d8e:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d92:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b363      	cbz	r3, 8005df4 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005da2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005da4:	429e      	cmp	r6, r3
 8005da6:	d32a      	bcc.n	8005dfe <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da8:	1d27      	adds	r7, r4, #4
 8005daa:	4638      	mov	r0, r7
 8005dac:	f7ff f9b1 	bl	8005112 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005db2:	b11b      	cbz	r3, 8005dbc <xTaskIncrementTick+0xb4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db4:	f104 0018 	add.w	r0, r4, #24
 8005db8:	f7ff f9ab 	bl	8005112 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	4d16      	ldr	r5, [pc, #88]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005dc4:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8005dce:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8005dd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dd6:	009a      	lsls	r2, r3, #2
 8005dd8:	4639      	mov	r1, r7
 8005dda:	4410      	add	r0, r2
 8005ddc:	f7ff f975 	bl	80050ca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005de2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d2d0      	bcs.n	8005d8e <xTaskIncrementTick+0x86>
 8005dec:	e7d1      	b.n	8005d92 <xTaskIncrementTick+0x8a>
BaseType_t xSwitchRequired = pdFALSE;
 8005dee:	f04f 0800 	mov.w	r8, #0
 8005df2:	e7ce      	b.n	8005d92 <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8005dfc:	e7b2      	b.n	8005d64 <xTaskIncrementTick+0x5c>
						xNextTaskUnblockTime = xItemValue;
 8005dfe:	4a07      	ldr	r2, [pc, #28]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005e00:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e02:	e7af      	b.n	8005d64 <xTaskIncrementTick+0x5c>
		++xPendedTicks;
 8005e04:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <xTaskIncrementTick+0x114>)
 8005e06:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
BaseType_t xSwitchRequired = pdFALSE;
 8005e10:	f04f 0800 	mov.w	r8, #0
}
 8005e14:	4640      	mov	r0, r8
 8005e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000214 	.word	0x20000214

08005e20 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005e20:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <xTaskResumeAll+0xec>)
 8005e22:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005e26:	b943      	cbnz	r3, 8005e3a <xTaskResumeAll+0x1a>
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	e7fe      	b.n	8005e38 <xTaskResumeAll+0x18>
{
 8005e3a:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8005e3c:	f000 fa72 	bl	8006324 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <xTaskResumeAll+0xec>)
 8005e42:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005e46:	3a01      	subs	r2, #1
 8005e48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d156      	bne.n	8005f02 <xTaskResumeAll+0xe2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <xTaskResumeAll+0xec>)
 8005e56:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e5a:	b90b      	cbnz	r3, 8005e60 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8005e5c:	2400      	movs	r4, #0
 8005e5e:	e051      	b.n	8005f04 <xTaskResumeAll+0xe4>
TCB_t *pxTCB = NULL;
 8005e60:	2500      	movs	r5, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <xTaskResumeAll+0xec>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	b32b      	cbz	r3, 8005eb4 <xTaskResumeAll+0x94>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e68:	4c28      	ldr	r4, [pc, #160]	; (8005f0c <xTaskResumeAll+0xec>)
 8005e6a:	6a23      	ldr	r3, [r4, #32]
 8005e6c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e6e:	f105 0018 	add.w	r0, r5, #24
 8005e72:	f7ff f94e 	bl	8005112 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e76:	1d2e      	adds	r6, r5, #4
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff f94a 	bl	8005112 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005e80:	2201      	movs	r2, #1
 8005e82:	409a      	lsls	r2, r3
 8005e84:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8005e8e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e96:	4631      	mov	r1, r6
 8005e98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005e9c:	f7ff f915 	bl	80050ca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005ea2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3da      	bcc.n	8005e62 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005eb2:	e7d6      	b.n	8005e62 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8005eb4:	b10d      	cbz	r5, 8005eba <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8005eb6:	f7ff fccb 	bl	8005850 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <xTaskResumeAll+0xec>)
 8005ebc:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
					if( xPendedCounts > ( TickType_t ) 0U )
 8005ec0:	b98c      	cbnz	r4, 8005ee6 <xTaskResumeAll+0xc6>
				if( xYieldPending != pdFALSE )
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <xTaskResumeAll+0xec>)
 8005ec4:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8005ec8:	b1e4      	cbz	r4, 8005f04 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 8005eca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005ede:	2401      	movs	r4, #1
 8005ee0:	e010      	b.n	8005f04 <xTaskResumeAll+0xe4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ee2:	3c01      	subs	r4, #1
 8005ee4:	d008      	beq.n	8005ef8 <xTaskResumeAll+0xd8>
							if( xTaskIncrementTick() != pdFALSE )
 8005ee6:	f7ff ff0f 	bl	8005d08 <xTaskIncrementTick>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d0f9      	beq.n	8005ee2 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <xTaskResumeAll+0xec>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8005ef6:	e7f4      	b.n	8005ee2 <xTaskResumeAll+0xc2>
						xPendedTicks = 0;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <xTaskResumeAll+0xec>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8005f00:	e7df      	b.n	8005ec2 <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 8005f02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005f04:	f000 fa30 	bl	8006368 <vPortExitCritical>
}
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
 8005f0c:	20000214 	.word	0x20000214

08005f10 <vTaskDelay>:
	{
 8005f10:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f12:	b1b0      	cbz	r0, 8005f42 <vTaskDelay+0x32>
 8005f14:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005f16:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <vTaskDelay+0x48>)
 8005f18:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005f1c:	b143      	cbz	r3, 8005f30 <vTaskDelay+0x20>
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	e7fe      	b.n	8005f2e <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8005f30:	f7ff fed0 	bl	8005cd4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f34:	2100      	movs	r1, #0
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff fdda 	bl	8005af0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005f3c:	f7ff ff70 	bl	8005e20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005f40:	b948      	cbnz	r0, 8005f56 <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 8005f42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
	}
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	20000214 	.word	0x20000214

08005f5c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005f5e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005f62:	b123      	cbz	r3, 8005f6e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8005f64:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8005f6c:	4770      	bx	lr
{
 8005f6e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8005f70:	4c28      	ldr	r4, [pc, #160]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005f78:	f000 fece 	bl	8006d18 <getRunTimeCounterValue>
 8005f7c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005f80:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8005f84:	4298      	cmp	r0, r3
 8005f86:	d905      	bls.n	8005f94 <vTaskSwitchContext+0x38>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005f88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f8c:	1ac3      	subs	r3, r0, r3
 8005f8e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005f90:	4413      	add	r3, r2
 8005f92:	64cb      	str	r3, [r1, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005f96:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f9a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f1c3 031f 	rsb	r3, r3, #31
 8005fa8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005fac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005fb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fb2:	b942      	cbnz	r2, 8005fc6 <vTaskSwitchContext+0x6a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	e7fe      	b.n	8005fc4 <vTaskSwitchContext+0x68>
 8005fc6:	4a13      	ldr	r2, [pc, #76]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005fc8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005fcc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005fd0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005fd2:	6840      	ldr	r0, [r0, #4]
 8005fd4:	6348      	str	r0, [r1, #52]	; 0x34
 8005fd6:	3230      	adds	r2, #48	; 0x30
 8005fd8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005fdc:	0089      	lsls	r1, r1, #2
 8005fde:	3108      	adds	r1, #8
 8005fe0:	440a      	add	r2, r1
 8005fe2:	4290      	cmp	r0, r2
 8005fe4:	d00e      	beq.n	8006004 <vTaskSwitchContext+0xa8>
 8005fe6:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005fe8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ff8:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8005ffc:	3350      	adds	r3, #80	; 0x50
 8005ffe:	4a06      	ldr	r2, [pc, #24]	; (8006018 <vTaskSwitchContext+0xbc>)
 8006000:	6013      	str	r3, [r2, #0]
}
 8006002:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	6840      	ldr	r0, [r0, #4]
 8006006:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800600a:	4a02      	ldr	r2, [pc, #8]	; (8006014 <vTaskSwitchContext+0xb8>)
 800600c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006010:	6350      	str	r0, [r2, #52]	; 0x34
 8006012:	e7e8      	b.n	8005fe6 <vTaskSwitchContext+0x8a>
 8006014:	20000214 	.word	0x20000214
 8006018:	20000014 	.word	0x20000014

0800601c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800601c:	b160      	cbz	r0, 8006038 <vTaskPlaceOnEventList+0x1c>
{
 800601e:	b510      	push	{r4, lr}
 8006020:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <vTaskPlaceOnEventList+0x30>)
 8006024:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8006028:	3118      	adds	r1, #24
 800602a:	f7ff f859 	bl	80050e0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800602e:	2101      	movs	r1, #1
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff fd5d 	bl	8005af0 <prvAddCurrentTaskToDelayedList>
}
 8006036:	bd10      	pop	{r4, pc}
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006048:	e7fe      	b.n	8006048 <vTaskPlaceOnEventList+0x2c>
 800604a:	bf00      	nop
 800604c:	20000214 	.word	0x20000214

08006050 <xTaskRemoveFromEventList>:
{
 8006050:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006052:	68c3      	ldr	r3, [r0, #12]
 8006054:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006056:	b34c      	cbz	r4, 80060ac <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006058:	f104 0518 	add.w	r5, r4, #24
 800605c:	4628      	mov	r0, r5
 800605e:	f7ff f858 	bl	8005112 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <xTaskRemoveFromEventList+0x7c>)
 8006064:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006068:	bb4b      	cbnz	r3, 80060be <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800606a:	1d25      	adds	r5, r4, #4
 800606c:	4628      	mov	r0, r5
 800606e:	f7ff f850 	bl	8005112 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006072:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006074:	2201      	movs	r2, #1
 8006076:	4082      	lsls	r2, r0
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <xTaskRemoveFromEventList+0x7c>)
 800607a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800607e:	430a      	orrs	r2, r1
 8006080:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8006084:	3330      	adds	r3, #48	; 0x30
 8006086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800608a:	4629      	mov	r1, r5
 800608c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006090:	f7ff f81b 	bl	80050ca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006094:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006096:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <xTaskRemoveFromEventList+0x7c>)
 8006098:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d912      	bls.n	80060c8 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 80060a2:	2001      	movs	r0, #1
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <xTaskRemoveFromEventList+0x7c>)
 80060a6:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80060bc:	e7fe      	b.n	80060bc <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060be:	4629      	mov	r1, r5
 80060c0:	4803      	ldr	r0, [pc, #12]	; (80060d0 <xTaskRemoveFromEventList+0x80>)
 80060c2:	f7ff f802 	bl	80050ca <vListInsertEnd>
 80060c6:	e7e5      	b.n	8006094 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 80060c8:	2000      	movs	r0, #0
	return xReturn;
 80060ca:	e7ee      	b.n	80060aa <xTaskRemoveFromEventList+0x5a>
 80060cc:	20000214 	.word	0x20000214
 80060d0:	20000228 	.word	0x20000228

080060d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <vTaskInternalSetTimeOutState+0x10>)
 80060d6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80060da:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80060e0:	6043      	str	r3, [r0, #4]
}
 80060e2:	4770      	bx	lr
 80060e4:	20000214 	.word	0x20000214

080060e8 <xTaskCheckForTimeOut>:
{
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80060ea:	b1d8      	cbz	r0, 8006124 <xTaskCheckForTimeOut+0x3c>
 80060ec:	460c      	mov	r4, r1
 80060ee:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80060f0:	b309      	cbz	r1, 8006136 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 80060f2:	f000 f917 	bl	8006324 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80060f6:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <xTaskCheckForTimeOut+0x80>)
 80060f8:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060fc:	686b      	ldr	r3, [r5, #4]
 80060fe:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006106:	d027      	beq.n	8006158 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006108:	4e17      	ldr	r6, [pc, #92]	; (8006168 <xTaskCheckForTimeOut+0x80>)
 800610a:	f8d6 6120 	ldr.w	r6, [r6, #288]	; 0x120
 800610e:	682f      	ldr	r7, [r5, #0]
 8006110:	42b7      	cmp	r7, r6
 8006112:	d001      	beq.n	8006118 <xTaskCheckForTimeOut+0x30>
 8006114:	428b      	cmp	r3, r1
 8006116:	d924      	bls.n	8006162 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006118:	4282      	cmp	r2, r0
 800611a:	d815      	bhi.n	8006148 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006120:	2401      	movs	r4, #1
 8006122:	e01a      	b.n	800615a <xTaskCheckForTimeOut+0x72>
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006134:	e7fe      	b.n	8006134 <xTaskCheckForTimeOut+0x4c>
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006146:	e7fe      	b.n	8006146 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8006148:	1a5b      	subs	r3, r3, r1
 800614a:	4413      	add	r3, r2
 800614c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800614e:	4628      	mov	r0, r5
 8006150:	f7ff ffc0 	bl	80060d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006154:	2400      	movs	r4, #0
 8006156:	e000      	b.n	800615a <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8006158:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800615a:	f000 f905 	bl	8006368 <vPortExitCritical>
}
 800615e:	4620      	mov	r0, r4
 8006160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8006162:	2401      	movs	r4, #1
 8006164:	e7f9      	b.n	800615a <xTaskCheckForTimeOut+0x72>
 8006166:	bf00      	nop
 8006168:	20000214 	.word	0x20000214

0800616c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <vTaskMissedYield+0xc>)
 800616e:	2201      	movs	r2, #1
 8006170:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000214 	.word	0x20000214

0800617c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <xTaskGetSchedulerState+0x1c>)
 800617e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006182:	b13b      	cbz	r3, 8006194 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <xTaskGetSchedulerState+0x1c>)
 8006186:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800618a:	b10b      	cbz	r3, 8006190 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800618c:	2000      	movs	r0, #0
	}
 800618e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006190:	2002      	movs	r0, #2
 8006192:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006194:	2001      	movs	r0, #1
 8006196:	4770      	bx	lr
 8006198:	20000214 	.word	0x20000214

0800619c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800619c:	2800      	cmp	r0, #0
 800619e:	d052      	beq.n	8006246 <xTaskPriorityDisinherit+0xaa>
	{
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80061a4:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <xTaskPriorityDisinherit+0xb4>)
 80061a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80061aa:	4283      	cmp	r3, r0
 80061ac:	d008      	beq.n	80061c0 <xTaskPriorityDisinherit+0x24>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	e7fe      	b.n	80061be <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80061c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80061c2:	b943      	cbnz	r3, 80061d6 <xTaskPriorityDisinherit+0x3a>
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	e7fe      	b.n	80061d4 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 80061d6:	3b01      	subs	r3, #1
 80061d8:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80061dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061de:	4291      	cmp	r1, r2
 80061e0:	d033      	beq.n	800624a <xTaskPriorityDisinherit+0xae>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061e2:	b10b      	cbz	r3, 80061e8 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 80061e4:	2000      	movs	r0, #0
	}
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e8:	1d05      	adds	r5, r0, #4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fe ff91 	bl	8005112 <uxListRemove>
 80061f0:	b988      	cbnz	r0, 8006216 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80061f4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <xTaskPriorityDisinherit+0xb4>)
 80061fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	b94b      	cbnz	r3, 8006216 <xTaskPriorityDisinherit+0x7a>
 8006202:	2301      	movs	r3, #1
 8006204:	fa03 f202 	lsl.w	r2, r3, r2
 8006208:	4911      	ldr	r1, [pc, #68]	; (8006250 <xTaskPriorityDisinherit+0xb4>)
 800620a:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800620e:	ea23 0302 	bic.w	r3, r3, r2
 8006212:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006216:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006218:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621a:	f1c3 0207 	rsb	r2, r3, #7
 800621e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006220:	2401      	movs	r4, #1
 8006222:	fa04 f103 	lsl.w	r1, r4, r3
 8006226:	4a0a      	ldr	r2, [pc, #40]	; (8006250 <xTaskPriorityDisinherit+0xb4>)
 8006228:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 800622c:	4301      	orrs	r1, r0
 800622e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8006232:	3230      	adds	r2, #48	; 0x30
 8006234:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006238:	4629      	mov	r1, r5
 800623a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800623e:	f7fe ff44 	bl	80050ca <vListInsertEnd>
					xReturn = pdTRUE;
 8006242:	4620      	mov	r0, r4
 8006244:	e7cf      	b.n	80061e6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006246:	2000      	movs	r0, #0
	}
 8006248:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800624a:	2000      	movs	r0, #0
 800624c:	e7cb      	b.n	80061e6 <xTaskPriorityDisinherit+0x4a>
 800624e:	bf00      	nop
 8006250:	20000214 	.word	0x20000214

08006254 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006254:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <prvTaskExitError+0x3c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d008      	beq.n	8006276 <prvTaskExitError+0x22>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	e7fe      	b.n	8006274 <prvTaskExitError+0x20>
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0fc      	beq.n	8006286 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800628c:	b002      	add	sp, #8
 800628e:	4770      	bx	lr
 8006290:	20000008 	.word	0x20000008

08006294 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006294:	4808      	ldr	r0, [pc, #32]	; (80062b8 <prvPortStartFirstTask+0x24>)
 8006296:	6800      	ldr	r0, [r0, #0]
 8006298:	6800      	ldr	r0, [r0, #0]
 800629a:	f380 8808 	msr	MSP, r0
 800629e:	f04f 0000 	mov.w	r0, #0
 80062a2:	f380 8814 	msr	CONTROL, r0
 80062a6:	b662      	cpsie	i
 80062a8:	b661      	cpsie	f
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	df00      	svc	0
 80062b4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062b6:	0000      	.short	0x0000
 80062b8:	e000ed08 	.word	0xe000ed08

080062bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062cc <vPortEnableVFP+0x10>
 80062c0:	6801      	ldr	r1, [r0, #0]
 80062c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062c6:	6001      	str	r1, [r0, #0]
 80062c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062ca:	0000      	.short	0x0000
 80062cc:	e000ed88 	.word	0xe000ed88

080062d0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062d4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062d8:	f021 0101 	bic.w	r1, r1, #1
 80062dc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <pxPortInitialiseStack+0x28>)
 80062e2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062ea:	f06f 0302 	mvn.w	r3, #2
 80062ee:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80062f2:	3844      	subs	r0, #68	; 0x44
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	08006255 	.word	0x08006255
 80062fc:	00000000 	.word	0x00000000

08006300 <SVC_Handler>:
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	20000314 	.word	0x20000314

08006324 <vPortEnterCritical>:
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006334:	4a0b      	ldr	r2, [pc, #44]	; (8006364 <vPortEnterCritical+0x40>)
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	3301      	adds	r3, #1
 800633a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800633c:	2b01      	cmp	r3, #1
 800633e:	d000      	beq.n	8006342 <vPortEnterCritical+0x1e>
}
 8006340:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006342:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006346:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800634a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800634e:	d0f7      	beq.n	8006340 <vPortEnterCritical+0x1c>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	e7fe      	b.n	8006360 <vPortEnterCritical+0x3c>
 8006362:	bf00      	nop
 8006364:	20000008 	.word	0x20000008

08006368 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <vPortExitCritical+0x28>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	b943      	cbnz	r3, 8006380 <vPortExitCritical+0x18>
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	e7fe      	b.n	800637e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006380:	3b01      	subs	r3, #1
 8006382:	4a03      	ldr	r2, [pc, #12]	; (8006390 <vPortExitCritical+0x28>)
 8006384:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006386:	b90b      	cbnz	r3, 800638c <vPortExitCritical+0x24>
	__asm volatile
 8006388:	f383 8811 	msr	BASEPRI, r3
}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000008 	.word	0x20000008
	...

080063a0 <PendSV_Handler>:
	__asm volatile
 80063a0:	f3ef 8009 	mrs	r0, PSP
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <pxCurrentTCBConst>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f01e 0f10 	tst.w	lr, #16
 80063b0:	bf08      	it	eq
 80063b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	6010      	str	r0, [r2, #0]
 80063bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063c4:	f380 8811 	msr	BASEPRI, r0
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f7ff fdc4 	bl	8005f5c <vTaskSwitchContext>
 80063d4:	f04f 0000 	mov.w	r0, #0
 80063d8:	f380 8811 	msr	BASEPRI, r0
 80063dc:	bc09      	pop	{r0, r3}
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	6808      	ldr	r0, [r1, #0]
 80063e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e6:	f01e 0f10 	tst.w	lr, #16
 80063ea:	bf08      	it	eq
 80063ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063f0:	f380 8809 	msr	PSP, r0
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst>:
 8006400:	20000314 	.word	0x20000314

08006404 <SysTick_Handler>:
{
 8006404:	b508      	push	{r3, lr}
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006416:	f7ff fc77 	bl	8005d08 <xTaskIncrementTick>
 800641a:	b128      	cbz	r0, 8006428 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800641c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006428:	2300      	movs	r3, #0
 800642a:	f383 8811 	msr	BASEPRI, r3
}
 800642e:	bd08      	pop	{r3, pc}

08006430 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006434:	2300      	movs	r3, #0
 8006436:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006438:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <vPortSetupTimerInterrupt+0x20>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4905      	ldr	r1, [pc, #20]	; (8006454 <vPortSetupTimerInterrupt+0x24>)
 8006440:	fba1 1303 	umull	r1, r3, r1, r3
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	3b01      	subs	r3, #1
 8006448:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644a:	2307      	movs	r3, #7
 800644c:	6113      	str	r3, [r2, #16]
}
 800644e:	4770      	bx	lr
 8006450:	20000010 	.word	0x20000010
 8006454:	10624dd3 	.word	0x10624dd3

08006458 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006458:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800645c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <xPortStartScheduler+0x100>)
 8006462:	429a      	cmp	r2, r3
 8006464:	d01b      	beq.n	800649e <xPortStartScheduler+0x46>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006466:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800646a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800646e:	4b3b      	ldr	r3, [pc, #236]	; (800655c <xPortStartScheduler+0x104>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d01d      	beq.n	80064b0 <xPortStartScheduler+0x58>
{
 8006474:	b530      	push	{r4, r5, lr}
 8006476:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006478:	4b39      	ldr	r3, [pc, #228]	; (8006560 <xPortStartScheduler+0x108>)
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006480:	22ff      	movs	r2, #255	; 0xff
 8006482:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800648c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006490:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006494:	4a33      	ldr	r2, [pc, #204]	; (8006564 <xPortStartScheduler+0x10c>)
 8006496:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006498:	2307      	movs	r3, #7
 800649a:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649c:	e01b      	b.n	80064d6 <xPortStartScheduler+0x7e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064ae:	e7fe      	b.n	80064ae <xPortStartScheduler+0x56>
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064c0:	e7fe      	b.n	80064c0 <xPortStartScheduler+0x68>
			ulMaxPRIGROUPValue--;
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <xPortStartScheduler+0x10c>)
 80064c4:	6853      	ldr	r3, [r2, #4]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064de:	d1f0      	bne.n	80064c2 <xPortStartScheduler+0x6a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <xPortStartScheduler+0x10c>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d008      	beq.n	80064fa <xPortStartScheduler+0xa2>
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	e7fe      	b.n	80064f8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	4a19      	ldr	r2, [pc, #100]	; (8006564 <xPortStartScheduler+0x10c>)
 80064fe:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006504:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <xPortStartScheduler+0x108>)
 800650c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800650e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8006512:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800651a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800651e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006522:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006526:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800652a:	f7ff ff81 	bl	8006430 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800652e:	2500      	movs	r5, #0
 8006530:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <xPortStartScheduler+0x110>)
 8006532:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006534:	f7ff fec2 	bl	80062bc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006538:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800653c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006540:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006544:	f7ff fea6 	bl	8006294 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006548:	f7ff fd08 	bl	8005f5c <vTaskSwitchContext>
	prvTaskExitError();
 800654c:	f7ff fe82 	bl	8006254 <prvTaskExitError>
}
 8006550:	4628      	mov	r0, r5
 8006552:	b003      	add	sp, #12
 8006554:	bd30      	pop	{r4, r5, pc}
 8006556:	bf00      	nop
 8006558:	410fc271 	.word	0x410fc271
 800655c:	410fc270 	.word	0x410fc270
 8006560:	e000e400 	.word	0xe000e400
 8006564:	20000348 	.word	0x20000348
 8006568:	20000008 	.word	0x20000008

0800656c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800656c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d90f      	bls.n	8006594 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006574:	4a11      	ldr	r2, [pc, #68]	; (80065bc <vPortValidateInterruptPriority+0x50>)
 8006576:	5c9b      	ldrb	r3, [r3, r2]
 8006578:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800657a:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <vPortValidateInterruptPriority+0x54>)
 800657c:	7812      	ldrb	r2, [r2, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d908      	bls.n	8006594 <vPortValidateInterruptPriority+0x28>
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	e7fe      	b.n	8006592 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006594:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006598:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800659c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065a0:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <vPortValidateInterruptPriority+0x54>)
 80065a2:	6852      	ldr	r2, [r2, #4]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d908      	bls.n	80065ba <vPortValidateInterruptPriority+0x4e>
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	e7fe      	b.n	80065b8 <vPortValidateInterruptPriority+0x4c>
	}
 80065ba:	4770      	bx	lr
 80065bc:	e000e3f0 	.word	0xe000e3f0
 80065c0:	20000348 	.word	0x20000348

080065c4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065c4:	4a10      	ldr	r2, [pc, #64]	; (8006608 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065c6:	f012 0f07 	tst.w	r2, #7
 80065ca:	d01a      	beq.n	8006602 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065cc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065ce:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065d2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80065d6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065da:	490c      	ldr	r1, [pc, #48]	; (800660c <prvHeapInit+0x48>)
 80065dc:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065de:	2000      	movs	r0, #0
 80065e0:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80065e4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80065ea:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 80065ec:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ee:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065f0:	1a98      	subs	r0, r3, r2
 80065f2:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f4:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f6:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f8:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065fe:	614b      	str	r3, [r1, #20]
}
 8006600:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006602:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006606:	e7e8      	b.n	80065da <prvHeapInit+0x16>
 8006608:	20000370 	.word	0x20000370
 800660c:	20000350 	.word	0x20000350

08006610 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006610:	4b16      	ldr	r3, [pc, #88]	; (800666c <prvInsertBlockIntoFreeList+0x5c>)
 8006612:	461a      	mov	r2, r3
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4283      	cmp	r3, r0
 8006618:	d3fb      	bcc.n	8006612 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800661a:	6851      	ldr	r1, [r2, #4]
 800661c:	eb02 0c01 	add.w	ip, r2, r1
 8006620:	4584      	cmp	ip, r0
 8006622:	d009      	beq.n	8006638 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006624:	6841      	ldr	r1, [r0, #4]
 8006626:	eb00 0c01 	add.w	ip, r0, r1
 800662a:	4563      	cmp	r3, ip
 800662c:	d009      	beq.n	8006642 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800662e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006630:	4290      	cmp	r0, r2
 8006632:	d019      	beq.n	8006668 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006634:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006636:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006638:	6840      	ldr	r0, [r0, #4]
 800663a:	4401      	add	r1, r0
 800663c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800663e:	4610      	mov	r0, r2
 8006640:	e7f0      	b.n	8006624 <prvInsertBlockIntoFreeList+0x14>
{
 8006642:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006644:	4c09      	ldr	r4, [pc, #36]	; (800666c <prvInsertBlockIntoFreeList+0x5c>)
 8006646:	68a4      	ldr	r4, [r4, #8]
 8006648:	42a3      	cmp	r3, r4
 800664a:	d00b      	beq.n	8006664 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4419      	add	r1, r3
 8006650:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006658:	4290      	cmp	r0, r2
 800665a:	d000      	beq.n	800665e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800665c:	6010      	str	r0, [r2, #0]
	}
}
 800665e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006662:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006664:	6004      	str	r4, [r0, #0]
 8006666:	e7f7      	b.n	8006658 <prvInsertBlockIntoFreeList+0x48>
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000350 	.word	0x20000350

08006670 <pvPortMalloc>:
{
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8006674:	f7ff fb2e 	bl	8005cd4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006678:	4b35      	ldr	r3, [pc, #212]	; (8006750 <pvPortMalloc+0xe0>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	b1a3      	cbz	r3, 80066a8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800667e:	4b34      	ldr	r3, [pc, #208]	; (8006750 <pvPortMalloc+0xe0>)
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	421d      	tst	r5, r3
 8006684:	d14c      	bne.n	8006720 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8006686:	b135      	cbz	r5, 8006696 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8006688:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800668a:	f015 0f07 	tst.w	r5, #7
 800668e:	d002      	beq.n	8006696 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006690:	f025 0507 	bic.w	r5, r5, #7
 8006694:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006696:	2d00      	cmp	r5, #0
 8006698:	d044      	beq.n	8006724 <pvPortMalloc+0xb4>
 800669a:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <pvPortMalloc+0xe0>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	42ab      	cmp	r3, r5
 80066a0:	d34f      	bcc.n	8006742 <pvPortMalloc+0xd2>
				pxBlock = xStart.pxNextFreeBlock;
 80066a2:	4a2b      	ldr	r2, [pc, #172]	; (8006750 <pvPortMalloc+0xe0>)
 80066a4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a6:	e004      	b.n	80066b2 <pvPortMalloc+0x42>
			prvHeapInit();
 80066a8:	f7ff ff8c 	bl	80065c4 <prvHeapInit>
 80066ac:	e7e7      	b.n	800667e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80066ae:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80066b0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	d202      	bcs.n	80066be <pvPortMalloc+0x4e>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f7      	bne.n	80066ae <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <pvPortMalloc+0xe0>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	d03f      	beq.n	8006746 <pvPortMalloc+0xd6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066c6:	6816      	ldr	r6, [r2, #0]
 80066c8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	1b5b      	subs	r3, r3, r5
 80066d2:	2b10      	cmp	r3, #16
 80066d4:	d910      	bls.n	80066f8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066d6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d8:	f010 0f07 	tst.w	r0, #7
 80066dc:	d008      	beq.n	80066f0 <pvPortMalloc+0x80>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	e7fe      	b.n	80066ee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066f0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066f2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066f4:	f7ff ff8c 	bl	8006610 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066f8:	6861      	ldr	r1, [r4, #4]
 80066fa:	4a15      	ldr	r2, [pc, #84]	; (8006750 <pvPortMalloc+0xe0>)
 80066fc:	6913      	ldr	r3, [r2, #16]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006702:	68d2      	ldr	r2, [r2, #12]
 8006704:	4293      	cmp	r3, r2
 8006706:	d201      	bcs.n	800670c <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006708:	4a11      	ldr	r2, [pc, #68]	; (8006750 <pvPortMalloc+0xe0>)
 800670a:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <pvPortMalloc+0xe0>)
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	430a      	orrs	r2, r1
 8006712:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006714:	2200      	movs	r2, #0
 8006716:	6022      	str	r2, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	3201      	adds	r2, #1
 800671c:	619a      	str	r2, [r3, #24]
 800671e:	e002      	b.n	8006726 <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 8006720:	2600      	movs	r6, #0
 8006722:	e000      	b.n	8006726 <pvPortMalloc+0xb6>
 8006724:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8006726:	f7ff fb7b 	bl	8005e20 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800672a:	f016 0f07 	tst.w	r6, #7
 800672e:	d00c      	beq.n	800674a <pvPortMalloc+0xda>
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	e7fe      	b.n	8006740 <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 8006742:	2600      	movs	r6, #0
 8006744:	e7ef      	b.n	8006726 <pvPortMalloc+0xb6>
 8006746:	2600      	movs	r6, #0
 8006748:	e7ed      	b.n	8006726 <pvPortMalloc+0xb6>
}
 800674a:	4630      	mov	r0, r6
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	bf00      	nop
 8006750:	20000350 	.word	0x20000350

08006754 <vPortFree>:
	if( pv != NULL )
 8006754:	b398      	cbz	r0, 80067be <vPortFree+0x6a>
{
 8006756:	b538      	push	{r3, r4, r5, lr}
 8006758:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800675a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800675e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006762:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <vPortFree+0x6c>)
 8006764:	6952      	ldr	r2, [r2, #20]
 8006766:	4213      	tst	r3, r2
 8006768:	d108      	bne.n	800677c <vPortFree+0x28>
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	e7fe      	b.n	800677a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800677c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006780:	b141      	cbz	r1, 8006794 <vPortFree+0x40>
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	e7fe      	b.n	8006792 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006794:	ea23 0302 	bic.w	r3, r3, r2
 8006798:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800679c:	f7ff fa9a 	bl	8005cd4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067a0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80067a4:	4c06      	ldr	r4, [pc, #24]	; (80067c0 <vPortFree+0x6c>)
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	6123      	str	r3, [r4, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ac:	4628      	mov	r0, r5
 80067ae:	f7ff ff2f 	bl	8006610 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067b2:	69e3      	ldr	r3, [r4, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61e3      	str	r3, [r4, #28]
				( void ) xTaskResumeAll();
 80067b8:	f7ff fb32 	bl	8005e20 <xTaskResumeAll>
}
 80067bc:	bd38      	pop	{r3, r4, r5, pc}
 80067be:	4770      	bx	lr
 80067c0:	20000350 	.word	0x20000350

080067c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80067c4:	b500      	push	{lr}
 80067c6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80067c8:	2300      	movs	r3, #0
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80067d2:	4879      	ldr	r0, [pc, #484]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80067d4:	4a79      	ldr	r2, [pc, #484]	; (80069bc <MX_ADC1_Init+0x1f8>)
 80067d6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80067d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067dc:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80067de:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80067e0:	2201      	movs	r2, #1
 80067e2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80067e4:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80067e6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80067ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80067ec:	4974      	ldr	r1, [pc, #464]	; (80069c0 <MX_ADC1_Init+0x1fc>)
 80067ee:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80067f0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 16;
 80067f2:	2110      	movs	r1, #16
 80067f4:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80067f6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80067fa:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80067fc:	f7fa fca0 	bl	8001140 <HAL_ADC_Init>
 8006800:	2800      	cmp	r0, #0
 8006802:	f040 80a6 	bne.w	8006952 <MX_ADC1_Init+0x18e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006806:	2300      	movs	r3, #0
 8006808:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800680a:	2201      	movs	r2, #1
 800680c:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800680e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006810:	4669      	mov	r1, sp
 8006812:	4869      	ldr	r0, [pc, #420]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006814:	f7fa fdda 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006818:	2800      	cmp	r0, #0
 800681a:	f040 809d 	bne.w	8006958 <MX_ADC1_Init+0x194>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800681e:	2301      	movs	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8006822:	2302      	movs	r3, #2
 8006824:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006826:	4669      	mov	r1, sp
 8006828:	4863      	ldr	r0, [pc, #396]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 800682a:	f7fa fdcf 	bl	80013cc <HAL_ADC_ConfigChannel>
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8095 	bne.w	800695e <MX_ADC1_Init+0x19a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006834:	2302      	movs	r3, #2
 8006836:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8006838:	2303      	movs	r3, #3
 800683a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800683c:	4669      	mov	r1, sp
 800683e:	485e      	ldr	r0, [pc, #376]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006840:	f7fa fdc4 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 808d 	bne.w	8006964 <MX_ADC1_Init+0x1a0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800684a:	2303      	movs	r3, #3
 800684c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800684e:	2304      	movs	r3, #4
 8006850:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006852:	4669      	mov	r1, sp
 8006854:	4858      	ldr	r0, [pc, #352]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006856:	f7fa fdb9 	bl	80013cc <HAL_ADC_ConfigChannel>
 800685a:	2800      	cmp	r0, #0
 800685c:	f040 8085 	bne.w	800696a <MX_ADC1_Init+0x1a6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006860:	2304      	movs	r3, #4
 8006862:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8006864:	2305      	movs	r3, #5
 8006866:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006868:	4669      	mov	r1, sp
 800686a:	4853      	ldr	r0, [pc, #332]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 800686c:	f7fa fdae 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006870:	2800      	cmp	r0, #0
 8006872:	d17d      	bne.n	8006970 <MX_ADC1_Init+0x1ac>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006874:	2305      	movs	r3, #5
 8006876:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8006878:	2306      	movs	r3, #6
 800687a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800687c:	4669      	mov	r1, sp
 800687e:	484e      	ldr	r0, [pc, #312]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006880:	f7fa fda4 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006884:	2800      	cmp	r0, #0
 8006886:	d176      	bne.n	8006976 <MX_ADC1_Init+0x1b2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006888:	2306      	movs	r3, #6
 800688a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 800688c:	2307      	movs	r3, #7
 800688e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006890:	4669      	mov	r1, sp
 8006892:	4849      	ldr	r0, [pc, #292]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006894:	f7fa fd9a 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006898:	2800      	cmp	r0, #0
 800689a:	d16f      	bne.n	800697c <MX_ADC1_Init+0x1b8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800689c:	2307      	movs	r3, #7
 800689e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 80068a0:	2308      	movs	r3, #8
 80068a2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068a4:	4669      	mov	r1, sp
 80068a6:	4844      	ldr	r0, [pc, #272]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80068a8:	f7fa fd90 	bl	80013cc <HAL_ADC_ConfigChannel>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d168      	bne.n	8006982 <MX_ADC1_Init+0x1be>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80068b0:	2308      	movs	r3, #8
 80068b2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80068b4:	2309      	movs	r3, #9
 80068b6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068b8:	4669      	mov	r1, sp
 80068ba:	483f      	ldr	r0, [pc, #252]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80068bc:	f7fa fd86 	bl	80013cc <HAL_ADC_ConfigChannel>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d161      	bne.n	8006988 <MX_ADC1_Init+0x1c4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80068c4:	2309      	movs	r3, #9
 80068c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80068c8:	230a      	movs	r3, #10
 80068ca:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068cc:	4669      	mov	r1, sp
 80068ce:	483a      	ldr	r0, [pc, #232]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80068d0:	f7fa fd7c 	bl	80013cc <HAL_ADC_ConfigChannel>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d15a      	bne.n	800698e <MX_ADC1_Init+0x1ca>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80068d8:	230a      	movs	r3, #10
 80068da:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80068dc:	230b      	movs	r3, #11
 80068de:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068e0:	4669      	mov	r1, sp
 80068e2:	4835      	ldr	r0, [pc, #212]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80068e4:	f7fa fd72 	bl	80013cc <HAL_ADC_ConfigChannel>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d153      	bne.n	8006994 <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80068ec:	230b      	movs	r3, #11
 80068ee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80068f0:	230c      	movs	r3, #12
 80068f2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068f4:	4669      	mov	r1, sp
 80068f6:	4830      	ldr	r0, [pc, #192]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 80068f8:	f7fa fd68 	bl	80013cc <HAL_ADC_ConfigChannel>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d14c      	bne.n	800699a <MX_ADC1_Init+0x1d6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006900:	230c      	movs	r3, #12
 8006902:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 8006904:	230d      	movs	r3, #13
 8006906:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006908:	4669      	mov	r1, sp
 800690a:	482b      	ldr	r0, [pc, #172]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 800690c:	f7fa fd5e 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006910:	2800      	cmp	r0, #0
 8006912:	d145      	bne.n	80069a0 <MX_ADC1_Init+0x1dc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006914:	230d      	movs	r3, #13
 8006916:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 14;
 8006918:	230e      	movs	r3, #14
 800691a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800691c:	4669      	mov	r1, sp
 800691e:	4826      	ldr	r0, [pc, #152]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006920:	f7fa fd54 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006924:	2800      	cmp	r0, #0
 8006926:	d13e      	bne.n	80069a6 <MX_ADC1_Init+0x1e2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006928:	230e      	movs	r3, #14
 800692a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 15;
 800692c:	230f      	movs	r3, #15
 800692e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006930:	4669      	mov	r1, sp
 8006932:	4821      	ldr	r0, [pc, #132]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006934:	f7fa fd4a 	bl	80013cc <HAL_ADC_ConfigChannel>
 8006938:	bbc0      	cbnz	r0, 80069ac <MX_ADC1_Init+0x1e8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800693a:	230f      	movs	r3, #15
 800693c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 16;
 800693e:	2310      	movs	r3, #16
 8006940:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006942:	4669      	mov	r1, sp
 8006944:	481c      	ldr	r0, [pc, #112]	; (80069b8 <MX_ADC1_Init+0x1f4>)
 8006946:	f7fa fd41 	bl	80013cc <HAL_ADC_ConfigChannel>
 800694a:	bb90      	cbnz	r0, 80069b2 <MX_ADC1_Init+0x1ee>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800694c:	b005      	add	sp, #20
 800694e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006952:	f000 fb1b 	bl	8006f8c <Error_Handler>
 8006956:	e756      	b.n	8006806 <MX_ADC1_Init+0x42>
    Error_Handler();
 8006958:	f000 fb18 	bl	8006f8c <Error_Handler>
 800695c:	e75f      	b.n	800681e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800695e:	f000 fb15 	bl	8006f8c <Error_Handler>
 8006962:	e767      	b.n	8006834 <MX_ADC1_Init+0x70>
    Error_Handler();
 8006964:	f000 fb12 	bl	8006f8c <Error_Handler>
 8006968:	e76f      	b.n	800684a <MX_ADC1_Init+0x86>
    Error_Handler();
 800696a:	f000 fb0f 	bl	8006f8c <Error_Handler>
 800696e:	e777      	b.n	8006860 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8006970:	f000 fb0c 	bl	8006f8c <Error_Handler>
 8006974:	e77e      	b.n	8006874 <MX_ADC1_Init+0xb0>
    Error_Handler();
 8006976:	f000 fb09 	bl	8006f8c <Error_Handler>
 800697a:	e785      	b.n	8006888 <MX_ADC1_Init+0xc4>
    Error_Handler();
 800697c:	f000 fb06 	bl	8006f8c <Error_Handler>
 8006980:	e78c      	b.n	800689c <MX_ADC1_Init+0xd8>
    Error_Handler();
 8006982:	f000 fb03 	bl	8006f8c <Error_Handler>
 8006986:	e793      	b.n	80068b0 <MX_ADC1_Init+0xec>
    Error_Handler();
 8006988:	f000 fb00 	bl	8006f8c <Error_Handler>
 800698c:	e79a      	b.n	80068c4 <MX_ADC1_Init+0x100>
    Error_Handler();
 800698e:	f000 fafd 	bl	8006f8c <Error_Handler>
 8006992:	e7a1      	b.n	80068d8 <MX_ADC1_Init+0x114>
    Error_Handler();
 8006994:	f000 fafa 	bl	8006f8c <Error_Handler>
 8006998:	e7a8      	b.n	80068ec <MX_ADC1_Init+0x128>
    Error_Handler();
 800699a:	f000 faf7 	bl	8006f8c <Error_Handler>
 800699e:	e7af      	b.n	8006900 <MX_ADC1_Init+0x13c>
    Error_Handler();
 80069a0:	f000 faf4 	bl	8006f8c <Error_Handler>
 80069a4:	e7b6      	b.n	8006914 <MX_ADC1_Init+0x150>
    Error_Handler();
 80069a6:	f000 faf1 	bl	8006f8c <Error_Handler>
 80069aa:	e7bd      	b.n	8006928 <MX_ADC1_Init+0x164>
    Error_Handler();
 80069ac:	f000 faee 	bl	8006f8c <Error_Handler>
 80069b0:	e7c3      	b.n	800693a <MX_ADC1_Init+0x176>
    Error_Handler();
 80069b2:	f000 faeb 	bl	8006f8c <Error_Handler>
}
 80069b6:	e7c9      	b.n	800694c <MX_ADC1_Init+0x188>
 80069b8:	20003f70 	.word	0x20003f70
 80069bc:	40012000 	.word	0x40012000
 80069c0:	0f000001 	.word	0x0f000001

080069c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c8:	2300      	movs	r3, #0
 80069ca:	9305      	str	r3, [sp, #20]
 80069cc:	9306      	str	r3, [sp, #24]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 80069d4:	6802      	ldr	r2, [r0, #0]
 80069d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069da:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80069de:	429a      	cmp	r2, r3
 80069e0:	d001      	beq.n	80069e6 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80069e2:	b00a      	add	sp, #40	; 0x28
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80069e8:	2500      	movs	r5, #0
 80069ea:	9501      	str	r5, [sp, #4]
 80069ec:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80069f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44
 80069f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80069fe:	9201      	str	r2, [sp, #4]
 8006a00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a02:	9502      	str	r5, [sp, #8]
 8006a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a06:	f042 0204 	orr.w	r2, r2, #4
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	f002 0204 	and.w	r2, r2, #4
 8006a12:	9202      	str	r2, [sp, #8]
 8006a14:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a16:	9503      	str	r5, [sp, #12]
 8006a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a22:	f002 0201 	and.w	r2, r2, #1
 8006a26:	9203      	str	r2, [sp, #12]
 8006a28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a2a:	9504      	str	r5, [sp, #16]
 8006a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2e:	f042 0202 	orr.w	r2, r2, #2
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	9304      	str	r3, [sp, #16]
 8006a3c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006a3e:	233f      	movs	r3, #63	; 0x3f
 8006a40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a42:	2603      	movs	r6, #3
 8006a44:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a46:	a905      	add	r1, sp, #20
 8006a48:	4819      	ldr	r0, [pc, #100]	; (8006ab0 <HAL_ADC_MspInit+0xec>)
 8006a4a:	f7fb f98d 	bl	8001d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006a4e:	23ff      	movs	r3, #255	; 0xff
 8006a50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a52:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a54:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a56:	a905      	add	r1, sp, #20
 8006a58:	4816      	ldr	r0, [pc, #88]	; (8006ab4 <HAL_ADC_MspInit+0xf0>)
 8006a5a:	f7fb f985 	bl	8001d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a5e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a60:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a62:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a64:	a905      	add	r1, sp, #20
 8006a66:	4814      	ldr	r0, [pc, #80]	; (8006ab8 <HAL_ADC_MspInit+0xf4>)
 8006a68:	f7fb f97e 	bl	8001d68 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8006a6c:	4813      	ldr	r0, [pc, #76]	; (8006abc <HAL_ADC_MspInit+0xf8>)
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <HAL_ADC_MspInit+0xfc>)
 8006a70:	6483      	str	r3, [r0, #72]	; 0x48
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006a72:	64c5      	str	r5, [r0, #76]	; 0x4c
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a74:	6505      	str	r5, [r0, #80]	; 0x50
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a76:	6545      	str	r5, [r0, #84]	; 0x54
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7c:	6583      	str	r3, [r0, #88]	; 0x58
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a82:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a88:	6603      	str	r3, [r0, #96]	; 0x60
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a8e:	6643      	str	r3, [r0, #100]	; 0x64
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006a90:	6685      	str	r5, [r0, #104]	; 0x68
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a92:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006a94:	3048      	adds	r0, #72	; 0x48
 8006a96:	f7fa ffc9 	bl	8001a2c <HAL_DMA_Init>
 8006a9a:	b930      	cbnz	r0, 8006aaa <HAL_ADC_MspInit+0xe6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_ADC_MspInit+0xf8>)
 8006a9e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006aa2:	63a2      	str	r2, [r4, #56]	; 0x38
 8006aa4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
}
 8006aa8:	e79b      	b.n	80069e2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8006aaa:	f000 fa6f 	bl	8006f8c <Error_Handler>
 8006aae:	e7f5      	b.n	8006a9c <HAL_ADC_MspInit+0xd8>
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	40020000 	.word	0x40020000
 8006ab8:	40020400 	.word	0x40020400
 8006abc:	20003f70 	.word	0x20003f70
 8006ac0:	40026410 	.word	0x40026410

08006ac4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006ac4:	b508      	push	{r3, lr}
 8006ac6:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006ac8:	460a      	mov	r2, r1
 8006aca:	4601      	mov	r1, r0
 8006acc:	4802      	ldr	r0, [pc, #8]	; (8006ad8 <BSP_SD_ReadBlocks_DMA+0x14>)
 8006ace:	f7fc fb69 	bl	80031a4 <HAL_SD_ReadBlocks_DMA>
 8006ad2:	b100      	cbz	r0, 8006ad6 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8006ad4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006ad6:	bd08      	pop	{r3, pc}
 8006ad8:	20005dd0 	.word	0x20005dd0

08006adc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006adc:	b508      	push	{r3, lr}
 8006ade:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4802      	ldr	r0, [pc, #8]	; (8006af0 <BSP_SD_WriteBlocks_DMA+0x14>)
 8006ae6:	f7fc fbf7 	bl	80032d8 <HAL_SD_WriteBlocks_DMA>
 8006aea:	b100      	cbz	r0, 8006aee <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8006aec:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8006aee:	bd08      	pop	{r3, pc}
 8006af0:	20005dd0 	.word	0x20005dd0

08006af4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006af4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006af6:	4803      	ldr	r0, [pc, #12]	; (8006b04 <BSP_SD_GetCardState+0x10>)
 8006af8:	f7fc feea 	bl	80038d0 <HAL_SD_GetCardState>
}
 8006afc:	3804      	subs	r0, #4
 8006afe:	bf18      	it	ne
 8006b00:	2001      	movne	r0, #1
 8006b02:	bd08      	pop	{r3, pc}
 8006b04:	20005dd0 	.word	0x20005dd0

08006b08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006b08:	b508      	push	{r3, lr}
 8006b0a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006b0c:	4801      	ldr	r0, [pc, #4]	; (8006b14 <BSP_SD_GetCardInfo+0xc>)
 8006b0e:	f7fc fe6c 	bl	80037ea <HAL_SD_GetCardInfo>
}
 8006b12:	bd08      	pop	{r3, pc}
 8006b14:	20005dd0 	.word	0x20005dd0

08006b18 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8006b18:	4770      	bx	lr

08006b1a <HAL_SD_AbortCallback>:
{
 8006b1a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8006b1c:	f7ff fffc 	bl	8006b18 <BSP_SD_AbortCallback>
}
 8006b20:	bd08      	pop	{r3, pc}

08006b22 <HAL_SD_TxCpltCallback>:
{
 8006b22:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8006b24:	f000 fbdc 	bl	80072e0 <BSP_SD_WriteCpltCallback>
}
 8006b28:	bd08      	pop	{r3, pc}

08006b2a <HAL_SD_RxCpltCallback>:
{
 8006b2a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8006b2c:	f000 fbe2 	bl	80072f4 <BSP_SD_ReadCpltCallback>
}
 8006b30:	bd08      	pop	{r3, pc}

08006b32 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006b32:	b500      	push	{lr}
 8006b34:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006b3c:	f000 f8d8 	bl	8006cf0 <BSP_PlatformIsDetected>
 8006b40:	b910      	cbnz	r0, 8006b48 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8006b48:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006b4c:	b003      	add	sp, #12
 8006b4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006b54 <BSP_SD_Init>:
{
 8006b54:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b56:	f7ff ffec 	bl	8006b32 <BSP_SD_IsDetected>
 8006b5a:	2801      	cmp	r0, #1
 8006b5c:	d002      	beq.n	8006b64 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8006b5e:	2501      	movs	r5, #1
}
 8006b60:	4628      	mov	r0, r5
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 8006b66:	4807      	ldr	r0, [pc, #28]	; (8006b84 <BSP_SD_Init+0x30>)
 8006b68:	f7fc fe24 	bl	80037b4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1f6      	bne.n	8006b60 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b76:	4803      	ldr	r0, [pc, #12]	; (8006b84 <BSP_SD_Init+0x30>)
 8006b78:	f7fc fe4a 	bl	8003810 <HAL_SD_ConfigWideBusOperation>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d0ef      	beq.n	8006b60 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8006b80:	4625      	mov	r5, r4
 8006b82:	e7ed      	b.n	8006b60 <BSP_SD_Init+0xc>
 8006b84:	20005dd0 	.word	0x20005dd0

08006b88 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006b88:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006b8a:	4820      	ldr	r0, [pc, #128]	; (8006c0c <MX_CAN1_Init+0x84>)
 8006b8c:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <MX_CAN1_Init+0x88>)
 8006b8e:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 6;
 8006b90:	2306      	movs	r3, #6
 8006b92:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006b98:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8006b9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b9e:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006ba0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ba4:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006ba6:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006ba8:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006baa:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8006bac:	2201      	movs	r2, #1
 8006bae:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006bb0:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006bb2:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006bb4:	f7fa fce0 	bl	8001578 <HAL_CAN_Init>
 8006bb8:	b9e0      	cbnz	r0, 8006bf4 <MX_CAN1_Init+0x6c>
  /* USER CODE BEGIN CAN1_Init 2 */
  /* Filter Configuration
   * In order to reduce CPU Load to filter out messages,
   * the STM32 have the Filters built inside the CAN peripheral.
   */
  canfilterconfig.FilterActivation = ENABLE;
 8006bba:	4814      	ldr	r0, [pc, #80]	; (8006c0c <MX_CAN1_Init+0x84>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	66c2      	str	r2, [r0, #108]	; 0x6c
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6603      	str	r3, [r0, #96]	; 0x60
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006bc4:	65c3      	str	r3, [r0, #92]	; 0x5c
  canfilterconfig.FilterIdHigh = 0;
 8006bc6:	64c3      	str	r3, [r0, #76]	; 0x4c
  canfilterconfig.FilterIdLow = 0;
 8006bc8:	6503      	str	r3, [r0, #80]	; 0x50
  canfilterconfig.FilterMaskIdHigh = 0;
 8006bca:	6543      	str	r3, [r0, #84]	; 0x54
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8006bcc:	6583      	str	r3, [r0, #88]	; 0x58
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006bce:	6643      	str	r3, [r0, #100]	; 0x64
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006bd0:	6682      	str	r2, [r0, #104]	; 0x68
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8006bd2:	230e      	movs	r3, #14
 8006bd4:	6703      	str	r3, [r0, #112]	; 0x70

  if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8006bd6:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8006bda:	f7fa fd73 	bl	80016c4 <HAL_CAN_ConfigFilter>
 8006bde:	b960      	cbnz	r0, 8006bfa <MX_CAN1_Init+0x72>
  {
    /* Filter configuration Error */
    Error_Handler();
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8006be0:	480a      	ldr	r0, [pc, #40]	; (8006c0c <MX_CAN1_Init+0x84>)
 8006be2:	f7fa fe0b 	bl	80017fc <HAL_CAN_Start>
 8006be6:	b958      	cbnz	r0, 8006c00 <MX_CAN1_Init+0x78>
  {
    /* Start Error */
    Error_Handler();
  }
  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8006be8:	2102      	movs	r1, #2
 8006bea:	4808      	ldr	r0, [pc, #32]	; (8006c0c <MX_CAN1_Init+0x84>)
 8006bec:	f7fa fe34 	bl	8001858 <HAL_CAN_ActivateNotification>
 8006bf0:	b948      	cbnz	r0, 8006c06 <MX_CAN1_Init+0x7e>
    /* Notification Error */
    Error_Handler();
  }
  /* USER CODE END CAN1_Init 2 */

}
 8006bf2:	bd08      	pop	{r3, pc}
	Error_Handler();
 8006bf4:	f000 f9ca 	bl	8006f8c <Error_Handler>
 8006bf8:	e7df      	b.n	8006bba <MX_CAN1_Init+0x32>
    Error_Handler();
 8006bfa:	f000 f9c7 	bl	8006f8c <Error_Handler>
 8006bfe:	e7ef      	b.n	8006be0 <MX_CAN1_Init+0x58>
    Error_Handler();
 8006c00:	f000 f9c4 	bl	8006f8c <Error_Handler>
 8006c04:	e7f0      	b.n	8006be8 <MX_CAN1_Init+0x60>
    Error_Handler();
 8006c06:	f000 f9c1 	bl	8006f8c <Error_Handler>
}
 8006c0a:	e7f2      	b.n	8006bf2 <MX_CAN1_Init+0x6a>
 8006c0c:	20004018 	.word	0x20004018
 8006c10:	40006400 	.word	0x40006400

08006c14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006c14:	b500      	push	{lr}
 8006c16:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	9306      	str	r3, [sp, #24]
 8006c22:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8006c24:	6802      	ldr	r2, [r0, #0]
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <HAL_CAN_MspInit+0x68>)
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d002      	beq.n	8006c32 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006c2c:	b009      	add	sp, #36	; 0x24
 8006c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006c32:	2100      	movs	r1, #0
 8006c34:	9101      	str	r1, [sp, #4]
 8006c36:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8006c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c3c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
 8006c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c44:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8006c48:	9201      	str	r2, [sp, #4]
 8006c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4c:	9102      	str	r1, [sp, #8]
 8006c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	9302      	str	r3, [sp, #8]
 8006c5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c66:	2302      	movs	r3, #2
 8006c68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006c6e:	2309      	movs	r3, #9
 8006c70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c72:	a903      	add	r1, sp, #12
 8006c74:	4802      	ldr	r0, [pc, #8]	; (8006c80 <HAL_CAN_MspInit+0x6c>)
 8006c76:	f7fb f877 	bl	8001d68 <HAL_GPIO_Init>
}
 8006c7a:	e7d7      	b.n	8006c2c <HAL_CAN_MspInit+0x18>
 8006c7c:	40006400 	.word	0x40006400
 8006c80:	40020000 	.word	0x40020000

08006c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006c84:	b510      	push	{r4, lr}
 8006c86:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006c88:	2400      	movs	r4, #0
 8006c8a:	9401      	str	r4, [sp, #4]
 8006c8c:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <MX_DMA_Init+0x50>)
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	2105      	movs	r1, #5
 8006ca4:	2038      	movs	r0, #56	; 0x38
 8006ca6:	f7fa fdfb 	bl	80018a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006caa:	2038      	movs	r0, #56	; 0x38
 8006cac:	f7fa fe30 	bl	8001910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	2105      	movs	r1, #5
 8006cb4:	203b      	movs	r0, #59	; 0x3b
 8006cb6:	f7fa fdf3 	bl	80018a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006cba:	203b      	movs	r0, #59	; 0x3b
 8006cbc:	f7fa fe28 	bl	8001910 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	2105      	movs	r1, #5
 8006cc4:	2045      	movs	r0, #69	; 0x45
 8006cc6:	f7fa fdeb 	bl	80018a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006cca:	2045      	movs	r0, #69	; 0x45
 8006ccc:	f7fa fe20 	bl	8001910 <HAL_NVIC_EnableIRQ>

}
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd10      	pop	{r4, pc}
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006cd8:	b510      	push	{r4, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006cda:	4c03      	ldr	r4, [pc, #12]	; (8006ce8 <MX_FATFS_Init+0x10>)
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4803      	ldr	r0, [pc, #12]	; (8006cec <MX_FATFS_Init+0x14>)
 8006ce0:	f7fe f8f4 	bl	8004ecc <FATFS_LinkDriver>
 8006ce4:	7120      	strb	r0, [r4, #4]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006ce6:	bd10      	pop	{r4, pc}
 8006ce8:	200040b0 	.word	0x200040b0
 8006cec:	0800c0e8 	.word	0x0800c0e8

08006cf0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006cf0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cf6:	4804      	ldr	r0, [pc, #16]	; (8006d08 <BSP_PlatformIsDetected+0x18>)
 8006cf8:	f7fb f922 	bl	8001f40 <HAL_GPIO_ReadPin>
 8006cfc:	b908      	cbnz	r0, 8006d02 <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 8006cfe:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8006d00:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8006d02:	2000      	movs	r0, #0
 8006d04:	e7fc      	b.n	8006d00 <BSP_PlatformIsDetected+0x10>
 8006d06:	bf00      	nop
 8006d08:	40020800 	.word	0x40020800

08006d0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f7fe f93a 	bl	8004f88 <osDelay>
  for(;;)
 8006d14:	e7fb      	b.n	8006d0e <StartDefaultTask+0x2>

08006d16 <configureTimerForRunTimeStats>:
}
 8006d16:	4770      	bx	lr

08006d18 <getRunTimeCounterValue>:
}
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4770      	bx	lr

08006d1c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <vApplicationGetIdleTaskMemory+0x10>)
 8006d1e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006d20:	33b8      	adds	r3, #184	; 0xb8
 8006d22:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	6013      	str	r3, [r2, #0]
}
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20004524 	.word	0x20004524

08006d30 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8006d30:	b530      	push	{r4, r5, lr}
 8006d32:	b08f      	sub	sp, #60	; 0x3c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006d34:	4c12      	ldr	r4, [pc, #72]	; (8006d80 <MX_FREERTOS_Init+0x50>)
 8006d36:	f10d 0c1c 	add.w	ip, sp, #28
 8006d3a:	46a6      	mov	lr, r4
 8006d3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006d40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d44:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006d48:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	a807      	add	r0, sp, #28
 8006d50:	f7fe f8e5 	bl	8004f1e <osThreadCreate>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	; (8006d84 <MX_FREERTOS_Init+0x54>)
 8006d56:	f8c5 02b8 	str.w	r0, [r5, #696]	; 0x2b8
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 128);
 8006d5a:	46ee      	mov	lr, sp
 8006d5c:	f104 0c1c 	add.w	ip, r4, #28
 8006d60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006d64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006d68:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006d6c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8006d70:	2100      	movs	r1, #0
 8006d72:	4668      	mov	r0, sp
 8006d74:	f7fe f8d3 	bl	8004f1e <osThreadCreate>
 8006d78:	f8c5 02bc 	str.w	r0, [r5, #700]	; 0x2bc
}
 8006d7c:	b00f      	add	sp, #60	; 0x3c
 8006d7e:	bd30      	pop	{r4, r5, pc}
 8006d80:	0800c0a0 	.word	0x0800c0a0
 8006d84:	20004524 	.word	0x20004524

08006d88 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	9405      	str	r4, [sp, #20]
 8006d90:	9406      	str	r4, [sp, #24]
 8006d92:	9407      	str	r4, [sp, #28]
 8006d94:	9408      	str	r4, [sp, #32]
 8006d96:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d98:	9401      	str	r4, [sp, #4]
 8006d9a:	4b1f      	ldr	r3, [pc, #124]	; (8006e18 <MX_GPIO_Init+0x90>)
 8006d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d9e:	f042 0204 	orr.w	r2, r2, #4
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
 8006da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da6:	f002 0204 	and.w	r2, r2, #4
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dae:	9402      	str	r4, [sp, #8]
 8006db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
 8006db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dba:	f002 0201 	and.w	r2, r2, #1
 8006dbe:	9202      	str	r2, [sp, #8]
 8006dc0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc2:	9403      	str	r4, [sp, #12]
 8006dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc6:	f042 0202 	orr.w	r2, r2, #2
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dce:	f002 0202 	and.w	r2, r2, #2
 8006dd2:	9203      	str	r2, [sp, #12]
 8006dd4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dd6:	9404      	str	r4, [sp, #16]
 8006dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dda:	f042 0208 	orr.w	r2, r2, #8
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	9304      	str	r3, [sp, #16]
 8006de8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006df0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006df4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006df6:	4d09      	ldr	r5, [pc, #36]	; (8006e1c <MX_GPIO_Init+0x94>)
 8006df8:	a905      	add	r1, sp, #20
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f7fa ffb4 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 8006e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e04:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e06:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 8006e0a:	a905      	add	r1, sp, #20
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7fa ffab 	bl	8001d68 <HAL_GPIO_Init>

}
 8006e12:	b00b      	add	sp, #44	; 0x2c
 8006e14:	bd30      	pop	{r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	40020800 	.word	0x40020800

08006e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e20:	b530      	push	{r4, r5, lr}
 8006e22:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e24:	2234      	movs	r2, #52	; 0x34
 8006e26:	2100      	movs	r1, #0
 8006e28:	a807      	add	r0, sp, #28
 8006e2a:	f001 f956 	bl	80080da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e2e:	2400      	movs	r4, #0
 8006e30:	9402      	str	r4, [sp, #8]
 8006e32:	9403      	str	r4, [sp, #12]
 8006e34:	9404      	str	r4, [sp, #16]
 8006e36:	9405      	str	r4, [sp, #20]
 8006e38:	9406      	str	r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e3a:	9400      	str	r4, [sp, #0]
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <SystemClock_Config+0x94>)
 8006e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e50:	9401      	str	r4, [sp, #4]
 8006e52:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <SystemClock_Config+0x98>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	9b01      	ldr	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006e66:	230a      	movs	r3, #10
 8006e68:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8006e6a:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e70:	2210      	movs	r2, #16
 8006e72:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006e74:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e76:	2502      	movs	r5, #2
 8006e78:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006e7a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006e80:	22b4      	movs	r2, #180	; 0xb4
 8006e82:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e84:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006e86:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006e88:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e8a:	a807      	add	r0, sp, #28
 8006e8c:	f7fb fc8c 	bl	80027a8 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006e90:	f7fb f85e 	bl	8001f50 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e94:	230f      	movs	r3, #15
 8006e96:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e98:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e9a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ea0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ea6:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006ea8:	2105      	movs	r1, #5
 8006eaa:	a802      	add	r0, sp, #8
 8006eac:	f7fb f88e 	bl	8001fcc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8006eb0:	b015      	add	sp, #84	; 0x54
 8006eb2:	bd30      	pop	{r4, r5, pc}
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40007000 	.word	0x40007000

08006ebc <main>:
{
 8006ebc:	b508      	push	{r3, lr}
  HAL_Init();
 8006ebe:	f7fa f865 	bl	8000f8c <HAL_Init>
  SystemClock_Config();
 8006ec2:	f7ff ffad 	bl	8006e20 <SystemClock_Config>
  MX_GPIO_Init();
 8006ec6:	f7ff ff5f 	bl	8006d88 <MX_GPIO_Init>
  MX_DMA_Init();
 8006eca:	f7ff fedb 	bl	8006c84 <MX_DMA_Init>
  MX_ADC1_Init();
 8006ece:	f7ff fc79 	bl	80067c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8006ed2:	f000 ff11 	bl	8007cf8 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8006ed6:	f7ff fe57 	bl	8006b88 <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 8006eda:	f000 fa15 	bl	8007308 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8006ede:	f7ff fefb 	bl	8006cd8 <MX_FATFS_Init>
  MX_RTC_Init();
 8006ee2:	f000 f855 	bl	8006f90 <MX_RTC_Init>
  MX_TIM1_Init();
 8006ee6:	f000 fd07 	bl	80078f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8006eea:	f000 fd3f 	bl	800796c <MX_TIM2_Init>
  MX_TIM3_Init();
 8006eee:	f000 fd91 	bl	8007a14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006ef2:	f000 fde9 	bl	8007ac8 <MX_TIM4_Init>
  Init_SD_Card();
 8006ef6:	f000 f8b7 	bl	8007068 <Init_SD_Card>
  HAL_TIM_Base_Start_IT(&htim1);
 8006efa:	480d      	ldr	r0, [pc, #52]	; (8006f30 <main+0x74>)
 8006efc:	f7fc fed6 	bl	8003cac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8006f00:	4d0c      	ldr	r5, [pc, #48]	; (8006f34 <main+0x78>)
 8006f02:	4628      	mov	r0, r5
 8006f04:	f7fc fed2 	bl	8003cac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8006f08:	4c0b      	ldr	r4, [pc, #44]	; (8006f38 <main+0x7c>)
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7fc fece 	bl	8003cac <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); 		// Start input capture
 8006f10:	2100      	movs	r1, #0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f7fd f9c6 	bl	80042a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7fd f9c2 	bl	80042a4 <HAL_TIM_IC_Start_IT>
  HAL_CAN_MspInit(&hcan1);
 8006f20:	4806      	ldr	r0, [pc, #24]	; (8006f3c <main+0x80>)
 8006f22:	f7ff fe77 	bl	8006c14 <HAL_CAN_MspInit>
  MX_FREERTOS_Init();
 8006f26:	f7ff ff03 	bl	8006d30 <MX_FREERTOS_Init>
  osKernelStart();
 8006f2a:	f7fd ffe0 	bl	8004eee <osKernelStart>
  while (1)
 8006f2e:	e7fe      	b.n	8006f2e <main+0x72>
 8006f30:	20006040 	.word	0x20006040
 8006f34:	20006088 	.word	0x20006088
 8006f38:	200060d0 	.word	0x200060d0
 8006f3c:	20004018 	.word	0x20004018

08006f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8006f44:	6802      	ldr	r2, [r0, #0]
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d00c      	beq.n	8006f66 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM1)
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d00b      	beq.n	8006f6c <HAL_TIM_PeriodElapsedCallback+0x2c>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp

  if(htim->Instance == TIM2)
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00b      	beq.n	8006f74 <HAL_TIM_PeriodElapsedCallback+0x34>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens

  if(htim->Instance == TIM3)
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d00a      	beq.n	8006f7a <HAL_TIM_PeriodElapsedCallback+0x3a>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens


  /* USER CODE END Callback 1 */
}
 8006f64:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8006f66:	f7fa f82b 	bl	8000fc0 <HAL_IncTick>
 8006f6a:	e7ef      	b.n	8006f4c <HAL_TIM_PeriodElapsedCallback+0xc>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 feaf 	bl	8007cd0 <HAL_TimestampUpdate_Callback>
 8006f72:	e7ef      	b.n	8006f54 <HAL_TIM_PeriodElapsedCallback+0x14>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 8006f74:	f000 ff48 	bl	8007e08 <HAL_FR_Wheelspeed_Overflow_Callback>
 8006f78:	e7f0      	b.n	8006f5c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 8006f7a:	f000 ff4f 	bl	8007e1c <HAL_FL_Wheelspeed_Overflow_Callback>
}
 8006f7e:	e7f1      	b.n	8006f64 <HAL_TIM_PeriodElapsedCallback+0x24>
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40000400 	.word	0x40000400

08006f8c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006f8c:	4770      	bx	lr
	...

08006f90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006f90:	b500      	push	{lr}
 8006f92:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006f94:	2300      	movs	r3, #0
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8006fa0:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006fa2:	481d      	ldr	r0, [pc, #116]	; (8007018 <MX_RTC_Init+0x88>)
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <MX_RTC_Init+0x8c>)
 8006fa6:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006fa8:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006faa:	227f      	movs	r2, #127	; 0x7f
 8006fac:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8006fae:	22ff      	movs	r2, #255	; 0xff
 8006fb0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006fb2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006fb4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006fb6:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006fb8:	f7fb fe69 	bl	8002c8e <HAL_RTC_Init>
 8006fbc:	bb18      	cbnz	r0, 8007006 <MX_RTC_Init+0x76>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8006fbe:	2312      	movs	r3, #18
 8006fc0:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8006fca:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006fce:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006fd0:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	a901      	add	r1, sp, #4
 8006fd6:	4810      	ldr	r0, [pc, #64]	; (8007018 <MX_RTC_Init+0x88>)
 8006fd8:	f7fb feab 	bl	8002d32 <HAL_RTC_SetTime>
 8006fdc:	b9b0      	cbnz	r0, 800700c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8006fde:	2307      	movs	r3, #7
 8006fe0:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x7;
 8006fea:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4669      	mov	r1, sp
 8006ff8:	4807      	ldr	r0, [pc, #28]	; (8007018 <MX_RTC_Init+0x88>)
 8006ffa:	f7fb fef9 	bl	8002df0 <HAL_RTC_SetDate>
 8006ffe:	b940      	cbnz	r0, 8007012 <MX_RTC_Init+0x82>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007000:	b007      	add	sp, #28
 8007002:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007006:	f7ff ffc1 	bl	8006f8c <Error_Handler>
 800700a:	e7d8      	b.n	8006fbe <MX_RTC_Init+0x2e>
    Error_Handler();
 800700c:	f7ff ffbe 	bl	8006f8c <Error_Handler>
 8007010:	e7e5      	b.n	8006fde <MX_RTC_Init+0x4e>
    Error_Handler();
 8007012:	f7ff ffbb 	bl	8006f8c <Error_Handler>
}
 8007016:	e7f3      	b.n	8007000 <MX_RTC_Init+0x70>
 8007018:	200047e4 	.word	0x200047e4
 800701c:	40002800 	.word	0x40002800

08007020 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007020:	b510      	push	{r4, lr}
 8007022:	b098      	sub	sp, #96	; 0x60
 8007024:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007026:	225c      	movs	r2, #92	; 0x5c
 8007028:	2100      	movs	r1, #0
 800702a:	a801      	add	r0, sp, #4
 800702c:	f001 f855 	bl	80080da <memset>
  if(rtcHandle->Instance==RTC)
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <HAL_RTC_MspInit+0x40>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d001      	beq.n	800703c <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007038:	b018      	add	sp, #96	; 0x60
 800703a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800703c:	2320      	movs	r3, #32
 800703e:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007044:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007046:	a801      	add	r0, sp, #4
 8007048:	f7fb f8b4 	bl	80021b4 <HAL_RCCEx_PeriphCLKConfig>
 800704c:	b920      	cbnz	r0, 8007058 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RTC_MspInit+0x44>)
 8007050:	2201      	movs	r2, #1
 8007052:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 8007056:	e7ef      	b.n	8007038 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8007058:	f7ff ff98 	bl	8006f8c <Error_Handler>
 800705c:	e7f7      	b.n	800704e <HAL_RTC_MspInit+0x2e>
 800705e:	bf00      	nop
 8007060:	40002800 	.word	0x40002800
 8007064:	42470000 	.word	0x42470000

08007068 <Init_SD_Card>:



//	Initializes the SD card
// 	Creates the static objects related to the RTOS task's queue.
void Init_SD_Card(){
 8007068:	b510      	push	{r4, lr}
 800706a:	b082      	sub	sp, #8

	// Create a Queue for the SD Card logging RTOS Task before the scheduler starts
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LEN,
 800706c:	4c0c      	ldr	r4, [pc, #48]	; (80070a0 <Init_SD_Card+0x38>)
 800706e:	2300      	movs	r3, #0
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	f604 130c 	addw	r3, r4, #2316	; 0x90c
 8007076:	f604 1254 	addw	r2, r4, #2388	; 0x954
 800707a:	210c      	movs	r1, #12
 800707c:	2006      	movs	r0, #6
 800707e:	f7fe f94b 	bl	8005318 <xQueueGenericCreateStatic>
 8007082:	f8c4 08e0 	str.w	r0, [r4, #2272]	; 0x8e0
										SD_QUEUE_SIZE,
										xSD_Card_Queue_Storage,
										&xSD_Card_Queue_Static);

	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 8007086:	b108      	cbz	r0, 800708c <Init_SD_Card+0x24>

}// Init_SD_Card
 8007088:	b002      	add	sp, #8
 800708a:	bd10      	pop	{r4, pc}
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 800709c:	e7fe      	b.n	800709c <Init_SD_Card+0x34>
 800709e:	bf00      	nop
 80070a0:	20004804 	.word	0x20004804

080070a4 <SD_Log>:

// Passing a defined length of your string speeds up writing of your error message
// HOWEVER: Passing -1 will make the task compute the length of your error string. (If you're lazy do that)

// WARNING: Must be called within a RTOS Task
_Bool SD_Log(char * msg, int32_t bytesToWrite){
 80070a4:	b500      	push	{lr}
 80070a6:	b085      	sub	sp, #20

	BaseType_t ret;			// RTOS function returns
	SD_Request request;		// Request Struct

	request.type = Write;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f88d 3004 	strb.w	r3, [sp, #4]
	request.buff = msg;
 80070ae:	9003      	str	r0, [sp, #12]
	request.fileName = LogFile;
 80070b0:	2200      	movs	r2, #0
 80070b2:	f88d 2005 	strb.w	r2, [sp, #5]
	request.size = bytesToWrite;
 80070b6:	9102      	str	r1, [sp, #8]

	ret = xQueueSendToBack(xSD_Card_Queue, &request, 0);	//Queue should never have more than one value in it thus wait = 0
 80070b8:	4613      	mov	r3, r2
 80070ba:	a901      	add	r1, sp, #4
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <SD_Log+0x30>)
 80070be:	f8d0 08e0 	ldr.w	r0, [r0, #2272]	; 0x8e0
 80070c2:	f7fe f997 	bl	80053f4 <xQueueGenericSend>
	if(ret != pdPASS){
 80070c6:	2801      	cmp	r0, #1
 80070c8:	d000      	beq.n	80070cc <SD_Log+0x28>
		//ERROR! Queue is full
		return 0;
 80070ca:	2000      	movs	r0, #0
	}
	return 1;
}//SD_ Log
 80070cc:	b005      	add	sp, #20
 80070ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d2:	bf00      	nop
 80070d4:	20004804 	.word	0x20004804

080070d8 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80070d8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <SD_CheckStatus+0x20>)
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070e0:	f7ff fd08 	bl	8006af4 <BSP_SD_GetCardState>
 80070e4:	b920      	cbnz	r0, 80070f0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80070e6:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <SD_CheckStatus+0x20>)
 80070e8:	7813      	ldrb	r3, [r2, #0]
 80070ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80070ee:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80070f0:	4b01      	ldr	r3, [pc, #4]	; (80070f8 <SD_CheckStatus+0x20>)
 80070f2:	7818      	ldrb	r0, [r3, #0]
}
 80070f4:	bd08      	pop	{r3, pc}
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c

080070fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80070fc:	b510      	push	{r4, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <SD_initialize+0x68>)
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007108:	f7fd fef6 	bl	8004ef8 <osKernelRunning>
 800710c:	b918      	cbnz	r0, 8007116 <SD_initialize+0x1a>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 800710e:	4b15      	ldr	r3, [pc, #84]	; (8007164 <SD_initialize+0x68>)
 8007110:	7818      	ldrb	r0, [r3, #0]
}
 8007112:	b004      	add	sp, #16
 8007114:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8007116:	f7ff fd1d 	bl	8006b54 <BSP_SD_Init>
 800711a:	b188      	cbz	r0, 8007140 <SD_initialize+0x44>
    if (Stat != STA_NOINIT)
 800711c:	4b11      	ldr	r3, [pc, #68]	; (8007164 <SD_initialize+0x68>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b01      	cmp	r3, #1
 8007124:	d0f3      	beq.n	800710e <SD_initialize+0x12>
      if (SDQueueID == NULL)
 8007126:	4b10      	ldr	r3, [pc, #64]	; (8007168 <SD_initialize+0x6c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	b17b      	cbz	r3, 800714c <SD_initialize+0x50>
      if (SDQueueID == NULL)
 800712c:	4b0e      	ldr	r3, [pc, #56]	; (8007168 <SD_initialize+0x6c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1ec      	bne.n	800710e <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 8007134:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <SD_initialize+0x68>)
 8007136:	7813      	ldrb	r3, [r2, #0]
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	7013      	strb	r3, [r2, #0]
 800713e:	e7e6      	b.n	800710e <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 8007140:	4620      	mov	r0, r4
 8007142:	f7ff ffc9 	bl	80070d8 <SD_CheckStatus>
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <SD_initialize+0x68>)
 8007148:	7018      	strb	r0, [r3, #0]
 800714a:	e7e7      	b.n	800711c <SD_initialize+0x20>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <SD_initialize+0x70>)
 800714e:	466c      	mov	r4, sp
 8007150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007156:	2100      	movs	r1, #0
 8007158:	4620      	mov	r0, r4
 800715a:	f7fd ff1c 	bl	8004f96 <osMessageCreate>
 800715e:	4b02      	ldr	r3, [pc, #8]	; (8007168 <SD_initialize+0x6c>)
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	e7e3      	b.n	800712c <SD_initialize+0x30>
 8007164:	2000000c 	.word	0x2000000c
 8007168:	20005dcc 	.word	0x20005dcc
 800716c:	0800c0d8 	.word	0x0800c0d8

08007170 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007170:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8007172:	f7ff ffb1 	bl	80070d8 <SD_CheckStatus>
}
 8007176:	bd08      	pop	{r3, pc}

08007178 <SD_CheckStatusWithTimeout>:
{
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4605      	mov	r5, r0
  timer = osKernelSysTick();
 800717c:	f7fd fec5 	bl	8004f0a <osKernelSysTick>
 8007180:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 8007182:	f7fd fec2 	bl	8004f0a <osKernelSysTick>
 8007186:	1b00      	subs	r0, r0, r4
 8007188:	42a8      	cmp	r0, r5
 800718a:	d205      	bcs.n	8007198 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800718c:	f7ff fcb2 	bl	8006af4 <BSP_SD_GetCardState>
 8007190:	2800      	cmp	r0, #0
 8007192:	d1f6      	bne.n	8007182 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8007194:	2000      	movs	r0, #0
 8007196:	e001      	b.n	800719c <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
}
 800719c:	bd38      	pop	{r3, r4, r5, pc}
	...

080071a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	460c      	mov	r4, r1
 80071a6:	4615      	mov	r5, r2
 80071a8:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80071aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80071ae:	f7ff ffe3 	bl	8007178 <SD_CheckStatusWithTimeout>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	db29      	blt.n	800720a <SD_read+0x6a>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80071b6:	4632      	mov	r2, r6
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff fc82 	bl	8006ac4 <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 80071c0:	b108      	cbz	r0, 80071c6 <SD_read+0x26>
  DRESULT res = RES_ERROR;
 80071c2:	2001      	movs	r0, #1
 80071c4:	e022      	b.n	800720c <SD_read+0x6c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80071c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <SD_read+0x70>)
 80071cc:	6819      	ldr	r1, [r3, #0]
 80071ce:	a801      	add	r0, sp, #4
 80071d0:	f7fd ff29 	bl	8005026 <osMessageGet>

    if (event.status == osEventMessage)
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d001      	beq.n	80071de <SD_read+0x3e>
  DRESULT res = RES_ERROR;
 80071da:	2001      	movs	r0, #1
 80071dc:	e016      	b.n	800720c <SD_read+0x6c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d001      	beq.n	80071e8 <SD_read+0x48>
  DRESULT res = RES_ERROR;
 80071e4:	2001      	movs	r0, #1
 80071e6:	e011      	b.n	800720c <SD_read+0x6c>
      {
        timer = osKernelSysTick();
 80071e8:	f7fd fe8f 	bl	8004f0a <osKernelSysTick>
 80071ec:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80071ee:	f7fd fe8c 	bl	8004f0a <osKernelSysTick>
 80071f2:	1b00      	subs	r0, r0, r4
 80071f4:	f247 532f 	movw	r3, #29999	; 0x752f
 80071f8:	4298      	cmp	r0, r3
 80071fa:	d804      	bhi.n	8007206 <SD_read+0x66>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80071fc:	f7ff fc7a 	bl	8006af4 <BSP_SD_GetCardState>
 8007200:	2800      	cmp	r0, #0
 8007202:	d1f4      	bne.n	80071ee <SD_read+0x4e>
 8007204:	e002      	b.n	800720c <SD_read+0x6c>
  DRESULT res = RES_ERROR;
 8007206:	2001      	movs	r0, #1
 8007208:	e000      	b.n	800720c <SD_read+0x6c>
    return res;
 800720a:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800720c:	b004      	add	sp, #16
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	20005dcc 	.word	0x20005dcc

08007214 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	460c      	mov	r4, r1
 800721a:	4615      	mov	r5, r2
 800721c:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800721e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007222:	f7ff ffa9 	bl	8007178 <SD_CheckStatusWithTimeout>
 8007226:	2800      	cmp	r0, #0
 8007228:	db29      	blt.n	800727e <SD_write+0x6a>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800722a:	4632      	mov	r2, r6
 800722c:	4629      	mov	r1, r5
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff fc54 	bl	8006adc <BSP_SD_WriteBlocks_DMA>
 8007234:	b108      	cbz	r0, 800723a <SD_write+0x26>
  DRESULT res = RES_ERROR;
 8007236:	2001      	movs	r0, #1
 8007238:	e022      	b.n	8007280 <SD_write+0x6c>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800723a:	f247 5230 	movw	r2, #30000	; 0x7530
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <SD_write+0x70>)
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	a801      	add	r0, sp, #4
 8007244:	f7fd feef 	bl	8005026 <osMessageGet>

    if (event.status == osEventMessage)
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	2b10      	cmp	r3, #16
 800724c:	d001      	beq.n	8007252 <SD_write+0x3e>
  DRESULT res = RES_ERROR;
 800724e:	2001      	movs	r0, #1
 8007250:	e016      	b.n	8007280 <SD_write+0x6c>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d001      	beq.n	800725c <SD_write+0x48>
  DRESULT res = RES_ERROR;
 8007258:	2001      	movs	r0, #1
 800725a:	e011      	b.n	8007280 <SD_write+0x6c>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800725c:	f7fd fe55 	bl	8004f0a <osKernelSysTick>
 8007260:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007262:	f7fd fe52 	bl	8004f0a <osKernelSysTick>
 8007266:	1b00      	subs	r0, r0, r4
 8007268:	f247 532f 	movw	r3, #29999	; 0x752f
 800726c:	4298      	cmp	r0, r3
 800726e:	d804      	bhi.n	800727a <SD_write+0x66>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007270:	f7ff fc40 	bl	8006af4 <BSP_SD_GetCardState>
 8007274:	2800      	cmp	r0, #0
 8007276:	d1f4      	bne.n	8007262 <SD_write+0x4e>
 8007278:	e002      	b.n	8007280 <SD_write+0x6c>
  DRESULT res = RES_ERROR;
 800727a:	2001      	movs	r0, #1
 800727c:	e000      	b.n	8007280 <SD_write+0x6c>
    return res;
 800727e:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 8007280:	b004      	add	sp, #16
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	20005dcc 	.word	0x20005dcc

08007288 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007288:	b530      	push	{r4, r5, lr}
 800728a:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <SD_ioctl+0x54>)
 800728e:	7818      	ldrb	r0, [r3, #0]
 8007290:	f010 0401 	ands.w	r4, r0, #1
 8007294:	d11b      	bne.n	80072ce <SD_ioctl+0x46>
 8007296:	4615      	mov	r5, r2

  switch (cmd)
 8007298:	2903      	cmp	r1, #3
 800729a:	d81c      	bhi.n	80072d6 <SD_ioctl+0x4e>
 800729c:	e8df f001 	tbb	[pc, r1]
 80072a0:	100a0402 	.word	0x100a0402
 80072a4:	460c      	mov	r4, r1
 80072a6:	e013      	b.n	80072d0 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80072a8:	4668      	mov	r0, sp
 80072aa:	f7ff fc2d 	bl	8006b08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80072b2:	e00d      	b.n	80072d0 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80072b4:	4668      	mov	r0, sp
 80072b6:	f7ff fc27 	bl	8006b08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 80072be:	e007      	b.n	80072d0 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80072c0:	4668      	mov	r0, sp
 80072c2:	f7ff fc21 	bl	8006b08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	0a5b      	lsrs	r3, r3, #9
 80072ca:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80072cc:	e000      	b.n	80072d0 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072ce:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80072d0:	4620      	mov	r0, r4
 80072d2:	b009      	add	sp, #36	; 0x24
 80072d4:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 80072d6:	2404      	movs	r4, #4
 80072d8:	e7fa      	b.n	80072d0 <SD_ioctl+0x48>
 80072da:	bf00      	nop
 80072dc:	2000000c 	.word	0x2000000c

080072e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80072e0:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2102      	movs	r1, #2
 80072e6:	4b02      	ldr	r3, [pc, #8]	; (80072f0 <BSP_SD_WriteCpltCallback+0x10>)
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	f7fd fe69 	bl	8004fc0 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80072ee:	bd08      	pop	{r3, pc}
 80072f0:	20005dcc 	.word	0x20005dcc

080072f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80072f4:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80072f6:	2200      	movs	r2, #0
 80072f8:	2101      	movs	r1, #1
 80072fa:	4b02      	ldr	r3, [pc, #8]	; (8007304 <BSP_SD_ReadCpltCallback+0x10>)
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f7fd fe5f 	bl	8004fc0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007302:	bd08      	pop	{r3, pc}
 8007304:	20005dcc 	.word	0x20005dcc

08007308 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <MX_SDIO_SD_Init+0x18>)
 800730a:	4a06      	ldr	r2, [pc, #24]	; (8007324 <MX_SDIO_SD_Init+0x1c>)
 800730c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800730e:	2200      	movs	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007312:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007314:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007316:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007318:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800731a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20005dd0 	.word	0x20005dd0
 8007324:	40012c00 	.word	0x40012c00

08007328 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800732c:	b0a1      	sub	sp, #132	; 0x84
 800732e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007330:	2100      	movs	r1, #0
 8007332:	911b      	str	r1, [sp, #108]	; 0x6c
 8007334:	911c      	str	r1, [sp, #112]	; 0x70
 8007336:	911d      	str	r1, [sp, #116]	; 0x74
 8007338:	911e      	str	r1, [sp, #120]	; 0x78
 800733a:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800733c:	225c      	movs	r2, #92	; 0x5c
 800733e:	a804      	add	r0, sp, #16
 8007340:	f000 fecb 	bl	80080da <memset>
  if(sdHandle->Instance==SDIO)
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	4b6f      	ldr	r3, [pc, #444]	; (8007504 <HAL_SD_MspInit+0x1dc>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <HAL_SD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800734c:	b021      	add	sp, #132	; 0x84
 800734e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8007352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007356:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007358:	a804      	add	r0, sp, #16
 800735a:	f7fa ff2b 	bl	80021b4 <HAL_RCCEx_PeriphCLKConfig>
 800735e:	2800      	cmp	r0, #0
 8007360:	f040 80c6 	bne.w	80074f0 <HAL_SD_MspInit+0x1c8>
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007364:	2500      	movs	r5, #0
 8007366:	9500      	str	r5, [sp, #0]
 8007368:	4b67      	ldr	r3, [pc, #412]	; (8007508 <HAL_SD_MspInit+0x1e0>)
 800736a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
 8007372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007374:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007378:	9200      	str	r2, [sp, #0]
 800737a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800737c:	9501      	str	r5, [sp, #4]
 800737e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007380:	f042 0202 	orr.w	r2, r2, #2
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
 8007386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007388:	f002 0202 	and.w	r2, r2, #2
 800738c:	9201      	str	r2, [sp, #4]
 800738e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007390:	9502      	str	r5, [sp, #8]
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	f042 0204 	orr.w	r2, r2, #4
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
 800739a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739c:	f002 0204 	and.w	r2, r2, #4
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073a4:	9503      	str	r5, [sp, #12]
 80073a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a8:	f042 0208 	orr.w	r2, r2, #8
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80073b8:	2704      	movs	r7, #4
 80073ba:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073bc:	f04f 0902 	mov.w	r9, #2
 80073c0:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c4:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073c6:	2603      	movs	r6, #3
 80073c8:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80073ca:	f04f 080c 	mov.w	r8, #12
 80073ce:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d2:	a91b      	add	r1, sp, #108	; 0x6c
 80073d4:	484d      	ldr	r0, [pc, #308]	; (800750c <HAL_SD_MspInit+0x1e4>)
 80073d6:	f7fa fcc7 	bl	8001d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80073da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80073de:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e0:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073e6:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80073e8:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073ec:	a91b      	add	r1, sp, #108	; 0x6c
 80073ee:	4848      	ldr	r0, [pc, #288]	; (8007510 <HAL_SD_MspInit+0x1e8>)
 80073f0:	f7fa fcba 	bl	8001d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80073f4:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f6:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fa:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073fc:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80073fe:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007402:	a91b      	add	r1, sp, #108	; 0x6c
 8007404:	4843      	ldr	r0, [pc, #268]	; (8007514 <HAL_SD_MspInit+0x1ec>)
 8007406:	f7fa fcaf 	bl	8001d68 <HAL_GPIO_Init>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 800740a:	4843      	ldr	r0, [pc, #268]	; (8007518 <HAL_SD_MspInit+0x1f0>)
 800740c:	4b43      	ldr	r3, [pc, #268]	; (800751c <HAL_SD_MspInit+0x1f4>)
 800740e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007416:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800741a:	2340      	movs	r3, #64	; 0x40
 800741c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007420:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007428:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800742c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007430:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007438:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800743c:	2320      	movs	r3, #32
 800743e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007442:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007446:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800744a:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800744e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007452:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007456:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800745a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800745e:	3084      	adds	r0, #132	; 0x84
 8007460:	f7fa fae4 	bl	8001a2c <HAL_DMA_Init>
 8007464:	2800      	cmp	r0, #0
 8007466:	d146      	bne.n	80074f6 <HAL_SD_MspInit+0x1ce>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8007468:	482b      	ldr	r0, [pc, #172]	; (8007518 <HAL_SD_MspInit+0x1f0>)
 800746a:	f100 0384 	add.w	r3, r0, #132	; 0x84
 800746e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007470:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8007474:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <HAL_SD_MspInit+0x1f8>)
 8007476:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800747a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800747e:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007482:	2300      	movs	r3, #0
 8007484:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007488:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800748c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007490:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007498:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800749c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074a0:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80074aa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80074ae:	2304      	movs	r3, #4
 80074b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80074ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074be:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80074c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074c6:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80074ca:	30e4      	adds	r0, #228	; 0xe4
 80074cc:	f7fa faae 	bl	8001a2c <HAL_DMA_Init>
 80074d0:	b9a0      	cbnz	r0, 80074fc <HAL_SD_MspInit+0x1d4>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_SD_MspInit+0x1f0>)
 80074d4:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 80074d8:	6422      	str	r2, [r4, #64]	; 0x40
 80074da:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80074de:	2200      	movs	r2, #0
 80074e0:	2105      	movs	r1, #5
 80074e2:	2031      	movs	r0, #49	; 0x31
 80074e4:	f7fa f9dc 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80074e8:	2031      	movs	r0, #49	; 0x31
 80074ea:	f7fa fa11 	bl	8001910 <HAL_NVIC_EnableIRQ>
}
 80074ee:	e72d      	b.n	800734c <HAL_SD_MspInit+0x24>
      Error_Handler();
 80074f0:	f7ff fd4c 	bl	8006f8c <Error_Handler>
 80074f4:	e736      	b.n	8007364 <HAL_SD_MspInit+0x3c>
      Error_Handler();
 80074f6:	f7ff fd49 	bl	8006f8c <Error_Handler>
 80074fa:	e7b5      	b.n	8007468 <HAL_SD_MspInit+0x140>
      Error_Handler();
 80074fc:	f7ff fd46 	bl	8006f8c <Error_Handler>
 8007500:	e7e7      	b.n	80074d2 <HAL_SD_MspInit+0x1aa>
 8007502:	bf00      	nop
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40023800 	.word	0x40023800
 800750c:	40020400 	.word	0x40020400
 8007510:	40020800 	.word	0x40020800
 8007514:	40020c00 	.word	0x40020c00
 8007518:	20005dd0 	.word	0x20005dd0
 800751c:	40026458 	.word	0x40026458
 8007520:	400264a0 	.word	0x400264a0

08007524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007524:	b500      	push	{lr}
 8007526:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007528:	2200      	movs	r2, #0
 800752a:	9200      	str	r2, [sp, #0]
 800752c:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <HAL_MspInit+0x40>)
 800752e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007530:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007534:	6459      	str	r1, [r3, #68]	; 0x44
 8007536:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007538:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800753c:	9100      	str	r1, [sp, #0]
 800753e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007540:	9201      	str	r2, [sp, #4]
 8007542:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007544:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007548:	6419      	str	r1, [r3, #64]	; 0x40
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007554:	210f      	movs	r1, #15
 8007556:	f06f 0001 	mvn.w	r0, #1
 800755a:	f7fa f9a1 	bl	80018a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800755e:	b003      	add	sp, #12
 8007560:	f85d fb04 	ldr.w	pc, [sp], #4
 8007564:	40023800 	.word	0x40023800

08007568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007568:	b510      	push	{r4, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800756e:	2200      	movs	r2, #0
 8007570:	2019      	movs	r0, #25
 8007572:	f7fa f995 	bl	80018a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007576:	2019      	movs	r0, #25
 8007578:	f7fa f9ca 	bl	8001910 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800757c:	2400      	movs	r4, #0
 800757e:	9401      	str	r4, [sp, #4]
 8007580:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <HAL_InitTick+0x6c>)
 8007582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007584:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007588:	645a      	str	r2, [r3, #68]	; 0x44
 800758a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007594:	a902      	add	r1, sp, #8
 8007596:	a803      	add	r0, sp, #12
 8007598:	f7fa fdee 	bl	8002178 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800759c:	f7fa fddc 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 80075a0:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80075a2:	480d      	ldr	r0, [pc, #52]	; (80075d8 <HAL_InitTick+0x70>)
 80075a4:	fba0 2303 	umull	r2, r3, r0, r3
 80075a8:	0c9b      	lsrs	r3, r3, #18
 80075aa:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80075ac:	480b      	ldr	r0, [pc, #44]	; (80075dc <HAL_InitTick+0x74>)
 80075ae:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <HAL_InitTick+0x78>)
 80075b0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80075b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80075b6:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80075b8:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 80075ba:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075bc:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80075be:	f7fc fcdd 	bl	8003f7c <HAL_TIM_Base_Init>
 80075c2:	b110      	cbz	r0, 80075ca <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }

  /* Return function status */
  return HAL_ERROR;
 80075c4:	2001      	movs	r0, #1
}
 80075c6:	b008      	add	sp, #32
 80075c8:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 80075ca:	4804      	ldr	r0, [pc, #16]	; (80075dc <HAL_InitTick+0x74>)
 80075cc:	f7fc fb6e 	bl	8003cac <HAL_TIM_Base_Start_IT>
 80075d0:	e7f9      	b.n	80075c6 <HAL_InitTick+0x5e>
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	431bde83 	.word	0x431bde83
 80075dc:	20005f14 	.word	0x20005f14
 80075e0:	40014400 	.word	0x40014400

080075e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075e4:	4770      	bx	lr

080075e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075e6:	e7fe      	b.n	80075e6 <HardFault_Handler>

080075e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075e8:	e7fe      	b.n	80075e8 <MemManage_Handler>

080075ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075ea:	e7fe      	b.n	80075ea <BusFault_Handler>

080075ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075ec:	e7fe      	b.n	80075ec <UsageFault_Handler>

080075ee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075ee:	4770      	bx	lr

080075f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80075f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80075f2:	4803      	ldr	r0, [pc, #12]	; (8007600 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80075f4:	f7fc fba1 	bl	8003d3a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80075f8:	4802      	ldr	r0, [pc, #8]	; (8007604 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80075fa:	f7fc fb9e 	bl	8003d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80075fe:	bd08      	pop	{r3, pc}
 8007600:	20006040 	.word	0x20006040
 8007604:	20005f14 	.word	0x20005f14

08007608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800760a:	4802      	ldr	r0, [pc, #8]	; (8007614 <TIM2_IRQHandler+0xc>)
 800760c:	f7fc fb95 	bl	8003d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007610:	bd08      	pop	{r3, pc}
 8007612:	bf00      	nop
 8007614:	20006088 	.word	0x20006088

08007618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800761a:	4802      	ldr	r0, [pc, #8]	; (8007624 <TIM3_IRQHandler+0xc>)
 800761c:	f7fc fb8d 	bl	8003d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007620:	bd08      	pop	{r3, pc}
 8007622:	bf00      	nop
 8007624:	200060d0 	.word	0x200060d0

08007628 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800762a:	4802      	ldr	r0, [pc, #8]	; (8007634 <TIM4_IRQHandler+0xc>)
 800762c:	f7fc fb85 	bl	8003d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007630:	bd08      	pop	{r3, pc}
 8007632:	bf00      	nop
 8007634:	20006118 	.word	0x20006118

08007638 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800763a:	4802      	ldr	r0, [pc, #8]	; (8007644 <SDIO_IRQHandler+0xc>)
 800763c:	f7fc f9d2 	bl	80039e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007640:	bd08      	pop	{r3, pc}
 8007642:	bf00      	nop
 8007644:	20005dd0 	.word	0x20005dd0

08007648 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800764a:	4802      	ldr	r0, [pc, #8]	; (8007654 <DMA2_Stream0_IRQHandler+0xc>)
 800764c:	f7fa fa9c 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007650:	bd08      	pop	{r3, pc}
 8007652:	bf00      	nop
 8007654:	20003fb8 	.word	0x20003fb8

08007658 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800765a:	4802      	ldr	r0, [pc, #8]	; (8007664 <DMA2_Stream3_IRQHandler+0xc>)
 800765c:	f7fa fa94 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007660:	bd08      	pop	{r3, pc}
 8007662:	bf00      	nop
 8007664:	20005e54 	.word	0x20005e54

08007668 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800766a:	4802      	ldr	r0, [pc, #8]	; (8007674 <DMA2_Stream6_IRQHandler+0xc>)
 800766c:	f7fa fa8c 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007670:	bd08      	pop	{r3, pc}
 8007672:	bf00      	nop
 8007674:	20005eb4 	.word	0x20005eb4

08007678 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007678:	490f      	ldr	r1, [pc, #60]	; (80076b8 <SystemInit+0x40>)
 800767a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800767e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <SystemInit+0x44>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007690:	2000      	movs	r0, #0
 8007692:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800769a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800769e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80076a0:	4a07      	ldr	r2, [pc, #28]	; (80076c0 <SystemInit+0x48>)
 80076a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80076ac:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80076ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076b2:	608b      	str	r3, [r1, #8]
#endif
}
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	e000ed00 	.word	0xe000ed00
 80076bc:	40023800 	.word	0x40023800
 80076c0:	24003010 	.word	0x24003010
 80076c4:	00000000 	.word	0x00000000

080076c8 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;
volatile int newData = 0;

void get_NTC_Resistance(double voltageReading){
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	ec55 4b10 	vmov	r4, r5, d0
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 80076ce:	a317      	add	r3, pc, #92	; (adr r3, 800772c <get_NTC_Resistance+0x64>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	ee10 0a10 	vmov	r0, s0
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f9 fa33 	bl	8000b44 <__aeabi_dcmpge>
 80076de:	b9c8      	cbnz	r0, 8007714 <get_NTC_Resistance+0x4c>
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	4620      	mov	r0, r4
 80076e6:	4629      	mov	r1, r5
 80076e8:	f7f9 fa22 	bl	8000b30 <__aeabi_dcmple>
 80076ec:	b990      	cbnz	r0, 8007714 <get_NTC_Resistance+0x4c>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	a110      	add	r1, pc, #64	; (adr r1, 8007734 <get_NTC_Resistance+0x6c>)
 80076f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f8:	f7f9 f8c8 	bl	800088c <__aeabi_ddiv>
 80076fc:	2200      	movs	r2, #0
 80076fe:	4b08      	ldr	r3, [pc, #32]	; (8007720 <get_NTC_Resistance+0x58>)
 8007700:	f7f8 fde2 	bl	80002c8 <__aeabi_dsub>
 8007704:	2200      	movs	r2, #0
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <get_NTC_Resistance+0x5c>)
 8007708:	f7f8 ff96 	bl	8000638 <__aeabi_dmul>
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <get_NTC_Resistance+0x60>)
 800770e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8007712:	e004      	b.n	800771e <get_NTC_Resistance+0x56>
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 8007714:	4b04      	ldr	r3, [pc, #16]	; (8007728 <get_NTC_Resistance+0x60>)
 8007716:	2000      	movs	r0, #0
 8007718:	2100      	movs	r1, #0
 800771a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	3ff00000 	.word	0x3ff00000
 8007724:	408f4000 	.word	0x408f4000
 8007728:	20005f60 	.word	0x20005f60
 800772c:	93333333 	.word	0x93333333
 8007730:	40099999 	.word	0x40099999
 8007734:	60000000 	.word	0x60000000
 8007738:	400a6666 	.word	0x400a6666
 800773c:	00000000 	.word	0x00000000

08007740 <getTemperature>:

double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 8007740:	b5d0      	push	{r4, r6, r7, lr}
	get_NTC_Resistance(voltageReading);
 8007742:	f7ff ffc1 	bl	80076c8 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 8007746:	2200      	movs	r2, #0
 8007748:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <getTemperature+0xc0>)
 800774a:	492e      	ldr	r1, [pc, #184]	; (8007804 <getTemperature+0xc4>)
 800774c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007750:	f7f9 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 8007754:	b140      	cbz	r0, 8007768 <getTemperature+0x28>
 8007756:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <getTemperature+0xc4>)
 8007758:	2000      	movs	r0, #0
 800775a:	492b      	ldr	r1, [pc, #172]	; (8007808 <getTemperature+0xc8>)
 800775c:	e9c3 0102 	strd	r0, r1, [r3, #8]
	else{
		naturalLogR = log(R_NTC);
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
	}
	return temperature;
}
 8007760:	4b28      	ldr	r3, [pc, #160]	; (8007804 <getTemperature+0xc4>)
 8007762:	ed93 0b02 	vldr	d0, [r3, #8]
 8007766:	bdd0      	pop	{r4, r6, r7, pc}
		naturalLogR = log(R_NTC);
 8007768:	4c26      	ldr	r4, [pc, #152]	; (8007804 <getTemperature+0xc4>)
 800776a:	ed94 0b00 	vldr	d0, [r4]
 800776e:	f003 fb13 	bl	800ad98 <log>
 8007772:	ed84 0b04 	vstr	d0, [r4, #16]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 8007776:	a318      	add	r3, pc, #96	; (adr r3, 80077d8 <getTemperature+0x98>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8007780:	f7f8 ff5a 	bl	8000638 <__aeabi_dmul>
 8007784:	a316      	add	r3, pc, #88	; (adr r3, 80077e0 <getTemperature+0xa0>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fd9f 	bl	80002cc <__adddf3>
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80077e8 <getTemperature+0xa8>
 8007796:	ed94 0b04 	vldr	d0, [r4, #16]
 800779a:	f003 fb3b 	bl	800ae14 <pow>
 800779e:	ec51 0b10 	vmov	r0, r1, d0
 80077a2:	a313      	add	r3, pc, #76	; (adr r3, 80077f0 <getTemperature+0xb0>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 ff46 	bl	8000638 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fd8a 	bl	80002cc <__adddf3>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	2000      	movs	r0, #0
 80077be:	4910      	ldr	r1, [pc, #64]	; (8007800 <getTemperature+0xc0>)
 80077c0:	f7f9 f864 	bl	800088c <__aeabi_ddiv>
 80077c4:	a30c      	add	r3, pc, #48	; (adr r3, 80077f8 <getTemperature+0xb8>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f7f8 fd7d 	bl	80002c8 <__aeabi_dsub>
 80077ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077d2:	e7c5      	b.n	8007760 <getTemperature+0x20>
 80077d4:	f3af 8000 	nop.w
 80077d8:	ac3ea183 	.word	0xac3ea183
 80077dc:	3f314eaa 	.word	0x3f314eaa
 80077e0:	f0bcee5a 	.word	0xf0bcee5a
 80077e4:	3f54f675 	.word	0x3f54f675
 80077e8:	00000000 	.word	0x00000000
 80077ec:	40080000 	.word	0x40080000
 80077f0:	61e3fc4e 	.word	0x61e3fc4e
 80077f4:	3e825c55 	.word	0x3e825c55
 80077f8:	66666666 	.word	0x66666666
 80077fc:	40711266 	.word	0x40711266
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	20005f60 	.word	0x20005f60
 8007808:	bff00000 	.word	0xbff00000
 800780c:	00000000 	.word	0x00000000

08007810 <StartReadTempTask>:

void StartReadTempTask(void const * argument){
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	ed2d 8b02 	vpush	{d8}
 8007816:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800781a:	e04e      	b.n	80078ba <StartReadTempTask+0xaa>
		HAL_ADC_Start_DMA(&hadc1, res, 16);
		while(!newData) {}
		newData = 0;

		for(int i = 0; i < 16; i++) {
			  voltages[i] = ADC_TO_Voltage * res[i];
 800781c:	4d30      	ldr	r5, [pc, #192]	; (80078e0 <StartReadTempTask+0xd0>)
 800781e:	00a6      	lsls	r6, r4, #2
 8007820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007824:	6998      	ldr	r0, [r3, #24]
 8007826:	f7f8 fe8d 	bl	8000544 <__aeabi_ui2d>
 800782a:	a32b      	add	r3, pc, #172	; (adr r3, 80078d8 <StartReadTempTask+0xc8>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	f7f9 f9d8 	bl	8000be8 <__aeabi_d2f>
 8007838:	ab0f      	add	r3, sp, #60	; 0x3c
 800783a:	4433      	add	r3, r6
 800783c:	6018      	str	r0, [r3, #0]
			  temperatures[i] = getTemperature(voltages[i]);
 800783e:	f7f8 fea3 	bl	8000588 <__aeabi_f2d>
 8007842:	ec41 0b18 	vmov	d8, r0, r1
 8007846:	ec41 0b10 	vmov	d0, r0, r1
 800784a:	f7ff ff79 	bl	8007740 <getTemperature>
 800784e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007852:	ed85 0b18 	vstr	d0, [r5, #96]	; 0x60
			  sprintf(msgTemp, "ADC %d %.5f \n", i, voltages[i]);
 8007856:	ed8d 8b00 	vstr	d8, [sp]
 800785a:	4622      	mov	r2, r4
 800785c:	4921      	ldr	r1, [pc, #132]	; (80078e4 <StartReadTempTask+0xd4>)
 800785e:	a81f      	add	r0, sp, #124	; 0x7c
 8007860:	f001 f9bc 	bl	8008bdc <siprintf>
			  strcat(msg,msgTemp);
 8007864:	a91f      	add	r1, sp, #124	; 0x7c
 8007866:	a824      	add	r0, sp, #144	; 0x90
 8007868:	f001 fa1b 	bl	8008ca2 <strcat>
		for(int i = 0; i < 16; i++) {
 800786c:	3401      	adds	r4, #1
 800786e:	2c0f      	cmp	r4, #15
 8007870:	ddd4      	ble.n	800781c <StartReadTempTask+0xc>
		}
		sprintf(tempMsg, "Temperature: %f\r\n", temperatures[0]);
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <StartReadTempTask+0xd0>)
 8007874:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007878:	491b      	ldr	r1, [pc, #108]	; (80078e8 <StartReadTempTask+0xd8>)
 800787a:	a802      	add	r0, sp, #8
 800787c:	f001 f9ae 	bl	8008bdc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8007880:	a802      	add	r0, sp, #8
 8007882:	f7f8 fcc5 	bl	8000210 <strlen>
 8007886:	230a      	movs	r3, #10
 8007888:	b282      	uxth	r2, r0
 800788a:	a902      	add	r1, sp, #8
 800788c:	4817      	ldr	r0, [pc, #92]	; (80078ec <StartReadTempTask+0xdc>)
 800788e:	f7fc ff06 	bl	800469e <HAL_UART_Transmit>

		SD_Log(msg, -1);
 8007892:	f04f 31ff 	mov.w	r1, #4294967295
 8007896:	a824      	add	r0, sp, #144	; 0x90
 8007898:	f7ff fc04 	bl	80070a4 <SD_Log>
		memset(msg, 0, sizeof msg);
 800789c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a0:	2100      	movs	r1, #0
 80078a2:	a824      	add	r0, sp, #144	; 0x90
 80078a4:	f000 fc19 	bl	80080da <memset>
		memset(msgTemp, 0, sizeof msgTemp);
 80078a8:	2300      	movs	r3, #0
 80078aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80078ac:	9320      	str	r3, [sp, #128]	; 0x80
 80078ae:	9321      	str	r3, [sp, #132]	; 0x84
 80078b0:	9322      	str	r3, [sp, #136]	; 0x88
 80078b2:	9323      	str	r3, [sp, #140]	; 0x8c
		vTaskDelay(pdMS_TO_TICKS(10));
 80078b4:	200a      	movs	r0, #10
 80078b6:	f7fe fb2b 	bl	8005f10 <vTaskDelay>
		HAL_ADC_Start_DMA(&hadc1, res, 16);
 80078ba:	2210      	movs	r2, #16
 80078bc:	490c      	ldr	r1, [pc, #48]	; (80078f0 <StartReadTempTask+0xe0>)
 80078be:	480d      	ldr	r0, [pc, #52]	; (80078f4 <StartReadTempTask+0xe4>)
 80078c0:	f7f9 fc6a 	bl	8001198 <HAL_ADC_Start_DMA>
		while(!newData) {}
 80078c4:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <StartReadTempTask+0xd0>)
 80078c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0fb      	beq.n	80078c4 <StartReadTempTask+0xb4>
		newData = 0;
 80078cc:	2400      	movs	r4, #0
 80078ce:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <StartReadTempTask+0xd0>)
 80078d0:	659c      	str	r4, [r3, #88]	; 0x58
		for(int i = 0; i < 16; i++) {
 80078d2:	e7cc      	b.n	800786e <StartReadTempTask+0x5e>
 80078d4:	f3af 8000 	nop.w
 80078d8:	032601a6 	.word	0x032601a6
 80078dc:	3f4a631a 	.word	0x3f4a631a
 80078e0:	20005f60 	.word	0x20005f60
 80078e4:	0800c138 	.word	0x0800c138
 80078e8:	0800c148 	.word	0x0800c148
 80078ec:	20006180 	.word	0x20006180
 80078f0:	20005f78 	.word	0x20005f78
 80078f4:	20003f70 	.word	0x20003f70

080078f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80078f8:	b500      	push	{lr}
 80078fa:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078fc:	2300      	movs	r3, #0
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	9303      	str	r3, [sp, #12]
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800790a:	4816      	ldr	r0, [pc, #88]	; (8007964 <MX_TIM1_Init+0x6c>)
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <MX_TIM1_Init+0x70>)
 800790e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 1500;
 8007910:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007914:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007916:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8007918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800791c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800791e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8007920:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007922:	2380      	movs	r3, #128	; 0x80
 8007924:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007926:	f7fc fb29 	bl	8003f7c <HAL_TIM_Base_Init>
 800792a:	b990      	cbnz	r0, 8007952 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800792c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007930:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007932:	a902      	add	r1, sp, #8
 8007934:	480b      	ldr	r0, [pc, #44]	; (8007964 <MX_TIM1_Init+0x6c>)
 8007936:	f7fc fc26 	bl	8004186 <HAL_TIM_ConfigClockSource>
 800793a:	b968      	cbnz	r0, 8007958 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800793c:	2300      	movs	r3, #0
 800793e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007940:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007942:	4669      	mov	r1, sp
 8007944:	4807      	ldr	r0, [pc, #28]	; (8007964 <MX_TIM1_Init+0x6c>)
 8007946:	f7fc fd67 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 800794a:	b940      	cbnz	r0, 800795e <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800794c:	b007      	add	sp, #28
 800794e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007952:	f7ff fb1b 	bl	8006f8c <Error_Handler>
 8007956:	e7e9      	b.n	800792c <MX_TIM1_Init+0x34>
    Error_Handler();
 8007958:	f7ff fb18 	bl	8006f8c <Error_Handler>
 800795c:	e7ee      	b.n	800793c <MX_TIM1_Init+0x44>
    Error_Handler();
 800795e:	f7ff fb15 	bl	8006f8c <Error_Handler>
}
 8007962:	e7f3      	b.n	800794c <MX_TIM1_Init+0x54>
 8007964:	20006040 	.word	0x20006040
 8007968:	40010000 	.word	0x40010000

0800796c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800796c:	b500      	push	{lr}
 800796e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007970:	2300      	movs	r3, #0
 8007972:	9306      	str	r3, [sp, #24]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	9308      	str	r3, [sp, #32]
 8007978:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800797a:	9304      	str	r3, [sp, #16]
 800797c:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007986:	4821      	ldr	r0, [pc, #132]	; (8007a0c <MX_TIM2_Init+0xa0>)
 8007988:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800798c:	6482      	str	r2, [r0, #72]	; 0x48
  htim2.Init.Prescaler = 55;
 800798e:	2237      	movs	r2, #55	; 0x37
 8007990:	64c2      	str	r2, [r0, #76]	; 0x4c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007992:	6503      	str	r3, [r0, #80]	; 0x50
  htim2.Init.Period = 65535;
 8007994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007998:	6542      	str	r2, [r0, #84]	; 0x54
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800799a:	6583      	str	r3, [r0, #88]	; 0x58
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80079a0:	3048      	adds	r0, #72	; 0x48
 80079a2:	f7fc faeb 	bl	8003f7c <HAL_TIM_Base_Init>
 80079a6:	bb08      	cbnz	r0, 80079ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079ac:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80079ae:	a906      	add	r1, sp, #24
 80079b0:	4817      	ldr	r0, [pc, #92]	; (8007a10 <MX_TIM2_Init+0xa4>)
 80079b2:	f7fc fbe8 	bl	8004186 <HAL_TIM_ConfigClockSource>
 80079b6:	b9e0      	cbnz	r0, 80079f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80079b8:	4815      	ldr	r0, [pc, #84]	; (8007a10 <MX_TIM2_Init+0xa4>)
 80079ba:	f7fc fb0b 	bl	8003fd4 <HAL_TIM_IC_Init>
 80079be:	b9d8      	cbnz	r0, 80079f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079c0:	2300      	movs	r3, #0
 80079c2:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079c4:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079c6:	a904      	add	r1, sp, #16
 80079c8:	4811      	ldr	r0, [pc, #68]	; (8007a10 <MX_TIM2_Init+0xa4>)
 80079ca:	f7fc fd25 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 80079ce:	b9b0      	cbnz	r0, 80079fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80079d0:	2200      	movs	r2, #0
 80079d2:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80079d4:	2301      	movs	r3, #1
 80079d6:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80079d8:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 80079da:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80079dc:	4669      	mov	r1, sp
 80079de:	480c      	ldr	r0, [pc, #48]	; (8007a10 <MX_TIM2_Init+0xa4>)
 80079e0:	f7fc fb62 	bl	80040a8 <HAL_TIM_IC_ConfigChannel>
 80079e4:	b970      	cbnz	r0, 8007a04 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80079e6:	b00b      	add	sp, #44	; 0x2c
 80079e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80079ec:	f7ff face 	bl	8006f8c <Error_Handler>
 80079f0:	e7da      	b.n	80079a8 <MX_TIM2_Init+0x3c>
    Error_Handler();
 80079f2:	f7ff facb 	bl	8006f8c <Error_Handler>
 80079f6:	e7df      	b.n	80079b8 <MX_TIM2_Init+0x4c>
    Error_Handler();
 80079f8:	f7ff fac8 	bl	8006f8c <Error_Handler>
 80079fc:	e7e0      	b.n	80079c0 <MX_TIM2_Init+0x54>
    Error_Handler();
 80079fe:	f7ff fac5 	bl	8006f8c <Error_Handler>
 8007a02:	e7e5      	b.n	80079d0 <MX_TIM2_Init+0x64>
    Error_Handler();
 8007a04:	f7ff fac2 	bl	8006f8c <Error_Handler>
}
 8007a08:	e7ed      	b.n	80079e6 <MX_TIM2_Init+0x7a>
 8007a0a:	bf00      	nop
 8007a0c:	20006040 	.word	0x20006040
 8007a10:	20006088 	.word	0x20006088

08007a14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007a14:	b500      	push	{lr}
 8007a16:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9306      	str	r3, [sp, #24]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	9308      	str	r3, [sp, #32]
 8007a20:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007a2e:	4823      	ldr	r0, [pc, #140]	; (8007abc <MX_TIM3_Init+0xa8>)
 8007a30:	4a23      	ldr	r2, [pc, #140]	; (8007ac0 <MX_TIM3_Init+0xac>)
 8007a32:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  htim3.Init.Prescaler = 55;
 8007a36:	2237      	movs	r2, #55	; 0x37
 8007a38:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a3c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim3.Init.Period = 65535;
 8007a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a44:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a48:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a4c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007a50:	3090      	adds	r0, #144	; 0x90
 8007a52:	f7fc fa93 	bl	8003f7c <HAL_TIM_Base_Init>
 8007a56:	bb08      	cbnz	r0, 8007a9c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a5c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007a5e:	a906      	add	r1, sp, #24
 8007a60:	4818      	ldr	r0, [pc, #96]	; (8007ac4 <MX_TIM3_Init+0xb0>)
 8007a62:	f7fc fb90 	bl	8004186 <HAL_TIM_ConfigClockSource>
 8007a66:	b9e0      	cbnz	r0, 8007aa2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8007a68:	4816      	ldr	r0, [pc, #88]	; (8007ac4 <MX_TIM3_Init+0xb0>)
 8007a6a:	f7fc fab3 	bl	8003fd4 <HAL_TIM_IC_Init>
 8007a6e:	b9d8      	cbnz	r0, 8007aa8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a70:	2300      	movs	r3, #0
 8007a72:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a74:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007a76:	a904      	add	r1, sp, #16
 8007a78:	4812      	ldr	r0, [pc, #72]	; (8007ac4 <MX_TIM3_Init+0xb0>)
 8007a7a:	f7fc fccd 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8007a7e:	b9b0      	cbnz	r0, 8007aae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007a80:	2200      	movs	r2, #0
 8007a82:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007a84:	2301      	movs	r3, #1
 8007a86:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007a88:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8007a8a:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007a8c:	4669      	mov	r1, sp
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <MX_TIM3_Init+0xb0>)
 8007a90:	f7fc fb0a 	bl	80040a8 <HAL_TIM_IC_ConfigChannel>
 8007a94:	b970      	cbnz	r0, 8007ab4 <MX_TIM3_Init+0xa0>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007a96:	b00b      	add	sp, #44	; 0x2c
 8007a98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007a9c:	f7ff fa76 	bl	8006f8c <Error_Handler>
 8007aa0:	e7da      	b.n	8007a58 <MX_TIM3_Init+0x44>
    Error_Handler();
 8007aa2:	f7ff fa73 	bl	8006f8c <Error_Handler>
 8007aa6:	e7df      	b.n	8007a68 <MX_TIM3_Init+0x54>
    Error_Handler();
 8007aa8:	f7ff fa70 	bl	8006f8c <Error_Handler>
 8007aac:	e7e0      	b.n	8007a70 <MX_TIM3_Init+0x5c>
    Error_Handler();
 8007aae:	f7ff fa6d 	bl	8006f8c <Error_Handler>
 8007ab2:	e7e5      	b.n	8007a80 <MX_TIM3_Init+0x6c>
    Error_Handler();
 8007ab4:	f7ff fa6a 	bl	8006f8c <Error_Handler>
}
 8007ab8:	e7ed      	b.n	8007a96 <MX_TIM3_Init+0x82>
 8007aba:	bf00      	nop
 8007abc:	20006040 	.word	0x20006040
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	200060d0 	.word	0x200060d0

08007ac8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007ac8:	b500      	push	{lr}
 8007aca:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007acc:	2300      	movs	r3, #0
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007ada:	4819      	ldr	r0, [pc, #100]	; (8007b40 <MX_TIM4_Init+0x78>)
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <MX_TIM4_Init+0x7c>)
 8007ade:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  htim4.Init.Prescaler = 0;
 8007ae2:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ae6:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  htim4.Init.Period = 65535;
 8007aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aee:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007af2:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007af6:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8007afa:	30d8      	adds	r0, #216	; 0xd8
 8007afc:	f7fc fa6a 	bl	8003fd4 <HAL_TIM_IC_Init>
 8007b00:	b9a8      	cbnz	r0, 8007b2e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b02:	2300      	movs	r3, #0
 8007b04:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b06:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	480f      	ldr	r0, [pc, #60]	; (8007b48 <MX_TIM4_Init+0x80>)
 8007b0c:	f7fc fc84 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8007b10:	b980      	cbnz	r0, 8007b34 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007b12:	2200      	movs	r2, #0
 8007b14:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007b16:	2301      	movs	r3, #1
 8007b18:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007b1a:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8007b1c:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007b1e:	4669      	mov	r1, sp
 8007b20:	4809      	ldr	r0, [pc, #36]	; (8007b48 <MX_TIM4_Init+0x80>)
 8007b22:	f7fc fac1 	bl	80040a8 <HAL_TIM_IC_ConfigChannel>
 8007b26:	b940      	cbnz	r0, 8007b3a <MX_TIM4_Init+0x72>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007b28:	b007      	add	sp, #28
 8007b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007b2e:	f7ff fa2d 	bl	8006f8c <Error_Handler>
 8007b32:	e7e6      	b.n	8007b02 <MX_TIM4_Init+0x3a>
    Error_Handler();
 8007b34:	f7ff fa2a 	bl	8006f8c <Error_Handler>
 8007b38:	e7eb      	b.n	8007b12 <MX_TIM4_Init+0x4a>
    Error_Handler();
 8007b3a:	f7ff fa27 	bl	8006f8c <Error_Handler>
}
 8007b3e:	e7f3      	b.n	8007b28 <MX_TIM4_Init+0x60>
 8007b40:	20006040 	.word	0x20006040
 8007b44:	40000800 	.word	0x40000800
 8007b48:	20006118 	.word	0x20006118

08007b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b50:	2300      	movs	r3, #0
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	9306      	str	r3, [sp, #24]
 8007b56:	9307      	str	r3, [sp, #28]
 8007b58:	9308      	str	r3, [sp, #32]
 8007b5a:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 8007b5c:	6803      	ldr	r3, [r0, #0]
 8007b5e:	4a39      	ldr	r2, [pc, #228]	; (8007c44 <HAL_TIM_Base_MspInit+0xf8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d007      	beq.n	8007b74 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8007b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b68:	d018      	beq.n	8007b9c <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8007b6a:	4a37      	ldr	r2, [pc, #220]	; (8007c48 <HAL_TIM_Base_MspInit+0xfc>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d040      	beq.n	8007bf2 <HAL_TIM_Base_MspInit+0xa6>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007b70:	b00a      	add	sp, #40	; 0x28
 8007b72:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b74:	2200      	movs	r2, #0
 8007b76:	9200      	str	r2, [sp, #0]
 8007b78:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <HAL_TIM_Base_MspInit+0x100>)
 8007b7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007b7c:	f041 0101 	orr.w	r1, r1, #1
 8007b80:	6459      	str	r1, [r3, #68]	; 0x44
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8007b8c:	2105      	movs	r1, #5
 8007b8e:	2019      	movs	r0, #25
 8007b90:	f7f9 fe86 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007b94:	2019      	movs	r0, #25
 8007b96:	f7f9 febb 	bl	8001910 <HAL_NVIC_EnableIRQ>
 8007b9a:	e7e9      	b.n	8007b70 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	9401      	str	r4, [sp, #4]
 8007ba0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40
 8007bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bae:	f002 0201 	and.w	r2, r2, #1
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bb6:	9402      	str	r4, [sp, #8]
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bd8:	a905      	add	r1, sp, #20
 8007bda:	481d      	ldr	r0, [pc, #116]	; (8007c50 <HAL_TIM_Base_MspInit+0x104>)
 8007bdc:	f7fa f8c4 	bl	8001d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007be0:	4622      	mov	r2, r4
 8007be2:	2105      	movs	r1, #5
 8007be4:	201c      	movs	r0, #28
 8007be6:	f7f9 fe5b 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007bea:	201c      	movs	r0, #28
 8007bec:	f7f9 fe90 	bl	8001910 <HAL_NVIC_EnableIRQ>
 8007bf0:	e7be      	b.n	8007b70 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bf2:	2400      	movs	r4, #0
 8007bf4:	9403      	str	r4, [sp, #12]
 8007bf6:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <HAL_TIM_Base_MspInit+0x100>)
 8007bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bfa:	f042 0202 	orr.w	r2, r2, #2
 8007bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8007c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c02:	f002 0202 	and.w	r2, r2, #2
 8007c06:	9203      	str	r2, [sp, #12]
 8007c08:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c0a:	9404      	str	r4, [sp, #16]
 8007c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0e:	f042 0204 	orr.w	r2, r2, #4
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c22:	2302      	movs	r3, #2
 8007c24:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c26:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c28:	a905      	add	r1, sp, #20
 8007c2a:	480a      	ldr	r0, [pc, #40]	; (8007c54 <HAL_TIM_Base_MspInit+0x108>)
 8007c2c:	f7fa f89c 	bl	8001d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8007c30:	4622      	mov	r2, r4
 8007c32:	2105      	movs	r1, #5
 8007c34:	201d      	movs	r0, #29
 8007c36:	f7f9 fe33 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c3a:	201d      	movs	r0, #29
 8007c3c:	f7f9 fe68 	bl	8001910 <HAL_NVIC_EnableIRQ>
}
 8007c40:	e796      	b.n	8007b70 <HAL_TIM_Base_MspInit+0x24>
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40020000 	.word	0x40020000
 8007c54:	40020800 	.word	0x40020800

08007c58 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM4)
 8007c68:	6802      	ldr	r2, [r0, #0]
 8007c6a:	4b17      	ldr	r3, [pc, #92]	; (8007cc8 <HAL_TIM_IC_MspInit+0x70>)
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007c70:	b008      	add	sp, #32
 8007c72:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c74:	2400      	movs	r4, #0
 8007c76:	9401      	str	r4, [sp, #4]
 8007c78:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8007c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7e:	f042 0204 	orr.w	r2, r2, #4
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
 8007c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c86:	f002 0204 	and.w	r2, r2, #4
 8007c8a:	9201      	str	r2, [sp, #4]
 8007c8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8e:	9402      	str	r4, [sp, #8]
 8007c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c92:	f042 0202 	orr.w	r2, r2, #2
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ca2:	2340      	movs	r3, #64	; 0x40
 8007ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007caa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cac:	a903      	add	r1, sp, #12
 8007cae:	4807      	ldr	r0, [pc, #28]	; (8007ccc <HAL_TIM_IC_MspInit+0x74>)
 8007cb0:	f7fa f85a 	bl	8001d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	2105      	movs	r1, #5
 8007cb8:	201e      	movs	r0, #30
 8007cba:	f7f9 fdf1 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007cbe:	201e      	movs	r0, #30
 8007cc0:	f7f9 fe26 	bl	8001910 <HAL_NVIC_EnableIRQ>
}
 8007cc4:	e7d4      	b.n	8007c70 <HAL_TIM_IC_MspInit+0x18>
 8007cc6:	bf00      	nop
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40020400 	.word	0x40020400

08007cd0 <HAL_TimestampUpdate_Callback>:

// Update the seconds
// We Elapse a Period at a frequency of 1Hz
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){

	if(htim == &htim1){
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <HAL_TimestampUpdate_Callback+0x20>)
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	d000      	beq.n	8007cd8 <HAL_TimestampUpdate_Callback+0x8>
 8007cd6:	4770      	bx	lr
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){
 8007cd8:	b410      	push	{r4}
		time_delta_var.seconds++;
 8007cda:	4c06      	ldr	r4, [pc, #24]	; (8007cf4 <HAL_TimestampUpdate_Callback+0x24>)
 8007cdc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ce0:	1c50      	adds	r0, r2, #1
 8007ce2:	f143 0100 	adc.w	r1, r3, #0
 8007ce6:	e9c4 0100 	strd	r0, r1, [r4]
	}

}
 8007cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20006040 	.word	0x20006040
 8007cf4:	20006160 	.word	0x20006160

08007cf8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007cf8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007cfa:	480a      	ldr	r0, [pc, #40]	; (8007d24 <MX_USART1_UART_Init+0x2c>)
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <MX_USART1_UART_Init+0x30>)
 8007cfe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8007d00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007d04:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d06:	2300      	movs	r3, #0
 8007d08:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d0a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d0c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d0e:	220c      	movs	r2, #12
 8007d10:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d12:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d16:	f7fc fc93 	bl	8004640 <HAL_UART_Init>
 8007d1a:	b900      	cbnz	r0, 8007d1e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d1c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007d1e:	f7ff f935 	bl	8006f8c <Error_Handler>
}
 8007d22:	e7fb      	b.n	8007d1c <MX_USART1_UART_Init+0x24>
 8007d24:	20006180 	.word	0x20006180
 8007d28:	40011000 	.word	0x40011000

08007d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007d2c:	b500      	push	{lr}
 8007d2e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d30:	2300      	movs	r3, #0
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	9306      	str	r3, [sp, #24]
 8007d3a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8007d3c:	6802      	ldr	r2, [r0, #0]
 8007d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d42:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d002      	beq.n	8007d50 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007d4a:	b009      	add	sp, #36	; 0x24
 8007d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d50:	2100      	movs	r1, #0
 8007d52:	9101      	str	r1, [sp, #4]
 8007d54:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8007d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5a:	f042 0210 	orr.w	r2, r2, #16
 8007d5e:	645a      	str	r2, [r3, #68]	; 0x44
 8007d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d62:	f002 0210 	and.w	r2, r2, #16
 8007d66:	9201      	str	r2, [sp, #4]
 8007d68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6a:	9102      	str	r1, [sp, #8]
 8007d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	9302      	str	r3, [sp, #8]
 8007d7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007d82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d84:	2302      	movs	r3, #2
 8007d86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d8c:	2307      	movs	r3, #7
 8007d8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d90:	a903      	add	r1, sp, #12
 8007d92:	4802      	ldr	r0, [pc, #8]	; (8007d9c <HAL_UART_MspInit+0x70>)
 8007d94:	f7f9 ffe8 	bl	8001d68 <HAL_GPIO_Init>
}
 8007d98:	e7d7      	b.n	8007d4a <HAL_UART_MspInit+0x1e>
 8007d9a:	bf00      	nop
 8007d9c:	40020000 	.word	0x40020000

08007da0 <HAL_TIM_IC_CaptureCallback>:
 * @brief interrupt on rising edge of wheel speed pins. Puts most recently captred value in circular buffer
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	// Timer Channel 1, PA8 -> Rear Right Wheel

	if(htim->Instance == TIM2){
 8007da0:	6803      	ldr	r3, [r0, #0]
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da6:	d003      	beq.n	8007db0 <HAL_TIM_IC_CaptureCallback+0x10>
		periodFRprev = periodFRcurr;						// Save the old value
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
		overflow_cnt_FR = 0;								// Reset the overflow counter.
	}
	if(htim->Instance == TIM3){
 8007da8:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d012      	beq.n	8007dd4 <HAL_TIM_IC_CaptureCallback+0x34>
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
		overflow_cnt_FL = 0;								// Reset the overflow counter.
	}

}
 8007dae:	4770      	bx	lr
		periodFRprev = periodFRcurr;						// Save the old value
 8007db0:	4a12      	ldr	r2, [pc, #72]	; (8007dfc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8007db2:	f8d2 14cc 	ldr.w	r1, [r2, #1228]	; 0x4cc
 8007db6:	f8c2 14d0 	str.w	r1, [r2, #1232]	; 0x4d0
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
 8007dba:	4911      	ldr	r1, [pc, #68]	; (8007e00 <HAL_TIM_IC_CaptureCallback+0x60>)
 8007dbc:	6809      	ldr	r1, [r1, #0]
 8007dbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007dc0:	f8c2 14cc 	str.w	r1, [r2, #1228]	; 0x4cc
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
 8007dc4:	f8d2 14ec 	ldr.w	r1, [r2, #1260]	; 0x4ec
 8007dc8:	f8c2 14c8 	str.w	r1, [r2, #1224]	; 0x4c8
		overflow_cnt_FR = 0;								// Reset the overflow counter.
 8007dcc:	2100      	movs	r1, #0
 8007dce:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8007dd2:	e7e9      	b.n	8007da8 <HAL_TIM_IC_CaptureCallback+0x8>
		periodFLprev = periodFLcurr;						// Save the old value
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8007dd6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 8007dda:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_TIM_IC_CaptureCallback+0x64>)
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007de4:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
 8007de8:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8007dec:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
		overflow_cnt_FL = 0;								// Reset the overflow counter.
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 8007df6:	e7da      	b.n	8007dae <HAL_TIM_IC_CaptureCallback+0xe>
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	200061c4 	.word	0x200061c4
 8007e00:	20006088 	.word	0x20006088
 8007e04:	200060d0 	.word	0x200060d0

08007e08 <HAL_FR_Wheelspeed_Overflow_Callback>:


//timer 2 interrupt handler
void HAL_FR_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FR++;
 8007e08:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <HAL_FR_Wheelspeed_Overflow_Callback+0x10>)
 8007e0a:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	200061c4 	.word	0x200061c4

08007e1c <HAL_FL_Wheelspeed_Overflow_Callback>:

// Timer 3 interrupt handler
void HAL_FL_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FL++;										// increment the overflow
 8007e1c:	4a03      	ldr	r2, [pc, #12]	; (8007e2c <HAL_FL_Wheelspeed_Overflow_Callback+0x10>)
 8007e1e:	f8d2 34f0 	ldr.w	r3, [r2, #1264]	; 0x4f0
 8007e22:	3301      	adds	r3, #1
 8007e24:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
}
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	200061c4 	.word	0x200061c4

08007e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e36:	e003      	b.n	8007e40 <LoopCopyDataInit>

08007e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e3e:	3104      	adds	r1, #4

08007e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e40:	480b      	ldr	r0, [pc, #44]	; (8007e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e42:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e48:	d3f6      	bcc.n	8007e38 <CopyDataInit>
  ldr  r2, =_sbss
 8007e4a:	4a0b      	ldr	r2, [pc, #44]	; (8007e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e4c:	e002      	b.n	8007e54 <LoopFillZerobss>

08007e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e50:	f842 3b04 	str.w	r3, [r2], #4

08007e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e54:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e58:	d3f9      	bcc.n	8007e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e5a:	f7ff fc0d 	bl	8007678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e5e:	f000 f907 	bl	8008070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e62:	f7ff f82b 	bl	8006ebc <main>
  bx  lr    
 8007e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007e68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007e6c:	0800c578 	.word	0x0800c578
  ldr  r0, =_sdata
 8007e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007e74:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8007e78:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8007e7c:	200066dc 	.word	0x200066dc

08007e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e80:	e7fe      	b.n	8007e80 <ADC_IRQHandler>
	...

08007e84 <std>:
 8007e84:	2300      	movs	r3, #0
 8007e86:	b510      	push	{r4, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e92:	6083      	str	r3, [r0, #8]
 8007e94:	8181      	strh	r1, [r0, #12]
 8007e96:	6643      	str	r3, [r0, #100]	; 0x64
 8007e98:	81c2      	strh	r2, [r0, #14]
 8007e9a:	6183      	str	r3, [r0, #24]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	305c      	adds	r0, #92	; 0x5c
 8007ea2:	f000 f91a 	bl	80080da <memset>
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <std+0x38>)
 8007ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <std+0x3c>)
 8007eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <std+0x40>)
 8007eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <std+0x44>)
 8007eb4:	6224      	str	r4, [r4, #32]
 8007eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007eb8:	bd10      	pop	{r4, pc}
 8007eba:	bf00      	nop
 8007ebc:	08008c1d 	.word	0x08008c1d
 8007ec0:	08008c3f 	.word	0x08008c3f
 8007ec4:	08008c77 	.word	0x08008c77
 8007ec8:	08008c9b 	.word	0x08008c9b

08007ecc <_cleanup_r>:
 8007ecc:	4901      	ldr	r1, [pc, #4]	; (8007ed4 <_cleanup_r+0x8>)
 8007ece:	f000 b8af 	b.w	8008030 <_fwalk_reent>
 8007ed2:	bf00      	nop
 8007ed4:	08009b09 	.word	0x08009b09

08007ed8 <__sfmoreglue>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	2268      	movs	r2, #104	; 0x68
 8007edc:	1e4d      	subs	r5, r1, #1
 8007ede:	4355      	muls	r5, r2
 8007ee0:	460e      	mov	r6, r1
 8007ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ee6:	f000 f921 	bl	800812c <_malloc_r>
 8007eea:	4604      	mov	r4, r0
 8007eec:	b140      	cbz	r0, 8007f00 <__sfmoreglue+0x28>
 8007eee:	2100      	movs	r1, #0
 8007ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ef4:	300c      	adds	r0, #12
 8007ef6:	60a0      	str	r0, [r4, #8]
 8007ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007efc:	f000 f8ed 	bl	80080da <memset>
 8007f00:	4620      	mov	r0, r4
 8007f02:	bd70      	pop	{r4, r5, r6, pc}

08007f04 <__sfp_lock_acquire>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_acquire+0x8>)
 8007f06:	f000 b8d8 	b.w	80080ba <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200066c9 	.word	0x200066c9

08007f10 <__sfp_lock_release>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sfp_lock_release+0x8>)
 8007f12:	f000 b8d3 	b.w	80080bc <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	200066c9 	.word	0x200066c9

08007f1c <__sinit_lock_acquire>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sinit_lock_acquire+0x8>)
 8007f1e:	f000 b8cc 	b.w	80080ba <__retarget_lock_acquire_recursive>
 8007f22:	bf00      	nop
 8007f24:	200066ca 	.word	0x200066ca

08007f28 <__sinit_lock_release>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__sinit_lock_release+0x8>)
 8007f2a:	f000 b8c7 	b.w	80080bc <__retarget_lock_release_recursive>
 8007f2e:	bf00      	nop
 8007f30:	200066ca 	.word	0x200066ca

08007f34 <__sinit>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	f7ff fff0 	bl	8007f1c <__sinit_lock_acquire>
 8007f3c:	69a3      	ldr	r3, [r4, #24]
 8007f3e:	b11b      	cbz	r3, 8007f48 <__sinit+0x14>
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f7ff bff0 	b.w	8007f28 <__sinit_lock_release>
 8007f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <__sinit+0x68>)
 8007f50:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <__sinit+0x6c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	bf04      	itt	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	61a3      	streq	r3, [r4, #24]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 f820 	bl	8007fa4 <__sfp>
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 f81c 	bl	8007fa4 <__sfp>
 8007f6c:	60a0      	str	r0, [r4, #8]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f818 	bl	8007fa4 <__sfp>
 8007f74:	2200      	movs	r2, #0
 8007f76:	60e0      	str	r0, [r4, #12]
 8007f78:	2104      	movs	r1, #4
 8007f7a:	6860      	ldr	r0, [r4, #4]
 8007f7c:	f7ff ff82 	bl	8007e84 <std>
 8007f80:	68a0      	ldr	r0, [r4, #8]
 8007f82:	2201      	movs	r2, #1
 8007f84:	2109      	movs	r1, #9
 8007f86:	f7ff ff7d 	bl	8007e84 <std>
 8007f8a:	68e0      	ldr	r0, [r4, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	2112      	movs	r1, #18
 8007f90:	f7ff ff78 	bl	8007e84 <std>
 8007f94:	2301      	movs	r3, #1
 8007f96:	61a3      	str	r3, [r4, #24]
 8007f98:	e7d2      	b.n	8007f40 <__sinit+0xc>
 8007f9a:	bf00      	nop
 8007f9c:	0800c1bc 	.word	0x0800c1bc
 8007fa0:	08007ecd 	.word	0x08007ecd

08007fa4 <__sfp>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	f7ff ffac 	bl	8007f04 <__sfp_lock_acquire>
 8007fac:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <__sfp+0x84>)
 8007fae:	681e      	ldr	r6, [r3, #0]
 8007fb0:	69b3      	ldr	r3, [r6, #24]
 8007fb2:	b913      	cbnz	r3, 8007fba <__sfp+0x16>
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff ffbd 	bl	8007f34 <__sinit>
 8007fba:	3648      	adds	r6, #72	; 0x48
 8007fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	d503      	bpl.n	8007fcc <__sfp+0x28>
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	b30b      	cbz	r3, 800800c <__sfp+0x68>
 8007fc8:	6836      	ldr	r6, [r6, #0]
 8007fca:	e7f7      	b.n	8007fbc <__sfp+0x18>
 8007fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fd0:	b9d5      	cbnz	r5, 8008008 <__sfp+0x64>
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <__sfp+0x88>)
 8007fd4:	60e3      	str	r3, [r4, #12]
 8007fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fda:	6665      	str	r5, [r4, #100]	; 0x64
 8007fdc:	f000 f86c 	bl	80080b8 <__retarget_lock_init_recursive>
 8007fe0:	f7ff ff96 	bl	8007f10 <__sfp_lock_release>
 8007fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fec:	6025      	str	r5, [r4, #0]
 8007fee:	61a5      	str	r5, [r4, #24]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ff8:	f000 f86f 	bl	80080da <memset>
 8007ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008004:	4620      	mov	r0, r4
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	3468      	adds	r4, #104	; 0x68
 800800a:	e7d9      	b.n	8007fc0 <__sfp+0x1c>
 800800c:	2104      	movs	r1, #4
 800800e:	4638      	mov	r0, r7
 8008010:	f7ff ff62 	bl	8007ed8 <__sfmoreglue>
 8008014:	4604      	mov	r4, r0
 8008016:	6030      	str	r0, [r6, #0]
 8008018:	2800      	cmp	r0, #0
 800801a:	d1d5      	bne.n	8007fc8 <__sfp+0x24>
 800801c:	f7ff ff78 	bl	8007f10 <__sfp_lock_release>
 8008020:	230c      	movs	r3, #12
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	e7ee      	b.n	8008004 <__sfp+0x60>
 8008026:	bf00      	nop
 8008028:	0800c1bc 	.word	0x0800c1bc
 800802c:	ffff0001 	.word	0xffff0001

08008030 <_fwalk_reent>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	4606      	mov	r6, r0
 8008036:	4688      	mov	r8, r1
 8008038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800803c:	2700      	movs	r7, #0
 800803e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008042:	f1b9 0901 	subs.w	r9, r9, #1
 8008046:	d505      	bpl.n	8008054 <_fwalk_reent+0x24>
 8008048:	6824      	ldr	r4, [r4, #0]
 800804a:	2c00      	cmp	r4, #0
 800804c:	d1f7      	bne.n	800803e <_fwalk_reent+0xe>
 800804e:	4638      	mov	r0, r7
 8008050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d907      	bls.n	800806a <_fwalk_reent+0x3a>
 800805a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800805e:	3301      	adds	r3, #1
 8008060:	d003      	beq.n	800806a <_fwalk_reent+0x3a>
 8008062:	4629      	mov	r1, r5
 8008064:	4630      	mov	r0, r6
 8008066:	47c0      	blx	r8
 8008068:	4307      	orrs	r7, r0
 800806a:	3568      	adds	r5, #104	; 0x68
 800806c:	e7e9      	b.n	8008042 <_fwalk_reent+0x12>
	...

08008070 <__libc_init_array>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4d0d      	ldr	r5, [pc, #52]	; (80080a8 <__libc_init_array+0x38>)
 8008074:	4c0d      	ldr	r4, [pc, #52]	; (80080ac <__libc_init_array+0x3c>)
 8008076:	1b64      	subs	r4, r4, r5
 8008078:	10a4      	asrs	r4, r4, #2
 800807a:	2600      	movs	r6, #0
 800807c:	42a6      	cmp	r6, r4
 800807e:	d109      	bne.n	8008094 <__libc_init_array+0x24>
 8008080:	4d0b      	ldr	r5, [pc, #44]	; (80080b0 <__libc_init_array+0x40>)
 8008082:	4c0c      	ldr	r4, [pc, #48]	; (80080b4 <__libc_init_array+0x44>)
 8008084:	f003 fffc 	bl	800c080 <_init>
 8008088:	1b64      	subs	r4, r4, r5
 800808a:	10a4      	asrs	r4, r4, #2
 800808c:	2600      	movs	r6, #0
 800808e:	42a6      	cmp	r6, r4
 8008090:	d105      	bne.n	800809e <__libc_init_array+0x2e>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	f855 3b04 	ldr.w	r3, [r5], #4
 8008098:	4798      	blx	r3
 800809a:	3601      	adds	r6, #1
 800809c:	e7ee      	b.n	800807c <__libc_init_array+0xc>
 800809e:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a2:	4798      	blx	r3
 80080a4:	3601      	adds	r6, #1
 80080a6:	e7f2      	b.n	800808e <__libc_init_array+0x1e>
 80080a8:	0800c570 	.word	0x0800c570
 80080ac:	0800c570 	.word	0x0800c570
 80080b0:	0800c570 	.word	0x0800c570
 80080b4:	0800c574 	.word	0x0800c574

080080b8 <__retarget_lock_init_recursive>:
 80080b8:	4770      	bx	lr

080080ba <__retarget_lock_acquire_recursive>:
 80080ba:	4770      	bx	lr

080080bc <__retarget_lock_release_recursive>:
 80080bc:	4770      	bx	lr

080080be <memcpy>:
 80080be:	440a      	add	r2, r1
 80080c0:	4291      	cmp	r1, r2
 80080c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c6:	d100      	bne.n	80080ca <memcpy+0xc>
 80080c8:	4770      	bx	lr
 80080ca:	b510      	push	{r4, lr}
 80080cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d4:	4291      	cmp	r1, r2
 80080d6:	d1f9      	bne.n	80080cc <memcpy+0xe>
 80080d8:	bd10      	pop	{r4, pc}

080080da <memset>:
 80080da:	4402      	add	r2, r0
 80080dc:	4603      	mov	r3, r0
 80080de:	4293      	cmp	r3, r2
 80080e0:	d100      	bne.n	80080e4 <memset+0xa>
 80080e2:	4770      	bx	lr
 80080e4:	f803 1b01 	strb.w	r1, [r3], #1
 80080e8:	e7f9      	b.n	80080de <memset+0x4>
	...

080080ec <sbrk_aligned>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4e0e      	ldr	r6, [pc, #56]	; (8008128 <sbrk_aligned+0x3c>)
 80080f0:	460c      	mov	r4, r1
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	b911      	cbnz	r1, 80080fe <sbrk_aligned+0x12>
 80080f8:	f000 fd60 	bl	8008bbc <_sbrk_r>
 80080fc:	6030      	str	r0, [r6, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 fd5b 	bl	8008bbc <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d00a      	beq.n	8008120 <sbrk_aligned+0x34>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d007      	beq.n	8008124 <sbrk_aligned+0x38>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4628      	mov	r0, r5
 8008118:	f000 fd50 	bl	8008bbc <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d101      	bne.n	8008124 <sbrk_aligned+0x38>
 8008120:	f04f 34ff 	mov.w	r4, #4294967295
 8008124:	4620      	mov	r0, r4
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	200066d0 	.word	0x200066d0

0800812c <_malloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	1ccd      	adds	r5, r1, #3
 8008132:	f025 0503 	bic.w	r5, r5, #3
 8008136:	3508      	adds	r5, #8
 8008138:	2d0c      	cmp	r5, #12
 800813a:	bf38      	it	cc
 800813c:	250c      	movcc	r5, #12
 800813e:	2d00      	cmp	r5, #0
 8008140:	4607      	mov	r7, r0
 8008142:	db01      	blt.n	8008148 <_malloc_r+0x1c>
 8008144:	42a9      	cmp	r1, r5
 8008146:	d905      	bls.n	8008154 <_malloc_r+0x28>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	2600      	movs	r6, #0
 800814e:	4630      	mov	r0, r6
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	4e2e      	ldr	r6, [pc, #184]	; (8008210 <_malloc_r+0xe4>)
 8008156:	f001 fd31 	bl	8009bbc <__malloc_lock>
 800815a:	6833      	ldr	r3, [r6, #0]
 800815c:	461c      	mov	r4, r3
 800815e:	bb34      	cbnz	r4, 80081ae <_malloc_r+0x82>
 8008160:	4629      	mov	r1, r5
 8008162:	4638      	mov	r0, r7
 8008164:	f7ff ffc2 	bl	80080ec <sbrk_aligned>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	4604      	mov	r4, r0
 800816c:	d14d      	bne.n	800820a <_malloc_r+0xde>
 800816e:	6834      	ldr	r4, [r6, #0]
 8008170:	4626      	mov	r6, r4
 8008172:	2e00      	cmp	r6, #0
 8008174:	d140      	bne.n	80081f8 <_malloc_r+0xcc>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	4631      	mov	r1, r6
 800817a:	4638      	mov	r0, r7
 800817c:	eb04 0803 	add.w	r8, r4, r3
 8008180:	f000 fd1c 	bl	8008bbc <_sbrk_r>
 8008184:	4580      	cmp	r8, r0
 8008186:	d13a      	bne.n	80081fe <_malloc_r+0xd2>
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	3503      	adds	r5, #3
 800818c:	1a6d      	subs	r5, r5, r1
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	4629      	mov	r1, r5
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ffa5 	bl	80080ec <sbrk_aligned>
 80081a2:	3001      	adds	r0, #1
 80081a4:	d02b      	beq.n	80081fe <_malloc_r+0xd2>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	442b      	add	r3, r5
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	e00e      	b.n	80081cc <_malloc_r+0xa0>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	1b52      	subs	r2, r2, r5
 80081b2:	d41e      	bmi.n	80081f2 <_malloc_r+0xc6>
 80081b4:	2a0b      	cmp	r2, #11
 80081b6:	d916      	bls.n	80081e6 <_malloc_r+0xba>
 80081b8:	1961      	adds	r1, r4, r5
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6025      	str	r5, [r4, #0]
 80081be:	bf18      	it	ne
 80081c0:	6059      	strne	r1, [r3, #4]
 80081c2:	6863      	ldr	r3, [r4, #4]
 80081c4:	bf08      	it	eq
 80081c6:	6031      	streq	r1, [r6, #0]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f001 fcf9 	bl	8009bc8 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0b6      	beq.n	800814e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7b3      	b.n	800814e <_malloc_r+0x22>
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	bf0c      	ite	eq
 80081ec:	6032      	streq	r2, [r6, #0]
 80081ee:	605a      	strne	r2, [r3, #4]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xa0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7b2      	b.n	800815e <_malloc_r+0x32>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b9      	b.n	8008172 <_malloc_r+0x46>
 80081fe:	230c      	movs	r3, #12
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4638      	mov	r0, r7
 8008204:	f001 fce0 	bl	8009bc8 <__malloc_unlock>
 8008208:	e7a1      	b.n	800814e <_malloc_r+0x22>
 800820a:	6025      	str	r5, [r4, #0]
 800820c:	e7de      	b.n	80081cc <_malloc_r+0xa0>
 800820e:	bf00      	nop
 8008210:	200066cc 	.word	0x200066cc

08008214 <__cvt>:
 8008214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	ec55 4b10 	vmov	r4, r5, d0
 800821c:	2d00      	cmp	r5, #0
 800821e:	460e      	mov	r6, r1
 8008220:	4619      	mov	r1, r3
 8008222:	462b      	mov	r3, r5
 8008224:	bfbb      	ittet	lt
 8008226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800822a:	461d      	movlt	r5, r3
 800822c:	2300      	movge	r3, #0
 800822e:	232d      	movlt	r3, #45	; 0x2d
 8008230:	700b      	strb	r3, [r1, #0]
 8008232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008238:	4691      	mov	r9, r2
 800823a:	f023 0820 	bic.w	r8, r3, #32
 800823e:	bfbc      	itt	lt
 8008240:	4622      	movlt	r2, r4
 8008242:	4614      	movlt	r4, r2
 8008244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008248:	d005      	beq.n	8008256 <__cvt+0x42>
 800824a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800824e:	d100      	bne.n	8008252 <__cvt+0x3e>
 8008250:	3601      	adds	r6, #1
 8008252:	2102      	movs	r1, #2
 8008254:	e000      	b.n	8008258 <__cvt+0x44>
 8008256:	2103      	movs	r1, #3
 8008258:	ab03      	add	r3, sp, #12
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	ab02      	add	r3, sp, #8
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	ec45 4b10 	vmov	d0, r4, r5
 8008264:	4653      	mov	r3, sl
 8008266:	4632      	mov	r2, r6
 8008268:	f000 fdda 	bl	8008e20 <_dtoa_r>
 800826c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008270:	4607      	mov	r7, r0
 8008272:	d102      	bne.n	800827a <__cvt+0x66>
 8008274:	f019 0f01 	tst.w	r9, #1
 8008278:	d022      	beq.n	80082c0 <__cvt+0xac>
 800827a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800827e:	eb07 0906 	add.w	r9, r7, r6
 8008282:	d110      	bne.n	80082a6 <__cvt+0x92>
 8008284:	783b      	ldrb	r3, [r7, #0]
 8008286:	2b30      	cmp	r3, #48	; 0x30
 8008288:	d10a      	bne.n	80082a0 <__cvt+0x8c>
 800828a:	2200      	movs	r2, #0
 800828c:	2300      	movs	r3, #0
 800828e:	4620      	mov	r0, r4
 8008290:	4629      	mov	r1, r5
 8008292:	f7f8 fc39 	bl	8000b08 <__aeabi_dcmpeq>
 8008296:	b918      	cbnz	r0, 80082a0 <__cvt+0x8c>
 8008298:	f1c6 0601 	rsb	r6, r6, #1
 800829c:	f8ca 6000 	str.w	r6, [sl]
 80082a0:	f8da 3000 	ldr.w	r3, [sl]
 80082a4:	4499      	add	r9, r3
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	4620      	mov	r0, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7f8 fc2b 	bl	8000b08 <__aeabi_dcmpeq>
 80082b2:	b108      	cbz	r0, 80082b8 <__cvt+0xa4>
 80082b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80082b8:	2230      	movs	r2, #48	; 0x30
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	454b      	cmp	r3, r9
 80082be:	d307      	bcc.n	80082d0 <__cvt+0xbc>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c4:	1bdb      	subs	r3, r3, r7
 80082c6:	4638      	mov	r0, r7
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	b004      	add	sp, #16
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	1c59      	adds	r1, r3, #1
 80082d2:	9103      	str	r1, [sp, #12]
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e7f0      	b.n	80082ba <__cvt+0xa6>

080082d8 <__exponent>:
 80082d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082da:	4603      	mov	r3, r0
 80082dc:	2900      	cmp	r1, #0
 80082de:	bfb8      	it	lt
 80082e0:	4249      	neglt	r1, r1
 80082e2:	f803 2b02 	strb.w	r2, [r3], #2
 80082e6:	bfb4      	ite	lt
 80082e8:	222d      	movlt	r2, #45	; 0x2d
 80082ea:	222b      	movge	r2, #43	; 0x2b
 80082ec:	2909      	cmp	r1, #9
 80082ee:	7042      	strb	r2, [r0, #1]
 80082f0:	dd2a      	ble.n	8008348 <__exponent+0x70>
 80082f2:	f10d 0407 	add.w	r4, sp, #7
 80082f6:	46a4      	mov	ip, r4
 80082f8:	270a      	movs	r7, #10
 80082fa:	46a6      	mov	lr, r4
 80082fc:	460a      	mov	r2, r1
 80082fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8008302:	fb07 1516 	mls	r5, r7, r6, r1
 8008306:	3530      	adds	r5, #48	; 0x30
 8008308:	2a63      	cmp	r2, #99	; 0x63
 800830a:	f104 34ff 	add.w	r4, r4, #4294967295
 800830e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008312:	4631      	mov	r1, r6
 8008314:	dcf1      	bgt.n	80082fa <__exponent+0x22>
 8008316:	3130      	adds	r1, #48	; 0x30
 8008318:	f1ae 0502 	sub.w	r5, lr, #2
 800831c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008320:	1c44      	adds	r4, r0, #1
 8008322:	4629      	mov	r1, r5
 8008324:	4561      	cmp	r1, ip
 8008326:	d30a      	bcc.n	800833e <__exponent+0x66>
 8008328:	f10d 0209 	add.w	r2, sp, #9
 800832c:	eba2 020e 	sub.w	r2, r2, lr
 8008330:	4565      	cmp	r5, ip
 8008332:	bf88      	it	hi
 8008334:	2200      	movhi	r2, #0
 8008336:	4413      	add	r3, r2
 8008338:	1a18      	subs	r0, r3, r0
 800833a:	b003      	add	sp, #12
 800833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008342:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008346:	e7ed      	b.n	8008324 <__exponent+0x4c>
 8008348:	2330      	movs	r3, #48	; 0x30
 800834a:	3130      	adds	r1, #48	; 0x30
 800834c:	7083      	strb	r3, [r0, #2]
 800834e:	70c1      	strb	r1, [r0, #3]
 8008350:	1d03      	adds	r3, r0, #4
 8008352:	e7f1      	b.n	8008338 <__exponent+0x60>

08008354 <_printf_float>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	ed2d 8b02 	vpush	{d8}
 800835c:	b08d      	sub	sp, #52	; 0x34
 800835e:	460c      	mov	r4, r1
 8008360:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008364:	4616      	mov	r6, r2
 8008366:	461f      	mov	r7, r3
 8008368:	4605      	mov	r5, r0
 800836a:	f001 fc09 	bl	8009b80 <_localeconv_r>
 800836e:	f8d0 a000 	ldr.w	sl, [r0]
 8008372:	4650      	mov	r0, sl
 8008374:	f7f7 ff4c 	bl	8000210 <strlen>
 8008378:	2300      	movs	r3, #0
 800837a:	930a      	str	r3, [sp, #40]	; 0x28
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	9305      	str	r3, [sp, #20]
 8008380:	f8d8 3000 	ldr.w	r3, [r8]
 8008384:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008388:	3307      	adds	r3, #7
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	f103 0208 	add.w	r2, r3, #8
 8008392:	f8c8 2000 	str.w	r2, [r8]
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800839e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ac:	ee08 0a10 	vmov	s16, r0
 80083b0:	4b9f      	ldr	r3, [pc, #636]	; (8008630 <_printf_float+0x2dc>)
 80083b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ba:	f7f8 fbd7 	bl	8000b6c <__aeabi_dcmpun>
 80083be:	bb88      	cbnz	r0, 8008424 <_printf_float+0xd0>
 80083c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c4:	4b9a      	ldr	r3, [pc, #616]	; (8008630 <_printf_float+0x2dc>)
 80083c6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ca:	f7f8 fbb1 	bl	8000b30 <__aeabi_dcmple>
 80083ce:	bb48      	cbnz	r0, 8008424 <_printf_float+0xd0>
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f8 fba0 	bl	8000b1c <__aeabi_dcmplt>
 80083dc:	b110      	cbz	r0, 80083e4 <_printf_float+0x90>
 80083de:	232d      	movs	r3, #45	; 0x2d
 80083e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e4:	4b93      	ldr	r3, [pc, #588]	; (8008634 <_printf_float+0x2e0>)
 80083e6:	4894      	ldr	r0, [pc, #592]	; (8008638 <_printf_float+0x2e4>)
 80083e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083ec:	bf94      	ite	ls
 80083ee:	4698      	movls	r8, r3
 80083f0:	4680      	movhi	r8, r0
 80083f2:	2303      	movs	r3, #3
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	9b05      	ldr	r3, [sp, #20]
 80083f8:	f023 0204 	bic.w	r2, r3, #4
 80083fc:	6022      	str	r2, [r4, #0]
 80083fe:	f04f 0900 	mov.w	r9, #0
 8008402:	9700      	str	r7, [sp, #0]
 8008404:	4633      	mov	r3, r6
 8008406:	aa0b      	add	r2, sp, #44	; 0x2c
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f000 f9d8 	bl	80087c0 <_printf_common>
 8008410:	3001      	adds	r0, #1
 8008412:	f040 8090 	bne.w	8008536 <_printf_float+0x1e2>
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	b00d      	add	sp, #52	; 0x34
 800841c:	ecbd 8b02 	vpop	{d8}
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	4640      	mov	r0, r8
 800842a:	4649      	mov	r1, r9
 800842c:	f7f8 fb9e 	bl	8000b6c <__aeabi_dcmpun>
 8008430:	b140      	cbz	r0, 8008444 <_printf_float+0xf0>
 8008432:	464b      	mov	r3, r9
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfbc      	itt	lt
 8008438:	232d      	movlt	r3, #45	; 0x2d
 800843a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800843e:	487f      	ldr	r0, [pc, #508]	; (800863c <_printf_float+0x2e8>)
 8008440:	4b7f      	ldr	r3, [pc, #508]	; (8008640 <_printf_float+0x2ec>)
 8008442:	e7d1      	b.n	80083e8 <_printf_float+0x94>
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800844a:	9206      	str	r2, [sp, #24]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	d13f      	bne.n	80084d0 <_printf_float+0x17c>
 8008450:	2306      	movs	r3, #6
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	9b05      	ldr	r3, [sp, #20]
 8008456:	6861      	ldr	r1, [r4, #4]
 8008458:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800845c:	2300      	movs	r3, #0
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	ab0a      	add	r3, sp, #40	; 0x28
 8008462:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008466:	ab09      	add	r3, sp, #36	; 0x24
 8008468:	ec49 8b10 	vmov	d0, r8, r9
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	6022      	str	r2, [r4, #0]
 8008470:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008474:	4628      	mov	r0, r5
 8008476:	f7ff fecd 	bl	8008214 <__cvt>
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800847e:	2b47      	cmp	r3, #71	; 0x47
 8008480:	4680      	mov	r8, r0
 8008482:	d108      	bne.n	8008496 <_printf_float+0x142>
 8008484:	1cc8      	adds	r0, r1, #3
 8008486:	db02      	blt.n	800848e <_printf_float+0x13a>
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	4299      	cmp	r1, r3
 800848c:	dd41      	ble.n	8008512 <_printf_float+0x1be>
 800848e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008492:	fa5f fb8b 	uxtb.w	fp, fp
 8008496:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800849a:	d820      	bhi.n	80084de <_printf_float+0x18a>
 800849c:	3901      	subs	r1, #1
 800849e:	465a      	mov	r2, fp
 80084a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084a4:	9109      	str	r1, [sp, #36]	; 0x24
 80084a6:	f7ff ff17 	bl	80082d8 <__exponent>
 80084aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ac:	1813      	adds	r3, r2, r0
 80084ae:	2a01      	cmp	r2, #1
 80084b0:	4681      	mov	r9, r0
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	dc02      	bgt.n	80084bc <_printf_float+0x168>
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	07d2      	lsls	r2, r2, #31
 80084ba:	d501      	bpl.n	80084c0 <_printf_float+0x16c>
 80084bc:	3301      	adds	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d09c      	beq.n	8008402 <_printf_float+0xae>
 80084c8:	232d      	movs	r3, #45	; 0x2d
 80084ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ce:	e798      	b.n	8008402 <_printf_float+0xae>
 80084d0:	9a06      	ldr	r2, [sp, #24]
 80084d2:	2a47      	cmp	r2, #71	; 0x47
 80084d4:	d1be      	bne.n	8008454 <_printf_float+0x100>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1bc      	bne.n	8008454 <_printf_float+0x100>
 80084da:	2301      	movs	r3, #1
 80084dc:	e7b9      	b.n	8008452 <_printf_float+0xfe>
 80084de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084e2:	d118      	bne.n	8008516 <_printf_float+0x1c2>
 80084e4:	2900      	cmp	r1, #0
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	dd0b      	ble.n	8008502 <_printf_float+0x1ae>
 80084ea:	6121      	str	r1, [r4, #16]
 80084ec:	b913      	cbnz	r3, 80084f4 <_printf_float+0x1a0>
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	07d0      	lsls	r0, r2, #31
 80084f2:	d502      	bpl.n	80084fa <_printf_float+0x1a6>
 80084f4:	3301      	adds	r3, #1
 80084f6:	440b      	add	r3, r1
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80084fc:	f04f 0900 	mov.w	r9, #0
 8008500:	e7de      	b.n	80084c0 <_printf_float+0x16c>
 8008502:	b913      	cbnz	r3, 800850a <_printf_float+0x1b6>
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	07d2      	lsls	r2, r2, #31
 8008508:	d501      	bpl.n	800850e <_printf_float+0x1ba>
 800850a:	3302      	adds	r3, #2
 800850c:	e7f4      	b.n	80084f8 <_printf_float+0x1a4>
 800850e:	2301      	movs	r3, #1
 8008510:	e7f2      	b.n	80084f8 <_printf_float+0x1a4>
 8008512:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	4299      	cmp	r1, r3
 800851a:	db05      	blt.n	8008528 <_printf_float+0x1d4>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	6121      	str	r1, [r4, #16]
 8008520:	07d8      	lsls	r0, r3, #31
 8008522:	d5ea      	bpl.n	80084fa <_printf_float+0x1a6>
 8008524:	1c4b      	adds	r3, r1, #1
 8008526:	e7e7      	b.n	80084f8 <_printf_float+0x1a4>
 8008528:	2900      	cmp	r1, #0
 800852a:	bfd4      	ite	le
 800852c:	f1c1 0202 	rsble	r2, r1, #2
 8008530:	2201      	movgt	r2, #1
 8008532:	4413      	add	r3, r2
 8008534:	e7e0      	b.n	80084f8 <_printf_float+0x1a4>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	055a      	lsls	r2, r3, #21
 800853a:	d407      	bmi.n	800854c <_printf_float+0x1f8>
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	4642      	mov	r2, r8
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	d12c      	bne.n	80085a4 <_printf_float+0x250>
 800854a:	e764      	b.n	8008416 <_printf_float+0xc2>
 800854c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008550:	f240 80e0 	bls.w	8008714 <_printf_float+0x3c0>
 8008554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008558:	2200      	movs	r2, #0
 800855a:	2300      	movs	r3, #0
 800855c:	f7f8 fad4 	bl	8000b08 <__aeabi_dcmpeq>
 8008560:	2800      	cmp	r0, #0
 8008562:	d034      	beq.n	80085ce <_printf_float+0x27a>
 8008564:	4a37      	ldr	r2, [pc, #220]	; (8008644 <_printf_float+0x2f0>)
 8008566:	2301      	movs	r3, #1
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af51 	beq.w	8008416 <_printf_float+0xc2>
 8008574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008578:	429a      	cmp	r2, r3
 800857a:	db02      	blt.n	8008582 <_printf_float+0x22e>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	07d8      	lsls	r0, r3, #31
 8008580:	d510      	bpl.n	80085a4 <_printf_float+0x250>
 8008582:	ee18 3a10 	vmov	r3, s16
 8008586:	4652      	mov	r2, sl
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af41 	beq.w	8008416 <_printf_float+0xc2>
 8008594:	f04f 0800 	mov.w	r8, #0
 8008598:	f104 091a 	add.w	r9, r4, #26
 800859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859e:	3b01      	subs	r3, #1
 80085a0:	4543      	cmp	r3, r8
 80085a2:	dc09      	bgt.n	80085b8 <_printf_float+0x264>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	079b      	lsls	r3, r3, #30
 80085a8:	f100 8105 	bmi.w	80087b6 <_printf_float+0x462>
 80085ac:	68e0      	ldr	r0, [r4, #12]
 80085ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b0:	4298      	cmp	r0, r3
 80085b2:	bfb8      	it	lt
 80085b4:	4618      	movlt	r0, r3
 80085b6:	e730      	b.n	800841a <_printf_float+0xc6>
 80085b8:	2301      	movs	r3, #1
 80085ba:	464a      	mov	r2, r9
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af27 	beq.w	8008416 <_printf_float+0xc2>
 80085c8:	f108 0801 	add.w	r8, r8, #1
 80085cc:	e7e6      	b.n	800859c <_printf_float+0x248>
 80085ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dc39      	bgt.n	8008648 <_printf_float+0x2f4>
 80085d4:	4a1b      	ldr	r2, [pc, #108]	; (8008644 <_printf_float+0x2f0>)
 80085d6:	2301      	movs	r3, #1
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f af19 	beq.w	8008416 <_printf_float+0xc2>
 80085e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085e8:	4313      	orrs	r3, r2
 80085ea:	d102      	bne.n	80085f2 <_printf_float+0x29e>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	07d9      	lsls	r1, r3, #31
 80085f0:	d5d8      	bpl.n	80085a4 <_printf_float+0x250>
 80085f2:	ee18 3a10 	vmov	r3, s16
 80085f6:	4652      	mov	r2, sl
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	f43f af09 	beq.w	8008416 <_printf_float+0xc2>
 8008604:	f04f 0900 	mov.w	r9, #0
 8008608:	f104 0a1a 	add.w	sl, r4, #26
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	425b      	negs	r3, r3
 8008610:	454b      	cmp	r3, r9
 8008612:	dc01      	bgt.n	8008618 <_printf_float+0x2c4>
 8008614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008616:	e792      	b.n	800853e <_printf_float+0x1ea>
 8008618:	2301      	movs	r3, #1
 800861a:	4652      	mov	r2, sl
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	f43f aef7 	beq.w	8008416 <_printf_float+0xc2>
 8008628:	f109 0901 	add.w	r9, r9, #1
 800862c:	e7ee      	b.n	800860c <_printf_float+0x2b8>
 800862e:	bf00      	nop
 8008630:	7fefffff 	.word	0x7fefffff
 8008634:	0800c1c0 	.word	0x0800c1c0
 8008638:	0800c1c4 	.word	0x0800c1c4
 800863c:	0800c1cc 	.word	0x0800c1cc
 8008640:	0800c1c8 	.word	0x0800c1c8
 8008644:	0800c1d0 	.word	0x0800c1d0
 8008648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800864a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800864c:	429a      	cmp	r2, r3
 800864e:	bfa8      	it	ge
 8008650:	461a      	movge	r2, r3
 8008652:	2a00      	cmp	r2, #0
 8008654:	4691      	mov	r9, r2
 8008656:	dc37      	bgt.n	80086c8 <_printf_float+0x374>
 8008658:	f04f 0b00 	mov.w	fp, #0
 800865c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008660:	f104 021a 	add.w	r2, r4, #26
 8008664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	eba3 0309 	sub.w	r3, r3, r9
 800866c:	455b      	cmp	r3, fp
 800866e:	dc33      	bgt.n	80086d8 <_printf_float+0x384>
 8008670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008674:	429a      	cmp	r2, r3
 8008676:	db3b      	blt.n	80086f0 <_printf_float+0x39c>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	07da      	lsls	r2, r3, #31
 800867c:	d438      	bmi.n	80086f0 <_printf_float+0x39c>
 800867e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008680:	9a05      	ldr	r2, [sp, #20]
 8008682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008684:	1a9a      	subs	r2, r3, r2
 8008686:	eba3 0901 	sub.w	r9, r3, r1
 800868a:	4591      	cmp	r9, r2
 800868c:	bfa8      	it	ge
 800868e:	4691      	movge	r9, r2
 8008690:	f1b9 0f00 	cmp.w	r9, #0
 8008694:	dc35      	bgt.n	8008702 <_printf_float+0x3ae>
 8008696:	f04f 0800 	mov.w	r8, #0
 800869a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800869e:	f104 0a1a 	add.w	sl, r4, #26
 80086a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	eba3 0309 	sub.w	r3, r3, r9
 80086ac:	4543      	cmp	r3, r8
 80086ae:	f77f af79 	ble.w	80085a4 <_printf_float+0x250>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4652      	mov	r2, sl
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f aeaa 	beq.w	8008416 <_printf_float+0xc2>
 80086c2:	f108 0801 	add.w	r8, r8, #1
 80086c6:	e7ec      	b.n	80086a2 <_printf_float+0x34e>
 80086c8:	4613      	mov	r3, r2
 80086ca:	4631      	mov	r1, r6
 80086cc:	4642      	mov	r2, r8
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	d1c0      	bne.n	8008658 <_printf_float+0x304>
 80086d6:	e69e      	b.n	8008416 <_printf_float+0xc2>
 80086d8:	2301      	movs	r3, #1
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	9205      	str	r2, [sp, #20]
 80086e0:	47b8      	blx	r7
 80086e2:	3001      	adds	r0, #1
 80086e4:	f43f ae97 	beq.w	8008416 <_printf_float+0xc2>
 80086e8:	9a05      	ldr	r2, [sp, #20]
 80086ea:	f10b 0b01 	add.w	fp, fp, #1
 80086ee:	e7b9      	b.n	8008664 <_printf_float+0x310>
 80086f0:	ee18 3a10 	vmov	r3, s16
 80086f4:	4652      	mov	r2, sl
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	d1be      	bne.n	800867e <_printf_float+0x32a>
 8008700:	e689      	b.n	8008416 <_printf_float+0xc2>
 8008702:	9a05      	ldr	r2, [sp, #20]
 8008704:	464b      	mov	r3, r9
 8008706:	4442      	add	r2, r8
 8008708:	4631      	mov	r1, r6
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	d1c1      	bne.n	8008696 <_printf_float+0x342>
 8008712:	e680      	b.n	8008416 <_printf_float+0xc2>
 8008714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008716:	2a01      	cmp	r2, #1
 8008718:	dc01      	bgt.n	800871e <_printf_float+0x3ca>
 800871a:	07db      	lsls	r3, r3, #31
 800871c:	d538      	bpl.n	8008790 <_printf_float+0x43c>
 800871e:	2301      	movs	r3, #1
 8008720:	4642      	mov	r2, r8
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	f43f ae74 	beq.w	8008416 <_printf_float+0xc2>
 800872e:	ee18 3a10 	vmov	r3, s16
 8008732:	4652      	mov	r2, sl
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f ae6b 	beq.w	8008416 <_printf_float+0xc2>
 8008740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	f7f8 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800874c:	b9d8      	cbnz	r0, 8008786 <_printf_float+0x432>
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	f108 0201 	add.w	r2, r8, #1
 8008754:	3b01      	subs	r3, #1
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	d10e      	bne.n	800877e <_printf_float+0x42a>
 8008760:	e659      	b.n	8008416 <_printf_float+0xc2>
 8008762:	2301      	movs	r3, #1
 8008764:	4652      	mov	r2, sl
 8008766:	4631      	mov	r1, r6
 8008768:	4628      	mov	r0, r5
 800876a:	47b8      	blx	r7
 800876c:	3001      	adds	r0, #1
 800876e:	f43f ae52 	beq.w	8008416 <_printf_float+0xc2>
 8008772:	f108 0801 	add.w	r8, r8, #1
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	3b01      	subs	r3, #1
 800877a:	4543      	cmp	r3, r8
 800877c:	dcf1      	bgt.n	8008762 <_printf_float+0x40e>
 800877e:	464b      	mov	r3, r9
 8008780:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008784:	e6dc      	b.n	8008540 <_printf_float+0x1ec>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	f104 0a1a 	add.w	sl, r4, #26
 800878e:	e7f2      	b.n	8008776 <_printf_float+0x422>
 8008790:	2301      	movs	r3, #1
 8008792:	4642      	mov	r2, r8
 8008794:	e7df      	b.n	8008756 <_printf_float+0x402>
 8008796:	2301      	movs	r3, #1
 8008798:	464a      	mov	r2, r9
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae38 	beq.w	8008416 <_printf_float+0xc2>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ae:	1a5b      	subs	r3, r3, r1
 80087b0:	4543      	cmp	r3, r8
 80087b2:	dcf0      	bgt.n	8008796 <_printf_float+0x442>
 80087b4:	e6fa      	b.n	80085ac <_printf_float+0x258>
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	f104 0919 	add.w	r9, r4, #25
 80087be:	e7f4      	b.n	80087aa <_printf_float+0x456>

080087c0 <_printf_common>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	4616      	mov	r6, r2
 80087c6:	4699      	mov	r9, r3
 80087c8:	688a      	ldr	r2, [r1, #8]
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bfb8      	it	lt
 80087d4:	4613      	movlt	r3, r2
 80087d6:	6033      	str	r3, [r6, #0]
 80087d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087dc:	4607      	mov	r7, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	b10a      	cbz	r2, 80087e6 <_printf_common+0x26>
 80087e2:	3301      	adds	r3, #1
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	0699      	lsls	r1, r3, #26
 80087ea:	bf42      	ittt	mi
 80087ec:	6833      	ldrmi	r3, [r6, #0]
 80087ee:	3302      	addmi	r3, #2
 80087f0:	6033      	strmi	r3, [r6, #0]
 80087f2:	6825      	ldr	r5, [r4, #0]
 80087f4:	f015 0506 	ands.w	r5, r5, #6
 80087f8:	d106      	bne.n	8008808 <_printf_common+0x48>
 80087fa:	f104 0a19 	add.w	sl, r4, #25
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	6832      	ldr	r2, [r6, #0]
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	42ab      	cmp	r3, r5
 8008806:	dc26      	bgt.n	8008856 <_printf_common+0x96>
 8008808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800880c:	1e13      	subs	r3, r2, #0
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	bf18      	it	ne
 8008812:	2301      	movne	r3, #1
 8008814:	0692      	lsls	r2, r2, #26
 8008816:	d42b      	bmi.n	8008870 <_printf_common+0xb0>
 8008818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800881c:	4649      	mov	r1, r9
 800881e:	4638      	mov	r0, r7
 8008820:	47c0      	blx	r8
 8008822:	3001      	adds	r0, #1
 8008824:	d01e      	beq.n	8008864 <_printf_common+0xa4>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	68e5      	ldr	r5, [r4, #12]
 800882a:	6832      	ldr	r2, [r6, #0]
 800882c:	f003 0306 	and.w	r3, r3, #6
 8008830:	2b04      	cmp	r3, #4
 8008832:	bf08      	it	eq
 8008834:	1aad      	subeq	r5, r5, r2
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	6922      	ldr	r2, [r4, #16]
 800883a:	bf0c      	ite	eq
 800883c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008840:	2500      	movne	r5, #0
 8008842:	4293      	cmp	r3, r2
 8008844:	bfc4      	itt	gt
 8008846:	1a9b      	subgt	r3, r3, r2
 8008848:	18ed      	addgt	r5, r5, r3
 800884a:	2600      	movs	r6, #0
 800884c:	341a      	adds	r4, #26
 800884e:	42b5      	cmp	r5, r6
 8008850:	d11a      	bne.n	8008888 <_printf_common+0xc8>
 8008852:	2000      	movs	r0, #0
 8008854:	e008      	b.n	8008868 <_printf_common+0xa8>
 8008856:	2301      	movs	r3, #1
 8008858:	4652      	mov	r2, sl
 800885a:	4649      	mov	r1, r9
 800885c:	4638      	mov	r0, r7
 800885e:	47c0      	blx	r8
 8008860:	3001      	adds	r0, #1
 8008862:	d103      	bne.n	800886c <_printf_common+0xac>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	3501      	adds	r5, #1
 800886e:	e7c6      	b.n	80087fe <_printf_common+0x3e>
 8008870:	18e1      	adds	r1, r4, r3
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	2030      	movs	r0, #48	; 0x30
 8008876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800887a:	4422      	add	r2, r4
 800887c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008884:	3302      	adds	r3, #2
 8008886:	e7c7      	b.n	8008818 <_printf_common+0x58>
 8008888:	2301      	movs	r3, #1
 800888a:	4622      	mov	r2, r4
 800888c:	4649      	mov	r1, r9
 800888e:	4638      	mov	r0, r7
 8008890:	47c0      	blx	r8
 8008892:	3001      	adds	r0, #1
 8008894:	d0e6      	beq.n	8008864 <_printf_common+0xa4>
 8008896:	3601      	adds	r6, #1
 8008898:	e7d9      	b.n	800884e <_printf_common+0x8e>
	...

0800889c <_printf_i>:
 800889c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	7e0f      	ldrb	r7, [r1, #24]
 80088a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088a4:	2f78      	cmp	r7, #120	; 0x78
 80088a6:	4691      	mov	r9, r2
 80088a8:	4680      	mov	r8, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	469a      	mov	sl, r3
 80088ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088b2:	d807      	bhi.n	80088c4 <_printf_i+0x28>
 80088b4:	2f62      	cmp	r7, #98	; 0x62
 80088b6:	d80a      	bhi.n	80088ce <_printf_i+0x32>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	f000 80d8 	beq.w	8008a6e <_printf_i+0x1d2>
 80088be:	2f58      	cmp	r7, #88	; 0x58
 80088c0:	f000 80a3 	beq.w	8008a0a <_printf_i+0x16e>
 80088c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088cc:	e03a      	b.n	8008944 <_printf_i+0xa8>
 80088ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088d2:	2b15      	cmp	r3, #21
 80088d4:	d8f6      	bhi.n	80088c4 <_printf_i+0x28>
 80088d6:	a101      	add	r1, pc, #4	; (adr r1, 80088dc <_printf_i+0x40>)
 80088d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008949 	.word	0x08008949
 80088e4:	080088c5 	.word	0x080088c5
 80088e8:	080088c5 	.word	0x080088c5
 80088ec:	080088c5 	.word	0x080088c5
 80088f0:	080088c5 	.word	0x080088c5
 80088f4:	08008949 	.word	0x08008949
 80088f8:	080088c5 	.word	0x080088c5
 80088fc:	080088c5 	.word	0x080088c5
 8008900:	080088c5 	.word	0x080088c5
 8008904:	080088c5 	.word	0x080088c5
 8008908:	08008a55 	.word	0x08008a55
 800890c:	08008979 	.word	0x08008979
 8008910:	08008a37 	.word	0x08008a37
 8008914:	080088c5 	.word	0x080088c5
 8008918:	080088c5 	.word	0x080088c5
 800891c:	08008a77 	.word	0x08008a77
 8008920:	080088c5 	.word	0x080088c5
 8008924:	08008979 	.word	0x08008979
 8008928:	080088c5 	.word	0x080088c5
 800892c:	080088c5 	.word	0x080088c5
 8008930:	08008a3f 	.word	0x08008a3f
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	602a      	str	r2, [r5, #0]
 800893c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008944:	2301      	movs	r3, #1
 8008946:	e0a3      	b.n	8008a90 <_printf_i+0x1f4>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	6829      	ldr	r1, [r5, #0]
 800894c:	0606      	lsls	r6, r0, #24
 800894e:	f101 0304 	add.w	r3, r1, #4
 8008952:	d50a      	bpl.n	800896a <_printf_i+0xce>
 8008954:	680e      	ldr	r6, [r1, #0]
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	2e00      	cmp	r6, #0
 800895a:	da03      	bge.n	8008964 <_printf_i+0xc8>
 800895c:	232d      	movs	r3, #45	; 0x2d
 800895e:	4276      	negs	r6, r6
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008964:	485e      	ldr	r0, [pc, #376]	; (8008ae0 <_printf_i+0x244>)
 8008966:	230a      	movs	r3, #10
 8008968:	e019      	b.n	800899e <_printf_i+0x102>
 800896a:	680e      	ldr	r6, [r1, #0]
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008972:	bf18      	it	ne
 8008974:	b236      	sxthne	r6, r6
 8008976:	e7ef      	b.n	8008958 <_printf_i+0xbc>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	6029      	str	r1, [r5, #0]
 8008980:	0601      	lsls	r1, r0, #24
 8008982:	d501      	bpl.n	8008988 <_printf_i+0xec>
 8008984:	681e      	ldr	r6, [r3, #0]
 8008986:	e002      	b.n	800898e <_printf_i+0xf2>
 8008988:	0646      	lsls	r6, r0, #25
 800898a:	d5fb      	bpl.n	8008984 <_printf_i+0xe8>
 800898c:	881e      	ldrh	r6, [r3, #0]
 800898e:	4854      	ldr	r0, [pc, #336]	; (8008ae0 <_printf_i+0x244>)
 8008990:	2f6f      	cmp	r7, #111	; 0x6f
 8008992:	bf0c      	ite	eq
 8008994:	2308      	moveq	r3, #8
 8008996:	230a      	movne	r3, #10
 8008998:	2100      	movs	r1, #0
 800899a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800899e:	6865      	ldr	r5, [r4, #4]
 80089a0:	60a5      	str	r5, [r4, #8]
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	bfa2      	ittt	ge
 80089a6:	6821      	ldrge	r1, [r4, #0]
 80089a8:	f021 0104 	bicge.w	r1, r1, #4
 80089ac:	6021      	strge	r1, [r4, #0]
 80089ae:	b90e      	cbnz	r6, 80089b4 <_printf_i+0x118>
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	d04d      	beq.n	8008a50 <_printf_i+0x1b4>
 80089b4:	4615      	mov	r5, r2
 80089b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ba:	fb03 6711 	mls	r7, r3, r1, r6
 80089be:	5dc7      	ldrb	r7, [r0, r7]
 80089c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089c4:	4637      	mov	r7, r6
 80089c6:	42bb      	cmp	r3, r7
 80089c8:	460e      	mov	r6, r1
 80089ca:	d9f4      	bls.n	80089b6 <_printf_i+0x11a>
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d10b      	bne.n	80089e8 <_printf_i+0x14c>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	07de      	lsls	r6, r3, #31
 80089d4:	d508      	bpl.n	80089e8 <_printf_i+0x14c>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	6861      	ldr	r1, [r4, #4]
 80089da:	4299      	cmp	r1, r3
 80089dc:	bfde      	ittt	le
 80089de:	2330      	movle	r3, #48	; 0x30
 80089e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089e8:	1b52      	subs	r2, r2, r5
 80089ea:	6122      	str	r2, [r4, #16]
 80089ec:	f8cd a000 	str.w	sl, [sp]
 80089f0:	464b      	mov	r3, r9
 80089f2:	aa03      	add	r2, sp, #12
 80089f4:	4621      	mov	r1, r4
 80089f6:	4640      	mov	r0, r8
 80089f8:	f7ff fee2 	bl	80087c0 <_printf_common>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d14c      	bne.n	8008a9a <_printf_i+0x1fe>
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	b004      	add	sp, #16
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	4835      	ldr	r0, [pc, #212]	; (8008ae0 <_printf_i+0x244>)
 8008a0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a10:	6829      	ldr	r1, [r5, #0]
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a18:	6029      	str	r1, [r5, #0]
 8008a1a:	061d      	lsls	r5, r3, #24
 8008a1c:	d514      	bpl.n	8008a48 <_printf_i+0x1ac>
 8008a1e:	07df      	lsls	r7, r3, #31
 8008a20:	bf44      	itt	mi
 8008a22:	f043 0320 	orrmi.w	r3, r3, #32
 8008a26:	6023      	strmi	r3, [r4, #0]
 8008a28:	b91e      	cbnz	r6, 8008a32 <_printf_i+0x196>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f023 0320 	bic.w	r3, r3, #32
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	2310      	movs	r3, #16
 8008a34:	e7b0      	b.n	8008998 <_printf_i+0xfc>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f043 0320 	orr.w	r3, r3, #32
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	2378      	movs	r3, #120	; 0x78
 8008a40:	4828      	ldr	r0, [pc, #160]	; (8008ae4 <_printf_i+0x248>)
 8008a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a46:	e7e3      	b.n	8008a10 <_printf_i+0x174>
 8008a48:	0659      	lsls	r1, r3, #25
 8008a4a:	bf48      	it	mi
 8008a4c:	b2b6      	uxthmi	r6, r6
 8008a4e:	e7e6      	b.n	8008a1e <_printf_i+0x182>
 8008a50:	4615      	mov	r5, r2
 8008a52:	e7bb      	b.n	80089cc <_printf_i+0x130>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	6826      	ldr	r6, [r4, #0]
 8008a58:	6961      	ldr	r1, [r4, #20]
 8008a5a:	1d18      	adds	r0, r3, #4
 8008a5c:	6028      	str	r0, [r5, #0]
 8008a5e:	0635      	lsls	r5, r6, #24
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	d501      	bpl.n	8008a68 <_printf_i+0x1cc>
 8008a64:	6019      	str	r1, [r3, #0]
 8008a66:	e002      	b.n	8008a6e <_printf_i+0x1d2>
 8008a68:	0670      	lsls	r0, r6, #25
 8008a6a:	d5fb      	bpl.n	8008a64 <_printf_i+0x1c8>
 8008a6c:	8019      	strh	r1, [r3, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	4615      	mov	r5, r2
 8008a74:	e7ba      	b.n	80089ec <_printf_i+0x150>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	602a      	str	r2, [r5, #0]
 8008a7c:	681d      	ldr	r5, [r3, #0]
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	2100      	movs	r1, #0
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7f7 fbcc 	bl	8000220 <memchr>
 8008a88:	b108      	cbz	r0, 8008a8e <_printf_i+0x1f2>
 8008a8a:	1b40      	subs	r0, r0, r5
 8008a8c:	6060      	str	r0, [r4, #4]
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	6123      	str	r3, [r4, #16]
 8008a92:	2300      	movs	r3, #0
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a98:	e7a8      	b.n	80089ec <_printf_i+0x150>
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	47d0      	blx	sl
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d0ab      	beq.n	8008a00 <_printf_i+0x164>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	079b      	lsls	r3, r3, #30
 8008aac:	d413      	bmi.n	8008ad6 <_printf_i+0x23a>
 8008aae:	68e0      	ldr	r0, [r4, #12]
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	4298      	cmp	r0, r3
 8008ab4:	bfb8      	it	lt
 8008ab6:	4618      	movlt	r0, r3
 8008ab8:	e7a4      	b.n	8008a04 <_printf_i+0x168>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4632      	mov	r2, r6
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	47d0      	blx	sl
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d09b      	beq.n	8008a00 <_printf_i+0x164>
 8008ac8:	3501      	adds	r5, #1
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	9903      	ldr	r1, [sp, #12]
 8008ace:	1a5b      	subs	r3, r3, r1
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dcf2      	bgt.n	8008aba <_printf_i+0x21e>
 8008ad4:	e7eb      	b.n	8008aae <_printf_i+0x212>
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	f104 0619 	add.w	r6, r4, #25
 8008adc:	e7f5      	b.n	8008aca <_printf_i+0x22e>
 8008ade:	bf00      	nop
 8008ae0:	0800c1d2 	.word	0x0800c1d2
 8008ae4:	0800c1e3 	.word	0x0800c1e3

08008ae8 <cleanup_glue>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	6809      	ldr	r1, [r1, #0]
 8008aee:	4605      	mov	r5, r0
 8008af0:	b109      	cbz	r1, 8008af6 <cleanup_glue+0xe>
 8008af2:	f7ff fff9 	bl	8008ae8 <cleanup_glue>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afe:	f001 bc03 	b.w	800a308 <_free_r>
	...

08008b04 <_reclaim_reent>:
 8008b04:	4b2c      	ldr	r3, [pc, #176]	; (8008bb8 <_reclaim_reent+0xb4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4283      	cmp	r3, r0
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d051      	beq.n	8008bb4 <_reclaim_reent+0xb0>
 8008b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b12:	b143      	cbz	r3, 8008b26 <_reclaim_reent+0x22>
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d14a      	bne.n	8008bb0 <_reclaim_reent+0xac>
 8008b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	b111      	cbz	r1, 8008b26 <_reclaim_reent+0x22>
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 fbf1 	bl	800a308 <_free_r>
 8008b26:	6961      	ldr	r1, [r4, #20]
 8008b28:	b111      	cbz	r1, 8008b30 <_reclaim_reent+0x2c>
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f001 fbec 	bl	800a308 <_free_r>
 8008b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b32:	b111      	cbz	r1, 8008b3a <_reclaim_reent+0x36>
 8008b34:	4620      	mov	r0, r4
 8008b36:	f001 fbe7 	bl	800a308 <_free_r>
 8008b3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b3c:	b111      	cbz	r1, 8008b44 <_reclaim_reent+0x40>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 fbe2 	bl	800a308 <_free_r>
 8008b44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b46:	b111      	cbz	r1, 8008b4e <_reclaim_reent+0x4a>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f001 fbdd 	bl	800a308 <_free_r>
 8008b4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b50:	b111      	cbz	r1, 8008b58 <_reclaim_reent+0x54>
 8008b52:	4620      	mov	r0, r4
 8008b54:	f001 fbd8 	bl	800a308 <_free_r>
 8008b58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b5a:	b111      	cbz	r1, 8008b62 <_reclaim_reent+0x5e>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f001 fbd3 	bl	800a308 <_free_r>
 8008b62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b64:	b111      	cbz	r1, 8008b6c <_reclaim_reent+0x68>
 8008b66:	4620      	mov	r0, r4
 8008b68:	f001 fbce 	bl	800a308 <_free_r>
 8008b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b6e:	b111      	cbz	r1, 8008b76 <_reclaim_reent+0x72>
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 fbc9 	bl	800a308 <_free_r>
 8008b76:	69a3      	ldr	r3, [r4, #24]
 8008b78:	b1e3      	cbz	r3, 8008bb4 <_reclaim_reent+0xb0>
 8008b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4798      	blx	r3
 8008b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b82:	b1b9      	cbz	r1, 8008bb4 <_reclaim_reent+0xb0>
 8008b84:	4620      	mov	r0, r4
 8008b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b8a:	f7ff bfad 	b.w	8008ae8 <cleanup_glue>
 8008b8e:	5949      	ldr	r1, [r1, r5]
 8008b90:	b941      	cbnz	r1, 8008ba4 <_reclaim_reent+0xa0>
 8008b92:	3504      	adds	r5, #4
 8008b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b96:	2d80      	cmp	r5, #128	; 0x80
 8008b98:	68d9      	ldr	r1, [r3, #12]
 8008b9a:	d1f8      	bne.n	8008b8e <_reclaim_reent+0x8a>
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f001 fbb3 	bl	800a308 <_free_r>
 8008ba2:	e7ba      	b.n	8008b1a <_reclaim_reent+0x16>
 8008ba4:	680e      	ldr	r6, [r1, #0]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f001 fbae 	bl	800a308 <_free_r>
 8008bac:	4631      	mov	r1, r6
 8008bae:	e7ef      	b.n	8008b90 <_reclaim_reent+0x8c>
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	e7ef      	b.n	8008b94 <_reclaim_reent+0x90>
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000014 	.word	0x20000014

08008bbc <_sbrk_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	; (8008bd8 <_sbrk_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f003 fa42 	bl	800c050 <_sbrk>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_sbrk_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_sbrk_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	200066d4 	.word	0x200066d4

08008bdc <siprintf>:
 8008bdc:	b40e      	push	{r1, r2, r3}
 8008bde:	b500      	push	{lr}
 8008be0:	b09c      	sub	sp, #112	; 0x70
 8008be2:	ab1d      	add	r3, sp, #116	; 0x74
 8008be4:	9002      	str	r0, [sp, #8]
 8008be6:	9006      	str	r0, [sp, #24]
 8008be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bec:	4809      	ldr	r0, [pc, #36]	; (8008c14 <siprintf+0x38>)
 8008bee:	9107      	str	r1, [sp, #28]
 8008bf0:	9104      	str	r1, [sp, #16]
 8008bf2:	4909      	ldr	r1, [pc, #36]	; (8008c18 <siprintf+0x3c>)
 8008bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf8:	9105      	str	r1, [sp, #20]
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	a902      	add	r1, sp, #8
 8008c00:	f001 fc2a 	bl	800a458 <_svfiprintf_r>
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	b01c      	add	sp, #112	; 0x70
 8008c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c10:	b003      	add	sp, #12
 8008c12:	4770      	bx	lr
 8008c14:	20000014 	.word	0x20000014
 8008c18:	ffff0208 	.word	0xffff0208

08008c1c <__sread>:
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	460c      	mov	r4, r1
 8008c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c24:	f001 fe72 	bl	800a90c <_read_r>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	bfab      	itete	ge
 8008c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c30:	181b      	addge	r3, r3, r0
 8008c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c36:	bfac      	ite	ge
 8008c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c3a:	81a3      	strhlt	r3, [r4, #12]
 8008c3c:	bd10      	pop	{r4, pc}

08008c3e <__swrite>:
 8008c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c42:	461f      	mov	r7, r3
 8008c44:	898b      	ldrh	r3, [r1, #12]
 8008c46:	05db      	lsls	r3, r3, #23
 8008c48:	4605      	mov	r5, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	d505      	bpl.n	8008c5c <__swrite+0x1e>
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	2302      	movs	r3, #2
 8008c56:	2200      	movs	r2, #0
 8008c58:	f000 ff96 	bl	8009b88 <_lseek_r>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	4632      	mov	r2, r6
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	f000 b825 	b.w	8008cc0 <_write_r>

08008c76 <__sseek>:
 8008c76:	b510      	push	{r4, lr}
 8008c78:	460c      	mov	r4, r1
 8008c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7e:	f000 ff83 	bl	8009b88 <_lseek_r>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	bf15      	itete	ne
 8008c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c92:	81a3      	strheq	r3, [r4, #12]
 8008c94:	bf18      	it	ne
 8008c96:	81a3      	strhne	r3, [r4, #12]
 8008c98:	bd10      	pop	{r4, pc}

08008c9a <__sclose>:
 8008c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9e:	f000 b821 	b.w	8008ce4 <_close_r>

08008ca2 <strcat>:
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	7814      	ldrb	r4, [r2, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	3201      	adds	r2, #1
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	d1fa      	bne.n	8008ca6 <strcat+0x4>
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1f9      	bne.n	8008cb2 <strcat+0x10>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <_write_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d07      	ldr	r5, [pc, #28]	; (8008ce0 <_write_r+0x20>)
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	4611      	mov	r1, r2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	602a      	str	r2, [r5, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f003 f9cc 	bl	800c06c <_write>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_write_r+0x1e>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_write_r+0x1e>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	200066d4 	.word	0x200066d4

08008ce4 <_close_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4d06      	ldr	r5, [pc, #24]	; (8008d00 <_close_r+0x1c>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	f003 f976 	bl	800bfe0 <_close>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_close_r+0x1a>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_close_r+0x1a>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	200066d4 	.word	0x200066d4

08008d04 <quorem>:
 8008d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	6903      	ldr	r3, [r0, #16]
 8008d0a:	690c      	ldr	r4, [r1, #16]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	4607      	mov	r7, r0
 8008d10:	f2c0 8081 	blt.w	8008e16 <quorem+0x112>
 8008d14:	3c01      	subs	r4, #1
 8008d16:	f101 0814 	add.w	r8, r1, #20
 8008d1a:	f100 0514 	add.w	r5, r0, #20
 8008d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d3c:	d331      	bcc.n	8008da2 <quorem+0x9e>
 8008d3e:	f04f 0e00 	mov.w	lr, #0
 8008d42:	4640      	mov	r0, r8
 8008d44:	46ac      	mov	ip, r5
 8008d46:	46f2      	mov	sl, lr
 8008d48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d4c:	b293      	uxth	r3, r2
 8008d4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008d52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	ebaa 0303 	sub.w	r3, sl, r3
 8008d5c:	f8dc a000 	ldr.w	sl, [ip]
 8008d60:	0c12      	lsrs	r2, r2, #16
 8008d62:	fa13 f38a 	uxtah	r3, r3, sl
 8008d66:	fb06 e202 	mla	r2, r6, r2, lr
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d72:	b292      	uxth	r2, r2
 8008d74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d80:	4581      	cmp	r9, r0
 8008d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d86:	f84c 3b04 	str.w	r3, [ip], #4
 8008d8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d8e:	d2db      	bcs.n	8008d48 <quorem+0x44>
 8008d90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d94:	b92b      	cbnz	r3, 8008da2 <quorem+0x9e>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	3b04      	subs	r3, #4
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	d32e      	bcc.n	8008dfe <quorem+0xfa>
 8008da0:	613c      	str	r4, [r7, #16]
 8008da2:	4638      	mov	r0, r7
 8008da4:	f001 f998 	bl	800a0d8 <__mcmp>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	db24      	blt.n	8008df6 <quorem+0xf2>
 8008dac:	3601      	adds	r6, #1
 8008dae:	4628      	mov	r0, r5
 8008db0:	f04f 0c00 	mov.w	ip, #0
 8008db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db8:	f8d0 e000 	ldr.w	lr, [r0]
 8008dbc:	b293      	uxth	r3, r2
 8008dbe:	ebac 0303 	sub.w	r3, ip, r3
 8008dc2:	0c12      	lsrs	r2, r2, #16
 8008dc4:	fa13 f38e 	uxtah	r3, r3, lr
 8008dc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd6:	45c1      	cmp	r9, r8
 8008dd8:	f840 3b04 	str.w	r3, [r0], #4
 8008ddc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008de0:	d2e8      	bcs.n	8008db4 <quorem+0xb0>
 8008de2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dea:	b922      	cbnz	r2, 8008df6 <quorem+0xf2>
 8008dec:	3b04      	subs	r3, #4
 8008dee:	429d      	cmp	r5, r3
 8008df0:	461a      	mov	r2, r3
 8008df2:	d30a      	bcc.n	8008e0a <quorem+0x106>
 8008df4:	613c      	str	r4, [r7, #16]
 8008df6:	4630      	mov	r0, r6
 8008df8:	b003      	add	sp, #12
 8008dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	3b04      	subs	r3, #4
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d1cc      	bne.n	8008da0 <quorem+0x9c>
 8008e06:	3c01      	subs	r4, #1
 8008e08:	e7c7      	b.n	8008d9a <quorem+0x96>
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	d1f0      	bne.n	8008df4 <quorem+0xf0>
 8008e12:	3c01      	subs	r4, #1
 8008e14:	e7eb      	b.n	8008dee <quorem+0xea>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e7ee      	b.n	8008df8 <quorem+0xf4>
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <_dtoa_r>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b04 	vpush	{d8-d9}
 8008e28:	ec57 6b10 	vmov	r6, r7, d0
 8008e2c:	b093      	sub	sp, #76	; 0x4c
 8008e2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e34:	9106      	str	r1, [sp, #24]
 8008e36:	ee10 aa10 	vmov	sl, s0
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e40:	46bb      	mov	fp, r7
 8008e42:	b975      	cbnz	r5, 8008e62 <_dtoa_r+0x42>
 8008e44:	2010      	movs	r0, #16
 8008e46:	f000 feb1 	bl	8009bac <malloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e4e:	b920      	cbnz	r0, 8008e5a <_dtoa_r+0x3a>
 8008e50:	4ba7      	ldr	r3, [pc, #668]	; (80090f0 <_dtoa_r+0x2d0>)
 8008e52:	21ea      	movs	r1, #234	; 0xea
 8008e54:	48a7      	ldr	r0, [pc, #668]	; (80090f4 <_dtoa_r+0x2d4>)
 8008e56:	f001 fe2b 	bl	800aab0 <__assert_func>
 8008e5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e5e:	6005      	str	r5, [r0, #0]
 8008e60:	60c5      	str	r5, [r0, #12]
 8008e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e64:	6819      	ldr	r1, [r3, #0]
 8008e66:	b151      	cbz	r1, 8008e7e <_dtoa_r+0x5e>
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	604a      	str	r2, [r1, #4]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4093      	lsls	r3, r2
 8008e70:	608b      	str	r3, [r1, #8]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 feee 	bl	8009c54 <_Bfree>
 8008e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	1e3b      	subs	r3, r7, #0
 8008e80:	bfaa      	itet	ge
 8008e82:	2300      	movge	r3, #0
 8008e84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e88:	f8c8 3000 	strge.w	r3, [r8]
 8008e8c:	4b9a      	ldr	r3, [pc, #616]	; (80090f8 <_dtoa_r+0x2d8>)
 8008e8e:	bfbc      	itt	lt
 8008e90:	2201      	movlt	r2, #1
 8008e92:	f8c8 2000 	strlt.w	r2, [r8]
 8008e96:	ea33 030b 	bics.w	r3, r3, fp
 8008e9a:	d11b      	bne.n	8008ed4 <_dtoa_r+0xb4>
 8008e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ea8:	4333      	orrs	r3, r6
 8008eaa:	f000 8592 	beq.w	80099d2 <_dtoa_r+0xbb2>
 8008eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb0:	b963      	cbnz	r3, 8008ecc <_dtoa_r+0xac>
 8008eb2:	4b92      	ldr	r3, [pc, #584]	; (80090fc <_dtoa_r+0x2dc>)
 8008eb4:	e022      	b.n	8008efc <_dtoa_r+0xdc>
 8008eb6:	4b92      	ldr	r3, [pc, #584]	; (8009100 <_dtoa_r+0x2e0>)
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	9801      	ldr	r0, [sp, #4]
 8008ec2:	b013      	add	sp, #76	; 0x4c
 8008ec4:	ecbd 8b04 	vpop	{d8-d9}
 8008ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ecc:	4b8b      	ldr	r3, [pc, #556]	; (80090fc <_dtoa_r+0x2dc>)
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	3303      	adds	r3, #3
 8008ed2:	e7f3      	b.n	8008ebc <_dtoa_r+0x9c>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	f7f7 fe14 	bl	8000b08 <__aeabi_dcmpeq>
 8008ee0:	ec4b ab19 	vmov	d9, sl, fp
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	b158      	cbz	r0, 8008f00 <_dtoa_r+0xe0>
 8008ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eea:	2301      	movs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 856b 	beq.w	80099cc <_dtoa_r+0xbac>
 8008ef6:	4883      	ldr	r0, [pc, #524]	; (8009104 <_dtoa_r+0x2e4>)
 8008ef8:	6018      	str	r0, [r3, #0]
 8008efa:	1e43      	subs	r3, r0, #1
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	e7df      	b.n	8008ec0 <_dtoa_r+0xa0>
 8008f00:	ec4b ab10 	vmov	d0, sl, fp
 8008f04:	aa10      	add	r2, sp, #64	; 0x40
 8008f06:	a911      	add	r1, sp, #68	; 0x44
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f001 f98b 	bl	800a224 <__d2b>
 8008f0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f12:	ee08 0a10 	vmov	s16, r0
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	f000 8084 	beq.w	8009024 <_dtoa_r+0x204>
 8008f1c:	ee19 3a90 	vmov	r3, s19
 8008f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f28:	4656      	mov	r6, sl
 8008f2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f36:	4b74      	ldr	r3, [pc, #464]	; (8009108 <_dtoa_r+0x2e8>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	f7f7 f9c3 	bl	80002c8 <__aeabi_dsub>
 8008f42:	a365      	add	r3, pc, #404	; (adr r3, 80090d8 <_dtoa_r+0x2b8>)
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f7f7 fb76 	bl	8000638 <__aeabi_dmul>
 8008f4c:	a364      	add	r3, pc, #400	; (adr r3, 80090e0 <_dtoa_r+0x2c0>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 f9bb 	bl	80002cc <__adddf3>
 8008f56:	4606      	mov	r6, r0
 8008f58:	4628      	mov	r0, r5
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	f7f7 fb02 	bl	8000564 <__aeabi_i2d>
 8008f60:	a361      	add	r3, pc, #388	; (adr r3, 80090e8 <_dtoa_r+0x2c8>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 fb67 	bl	8000638 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 f9ab 	bl	80002cc <__adddf3>
 8008f76:	4606      	mov	r6, r0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	f7f7 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8008f7e:	2200      	movs	r2, #0
 8008f80:	9000      	str	r0, [sp, #0]
 8008f82:	2300      	movs	r3, #0
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fdc8 	bl	8000b1c <__aeabi_dcmplt>
 8008f8c:	b150      	cbz	r0, 8008fa4 <_dtoa_r+0x184>
 8008f8e:	9800      	ldr	r0, [sp, #0]
 8008f90:	f7f7 fae8 	bl	8000564 <__aeabi_i2d>
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	f7f7 fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 8008f9c:	b910      	cbnz	r0, 8008fa4 <_dtoa_r+0x184>
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	9b00      	ldr	r3, [sp, #0]
 8008fa6:	2b16      	cmp	r3, #22
 8008fa8:	d85a      	bhi.n	8009060 <_dtoa_r+0x240>
 8008faa:	9a00      	ldr	r2, [sp, #0]
 8008fac:	4b57      	ldr	r3, [pc, #348]	; (800910c <_dtoa_r+0x2ec>)
 8008fae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	ec51 0b19 	vmov	r0, r1, d9
 8008fba:	f7f7 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d050      	beq.n	8009064 <_dtoa_r+0x244>
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fce:	1b5d      	subs	r5, r3, r5
 8008fd0:	1e6b      	subs	r3, r5, #1
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	bf45      	ittet	mi
 8008fd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fda:	9304      	strmi	r3, [sp, #16]
 8008fdc:	2300      	movpl	r3, #0
 8008fde:	2300      	movmi	r3, #0
 8008fe0:	bf4c      	ite	mi
 8008fe2:	9305      	strmi	r3, [sp, #20]
 8008fe4:	9304      	strpl	r3, [sp, #16]
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	db3d      	blt.n	8009068 <_dtoa_r+0x248>
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	9a00      	ldr	r2, [sp, #0]
 8008ff0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ff2:	4413      	add	r3, r2
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9307      	str	r3, [sp, #28]
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	f200 8089 	bhi.w	8009114 <_dtoa_r+0x2f4>
 8009002:	2b05      	cmp	r3, #5
 8009004:	bfc4      	itt	gt
 8009006:	3b04      	subgt	r3, #4
 8009008:	9306      	strgt	r3, [sp, #24]
 800900a:	9b06      	ldr	r3, [sp, #24]
 800900c:	f1a3 0302 	sub.w	r3, r3, #2
 8009010:	bfcc      	ite	gt
 8009012:	2500      	movgt	r5, #0
 8009014:	2501      	movle	r5, #1
 8009016:	2b03      	cmp	r3, #3
 8009018:	f200 8087 	bhi.w	800912a <_dtoa_r+0x30a>
 800901c:	e8df f003 	tbb	[pc, r3]
 8009020:	59383a2d 	.word	0x59383a2d
 8009024:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009028:	441d      	add	r5, r3
 800902a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800902e:	2b20      	cmp	r3, #32
 8009030:	bfc1      	itttt	gt
 8009032:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009036:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800903a:	fa0b f303 	lslgt.w	r3, fp, r3
 800903e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009042:	bfda      	itte	le
 8009044:	f1c3 0320 	rsble	r3, r3, #32
 8009048:	fa06 f003 	lslle.w	r0, r6, r3
 800904c:	4318      	orrgt	r0, r3
 800904e:	f7f7 fa79 	bl	8000544 <__aeabi_ui2d>
 8009052:	2301      	movs	r3, #1
 8009054:	4606      	mov	r6, r0
 8009056:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800905a:	3d01      	subs	r5, #1
 800905c:	930e      	str	r3, [sp, #56]	; 0x38
 800905e:	e76a      	b.n	8008f36 <_dtoa_r+0x116>
 8009060:	2301      	movs	r3, #1
 8009062:	e7b2      	b.n	8008fca <_dtoa_r+0x1aa>
 8009064:	900b      	str	r0, [sp, #44]	; 0x2c
 8009066:	e7b1      	b.n	8008fcc <_dtoa_r+0x1ac>
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	9a00      	ldr	r2, [sp, #0]
 800906c:	1a9b      	subs	r3, r3, r2
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	4253      	negs	r3, r2
 8009072:	9307      	str	r3, [sp, #28]
 8009074:	2300      	movs	r3, #0
 8009076:	930a      	str	r3, [sp, #40]	; 0x28
 8009078:	e7bf      	b.n	8008ffa <_dtoa_r+0x1da>
 800907a:	2300      	movs	r3, #0
 800907c:	9308      	str	r3, [sp, #32]
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	dc55      	bgt.n	8009130 <_dtoa_r+0x310>
 8009084:	2301      	movs	r3, #1
 8009086:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800908a:	461a      	mov	r2, r3
 800908c:	9209      	str	r2, [sp, #36]	; 0x24
 800908e:	e00c      	b.n	80090aa <_dtoa_r+0x28a>
 8009090:	2301      	movs	r3, #1
 8009092:	e7f3      	b.n	800907c <_dtoa_r+0x25c>
 8009094:	2300      	movs	r3, #0
 8009096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009098:	9308      	str	r3, [sp, #32]
 800909a:	9b00      	ldr	r3, [sp, #0]
 800909c:	4413      	add	r3, r2
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	3301      	adds	r3, #1
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	bfb8      	it	lt
 80090a8:	2301      	movlt	r3, #1
 80090aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090ac:	2200      	movs	r2, #0
 80090ae:	6042      	str	r2, [r0, #4]
 80090b0:	2204      	movs	r2, #4
 80090b2:	f102 0614 	add.w	r6, r2, #20
 80090b6:	429e      	cmp	r6, r3
 80090b8:	6841      	ldr	r1, [r0, #4]
 80090ba:	d93d      	bls.n	8009138 <_dtoa_r+0x318>
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fd89 	bl	8009bd4 <_Balloc>
 80090c2:	9001      	str	r0, [sp, #4]
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d13b      	bne.n	8009140 <_dtoa_r+0x320>
 80090c8:	4b11      	ldr	r3, [pc, #68]	; (8009110 <_dtoa_r+0x2f0>)
 80090ca:	4602      	mov	r2, r0
 80090cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090d0:	e6c0      	b.n	8008e54 <_dtoa_r+0x34>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e7df      	b.n	8009096 <_dtoa_r+0x276>
 80090d6:	bf00      	nop
 80090d8:	636f4361 	.word	0x636f4361
 80090dc:	3fd287a7 	.word	0x3fd287a7
 80090e0:	8b60c8b3 	.word	0x8b60c8b3
 80090e4:	3fc68a28 	.word	0x3fc68a28
 80090e8:	509f79fb 	.word	0x509f79fb
 80090ec:	3fd34413 	.word	0x3fd34413
 80090f0:	0800c201 	.word	0x0800c201
 80090f4:	0800c218 	.word	0x0800c218
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	0800c1fd 	.word	0x0800c1fd
 8009100:	0800c1f4 	.word	0x0800c1f4
 8009104:	0800c1d1 	.word	0x0800c1d1
 8009108:	3ff80000 	.word	0x3ff80000
 800910c:	0800c308 	.word	0x0800c308
 8009110:	0800c273 	.word	0x0800c273
 8009114:	2501      	movs	r5, #1
 8009116:	2300      	movs	r3, #0
 8009118:	9306      	str	r3, [sp, #24]
 800911a:	9508      	str	r5, [sp, #32]
 800911c:	f04f 33ff 	mov.w	r3, #4294967295
 8009120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	2312      	movs	r3, #18
 8009128:	e7b0      	b.n	800908c <_dtoa_r+0x26c>
 800912a:	2301      	movs	r3, #1
 800912c:	9308      	str	r3, [sp, #32]
 800912e:	e7f5      	b.n	800911c <_dtoa_r+0x2fc>
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009136:	e7b8      	b.n	80090aa <_dtoa_r+0x28a>
 8009138:	3101      	adds	r1, #1
 800913a:	6041      	str	r1, [r0, #4]
 800913c:	0052      	lsls	r2, r2, #1
 800913e:	e7b8      	b.n	80090b2 <_dtoa_r+0x292>
 8009140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009142:	9a01      	ldr	r2, [sp, #4]
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	2b0e      	cmp	r3, #14
 800914a:	f200 809d 	bhi.w	8009288 <_dtoa_r+0x468>
 800914e:	2d00      	cmp	r5, #0
 8009150:	f000 809a 	beq.w	8009288 <_dtoa_r+0x468>
 8009154:	9b00      	ldr	r3, [sp, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd32      	ble.n	80091c0 <_dtoa_r+0x3a0>
 800915a:	4ab7      	ldr	r2, [pc, #732]	; (8009438 <_dtoa_r+0x618>)
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009164:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	05d8      	lsls	r0, r3, #23
 800916c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009170:	d516      	bpl.n	80091a0 <_dtoa_r+0x380>
 8009172:	4bb2      	ldr	r3, [pc, #712]	; (800943c <_dtoa_r+0x61c>)
 8009174:	ec51 0b19 	vmov	r0, r1, d9
 8009178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800917c:	f7f7 fb86 	bl	800088c <__aeabi_ddiv>
 8009180:	f007 070f 	and.w	r7, r7, #15
 8009184:	4682      	mov	sl, r0
 8009186:	468b      	mov	fp, r1
 8009188:	2503      	movs	r5, #3
 800918a:	4eac      	ldr	r6, [pc, #688]	; (800943c <_dtoa_r+0x61c>)
 800918c:	b957      	cbnz	r7, 80091a4 <_dtoa_r+0x384>
 800918e:	4642      	mov	r2, r8
 8009190:	464b      	mov	r3, r9
 8009192:	4650      	mov	r0, sl
 8009194:	4659      	mov	r1, fp
 8009196:	f7f7 fb79 	bl	800088c <__aeabi_ddiv>
 800919a:	4682      	mov	sl, r0
 800919c:	468b      	mov	fp, r1
 800919e:	e028      	b.n	80091f2 <_dtoa_r+0x3d2>
 80091a0:	2502      	movs	r5, #2
 80091a2:	e7f2      	b.n	800918a <_dtoa_r+0x36a>
 80091a4:	07f9      	lsls	r1, r7, #31
 80091a6:	d508      	bpl.n	80091ba <_dtoa_r+0x39a>
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091b0:	f7f7 fa42 	bl	8000638 <__aeabi_dmul>
 80091b4:	3501      	adds	r5, #1
 80091b6:	4680      	mov	r8, r0
 80091b8:	4689      	mov	r9, r1
 80091ba:	107f      	asrs	r7, r7, #1
 80091bc:	3608      	adds	r6, #8
 80091be:	e7e5      	b.n	800918c <_dtoa_r+0x36c>
 80091c0:	f000 809b 	beq.w	80092fa <_dtoa_r+0x4da>
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	4f9d      	ldr	r7, [pc, #628]	; (800943c <_dtoa_r+0x61c>)
 80091c8:	425e      	negs	r6, r3
 80091ca:	4b9b      	ldr	r3, [pc, #620]	; (8009438 <_dtoa_r+0x618>)
 80091cc:	f006 020f 	and.w	r2, r6, #15
 80091d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	ec51 0b19 	vmov	r0, r1, d9
 80091dc:	f7f7 fa2c 	bl	8000638 <__aeabi_dmul>
 80091e0:	1136      	asrs	r6, r6, #4
 80091e2:	4682      	mov	sl, r0
 80091e4:	468b      	mov	fp, r1
 80091e6:	2300      	movs	r3, #0
 80091e8:	2502      	movs	r5, #2
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d17a      	bne.n	80092e4 <_dtoa_r+0x4c4>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1d3      	bne.n	800919a <_dtoa_r+0x37a>
 80091f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8082 	beq.w	80092fe <_dtoa_r+0x4de>
 80091fa:	4b91      	ldr	r3, [pc, #580]	; (8009440 <_dtoa_r+0x620>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	f7f7 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8009206:	2800      	cmp	r0, #0
 8009208:	d079      	beq.n	80092fe <_dtoa_r+0x4de>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d076      	beq.n	80092fe <_dtoa_r+0x4de>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	dd36      	ble.n	8009284 <_dtoa_r+0x464>
 8009216:	9b00      	ldr	r3, [sp, #0]
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	1e5f      	subs	r7, r3, #1
 800921e:	2200      	movs	r2, #0
 8009220:	4b88      	ldr	r3, [pc, #544]	; (8009444 <_dtoa_r+0x624>)
 8009222:	f7f7 fa09 	bl	8000638 <__aeabi_dmul>
 8009226:	9e02      	ldr	r6, [sp, #8]
 8009228:	4682      	mov	sl, r0
 800922a:	468b      	mov	fp, r1
 800922c:	3501      	adds	r5, #1
 800922e:	4628      	mov	r0, r5
 8009230:	f7f7 f998 	bl	8000564 <__aeabi_i2d>
 8009234:	4652      	mov	r2, sl
 8009236:	465b      	mov	r3, fp
 8009238:	f7f7 f9fe 	bl	8000638 <__aeabi_dmul>
 800923c:	4b82      	ldr	r3, [pc, #520]	; (8009448 <_dtoa_r+0x628>)
 800923e:	2200      	movs	r2, #0
 8009240:	f7f7 f844 	bl	80002cc <__adddf3>
 8009244:	46d0      	mov	r8, sl
 8009246:	46d9      	mov	r9, fp
 8009248:	4682      	mov	sl, r0
 800924a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800924e:	2e00      	cmp	r6, #0
 8009250:	d158      	bne.n	8009304 <_dtoa_r+0x4e4>
 8009252:	4b7e      	ldr	r3, [pc, #504]	; (800944c <_dtoa_r+0x62c>)
 8009254:	2200      	movs	r2, #0
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f7 f835 	bl	80002c8 <__aeabi_dsub>
 800925e:	4652      	mov	r2, sl
 8009260:	465b      	mov	r3, fp
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	f7f7 fc77 	bl	8000b58 <__aeabi_dcmpgt>
 800926a:	2800      	cmp	r0, #0
 800926c:	f040 8295 	bne.w	800979a <_dtoa_r+0x97a>
 8009270:	4652      	mov	r2, sl
 8009272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 fc4f 	bl	8000b1c <__aeabi_dcmplt>
 800927e:	2800      	cmp	r0, #0
 8009280:	f040 8289 	bne.w	8009796 <_dtoa_r+0x976>
 8009284:	ec5b ab19 	vmov	sl, fp, d9
 8009288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800928a:	2b00      	cmp	r3, #0
 800928c:	f2c0 8148 	blt.w	8009520 <_dtoa_r+0x700>
 8009290:	9a00      	ldr	r2, [sp, #0]
 8009292:	2a0e      	cmp	r2, #14
 8009294:	f300 8144 	bgt.w	8009520 <_dtoa_r+0x700>
 8009298:	4b67      	ldr	r3, [pc, #412]	; (8009438 <_dtoa_r+0x618>)
 800929a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800929e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f280 80d5 	bge.w	8009454 <_dtoa_r+0x634>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f300 80d1 	bgt.w	8009454 <_dtoa_r+0x634>
 80092b2:	f040 826f 	bne.w	8009794 <_dtoa_r+0x974>
 80092b6:	4b65      	ldr	r3, [pc, #404]	; (800944c <_dtoa_r+0x62c>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	4640      	mov	r0, r8
 80092bc:	4649      	mov	r1, r9
 80092be:	f7f7 f9bb 	bl	8000638 <__aeabi_dmul>
 80092c2:	4652      	mov	r2, sl
 80092c4:	465b      	mov	r3, fp
 80092c6:	f7f7 fc3d 	bl	8000b44 <__aeabi_dcmpge>
 80092ca:	9e03      	ldr	r6, [sp, #12]
 80092cc:	4637      	mov	r7, r6
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f040 8245 	bne.w	800975e <_dtoa_r+0x93e>
 80092d4:	9d01      	ldr	r5, [sp, #4]
 80092d6:	2331      	movs	r3, #49	; 0x31
 80092d8:	f805 3b01 	strb.w	r3, [r5], #1
 80092dc:	9b00      	ldr	r3, [sp, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	e240      	b.n	8009766 <_dtoa_r+0x946>
 80092e4:	07f2      	lsls	r2, r6, #31
 80092e6:	d505      	bpl.n	80092f4 <_dtoa_r+0x4d4>
 80092e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ec:	f7f7 f9a4 	bl	8000638 <__aeabi_dmul>
 80092f0:	3501      	adds	r5, #1
 80092f2:	2301      	movs	r3, #1
 80092f4:	1076      	asrs	r6, r6, #1
 80092f6:	3708      	adds	r7, #8
 80092f8:	e777      	b.n	80091ea <_dtoa_r+0x3ca>
 80092fa:	2502      	movs	r5, #2
 80092fc:	e779      	b.n	80091f2 <_dtoa_r+0x3d2>
 80092fe:	9f00      	ldr	r7, [sp, #0]
 8009300:	9e03      	ldr	r6, [sp, #12]
 8009302:	e794      	b.n	800922e <_dtoa_r+0x40e>
 8009304:	9901      	ldr	r1, [sp, #4]
 8009306:	4b4c      	ldr	r3, [pc, #304]	; (8009438 <_dtoa_r+0x618>)
 8009308:	4431      	add	r1, r6
 800930a:	910d      	str	r1, [sp, #52]	; 0x34
 800930c:	9908      	ldr	r1, [sp, #32]
 800930e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009316:	2900      	cmp	r1, #0
 8009318:	d043      	beq.n	80093a2 <_dtoa_r+0x582>
 800931a:	494d      	ldr	r1, [pc, #308]	; (8009450 <_dtoa_r+0x630>)
 800931c:	2000      	movs	r0, #0
 800931e:	f7f7 fab5 	bl	800088c <__aeabi_ddiv>
 8009322:	4652      	mov	r2, sl
 8009324:	465b      	mov	r3, fp
 8009326:	f7f6 ffcf 	bl	80002c8 <__aeabi_dsub>
 800932a:	9d01      	ldr	r5, [sp, #4]
 800932c:	4682      	mov	sl, r0
 800932e:	468b      	mov	fp, r1
 8009330:	4649      	mov	r1, r9
 8009332:	4640      	mov	r0, r8
 8009334:	f7f7 fc30 	bl	8000b98 <__aeabi_d2iz>
 8009338:	4606      	mov	r6, r0
 800933a:	f7f7 f913 	bl	8000564 <__aeabi_i2d>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f6 ffbf 	bl	80002c8 <__aeabi_dsub>
 800934a:	3630      	adds	r6, #48	; 0x30
 800934c:	f805 6b01 	strb.w	r6, [r5], #1
 8009350:	4652      	mov	r2, sl
 8009352:	465b      	mov	r3, fp
 8009354:	4680      	mov	r8, r0
 8009356:	4689      	mov	r9, r1
 8009358:	f7f7 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	d163      	bne.n	8009428 <_dtoa_r+0x608>
 8009360:	4642      	mov	r2, r8
 8009362:	464b      	mov	r3, r9
 8009364:	4936      	ldr	r1, [pc, #216]	; (8009440 <_dtoa_r+0x620>)
 8009366:	2000      	movs	r0, #0
 8009368:	f7f6 ffae 	bl	80002c8 <__aeabi_dsub>
 800936c:	4652      	mov	r2, sl
 800936e:	465b      	mov	r3, fp
 8009370:	f7f7 fbd4 	bl	8000b1c <__aeabi_dcmplt>
 8009374:	2800      	cmp	r0, #0
 8009376:	f040 80b5 	bne.w	80094e4 <_dtoa_r+0x6c4>
 800937a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937c:	429d      	cmp	r5, r3
 800937e:	d081      	beq.n	8009284 <_dtoa_r+0x464>
 8009380:	4b30      	ldr	r3, [pc, #192]	; (8009444 <_dtoa_r+0x624>)
 8009382:	2200      	movs	r2, #0
 8009384:	4650      	mov	r0, sl
 8009386:	4659      	mov	r1, fp
 8009388:	f7f7 f956 	bl	8000638 <__aeabi_dmul>
 800938c:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <_dtoa_r+0x624>)
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	4640      	mov	r0, r8
 8009394:	4649      	mov	r1, r9
 8009396:	2200      	movs	r2, #0
 8009398:	f7f7 f94e 	bl	8000638 <__aeabi_dmul>
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	e7c6      	b.n	8009330 <_dtoa_r+0x510>
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f7 f947 	bl	8000638 <__aeabi_dmul>
 80093aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ac:	9d01      	ldr	r5, [sp, #4]
 80093ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b0:	4682      	mov	sl, r0
 80093b2:	468b      	mov	fp, r1
 80093b4:	4649      	mov	r1, r9
 80093b6:	4640      	mov	r0, r8
 80093b8:	f7f7 fbee 	bl	8000b98 <__aeabi_d2iz>
 80093bc:	4606      	mov	r6, r0
 80093be:	f7f7 f8d1 	bl	8000564 <__aeabi_i2d>
 80093c2:	3630      	adds	r6, #48	; 0x30
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f6 ff7c 	bl	80002c8 <__aeabi_dsub>
 80093d0:	f805 6b01 	strb.w	r6, [r5], #1
 80093d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d6:	429d      	cmp	r5, r3
 80093d8:	4680      	mov	r8, r0
 80093da:	4689      	mov	r9, r1
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	d124      	bne.n	800942c <_dtoa_r+0x60c>
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <_dtoa_r+0x630>)
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	f7f6 ff70 	bl	80002cc <__adddf3>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 fbb0 	bl	8000b58 <__aeabi_dcmpgt>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d173      	bne.n	80094e4 <_dtoa_r+0x6c4>
 80093fc:	4652      	mov	r2, sl
 80093fe:	465b      	mov	r3, fp
 8009400:	4913      	ldr	r1, [pc, #76]	; (8009450 <_dtoa_r+0x630>)
 8009402:	2000      	movs	r0, #0
 8009404:	f7f6 ff60 	bl	80002c8 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f7 fb84 	bl	8000b1c <__aeabi_dcmplt>
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f af35 	beq.w	8009284 <_dtoa_r+0x464>
 800941a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800941c:	1e6b      	subs	r3, r5, #1
 800941e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009420:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009424:	2b30      	cmp	r3, #48	; 0x30
 8009426:	d0f8      	beq.n	800941a <_dtoa_r+0x5fa>
 8009428:	9700      	str	r7, [sp, #0]
 800942a:	e049      	b.n	80094c0 <_dtoa_r+0x6a0>
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <_dtoa_r+0x624>)
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	4680      	mov	r8, r0
 8009434:	4689      	mov	r9, r1
 8009436:	e7bd      	b.n	80093b4 <_dtoa_r+0x594>
 8009438:	0800c308 	.word	0x0800c308
 800943c:	0800c2e0 	.word	0x0800c2e0
 8009440:	3ff00000 	.word	0x3ff00000
 8009444:	40240000 	.word	0x40240000
 8009448:	401c0000 	.word	0x401c0000
 800944c:	40140000 	.word	0x40140000
 8009450:	3fe00000 	.word	0x3fe00000
 8009454:	9d01      	ldr	r5, [sp, #4]
 8009456:	4656      	mov	r6, sl
 8009458:	465f      	mov	r7, fp
 800945a:	4642      	mov	r2, r8
 800945c:	464b      	mov	r3, r9
 800945e:	4630      	mov	r0, r6
 8009460:	4639      	mov	r1, r7
 8009462:	f7f7 fa13 	bl	800088c <__aeabi_ddiv>
 8009466:	f7f7 fb97 	bl	8000b98 <__aeabi_d2iz>
 800946a:	4682      	mov	sl, r0
 800946c:	f7f7 f87a 	bl	8000564 <__aeabi_i2d>
 8009470:	4642      	mov	r2, r8
 8009472:	464b      	mov	r3, r9
 8009474:	f7f7 f8e0 	bl	8000638 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009484:	f7f6 ff20 	bl	80002c8 <__aeabi_dsub>
 8009488:	f805 6b01 	strb.w	r6, [r5], #1
 800948c:	9e01      	ldr	r6, [sp, #4]
 800948e:	9f03      	ldr	r7, [sp, #12]
 8009490:	1bae      	subs	r6, r5, r6
 8009492:	42b7      	cmp	r7, r6
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	d135      	bne.n	8009506 <_dtoa_r+0x6e6>
 800949a:	f7f6 ff17 	bl	80002cc <__adddf3>
 800949e:	4642      	mov	r2, r8
 80094a0:	464b      	mov	r3, r9
 80094a2:	4606      	mov	r6, r0
 80094a4:	460f      	mov	r7, r1
 80094a6:	f7f7 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 80094aa:	b9d0      	cbnz	r0, 80094e2 <_dtoa_r+0x6c2>
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 fb28 	bl	8000b08 <__aeabi_dcmpeq>
 80094b8:	b110      	cbz	r0, 80094c0 <_dtoa_r+0x6a0>
 80094ba:	f01a 0f01 	tst.w	sl, #1
 80094be:	d110      	bne.n	80094e2 <_dtoa_r+0x6c2>
 80094c0:	4620      	mov	r0, r4
 80094c2:	ee18 1a10 	vmov	r1, s16
 80094c6:	f000 fbc5 	bl	8009c54 <_Bfree>
 80094ca:	2300      	movs	r3, #0
 80094cc:	9800      	ldr	r0, [sp, #0]
 80094ce:	702b      	strb	r3, [r5, #0]
 80094d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d2:	3001      	adds	r0, #1
 80094d4:	6018      	str	r0, [r3, #0]
 80094d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f43f acf1 	beq.w	8008ec0 <_dtoa_r+0xa0>
 80094de:	601d      	str	r5, [r3, #0]
 80094e0:	e4ee      	b.n	8008ec0 <_dtoa_r+0xa0>
 80094e2:	9f00      	ldr	r7, [sp, #0]
 80094e4:	462b      	mov	r3, r5
 80094e6:	461d      	mov	r5, r3
 80094e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ec:	2a39      	cmp	r2, #57	; 0x39
 80094ee:	d106      	bne.n	80094fe <_dtoa_r+0x6de>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d1f7      	bne.n	80094e6 <_dtoa_r+0x6c6>
 80094f6:	9901      	ldr	r1, [sp, #4]
 80094f8:	2230      	movs	r2, #48	; 0x30
 80094fa:	3701      	adds	r7, #1
 80094fc:	700a      	strb	r2, [r1, #0]
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	3201      	adds	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	e790      	b.n	8009428 <_dtoa_r+0x608>
 8009506:	4ba6      	ldr	r3, [pc, #664]	; (80097a0 <_dtoa_r+0x980>)
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f895 	bl	8000638 <__aeabi_dmul>
 800950e:	2200      	movs	r2, #0
 8009510:	2300      	movs	r3, #0
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	f7f7 faf7 	bl	8000b08 <__aeabi_dcmpeq>
 800951a:	2800      	cmp	r0, #0
 800951c:	d09d      	beq.n	800945a <_dtoa_r+0x63a>
 800951e:	e7cf      	b.n	80094c0 <_dtoa_r+0x6a0>
 8009520:	9a08      	ldr	r2, [sp, #32]
 8009522:	2a00      	cmp	r2, #0
 8009524:	f000 80d7 	beq.w	80096d6 <_dtoa_r+0x8b6>
 8009528:	9a06      	ldr	r2, [sp, #24]
 800952a:	2a01      	cmp	r2, #1
 800952c:	f300 80ba 	bgt.w	80096a4 <_dtoa_r+0x884>
 8009530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009532:	2a00      	cmp	r2, #0
 8009534:	f000 80b2 	beq.w	800969c <_dtoa_r+0x87c>
 8009538:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800953c:	9e07      	ldr	r6, [sp, #28]
 800953e:	9d04      	ldr	r5, [sp, #16]
 8009540:	9a04      	ldr	r2, [sp, #16]
 8009542:	441a      	add	r2, r3
 8009544:	9204      	str	r2, [sp, #16]
 8009546:	9a05      	ldr	r2, [sp, #20]
 8009548:	2101      	movs	r1, #1
 800954a:	441a      	add	r2, r3
 800954c:	4620      	mov	r0, r4
 800954e:	9205      	str	r2, [sp, #20]
 8009550:	f000 fc38 	bl	8009dc4 <__i2b>
 8009554:	4607      	mov	r7, r0
 8009556:	2d00      	cmp	r5, #0
 8009558:	dd0c      	ble.n	8009574 <_dtoa_r+0x754>
 800955a:	9b05      	ldr	r3, [sp, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd09      	ble.n	8009574 <_dtoa_r+0x754>
 8009560:	42ab      	cmp	r3, r5
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	bfa8      	it	ge
 8009566:	462b      	movge	r3, r5
 8009568:	1ad2      	subs	r2, r2, r3
 800956a:	9204      	str	r2, [sp, #16]
 800956c:	9a05      	ldr	r2, [sp, #20]
 800956e:	1aed      	subs	r5, r5, r3
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	9b07      	ldr	r3, [sp, #28]
 8009576:	b31b      	cbz	r3, 80095c0 <_dtoa_r+0x7a0>
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80af 	beq.w	80096de <_dtoa_r+0x8be>
 8009580:	2e00      	cmp	r6, #0
 8009582:	dd13      	ble.n	80095ac <_dtoa_r+0x78c>
 8009584:	4639      	mov	r1, r7
 8009586:	4632      	mov	r2, r6
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fcdb 	bl	8009f44 <__pow5mult>
 800958e:	ee18 2a10 	vmov	r2, s16
 8009592:	4601      	mov	r1, r0
 8009594:	4607      	mov	r7, r0
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fc2a 	bl	8009df0 <__multiply>
 800959c:	ee18 1a10 	vmov	r1, s16
 80095a0:	4680      	mov	r8, r0
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fb56 	bl	8009c54 <_Bfree>
 80095a8:	ee08 8a10 	vmov	s16, r8
 80095ac:	9b07      	ldr	r3, [sp, #28]
 80095ae:	1b9a      	subs	r2, r3, r6
 80095b0:	d006      	beq.n	80095c0 <_dtoa_r+0x7a0>
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 fcc4 	bl	8009f44 <__pow5mult>
 80095bc:	ee08 0a10 	vmov	s16, r0
 80095c0:	2101      	movs	r1, #1
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 fbfe 	bl	8009dc4 <__i2b>
 80095c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	4606      	mov	r6, r0
 80095ce:	f340 8088 	ble.w	80096e2 <_dtoa_r+0x8c2>
 80095d2:	461a      	mov	r2, r3
 80095d4:	4601      	mov	r1, r0
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fcb4 	bl	8009f44 <__pow5mult>
 80095dc:	9b06      	ldr	r3, [sp, #24]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	4606      	mov	r6, r0
 80095e2:	f340 8081 	ble.w	80096e8 <_dtoa_r+0x8c8>
 80095e6:	f04f 0800 	mov.w	r8, #0
 80095ea:	6933      	ldr	r3, [r6, #16]
 80095ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095f0:	6918      	ldr	r0, [r3, #16]
 80095f2:	f000 fb97 	bl	8009d24 <__hi0bits>
 80095f6:	f1c0 0020 	rsb	r0, r0, #32
 80095fa:	9b05      	ldr	r3, [sp, #20]
 80095fc:	4418      	add	r0, r3
 80095fe:	f010 001f 	ands.w	r0, r0, #31
 8009602:	f000 8092 	beq.w	800972a <_dtoa_r+0x90a>
 8009606:	f1c0 0320 	rsb	r3, r0, #32
 800960a:	2b04      	cmp	r3, #4
 800960c:	f340 808a 	ble.w	8009724 <_dtoa_r+0x904>
 8009610:	f1c0 001c 	rsb	r0, r0, #28
 8009614:	9b04      	ldr	r3, [sp, #16]
 8009616:	4403      	add	r3, r0
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	9b05      	ldr	r3, [sp, #20]
 800961c:	4403      	add	r3, r0
 800961e:	4405      	add	r5, r0
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	dd07      	ble.n	8009638 <_dtoa_r+0x818>
 8009628:	ee18 1a10 	vmov	r1, s16
 800962c:	461a      	mov	r2, r3
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fce2 	bl	8009ff8 <__lshift>
 8009634:	ee08 0a10 	vmov	s16, r0
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dd05      	ble.n	800964a <_dtoa_r+0x82a>
 800963e:	4631      	mov	r1, r6
 8009640:	461a      	mov	r2, r3
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fcd8 	bl	8009ff8 <__lshift>
 8009648:	4606      	mov	r6, r0
 800964a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d06e      	beq.n	800972e <_dtoa_r+0x90e>
 8009650:	ee18 0a10 	vmov	r0, s16
 8009654:	4631      	mov	r1, r6
 8009656:	f000 fd3f 	bl	800a0d8 <__mcmp>
 800965a:	2800      	cmp	r0, #0
 800965c:	da67      	bge.n	800972e <_dtoa_r+0x90e>
 800965e:	9b00      	ldr	r3, [sp, #0]
 8009660:	3b01      	subs	r3, #1
 8009662:	ee18 1a10 	vmov	r1, s16
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	220a      	movs	r2, #10
 800966a:	2300      	movs	r3, #0
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fb13 	bl	8009c98 <__multadd>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	ee08 0a10 	vmov	s16, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 81b1 	beq.w	80099e0 <_dtoa_r+0xbc0>
 800967e:	2300      	movs	r3, #0
 8009680:	4639      	mov	r1, r7
 8009682:	220a      	movs	r2, #10
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fb07 	bl	8009c98 <__multadd>
 800968a:	9b02      	ldr	r3, [sp, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	4607      	mov	r7, r0
 8009690:	f300 808e 	bgt.w	80097b0 <_dtoa_r+0x990>
 8009694:	9b06      	ldr	r3, [sp, #24]
 8009696:	2b02      	cmp	r3, #2
 8009698:	dc51      	bgt.n	800973e <_dtoa_r+0x91e>
 800969a:	e089      	b.n	80097b0 <_dtoa_r+0x990>
 800969c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800969e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096a2:	e74b      	b.n	800953c <_dtoa_r+0x71c>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	1e5e      	subs	r6, r3, #1
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	42b3      	cmp	r3, r6
 80096ac:	bfbf      	itttt	lt
 80096ae:	9b07      	ldrlt	r3, [sp, #28]
 80096b0:	9607      	strlt	r6, [sp, #28]
 80096b2:	1af2      	sublt	r2, r6, r3
 80096b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096b6:	bfb6      	itet	lt
 80096b8:	189b      	addlt	r3, r3, r2
 80096ba:	1b9e      	subge	r6, r3, r6
 80096bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	bfb8      	it	lt
 80096c2:	2600      	movlt	r6, #0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bfb7      	itett	lt
 80096c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096d0:	1a9d      	sublt	r5, r3, r2
 80096d2:	2300      	movlt	r3, #0
 80096d4:	e734      	b.n	8009540 <_dtoa_r+0x720>
 80096d6:	9e07      	ldr	r6, [sp, #28]
 80096d8:	9d04      	ldr	r5, [sp, #16]
 80096da:	9f08      	ldr	r7, [sp, #32]
 80096dc:	e73b      	b.n	8009556 <_dtoa_r+0x736>
 80096de:	9a07      	ldr	r2, [sp, #28]
 80096e0:	e767      	b.n	80095b2 <_dtoa_r+0x792>
 80096e2:	9b06      	ldr	r3, [sp, #24]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	dc18      	bgt.n	800971a <_dtoa_r+0x8fa>
 80096e8:	f1ba 0f00 	cmp.w	sl, #0
 80096ec:	d115      	bne.n	800971a <_dtoa_r+0x8fa>
 80096ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f2:	b993      	cbnz	r3, 800971a <_dtoa_r+0x8fa>
 80096f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096f8:	0d1b      	lsrs	r3, r3, #20
 80096fa:	051b      	lsls	r3, r3, #20
 80096fc:	b183      	cbz	r3, 8009720 <_dtoa_r+0x900>
 80096fe:	9b04      	ldr	r3, [sp, #16]
 8009700:	3301      	adds	r3, #1
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	3301      	adds	r3, #1
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	f04f 0801 	mov.w	r8, #1
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	2b00      	cmp	r3, #0
 8009712:	f47f af6a 	bne.w	80095ea <_dtoa_r+0x7ca>
 8009716:	2001      	movs	r0, #1
 8009718:	e76f      	b.n	80095fa <_dtoa_r+0x7da>
 800971a:	f04f 0800 	mov.w	r8, #0
 800971e:	e7f6      	b.n	800970e <_dtoa_r+0x8ee>
 8009720:	4698      	mov	r8, r3
 8009722:	e7f4      	b.n	800970e <_dtoa_r+0x8ee>
 8009724:	f43f af7d 	beq.w	8009622 <_dtoa_r+0x802>
 8009728:	4618      	mov	r0, r3
 800972a:	301c      	adds	r0, #28
 800972c:	e772      	b.n	8009614 <_dtoa_r+0x7f4>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dc37      	bgt.n	80097a4 <_dtoa_r+0x984>
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	2b02      	cmp	r3, #2
 8009738:	dd34      	ble.n	80097a4 <_dtoa_r+0x984>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	9b02      	ldr	r3, [sp, #8]
 8009740:	b96b      	cbnz	r3, 800975e <_dtoa_r+0x93e>
 8009742:	4631      	mov	r1, r6
 8009744:	2205      	movs	r2, #5
 8009746:	4620      	mov	r0, r4
 8009748:	f000 faa6 	bl	8009c98 <__multadd>
 800974c:	4601      	mov	r1, r0
 800974e:	4606      	mov	r6, r0
 8009750:	ee18 0a10 	vmov	r0, s16
 8009754:	f000 fcc0 	bl	800a0d8 <__mcmp>
 8009758:	2800      	cmp	r0, #0
 800975a:	f73f adbb 	bgt.w	80092d4 <_dtoa_r+0x4b4>
 800975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009760:	9d01      	ldr	r5, [sp, #4]
 8009762:	43db      	mvns	r3, r3
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	f04f 0800 	mov.w	r8, #0
 800976a:	4631      	mov	r1, r6
 800976c:	4620      	mov	r0, r4
 800976e:	f000 fa71 	bl	8009c54 <_Bfree>
 8009772:	2f00      	cmp	r7, #0
 8009774:	f43f aea4 	beq.w	80094c0 <_dtoa_r+0x6a0>
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	d005      	beq.n	800978a <_dtoa_r+0x96a>
 800977e:	45b8      	cmp	r8, r7
 8009780:	d003      	beq.n	800978a <_dtoa_r+0x96a>
 8009782:	4641      	mov	r1, r8
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fa65 	bl	8009c54 <_Bfree>
 800978a:	4639      	mov	r1, r7
 800978c:	4620      	mov	r0, r4
 800978e:	f000 fa61 	bl	8009c54 <_Bfree>
 8009792:	e695      	b.n	80094c0 <_dtoa_r+0x6a0>
 8009794:	2600      	movs	r6, #0
 8009796:	4637      	mov	r7, r6
 8009798:	e7e1      	b.n	800975e <_dtoa_r+0x93e>
 800979a:	9700      	str	r7, [sp, #0]
 800979c:	4637      	mov	r7, r6
 800979e:	e599      	b.n	80092d4 <_dtoa_r+0x4b4>
 80097a0:	40240000 	.word	0x40240000
 80097a4:	9b08      	ldr	r3, [sp, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80ca 	beq.w	8009940 <_dtoa_r+0xb20>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	dd05      	ble.n	80097c0 <_dtoa_r+0x9a0>
 80097b4:	4639      	mov	r1, r7
 80097b6:	462a      	mov	r2, r5
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fc1d 	bl	8009ff8 <__lshift>
 80097be:	4607      	mov	r7, r0
 80097c0:	f1b8 0f00 	cmp.w	r8, #0
 80097c4:	d05b      	beq.n	800987e <_dtoa_r+0xa5e>
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fa03 	bl	8009bd4 <_Balloc>
 80097ce:	4605      	mov	r5, r0
 80097d0:	b928      	cbnz	r0, 80097de <_dtoa_r+0x9be>
 80097d2:	4b87      	ldr	r3, [pc, #540]	; (80099f0 <_dtoa_r+0xbd0>)
 80097d4:	4602      	mov	r2, r0
 80097d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097da:	f7ff bb3b 	b.w	8008e54 <_dtoa_r+0x34>
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	3202      	adds	r2, #2
 80097e2:	0092      	lsls	r2, r2, #2
 80097e4:	f107 010c 	add.w	r1, r7, #12
 80097e8:	300c      	adds	r0, #12
 80097ea:	f7fe fc68 	bl	80080be <memcpy>
 80097ee:	2201      	movs	r2, #1
 80097f0:	4629      	mov	r1, r5
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fc00 	bl	8009ff8 <__lshift>
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	f103 0901 	add.w	r9, r3, #1
 80097fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009802:	4413      	add	r3, r2
 8009804:	9305      	str	r3, [sp, #20]
 8009806:	f00a 0301 	and.w	r3, sl, #1
 800980a:	46b8      	mov	r8, r7
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	4607      	mov	r7, r0
 8009810:	4631      	mov	r1, r6
 8009812:	ee18 0a10 	vmov	r0, s16
 8009816:	f7ff fa75 	bl	8008d04 <quorem>
 800981a:	4641      	mov	r1, r8
 800981c:	9002      	str	r0, [sp, #8]
 800981e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009822:	ee18 0a10 	vmov	r0, s16
 8009826:	f000 fc57 	bl	800a0d8 <__mcmp>
 800982a:	463a      	mov	r2, r7
 800982c:	9003      	str	r0, [sp, #12]
 800982e:	4631      	mov	r1, r6
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fc6d 	bl	800a110 <__mdiff>
 8009836:	68c2      	ldr	r2, [r0, #12]
 8009838:	f109 3bff 	add.w	fp, r9, #4294967295
 800983c:	4605      	mov	r5, r0
 800983e:	bb02      	cbnz	r2, 8009882 <_dtoa_r+0xa62>
 8009840:	4601      	mov	r1, r0
 8009842:	ee18 0a10 	vmov	r0, s16
 8009846:	f000 fc47 	bl	800a0d8 <__mcmp>
 800984a:	4602      	mov	r2, r0
 800984c:	4629      	mov	r1, r5
 800984e:	4620      	mov	r0, r4
 8009850:	9207      	str	r2, [sp, #28]
 8009852:	f000 f9ff 	bl	8009c54 <_Bfree>
 8009856:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800985a:	ea43 0102 	orr.w	r1, r3, r2
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	430b      	orrs	r3, r1
 8009862:	464d      	mov	r5, r9
 8009864:	d10f      	bne.n	8009886 <_dtoa_r+0xa66>
 8009866:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800986a:	d02a      	beq.n	80098c2 <_dtoa_r+0xaa2>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	dd02      	ble.n	8009878 <_dtoa_r+0xa58>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009878:	f88b a000 	strb.w	sl, [fp]
 800987c:	e775      	b.n	800976a <_dtoa_r+0x94a>
 800987e:	4638      	mov	r0, r7
 8009880:	e7ba      	b.n	80097f8 <_dtoa_r+0x9d8>
 8009882:	2201      	movs	r2, #1
 8009884:	e7e2      	b.n	800984c <_dtoa_r+0xa2c>
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	db04      	blt.n	8009896 <_dtoa_r+0xa76>
 800988c:	9906      	ldr	r1, [sp, #24]
 800988e:	430b      	orrs	r3, r1
 8009890:	9904      	ldr	r1, [sp, #16]
 8009892:	430b      	orrs	r3, r1
 8009894:	d122      	bne.n	80098dc <_dtoa_r+0xabc>
 8009896:	2a00      	cmp	r2, #0
 8009898:	ddee      	ble.n	8009878 <_dtoa_r+0xa58>
 800989a:	ee18 1a10 	vmov	r1, s16
 800989e:	2201      	movs	r2, #1
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fba9 	bl	8009ff8 <__lshift>
 80098a6:	4631      	mov	r1, r6
 80098a8:	ee08 0a10 	vmov	s16, r0
 80098ac:	f000 fc14 	bl	800a0d8 <__mcmp>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	dc03      	bgt.n	80098bc <_dtoa_r+0xa9c>
 80098b4:	d1e0      	bne.n	8009878 <_dtoa_r+0xa58>
 80098b6:	f01a 0f01 	tst.w	sl, #1
 80098ba:	d0dd      	beq.n	8009878 <_dtoa_r+0xa58>
 80098bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098c0:	d1d7      	bne.n	8009872 <_dtoa_r+0xa52>
 80098c2:	2339      	movs	r3, #57	; 0x39
 80098c4:	f88b 3000 	strb.w	r3, [fp]
 80098c8:	462b      	mov	r3, r5
 80098ca:	461d      	mov	r5, r3
 80098cc:	3b01      	subs	r3, #1
 80098ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098d2:	2a39      	cmp	r2, #57	; 0x39
 80098d4:	d071      	beq.n	80099ba <_dtoa_r+0xb9a>
 80098d6:	3201      	adds	r2, #1
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e746      	b.n	800976a <_dtoa_r+0x94a>
 80098dc:	2a00      	cmp	r2, #0
 80098de:	dd07      	ble.n	80098f0 <_dtoa_r+0xad0>
 80098e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098e4:	d0ed      	beq.n	80098c2 <_dtoa_r+0xaa2>
 80098e6:	f10a 0301 	add.w	r3, sl, #1
 80098ea:	f88b 3000 	strb.w	r3, [fp]
 80098ee:	e73c      	b.n	800976a <_dtoa_r+0x94a>
 80098f0:	9b05      	ldr	r3, [sp, #20]
 80098f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098f6:	4599      	cmp	r9, r3
 80098f8:	d047      	beq.n	800998a <_dtoa_r+0xb6a>
 80098fa:	ee18 1a10 	vmov	r1, s16
 80098fe:	2300      	movs	r3, #0
 8009900:	220a      	movs	r2, #10
 8009902:	4620      	mov	r0, r4
 8009904:	f000 f9c8 	bl	8009c98 <__multadd>
 8009908:	45b8      	cmp	r8, r7
 800990a:	ee08 0a10 	vmov	s16, r0
 800990e:	f04f 0300 	mov.w	r3, #0
 8009912:	f04f 020a 	mov.w	r2, #10
 8009916:	4641      	mov	r1, r8
 8009918:	4620      	mov	r0, r4
 800991a:	d106      	bne.n	800992a <_dtoa_r+0xb0a>
 800991c:	f000 f9bc 	bl	8009c98 <__multadd>
 8009920:	4680      	mov	r8, r0
 8009922:	4607      	mov	r7, r0
 8009924:	f109 0901 	add.w	r9, r9, #1
 8009928:	e772      	b.n	8009810 <_dtoa_r+0x9f0>
 800992a:	f000 f9b5 	bl	8009c98 <__multadd>
 800992e:	4639      	mov	r1, r7
 8009930:	4680      	mov	r8, r0
 8009932:	2300      	movs	r3, #0
 8009934:	220a      	movs	r2, #10
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f9ae 	bl	8009c98 <__multadd>
 800993c:	4607      	mov	r7, r0
 800993e:	e7f1      	b.n	8009924 <_dtoa_r+0xb04>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	9302      	str	r3, [sp, #8]
 8009944:	9d01      	ldr	r5, [sp, #4]
 8009946:	ee18 0a10 	vmov	r0, s16
 800994a:	4631      	mov	r1, r6
 800994c:	f7ff f9da 	bl	8008d04 <quorem>
 8009950:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	f805 ab01 	strb.w	sl, [r5], #1
 800995a:	1aea      	subs	r2, r5, r3
 800995c:	9b02      	ldr	r3, [sp, #8]
 800995e:	4293      	cmp	r3, r2
 8009960:	dd09      	ble.n	8009976 <_dtoa_r+0xb56>
 8009962:	ee18 1a10 	vmov	r1, s16
 8009966:	2300      	movs	r3, #0
 8009968:	220a      	movs	r2, #10
 800996a:	4620      	mov	r0, r4
 800996c:	f000 f994 	bl	8009c98 <__multadd>
 8009970:	ee08 0a10 	vmov	s16, r0
 8009974:	e7e7      	b.n	8009946 <_dtoa_r+0xb26>
 8009976:	9b02      	ldr	r3, [sp, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfc8      	it	gt
 800997c:	461d      	movgt	r5, r3
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	bfd8      	it	le
 8009982:	2501      	movle	r5, #1
 8009984:	441d      	add	r5, r3
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	ee18 1a10 	vmov	r1, s16
 800998e:	2201      	movs	r2, #1
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fb31 	bl	8009ff8 <__lshift>
 8009996:	4631      	mov	r1, r6
 8009998:	ee08 0a10 	vmov	s16, r0
 800999c:	f000 fb9c 	bl	800a0d8 <__mcmp>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dc91      	bgt.n	80098c8 <_dtoa_r+0xaa8>
 80099a4:	d102      	bne.n	80099ac <_dtoa_r+0xb8c>
 80099a6:	f01a 0f01 	tst.w	sl, #1
 80099aa:	d18d      	bne.n	80098c8 <_dtoa_r+0xaa8>
 80099ac:	462b      	mov	r3, r5
 80099ae:	461d      	mov	r5, r3
 80099b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099b4:	2a30      	cmp	r2, #48	; 0x30
 80099b6:	d0fa      	beq.n	80099ae <_dtoa_r+0xb8e>
 80099b8:	e6d7      	b.n	800976a <_dtoa_r+0x94a>
 80099ba:	9a01      	ldr	r2, [sp, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d184      	bne.n	80098ca <_dtoa_r+0xaaa>
 80099c0:	9b00      	ldr	r3, [sp, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	2331      	movs	r3, #49	; 0x31
 80099c8:	7013      	strb	r3, [r2, #0]
 80099ca:	e6ce      	b.n	800976a <_dtoa_r+0x94a>
 80099cc:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <_dtoa_r+0xbd4>)
 80099ce:	f7ff ba95 	b.w	8008efc <_dtoa_r+0xdc>
 80099d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f47f aa6e 	bne.w	8008eb6 <_dtoa_r+0x96>
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <_dtoa_r+0xbd8>)
 80099dc:	f7ff ba8e 	b.w	8008efc <_dtoa_r+0xdc>
 80099e0:	9b02      	ldr	r3, [sp, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dcae      	bgt.n	8009944 <_dtoa_r+0xb24>
 80099e6:	9b06      	ldr	r3, [sp, #24]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	f73f aea8 	bgt.w	800973e <_dtoa_r+0x91e>
 80099ee:	e7a9      	b.n	8009944 <_dtoa_r+0xb24>
 80099f0:	0800c273 	.word	0x0800c273
 80099f4:	0800c1d0 	.word	0x0800c1d0
 80099f8:	0800c1f4 	.word	0x0800c1f4

080099fc <__sflush_r>:
 80099fc:	898a      	ldrh	r2, [r1, #12]
 80099fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a02:	4605      	mov	r5, r0
 8009a04:	0710      	lsls	r0, r2, #28
 8009a06:	460c      	mov	r4, r1
 8009a08:	d458      	bmi.n	8009abc <__sflush_r+0xc0>
 8009a0a:	684b      	ldr	r3, [r1, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dc05      	bgt.n	8009a1c <__sflush_r+0x20>
 8009a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dc02      	bgt.n	8009a1c <__sflush_r+0x20>
 8009a16:	2000      	movs	r0, #0
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a1e:	2e00      	cmp	r6, #0
 8009a20:	d0f9      	beq.n	8009a16 <__sflush_r+0x1a>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a28:	682f      	ldr	r7, [r5, #0]
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	d032      	beq.n	8009a94 <__sflush_r+0x98>
 8009a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	075a      	lsls	r2, r3, #29
 8009a34:	d505      	bpl.n	8009a42 <__sflush_r+0x46>
 8009a36:	6863      	ldr	r3, [r4, #4]
 8009a38:	1ac0      	subs	r0, r0, r3
 8009a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a3c:	b10b      	cbz	r3, 8009a42 <__sflush_r+0x46>
 8009a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a40:	1ac0      	subs	r0, r0, r3
 8009a42:	2300      	movs	r3, #0
 8009a44:	4602      	mov	r2, r0
 8009a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b0      	blx	r6
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	d106      	bne.n	8009a62 <__sflush_r+0x66>
 8009a54:	6829      	ldr	r1, [r5, #0]
 8009a56:	291d      	cmp	r1, #29
 8009a58:	d82c      	bhi.n	8009ab4 <__sflush_r+0xb8>
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <__sflush_r+0x108>)
 8009a5c:	40ca      	lsrs	r2, r1
 8009a5e:	07d6      	lsls	r6, r2, #31
 8009a60:	d528      	bpl.n	8009ab4 <__sflush_r+0xb8>
 8009a62:	2200      	movs	r2, #0
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	04d9      	lsls	r1, r3, #19
 8009a68:	6922      	ldr	r2, [r4, #16]
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	d504      	bpl.n	8009a78 <__sflush_r+0x7c>
 8009a6e:	1c42      	adds	r2, r0, #1
 8009a70:	d101      	bne.n	8009a76 <__sflush_r+0x7a>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b903      	cbnz	r3, 8009a78 <__sflush_r+0x7c>
 8009a76:	6560      	str	r0, [r4, #84]	; 0x54
 8009a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7a:	602f      	str	r7, [r5, #0]
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d0ca      	beq.n	8009a16 <__sflush_r+0x1a>
 8009a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a84:	4299      	cmp	r1, r3
 8009a86:	d002      	beq.n	8009a8e <__sflush_r+0x92>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 fc3d 	bl	800a308 <_free_r>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	6360      	str	r0, [r4, #52]	; 0x34
 8009a92:	e7c1      	b.n	8009a18 <__sflush_r+0x1c>
 8009a94:	6a21      	ldr	r1, [r4, #32]
 8009a96:	2301      	movs	r3, #1
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b0      	blx	r6
 8009a9c:	1c41      	adds	r1, r0, #1
 8009a9e:	d1c7      	bne.n	8009a30 <__sflush_r+0x34>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0c4      	beq.n	8009a30 <__sflush_r+0x34>
 8009aa6:	2b1d      	cmp	r3, #29
 8009aa8:	d001      	beq.n	8009aae <__sflush_r+0xb2>
 8009aaa:	2b16      	cmp	r3, #22
 8009aac:	d101      	bne.n	8009ab2 <__sflush_r+0xb6>
 8009aae:	602f      	str	r7, [r5, #0]
 8009ab0:	e7b1      	b.n	8009a16 <__sflush_r+0x1a>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	e7ad      	b.n	8009a18 <__sflush_r+0x1c>
 8009abc:	690f      	ldr	r7, [r1, #16]
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	d0a9      	beq.n	8009a16 <__sflush_r+0x1a>
 8009ac2:	0793      	lsls	r3, r2, #30
 8009ac4:	680e      	ldr	r6, [r1, #0]
 8009ac6:	bf08      	it	eq
 8009ac8:	694b      	ldreq	r3, [r1, #20]
 8009aca:	600f      	str	r7, [r1, #0]
 8009acc:	bf18      	it	ne
 8009ace:	2300      	movne	r3, #0
 8009ad0:	eba6 0807 	sub.w	r8, r6, r7
 8009ad4:	608b      	str	r3, [r1, #8]
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	dd9c      	ble.n	8009a16 <__sflush_r+0x1a>
 8009adc:	6a21      	ldr	r1, [r4, #32]
 8009ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ae0:	4643      	mov	r3, r8
 8009ae2:	463a      	mov	r2, r7
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	47b0      	blx	r6
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	dc06      	bgt.n	8009afa <__sflush_r+0xfe>
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	e78e      	b.n	8009a18 <__sflush_r+0x1c>
 8009afa:	4407      	add	r7, r0
 8009afc:	eba8 0800 	sub.w	r8, r8, r0
 8009b00:	e7e9      	b.n	8009ad6 <__sflush_r+0xda>
 8009b02:	bf00      	nop
 8009b04:	20400001 	.word	0x20400001

08009b08 <_fflush_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	690b      	ldr	r3, [r1, #16]
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	b913      	cbnz	r3, 8009b18 <_fflush_r+0x10>
 8009b12:	2500      	movs	r5, #0
 8009b14:	4628      	mov	r0, r5
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	b118      	cbz	r0, 8009b22 <_fflush_r+0x1a>
 8009b1a:	6983      	ldr	r3, [r0, #24]
 8009b1c:	b90b      	cbnz	r3, 8009b22 <_fflush_r+0x1a>
 8009b1e:	f7fe fa09 	bl	8007f34 <__sinit>
 8009b22:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <_fflush_r+0x6c>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	d11b      	bne.n	8009b60 <_fflush_r+0x58>
 8009b28:	686c      	ldr	r4, [r5, #4]
 8009b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0ef      	beq.n	8009b12 <_fflush_r+0xa>
 8009b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b34:	07d0      	lsls	r0, r2, #31
 8009b36:	d404      	bmi.n	8009b42 <_fflush_r+0x3a>
 8009b38:	0599      	lsls	r1, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_fflush_r+0x3a>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3e:	f7fe fabc 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009b42:	4628      	mov	r0, r5
 8009b44:	4621      	mov	r1, r4
 8009b46:	f7ff ff59 	bl	80099fc <__sflush_r>
 8009b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b4c:	07da      	lsls	r2, r3, #31
 8009b4e:	4605      	mov	r5, r0
 8009b50:	d4e0      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	059b      	lsls	r3, r3, #22
 8009b56:	d4dd      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b5a:	f7fe faaf 	bl	80080bc <__retarget_lock_release_recursive>
 8009b5e:	e7d9      	b.n	8009b14 <_fflush_r+0xc>
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <_fflush_r+0x70>)
 8009b62:	429c      	cmp	r4, r3
 8009b64:	d101      	bne.n	8009b6a <_fflush_r+0x62>
 8009b66:	68ac      	ldr	r4, [r5, #8]
 8009b68:	e7df      	b.n	8009b2a <_fflush_r+0x22>
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <_fflush_r+0x74>)
 8009b6c:	429c      	cmp	r4, r3
 8009b6e:	bf08      	it	eq
 8009b70:	68ec      	ldreq	r4, [r5, #12]
 8009b72:	e7da      	b.n	8009b2a <_fflush_r+0x22>
 8009b74:	0800c17c 	.word	0x0800c17c
 8009b78:	0800c19c 	.word	0x0800c19c
 8009b7c:	0800c15c 	.word	0x0800c15c

08009b80 <_localeconv_r>:
 8009b80:	4800      	ldr	r0, [pc, #0]	; (8009b84 <_localeconv_r+0x4>)
 8009b82:	4770      	bx	lr
 8009b84:	20000168 	.word	0x20000168

08009b88 <_lseek_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	; (8009ba8 <_lseek_r+0x20>)
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f002 fa4a 	bl	800c030 <_lseek>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_lseek_r+0x1e>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_lseek_r+0x1e>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	200066d4 	.word	0x200066d4

08009bac <malloc>:
 8009bac:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <malloc+0xc>)
 8009bae:	4601      	mov	r1, r0
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	f7fe babb 	b.w	800812c <_malloc_r>
 8009bb6:	bf00      	nop
 8009bb8:	20000014 	.word	0x20000014

08009bbc <__malloc_lock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__malloc_lock+0x8>)
 8009bbe:	f7fe ba7c 	b.w	80080ba <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	200066c8 	.word	0x200066c8

08009bc8 <__malloc_unlock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__malloc_unlock+0x8>)
 8009bca:	f7fe ba77 	b.w	80080bc <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	200066c8 	.word	0x200066c8

08009bd4 <_Balloc>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	b976      	cbnz	r6, 8009bfc <_Balloc+0x28>
 8009bde:	2010      	movs	r0, #16
 8009be0:	f7ff ffe4 	bl	8009bac <malloc>
 8009be4:	4602      	mov	r2, r0
 8009be6:	6260      	str	r0, [r4, #36]	; 0x24
 8009be8:	b920      	cbnz	r0, 8009bf4 <_Balloc+0x20>
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <_Balloc+0x78>)
 8009bec:	4818      	ldr	r0, [pc, #96]	; (8009c50 <_Balloc+0x7c>)
 8009bee:	2166      	movs	r1, #102	; 0x66
 8009bf0:	f000 ff5e 	bl	800aab0 <__assert_func>
 8009bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf8:	6006      	str	r6, [r0, #0]
 8009bfa:	60c6      	str	r6, [r0, #12]
 8009bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bfe:	68f3      	ldr	r3, [r6, #12]
 8009c00:	b183      	cbz	r3, 8009c24 <_Balloc+0x50>
 8009c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c0a:	b9b8      	cbnz	r0, 8009c3c <_Balloc+0x68>
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c12:	1d72      	adds	r2, r6, #5
 8009c14:	0092      	lsls	r2, r2, #2
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fb60 	bl	800a2dc <_calloc_r>
 8009c1c:	b160      	cbz	r0, 8009c38 <_Balloc+0x64>
 8009c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c22:	e00e      	b.n	8009c42 <_Balloc+0x6e>
 8009c24:	2221      	movs	r2, #33	; 0x21
 8009c26:	2104      	movs	r1, #4
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fb57 	bl	800a2dc <_calloc_r>
 8009c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c30:	60f0      	str	r0, [r6, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e4      	bne.n	8009c02 <_Balloc+0x2e>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	6802      	ldr	r2, [r0, #0]
 8009c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c42:	2300      	movs	r3, #0
 8009c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c48:	e7f7      	b.n	8009c3a <_Balloc+0x66>
 8009c4a:	bf00      	nop
 8009c4c:	0800c201 	.word	0x0800c201
 8009c50:	0800c284 	.word	0x0800c284

08009c54 <_Bfree>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c58:	4605      	mov	r5, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Bfree+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7ff ffa4 	bl	8009bac <malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6268      	str	r0, [r5, #36]	; 0x24
 8009c68:	b920      	cbnz	r0, 8009c74 <_Bfree+0x20>
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <_Bfree+0x3c>)
 8009c6c:	4809      	ldr	r0, [pc, #36]	; (8009c94 <_Bfree+0x40>)
 8009c6e:	218a      	movs	r1, #138	; 0x8a
 8009c70:	f000 ff1e 	bl	800aab0 <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	b13c      	cbz	r4, 8009c8e <_Bfree+0x3a>
 8009c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c80:	6862      	ldr	r2, [r4, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c88:	6021      	str	r1, [r4, #0]
 8009c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	0800c201 	.word	0x0800c201
 8009c94:	0800c284 	.word	0x0800c284

08009c98 <__multadd>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	690d      	ldr	r5, [r1, #16]
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	f101 0c14 	add.w	ip, r1, #20
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f8dc 3000 	ldr.w	r3, [ip]
 8009cae:	b299      	uxth	r1, r3
 8009cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8009cb4:	0c1e      	lsrs	r6, r3, #16
 8009cb6:	0c0b      	lsrs	r3, r1, #16
 8009cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8009cbc:	b289      	uxth	r1, r1
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cc4:	4285      	cmp	r5, r0
 8009cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cce:	dcec      	bgt.n	8009caa <__multadd+0x12>
 8009cd0:	b30e      	cbz	r6, 8009d16 <__multadd+0x7e>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	dc19      	bgt.n	8009d0c <__multadd+0x74>
 8009cd8:	6861      	ldr	r1, [r4, #4]
 8009cda:	4638      	mov	r0, r7
 8009cdc:	3101      	adds	r1, #1
 8009cde:	f7ff ff79 	bl	8009bd4 <_Balloc>
 8009ce2:	4680      	mov	r8, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__multadd+0x5a>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <__multadd+0x84>)
 8009cea:	480d      	ldr	r0, [pc, #52]	; (8009d20 <__multadd+0x88>)
 8009cec:	21b5      	movs	r1, #181	; 0xb5
 8009cee:	f000 fedf 	bl	800aab0 <__assert_func>
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	f104 010c 	add.w	r1, r4, #12
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f7fe f9de 	bl	80080be <memcpy>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ffa5 	bl	8009c54 <_Bfree>
 8009d0a:	4644      	mov	r4, r8
 8009d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d10:	3501      	adds	r5, #1
 8009d12:	615e      	str	r6, [r3, #20]
 8009d14:	6125      	str	r5, [r4, #16]
 8009d16:	4620      	mov	r0, r4
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	0800c273 	.word	0x0800c273
 8009d20:	0800c284 	.word	0x0800c284

08009d24 <__hi0bits>:
 8009d24:	0c03      	lsrs	r3, r0, #16
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	b9d3      	cbnz	r3, 8009d60 <__hi0bits+0x3c>
 8009d2a:	0400      	lsls	r0, r0, #16
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d32:	bf04      	itt	eq
 8009d34:	0200      	lsleq	r0, r0, #8
 8009d36:	3308      	addeq	r3, #8
 8009d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d3c:	bf04      	itt	eq
 8009d3e:	0100      	lsleq	r0, r0, #4
 8009d40:	3304      	addeq	r3, #4
 8009d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d46:	bf04      	itt	eq
 8009d48:	0080      	lsleq	r0, r0, #2
 8009d4a:	3302      	addeq	r3, #2
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	db05      	blt.n	8009d5c <__hi0bits+0x38>
 8009d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d54:	f103 0301 	add.w	r3, r3, #1
 8009d58:	bf08      	it	eq
 8009d5a:	2320      	moveq	r3, #32
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	4770      	bx	lr
 8009d60:	2300      	movs	r3, #0
 8009d62:	e7e4      	b.n	8009d2e <__hi0bits+0xa>

08009d64 <__lo0bits>:
 8009d64:	6803      	ldr	r3, [r0, #0]
 8009d66:	f013 0207 	ands.w	r2, r3, #7
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	d00b      	beq.n	8009d86 <__lo0bits+0x22>
 8009d6e:	07da      	lsls	r2, r3, #31
 8009d70:	d423      	bmi.n	8009dba <__lo0bits+0x56>
 8009d72:	0798      	lsls	r0, r3, #30
 8009d74:	bf49      	itett	mi
 8009d76:	085b      	lsrmi	r3, r3, #1
 8009d78:	089b      	lsrpl	r3, r3, #2
 8009d7a:	2001      	movmi	r0, #1
 8009d7c:	600b      	strmi	r3, [r1, #0]
 8009d7e:	bf5c      	itt	pl
 8009d80:	600b      	strpl	r3, [r1, #0]
 8009d82:	2002      	movpl	r0, #2
 8009d84:	4770      	bx	lr
 8009d86:	b298      	uxth	r0, r3
 8009d88:	b9a8      	cbnz	r0, 8009db6 <__lo0bits+0x52>
 8009d8a:	0c1b      	lsrs	r3, r3, #16
 8009d8c:	2010      	movs	r0, #16
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	b90a      	cbnz	r2, 8009d96 <__lo0bits+0x32>
 8009d92:	3008      	adds	r0, #8
 8009d94:	0a1b      	lsrs	r3, r3, #8
 8009d96:	071a      	lsls	r2, r3, #28
 8009d98:	bf04      	itt	eq
 8009d9a:	091b      	lsreq	r3, r3, #4
 8009d9c:	3004      	addeq	r0, #4
 8009d9e:	079a      	lsls	r2, r3, #30
 8009da0:	bf04      	itt	eq
 8009da2:	089b      	lsreq	r3, r3, #2
 8009da4:	3002      	addeq	r0, #2
 8009da6:	07da      	lsls	r2, r3, #31
 8009da8:	d403      	bmi.n	8009db2 <__lo0bits+0x4e>
 8009daa:	085b      	lsrs	r3, r3, #1
 8009dac:	f100 0001 	add.w	r0, r0, #1
 8009db0:	d005      	beq.n	8009dbe <__lo0bits+0x5a>
 8009db2:	600b      	str	r3, [r1, #0]
 8009db4:	4770      	bx	lr
 8009db6:	4610      	mov	r0, r2
 8009db8:	e7e9      	b.n	8009d8e <__lo0bits+0x2a>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	4770      	bx	lr
 8009dbe:	2020      	movs	r0, #32
 8009dc0:	4770      	bx	lr
	...

08009dc4 <__i2b>:
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	2101      	movs	r1, #1
 8009dca:	f7ff ff03 	bl	8009bd4 <_Balloc>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	b928      	cbnz	r0, 8009dde <__i2b+0x1a>
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <__i2b+0x24>)
 8009dd4:	4805      	ldr	r0, [pc, #20]	; (8009dec <__i2b+0x28>)
 8009dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dda:	f000 fe69 	bl	800aab0 <__assert_func>
 8009dde:	2301      	movs	r3, #1
 8009de0:	6144      	str	r4, [r0, #20]
 8009de2:	6103      	str	r3, [r0, #16]
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop
 8009de8:	0800c273 	.word	0x0800c273
 8009dec:	0800c284 	.word	0x0800c284

08009df0 <__multiply>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	4691      	mov	r9, r2
 8009df6:	690a      	ldr	r2, [r1, #16]
 8009df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	bfb8      	it	lt
 8009e00:	460b      	movlt	r3, r1
 8009e02:	460c      	mov	r4, r1
 8009e04:	bfbc      	itt	lt
 8009e06:	464c      	movlt	r4, r9
 8009e08:	4699      	movlt	r9, r3
 8009e0a:	6927      	ldr	r7, [r4, #16]
 8009e0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e10:	68a3      	ldr	r3, [r4, #8]
 8009e12:	6861      	ldr	r1, [r4, #4]
 8009e14:	eb07 060a 	add.w	r6, r7, sl
 8009e18:	42b3      	cmp	r3, r6
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	bfb8      	it	lt
 8009e1e:	3101      	addlt	r1, #1
 8009e20:	f7ff fed8 	bl	8009bd4 <_Balloc>
 8009e24:	b930      	cbnz	r0, 8009e34 <__multiply+0x44>
 8009e26:	4602      	mov	r2, r0
 8009e28:	4b44      	ldr	r3, [pc, #272]	; (8009f3c <__multiply+0x14c>)
 8009e2a:	4845      	ldr	r0, [pc, #276]	; (8009f40 <__multiply+0x150>)
 8009e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8009e30:	f000 fe3e 	bl	800aab0 <__assert_func>
 8009e34:	f100 0514 	add.w	r5, r0, #20
 8009e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4543      	cmp	r3, r8
 8009e42:	d321      	bcc.n	8009e88 <__multiply+0x98>
 8009e44:	f104 0314 	add.w	r3, r4, #20
 8009e48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e4c:	f109 0314 	add.w	r3, r9, #20
 8009e50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e54:	9202      	str	r2, [sp, #8]
 8009e56:	1b3a      	subs	r2, r7, r4
 8009e58:	3a15      	subs	r2, #21
 8009e5a:	f022 0203 	bic.w	r2, r2, #3
 8009e5e:	3204      	adds	r2, #4
 8009e60:	f104 0115 	add.w	r1, r4, #21
 8009e64:	428f      	cmp	r7, r1
 8009e66:	bf38      	it	cc
 8009e68:	2204      	movcc	r2, #4
 8009e6a:	9201      	str	r2, [sp, #4]
 8009e6c:	9a02      	ldr	r2, [sp, #8]
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d80c      	bhi.n	8009e8e <__multiply+0x9e>
 8009e74:	2e00      	cmp	r6, #0
 8009e76:	dd03      	ble.n	8009e80 <__multiply+0x90>
 8009e78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d05a      	beq.n	8009f36 <__multiply+0x146>
 8009e80:	6106      	str	r6, [r0, #16]
 8009e82:	b005      	add	sp, #20
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	f843 2b04 	str.w	r2, [r3], #4
 8009e8c:	e7d8      	b.n	8009e40 <__multiply+0x50>
 8009e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e92:	f1ba 0f00 	cmp.w	sl, #0
 8009e96:	d024      	beq.n	8009ee2 <__multiply+0xf2>
 8009e98:	f104 0e14 	add.w	lr, r4, #20
 8009e9c:	46a9      	mov	r9, r5
 8009e9e:	f04f 0c00 	mov.w	ip, #0
 8009ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ea6:	f8d9 1000 	ldr.w	r1, [r9]
 8009eaa:	fa1f fb82 	uxth.w	fp, r2
 8009eae:	b289      	uxth	r1, r1
 8009eb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009eb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8009ebc:	4461      	add	r1, ip
 8009ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ec2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009eca:	b289      	uxth	r1, r1
 8009ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ed0:	4577      	cmp	r7, lr
 8009ed2:	f849 1b04 	str.w	r1, [r9], #4
 8009ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eda:	d8e2      	bhi.n	8009ea2 <__multiply+0xb2>
 8009edc:	9a01      	ldr	r2, [sp, #4]
 8009ede:	f845 c002 	str.w	ip, [r5, r2]
 8009ee2:	9a03      	ldr	r2, [sp, #12]
 8009ee4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	f1b9 0f00 	cmp.w	r9, #0
 8009eee:	d020      	beq.n	8009f32 <__multiply+0x142>
 8009ef0:	6829      	ldr	r1, [r5, #0]
 8009ef2:	f104 0c14 	add.w	ip, r4, #20
 8009ef6:	46ae      	mov	lr, r5
 8009ef8:	f04f 0a00 	mov.w	sl, #0
 8009efc:	f8bc b000 	ldrh.w	fp, [ip]
 8009f00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f04:	fb09 220b 	mla	r2, r9, fp, r2
 8009f08:	4492      	add	sl, r2
 8009f0a:	b289      	uxth	r1, r1
 8009f0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f10:	f84e 1b04 	str.w	r1, [lr], #4
 8009f14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f18:	f8be 1000 	ldrh.w	r1, [lr]
 8009f1c:	0c12      	lsrs	r2, r2, #16
 8009f1e:	fb09 1102 	mla	r1, r9, r2, r1
 8009f22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f26:	4567      	cmp	r7, ip
 8009f28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f2c:	d8e6      	bhi.n	8009efc <__multiply+0x10c>
 8009f2e:	9a01      	ldr	r2, [sp, #4]
 8009f30:	50a9      	str	r1, [r5, r2]
 8009f32:	3504      	adds	r5, #4
 8009f34:	e79a      	b.n	8009e6c <__multiply+0x7c>
 8009f36:	3e01      	subs	r6, #1
 8009f38:	e79c      	b.n	8009e74 <__multiply+0x84>
 8009f3a:	bf00      	nop
 8009f3c:	0800c273 	.word	0x0800c273
 8009f40:	0800c284 	.word	0x0800c284

08009f44 <__pow5mult>:
 8009f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f48:	4615      	mov	r5, r2
 8009f4a:	f012 0203 	ands.w	r2, r2, #3
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460f      	mov	r7, r1
 8009f52:	d007      	beq.n	8009f64 <__pow5mult+0x20>
 8009f54:	4c25      	ldr	r4, [pc, #148]	; (8009fec <__pow5mult+0xa8>)
 8009f56:	3a01      	subs	r2, #1
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f5e:	f7ff fe9b 	bl	8009c98 <__multadd>
 8009f62:	4607      	mov	r7, r0
 8009f64:	10ad      	asrs	r5, r5, #2
 8009f66:	d03d      	beq.n	8009fe4 <__pow5mult+0xa0>
 8009f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f6a:	b97c      	cbnz	r4, 8009f8c <__pow5mult+0x48>
 8009f6c:	2010      	movs	r0, #16
 8009f6e:	f7ff fe1d 	bl	8009bac <malloc>
 8009f72:	4602      	mov	r2, r0
 8009f74:	6270      	str	r0, [r6, #36]	; 0x24
 8009f76:	b928      	cbnz	r0, 8009f84 <__pow5mult+0x40>
 8009f78:	4b1d      	ldr	r3, [pc, #116]	; (8009ff0 <__pow5mult+0xac>)
 8009f7a:	481e      	ldr	r0, [pc, #120]	; (8009ff4 <__pow5mult+0xb0>)
 8009f7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f80:	f000 fd96 	bl	800aab0 <__assert_func>
 8009f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f88:	6004      	str	r4, [r0, #0]
 8009f8a:	60c4      	str	r4, [r0, #12]
 8009f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f94:	b94c      	cbnz	r4, 8009faa <__pow5mult+0x66>
 8009f96:	f240 2171 	movw	r1, #625	; 0x271
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff ff12 	bl	8009dc4 <__i2b>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	f04f 0900 	mov.w	r9, #0
 8009fae:	07eb      	lsls	r3, r5, #31
 8009fb0:	d50a      	bpl.n	8009fc8 <__pow5mult+0x84>
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f7ff ff1a 	bl	8009df0 <__multiply>
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4680      	mov	r8, r0
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff fe47 	bl	8009c54 <_Bfree>
 8009fc6:	4647      	mov	r7, r8
 8009fc8:	106d      	asrs	r5, r5, #1
 8009fca:	d00b      	beq.n	8009fe4 <__pow5mult+0xa0>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	b938      	cbnz	r0, 8009fe0 <__pow5mult+0x9c>
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff ff0b 	bl	8009df0 <__multiply>
 8009fda:	6020      	str	r0, [r4, #0]
 8009fdc:	f8c0 9000 	str.w	r9, [r0]
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	e7e4      	b.n	8009fae <__pow5mult+0x6a>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fea:	bf00      	nop
 8009fec:	0800c3d0 	.word	0x0800c3d0
 8009ff0:	0800c201 	.word	0x0800c201
 8009ff4:	0800c284 	.word	0x0800c284

08009ff8 <__lshift>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	6849      	ldr	r1, [r1, #4]
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a006:	68a3      	ldr	r3, [r4, #8]
 800a008:	4607      	mov	r7, r0
 800a00a:	4691      	mov	r9, r2
 800a00c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a010:	f108 0601 	add.w	r6, r8, #1
 800a014:	42b3      	cmp	r3, r6
 800a016:	db0b      	blt.n	800a030 <__lshift+0x38>
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff fddb 	bl	8009bd4 <_Balloc>
 800a01e:	4605      	mov	r5, r0
 800a020:	b948      	cbnz	r0, 800a036 <__lshift+0x3e>
 800a022:	4602      	mov	r2, r0
 800a024:	4b2a      	ldr	r3, [pc, #168]	; (800a0d0 <__lshift+0xd8>)
 800a026:	482b      	ldr	r0, [pc, #172]	; (800a0d4 <__lshift+0xdc>)
 800a028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a02c:	f000 fd40 	bl	800aab0 <__assert_func>
 800a030:	3101      	adds	r1, #1
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	e7ee      	b.n	800a014 <__lshift+0x1c>
 800a036:	2300      	movs	r3, #0
 800a038:	f100 0114 	add.w	r1, r0, #20
 800a03c:	f100 0210 	add.w	r2, r0, #16
 800a040:	4618      	mov	r0, r3
 800a042:	4553      	cmp	r3, sl
 800a044:	db37      	blt.n	800a0b6 <__lshift+0xbe>
 800a046:	6920      	ldr	r0, [r4, #16]
 800a048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a04c:	f104 0314 	add.w	r3, r4, #20
 800a050:	f019 091f 	ands.w	r9, r9, #31
 800a054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a05c:	d02f      	beq.n	800a0be <__lshift+0xc6>
 800a05e:	f1c9 0e20 	rsb	lr, r9, #32
 800a062:	468a      	mov	sl, r1
 800a064:	f04f 0c00 	mov.w	ip, #0
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	fa02 f209 	lsl.w	r2, r2, r9
 800a06e:	ea42 020c 	orr.w	r2, r2, ip
 800a072:	f84a 2b04 	str.w	r2, [sl], #4
 800a076:	f853 2b04 	ldr.w	r2, [r3], #4
 800a07a:	4298      	cmp	r0, r3
 800a07c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a080:	d8f2      	bhi.n	800a068 <__lshift+0x70>
 800a082:	1b03      	subs	r3, r0, r4
 800a084:	3b15      	subs	r3, #21
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	3304      	adds	r3, #4
 800a08c:	f104 0215 	add.w	r2, r4, #21
 800a090:	4290      	cmp	r0, r2
 800a092:	bf38      	it	cc
 800a094:	2304      	movcc	r3, #4
 800a096:	f841 c003 	str.w	ip, [r1, r3]
 800a09a:	f1bc 0f00 	cmp.w	ip, #0
 800a09e:	d001      	beq.n	800a0a4 <__lshift+0xac>
 800a0a0:	f108 0602 	add.w	r6, r8, #2
 800a0a4:	3e01      	subs	r6, #1
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	612e      	str	r6, [r5, #16]
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	f7ff fdd2 	bl	8009c54 <_Bfree>
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	e7c1      	b.n	800a042 <__lshift+0x4a>
 800a0be:	3904      	subs	r1, #4
 800a0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0c8:	4298      	cmp	r0, r3
 800a0ca:	d8f9      	bhi.n	800a0c0 <__lshift+0xc8>
 800a0cc:	e7ea      	b.n	800a0a4 <__lshift+0xac>
 800a0ce:	bf00      	nop
 800a0d0:	0800c273 	.word	0x0800c273
 800a0d4:	0800c284 	.word	0x0800c284

0800a0d8 <__mcmp>:
 800a0d8:	b530      	push	{r4, r5, lr}
 800a0da:	6902      	ldr	r2, [r0, #16]
 800a0dc:	690c      	ldr	r4, [r1, #16]
 800a0de:	1b12      	subs	r2, r2, r4
 800a0e0:	d10e      	bne.n	800a100 <__mcmp+0x28>
 800a0e2:	f100 0314 	add.w	r3, r0, #20
 800a0e6:	3114      	adds	r1, #20
 800a0e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0f8:	42a5      	cmp	r5, r4
 800a0fa:	d003      	beq.n	800a104 <__mcmp+0x2c>
 800a0fc:	d305      	bcc.n	800a10a <__mcmp+0x32>
 800a0fe:	2201      	movs	r2, #1
 800a100:	4610      	mov	r0, r2
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	4283      	cmp	r3, r0
 800a106:	d3f3      	bcc.n	800a0f0 <__mcmp+0x18>
 800a108:	e7fa      	b.n	800a100 <__mcmp+0x28>
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e7f7      	b.n	800a100 <__mcmp+0x28>

0800a110 <__mdiff>:
 800a110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	460c      	mov	r4, r1
 800a116:	4606      	mov	r6, r0
 800a118:	4611      	mov	r1, r2
 800a11a:	4620      	mov	r0, r4
 800a11c:	4690      	mov	r8, r2
 800a11e:	f7ff ffdb 	bl	800a0d8 <__mcmp>
 800a122:	1e05      	subs	r5, r0, #0
 800a124:	d110      	bne.n	800a148 <__mdiff+0x38>
 800a126:	4629      	mov	r1, r5
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff fd53 	bl	8009bd4 <_Balloc>
 800a12e:	b930      	cbnz	r0, 800a13e <__mdiff+0x2e>
 800a130:	4b3a      	ldr	r3, [pc, #232]	; (800a21c <__mdiff+0x10c>)
 800a132:	4602      	mov	r2, r0
 800a134:	f240 2132 	movw	r1, #562	; 0x232
 800a138:	4839      	ldr	r0, [pc, #228]	; (800a220 <__mdiff+0x110>)
 800a13a:	f000 fcb9 	bl	800aab0 <__assert_func>
 800a13e:	2301      	movs	r3, #1
 800a140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	bfa4      	itt	ge
 800a14a:	4643      	movge	r3, r8
 800a14c:	46a0      	movge	r8, r4
 800a14e:	4630      	mov	r0, r6
 800a150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a154:	bfa6      	itte	ge
 800a156:	461c      	movge	r4, r3
 800a158:	2500      	movge	r5, #0
 800a15a:	2501      	movlt	r5, #1
 800a15c:	f7ff fd3a 	bl	8009bd4 <_Balloc>
 800a160:	b920      	cbnz	r0, 800a16c <__mdiff+0x5c>
 800a162:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <__mdiff+0x10c>)
 800a164:	4602      	mov	r2, r0
 800a166:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a16a:	e7e5      	b.n	800a138 <__mdiff+0x28>
 800a16c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a170:	6926      	ldr	r6, [r4, #16]
 800a172:	60c5      	str	r5, [r0, #12]
 800a174:	f104 0914 	add.w	r9, r4, #20
 800a178:	f108 0514 	add.w	r5, r8, #20
 800a17c:	f100 0e14 	add.w	lr, r0, #20
 800a180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a188:	f108 0210 	add.w	r2, r8, #16
 800a18c:	46f2      	mov	sl, lr
 800a18e:	2100      	movs	r1, #0
 800a190:	f859 3b04 	ldr.w	r3, [r9], #4
 800a194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a198:	fa1f f883 	uxth.w	r8, r3
 800a19c:	fa11 f18b 	uxtah	r1, r1, fp
 800a1a0:	0c1b      	lsrs	r3, r3, #16
 800a1a2:	eba1 0808 	sub.w	r8, r1, r8
 800a1a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1ae:	fa1f f888 	uxth.w	r8, r8
 800a1b2:	1419      	asrs	r1, r3, #16
 800a1b4:	454e      	cmp	r6, r9
 800a1b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1ba:	f84a 3b04 	str.w	r3, [sl], #4
 800a1be:	d8e7      	bhi.n	800a190 <__mdiff+0x80>
 800a1c0:	1b33      	subs	r3, r6, r4
 800a1c2:	3b15      	subs	r3, #21
 800a1c4:	f023 0303 	bic.w	r3, r3, #3
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	3415      	adds	r4, #21
 800a1cc:	42a6      	cmp	r6, r4
 800a1ce:	bf38      	it	cc
 800a1d0:	2304      	movcc	r3, #4
 800a1d2:	441d      	add	r5, r3
 800a1d4:	4473      	add	r3, lr
 800a1d6:	469e      	mov	lr, r3
 800a1d8:	462e      	mov	r6, r5
 800a1da:	4566      	cmp	r6, ip
 800a1dc:	d30e      	bcc.n	800a1fc <__mdiff+0xec>
 800a1de:	f10c 0203 	add.w	r2, ip, #3
 800a1e2:	1b52      	subs	r2, r2, r5
 800a1e4:	f022 0203 	bic.w	r2, r2, #3
 800a1e8:	3d03      	subs	r5, #3
 800a1ea:	45ac      	cmp	ip, r5
 800a1ec:	bf38      	it	cc
 800a1ee:	2200      	movcc	r2, #0
 800a1f0:	441a      	add	r2, r3
 800a1f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1f6:	b17b      	cbz	r3, 800a218 <__mdiff+0x108>
 800a1f8:	6107      	str	r7, [r0, #16]
 800a1fa:	e7a3      	b.n	800a144 <__mdiff+0x34>
 800a1fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a200:	fa11 f288 	uxtah	r2, r1, r8
 800a204:	1414      	asrs	r4, r2, #16
 800a206:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a20a:	b292      	uxth	r2, r2
 800a20c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a210:	f84e 2b04 	str.w	r2, [lr], #4
 800a214:	1421      	asrs	r1, r4, #16
 800a216:	e7e0      	b.n	800a1da <__mdiff+0xca>
 800a218:	3f01      	subs	r7, #1
 800a21a:	e7ea      	b.n	800a1f2 <__mdiff+0xe2>
 800a21c:	0800c273 	.word	0x0800c273
 800a220:	0800c284 	.word	0x0800c284

0800a224 <__d2b>:
 800a224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a228:	4689      	mov	r9, r1
 800a22a:	2101      	movs	r1, #1
 800a22c:	ec57 6b10 	vmov	r6, r7, d0
 800a230:	4690      	mov	r8, r2
 800a232:	f7ff fccf 	bl	8009bd4 <_Balloc>
 800a236:	4604      	mov	r4, r0
 800a238:	b930      	cbnz	r0, 800a248 <__d2b+0x24>
 800a23a:	4602      	mov	r2, r0
 800a23c:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <__d2b+0xb0>)
 800a23e:	4826      	ldr	r0, [pc, #152]	; (800a2d8 <__d2b+0xb4>)
 800a240:	f240 310a 	movw	r1, #778	; 0x30a
 800a244:	f000 fc34 	bl	800aab0 <__assert_func>
 800a248:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a24c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a250:	bb35      	cbnz	r5, 800a2a0 <__d2b+0x7c>
 800a252:	2e00      	cmp	r6, #0
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	d028      	beq.n	800a2aa <__d2b+0x86>
 800a258:	4668      	mov	r0, sp
 800a25a:	9600      	str	r6, [sp, #0]
 800a25c:	f7ff fd82 	bl	8009d64 <__lo0bits>
 800a260:	9900      	ldr	r1, [sp, #0]
 800a262:	b300      	cbz	r0, 800a2a6 <__d2b+0x82>
 800a264:	9a01      	ldr	r2, [sp, #4]
 800a266:	f1c0 0320 	rsb	r3, r0, #32
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	430b      	orrs	r3, r1
 800a270:	40c2      	lsrs	r2, r0
 800a272:	6163      	str	r3, [r4, #20]
 800a274:	9201      	str	r2, [sp, #4]
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	61a3      	str	r3, [r4, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bf14      	ite	ne
 800a27e:	2202      	movne	r2, #2
 800a280:	2201      	moveq	r2, #1
 800a282:	6122      	str	r2, [r4, #16]
 800a284:	b1d5      	cbz	r5, 800a2bc <__d2b+0x98>
 800a286:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a28a:	4405      	add	r5, r0
 800a28c:	f8c9 5000 	str.w	r5, [r9]
 800a290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a294:	f8c8 0000 	str.w	r0, [r8]
 800a298:	4620      	mov	r0, r4
 800a29a:	b003      	add	sp, #12
 800a29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2a4:	e7d5      	b.n	800a252 <__d2b+0x2e>
 800a2a6:	6161      	str	r1, [r4, #20]
 800a2a8:	e7e5      	b.n	800a276 <__d2b+0x52>
 800a2aa:	a801      	add	r0, sp, #4
 800a2ac:	f7ff fd5a 	bl	8009d64 <__lo0bits>
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	6163      	str	r3, [r4, #20]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	6122      	str	r2, [r4, #16]
 800a2b8:	3020      	adds	r0, #32
 800a2ba:	e7e3      	b.n	800a284 <__d2b+0x60>
 800a2bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2c4:	f8c9 0000 	str.w	r0, [r9]
 800a2c8:	6918      	ldr	r0, [r3, #16]
 800a2ca:	f7ff fd2b 	bl	8009d24 <__hi0bits>
 800a2ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2d2:	e7df      	b.n	800a294 <__d2b+0x70>
 800a2d4:	0800c273 	.word	0x0800c273
 800a2d8:	0800c284 	.word	0x0800c284

0800a2dc <_calloc_r>:
 800a2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2de:	fba1 2402 	umull	r2, r4, r1, r2
 800a2e2:	b94c      	cbnz	r4, 800a2f8 <_calloc_r+0x1c>
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	f7fd ff20 	bl	800812c <_malloc_r>
 800a2ec:	9a01      	ldr	r2, [sp, #4]
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	b930      	cbnz	r0, 800a300 <_calloc_r+0x24>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	b003      	add	sp, #12
 800a2f6:	bd30      	pop	{r4, r5, pc}
 800a2f8:	220c      	movs	r2, #12
 800a2fa:	6002      	str	r2, [r0, #0]
 800a2fc:	2500      	movs	r5, #0
 800a2fe:	e7f8      	b.n	800a2f2 <_calloc_r+0x16>
 800a300:	4621      	mov	r1, r4
 800a302:	f7fd feea 	bl	80080da <memset>
 800a306:	e7f4      	b.n	800a2f2 <_calloc_r+0x16>

0800a308 <_free_r>:
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30a:	2900      	cmp	r1, #0
 800a30c:	d044      	beq.n	800a398 <_free_r+0x90>
 800a30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f1a1 0404 	sub.w	r4, r1, #4
 800a31a:	bfb8      	it	lt
 800a31c:	18e4      	addlt	r4, r4, r3
 800a31e:	f7ff fc4d 	bl	8009bbc <__malloc_lock>
 800a322:	4a1e      	ldr	r2, [pc, #120]	; (800a39c <_free_r+0x94>)
 800a324:	9801      	ldr	r0, [sp, #4]
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	b933      	cbnz	r3, 800a338 <_free_r+0x30>
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	6014      	str	r4, [r2, #0]
 800a32e:	b003      	add	sp, #12
 800a330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a334:	f7ff bc48 	b.w	8009bc8 <__malloc_unlock>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d908      	bls.n	800a34e <_free_r+0x46>
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	428b      	cmp	r3, r1
 800a342:	bf01      	itttt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	1949      	addeq	r1, r1, r5
 800a34a:	6021      	streq	r1, [r4, #0]
 800a34c:	e7ed      	b.n	800a32a <_free_r+0x22>
 800a34e:	461a      	mov	r2, r3
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b10b      	cbz	r3, 800a358 <_free_r+0x50>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d9fa      	bls.n	800a34e <_free_r+0x46>
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	1855      	adds	r5, r2, r1
 800a35c:	42a5      	cmp	r5, r4
 800a35e:	d10b      	bne.n	800a378 <_free_r+0x70>
 800a360:	6824      	ldr	r4, [r4, #0]
 800a362:	4421      	add	r1, r4
 800a364:	1854      	adds	r4, r2, r1
 800a366:	42a3      	cmp	r3, r4
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	d1e0      	bne.n	800a32e <_free_r+0x26>
 800a36c:	681c      	ldr	r4, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	4421      	add	r1, r4
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	e7da      	b.n	800a32e <_free_r+0x26>
 800a378:	d902      	bls.n	800a380 <_free_r+0x78>
 800a37a:	230c      	movs	r3, #12
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	e7d6      	b.n	800a32e <_free_r+0x26>
 800a380:	6825      	ldr	r5, [r4, #0]
 800a382:	1961      	adds	r1, r4, r5
 800a384:	428b      	cmp	r3, r1
 800a386:	bf04      	itt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	bf04      	itt	eq
 800a390:	1949      	addeq	r1, r1, r5
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	6054      	str	r4, [r2, #4]
 800a396:	e7ca      	b.n	800a32e <_free_r+0x26>
 800a398:	b003      	add	sp, #12
 800a39a:	bd30      	pop	{r4, r5, pc}
 800a39c:	200066cc 	.word	0x200066cc

0800a3a0 <__ssputs_r>:
 800a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	688e      	ldr	r6, [r1, #8]
 800a3a6:	429e      	cmp	r6, r3
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	461f      	mov	r7, r3
 800a3b0:	d838      	bhi.n	800a424 <__ssputs_r+0x84>
 800a3b2:	898a      	ldrh	r2, [r1, #12]
 800a3b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b8:	d032      	beq.n	800a420 <__ssputs_r+0x80>
 800a3ba:	6825      	ldr	r5, [r4, #0]
 800a3bc:	6909      	ldr	r1, [r1, #16]
 800a3be:	eba5 0901 	sub.w	r9, r5, r1
 800a3c2:	6965      	ldr	r5, [r4, #20]
 800a3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	444b      	add	r3, r9
 800a3d0:	106d      	asrs	r5, r5, #1
 800a3d2:	429d      	cmp	r5, r3
 800a3d4:	bf38      	it	cc
 800a3d6:	461d      	movcc	r5, r3
 800a3d8:	0553      	lsls	r3, r2, #21
 800a3da:	d531      	bpl.n	800a440 <__ssputs_r+0xa0>
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7fd fea5 	bl	800812c <_malloc_r>
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	b950      	cbnz	r0, 800a3fc <__ssputs_r+0x5c>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	f8ca 3000 	str.w	r3, [sl]
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fc:	6921      	ldr	r1, [r4, #16]
 800a3fe:	464a      	mov	r2, r9
 800a400:	f7fd fe5d 	bl	80080be <memcpy>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	6126      	str	r6, [r4, #16]
 800a412:	6165      	str	r5, [r4, #20]
 800a414:	444e      	add	r6, r9
 800a416:	eba5 0509 	sub.w	r5, r5, r9
 800a41a:	6026      	str	r6, [r4, #0]
 800a41c:	60a5      	str	r5, [r4, #8]
 800a41e:	463e      	mov	r6, r7
 800a420:	42be      	cmp	r6, r7
 800a422:	d900      	bls.n	800a426 <__ssputs_r+0x86>
 800a424:	463e      	mov	r6, r7
 800a426:	6820      	ldr	r0, [r4, #0]
 800a428:	4632      	mov	r2, r6
 800a42a:	4641      	mov	r1, r8
 800a42c:	f000 fbe8 	bl	800ac00 <memmove>
 800a430:	68a3      	ldr	r3, [r4, #8]
 800a432:	1b9b      	subs	r3, r3, r6
 800a434:	60a3      	str	r3, [r4, #8]
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	4433      	add	r3, r6
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7db      	b.n	800a3f8 <__ssputs_r+0x58>
 800a440:	462a      	mov	r2, r5
 800a442:	f000 fbf7 	bl	800ac34 <_realloc_r>
 800a446:	4606      	mov	r6, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d1e1      	bne.n	800a410 <__ssputs_r+0x70>
 800a44c:	6921      	ldr	r1, [r4, #16]
 800a44e:	4650      	mov	r0, sl
 800a450:	f7ff ff5a 	bl	800a308 <_free_r>
 800a454:	e7c7      	b.n	800a3e6 <__ssputs_r+0x46>
	...

0800a458 <_svfiprintf_r>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4698      	mov	r8, r3
 800a45e:	898b      	ldrh	r3, [r1, #12]
 800a460:	061b      	lsls	r3, r3, #24
 800a462:	b09d      	sub	sp, #116	; 0x74
 800a464:	4607      	mov	r7, r0
 800a466:	460d      	mov	r5, r1
 800a468:	4614      	mov	r4, r2
 800a46a:	d50e      	bpl.n	800a48a <_svfiprintf_r+0x32>
 800a46c:	690b      	ldr	r3, [r1, #16]
 800a46e:	b963      	cbnz	r3, 800a48a <_svfiprintf_r+0x32>
 800a470:	2140      	movs	r1, #64	; 0x40
 800a472:	f7fd fe5b 	bl	800812c <_malloc_r>
 800a476:	6028      	str	r0, [r5, #0]
 800a478:	6128      	str	r0, [r5, #16]
 800a47a:	b920      	cbnz	r0, 800a486 <_svfiprintf_r+0x2e>
 800a47c:	230c      	movs	r3, #12
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	e0d1      	b.n	800a62a <_svfiprintf_r+0x1d2>
 800a486:	2340      	movs	r3, #64	; 0x40
 800a488:	616b      	str	r3, [r5, #20]
 800a48a:	2300      	movs	r3, #0
 800a48c:	9309      	str	r3, [sp, #36]	; 0x24
 800a48e:	2320      	movs	r3, #32
 800a490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a494:	f8cd 800c 	str.w	r8, [sp, #12]
 800a498:	2330      	movs	r3, #48	; 0x30
 800a49a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a644 <_svfiprintf_r+0x1ec>
 800a49e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a2:	f04f 0901 	mov.w	r9, #1
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	469a      	mov	sl, r3
 800a4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ae:	b10a      	cbz	r2, 800a4b4 <_svfiprintf_r+0x5c>
 800a4b0:	2a25      	cmp	r2, #37	; 0x25
 800a4b2:	d1f9      	bne.n	800a4a8 <_svfiprintf_r+0x50>
 800a4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b8:	d00b      	beq.n	800a4d2 <_svfiprintf_r+0x7a>
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7ff ff6d 	bl	800a3a0 <__ssputs_r>
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f000 80aa 	beq.w	800a620 <_svfiprintf_r+0x1c8>
 800a4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ce:	445a      	add	r2, fp
 800a4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 80a2 	beq.w	800a620 <_svfiprintf_r+0x1c8>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	9307      	str	r3, [sp, #28]
 800a4ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f4:	4654      	mov	r4, sl
 800a4f6:	2205      	movs	r2, #5
 800a4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fc:	4851      	ldr	r0, [pc, #324]	; (800a644 <_svfiprintf_r+0x1ec>)
 800a4fe:	f7f5 fe8f 	bl	8000220 <memchr>
 800a502:	9a04      	ldr	r2, [sp, #16]
 800a504:	b9d8      	cbnz	r0, 800a53e <_svfiprintf_r+0xe6>
 800a506:	06d0      	lsls	r0, r2, #27
 800a508:	bf44      	itt	mi
 800a50a:	2320      	movmi	r3, #32
 800a50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a510:	0711      	lsls	r1, r2, #28
 800a512:	bf44      	itt	mi
 800a514:	232b      	movmi	r3, #43	; 0x2b
 800a516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51a:	f89a 3000 	ldrb.w	r3, [sl]
 800a51e:	2b2a      	cmp	r3, #42	; 0x2a
 800a520:	d015      	beq.n	800a54e <_svfiprintf_r+0xf6>
 800a522:	9a07      	ldr	r2, [sp, #28]
 800a524:	4654      	mov	r4, sl
 800a526:	2000      	movs	r0, #0
 800a528:	f04f 0c0a 	mov.w	ip, #10
 800a52c:	4621      	mov	r1, r4
 800a52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a532:	3b30      	subs	r3, #48	; 0x30
 800a534:	2b09      	cmp	r3, #9
 800a536:	d94e      	bls.n	800a5d6 <_svfiprintf_r+0x17e>
 800a538:	b1b0      	cbz	r0, 800a568 <_svfiprintf_r+0x110>
 800a53a:	9207      	str	r2, [sp, #28]
 800a53c:	e014      	b.n	800a568 <_svfiprintf_r+0x110>
 800a53e:	eba0 0308 	sub.w	r3, r0, r8
 800a542:	fa09 f303 	lsl.w	r3, r9, r3
 800a546:	4313      	orrs	r3, r2
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	46a2      	mov	sl, r4
 800a54c:	e7d2      	b.n	800a4f4 <_svfiprintf_r+0x9c>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	1d19      	adds	r1, r3, #4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	9103      	str	r1, [sp, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfbb      	ittet	lt
 800a55a:	425b      	neglt	r3, r3
 800a55c:	f042 0202 	orrlt.w	r2, r2, #2
 800a560:	9307      	strge	r3, [sp, #28]
 800a562:	9307      	strlt	r3, [sp, #28]
 800a564:	bfb8      	it	lt
 800a566:	9204      	strlt	r2, [sp, #16]
 800a568:	7823      	ldrb	r3, [r4, #0]
 800a56a:	2b2e      	cmp	r3, #46	; 0x2e
 800a56c:	d10c      	bne.n	800a588 <_svfiprintf_r+0x130>
 800a56e:	7863      	ldrb	r3, [r4, #1]
 800a570:	2b2a      	cmp	r3, #42	; 0x2a
 800a572:	d135      	bne.n	800a5e0 <_svfiprintf_r+0x188>
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	1d1a      	adds	r2, r3, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	9203      	str	r2, [sp, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	bfb8      	it	lt
 800a580:	f04f 33ff 	movlt.w	r3, #4294967295
 800a584:	3402      	adds	r4, #2
 800a586:	9305      	str	r3, [sp, #20]
 800a588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a654 <_svfiprintf_r+0x1fc>
 800a58c:	7821      	ldrb	r1, [r4, #0]
 800a58e:	2203      	movs	r2, #3
 800a590:	4650      	mov	r0, sl
 800a592:	f7f5 fe45 	bl	8000220 <memchr>
 800a596:	b140      	cbz	r0, 800a5aa <_svfiprintf_r+0x152>
 800a598:	2340      	movs	r3, #64	; 0x40
 800a59a:	eba0 000a 	sub.w	r0, r0, sl
 800a59e:	fa03 f000 	lsl.w	r0, r3, r0
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	4303      	orrs	r3, r0
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ae:	4826      	ldr	r0, [pc, #152]	; (800a648 <_svfiprintf_r+0x1f0>)
 800a5b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b4:	2206      	movs	r2, #6
 800a5b6:	f7f5 fe33 	bl	8000220 <memchr>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d038      	beq.n	800a630 <_svfiprintf_r+0x1d8>
 800a5be:	4b23      	ldr	r3, [pc, #140]	; (800a64c <_svfiprintf_r+0x1f4>)
 800a5c0:	bb1b      	cbnz	r3, 800a60a <_svfiprintf_r+0x1b2>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	3307      	adds	r3, #7
 800a5c6:	f023 0307 	bic.w	r3, r3, #7
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	9303      	str	r3, [sp, #12]
 800a5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d0:	4433      	add	r3, r6
 800a5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d4:	e767      	b.n	800a4a6 <_svfiprintf_r+0x4e>
 800a5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5da:	460c      	mov	r4, r1
 800a5dc:	2001      	movs	r0, #1
 800a5de:	e7a5      	b.n	800a52c <_svfiprintf_r+0xd4>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	9305      	str	r3, [sp, #20]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f04f 0c0a 	mov.w	ip, #10
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f2:	3a30      	subs	r2, #48	; 0x30
 800a5f4:	2a09      	cmp	r2, #9
 800a5f6:	d903      	bls.n	800a600 <_svfiprintf_r+0x1a8>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0c5      	beq.n	800a588 <_svfiprintf_r+0x130>
 800a5fc:	9105      	str	r1, [sp, #20]
 800a5fe:	e7c3      	b.n	800a588 <_svfiprintf_r+0x130>
 800a600:	fb0c 2101 	mla	r1, ip, r1, r2
 800a604:	4604      	mov	r4, r0
 800a606:	2301      	movs	r3, #1
 800a608:	e7f0      	b.n	800a5ec <_svfiprintf_r+0x194>
 800a60a:	ab03      	add	r3, sp, #12
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	462a      	mov	r2, r5
 800a610:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <_svfiprintf_r+0x1f8>)
 800a612:	a904      	add	r1, sp, #16
 800a614:	4638      	mov	r0, r7
 800a616:	f7fd fe9d 	bl	8008354 <_printf_float>
 800a61a:	1c42      	adds	r2, r0, #1
 800a61c:	4606      	mov	r6, r0
 800a61e:	d1d6      	bne.n	800a5ce <_svfiprintf_r+0x176>
 800a620:	89ab      	ldrh	r3, [r5, #12]
 800a622:	065b      	lsls	r3, r3, #25
 800a624:	f53f af2c 	bmi.w	800a480 <_svfiprintf_r+0x28>
 800a628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a62a:	b01d      	add	sp, #116	; 0x74
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	ab03      	add	r3, sp, #12
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	462a      	mov	r2, r5
 800a636:	4b06      	ldr	r3, [pc, #24]	; (800a650 <_svfiprintf_r+0x1f8>)
 800a638:	a904      	add	r1, sp, #16
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7fe f92e 	bl	800889c <_printf_i>
 800a640:	e7eb      	b.n	800a61a <_svfiprintf_r+0x1c2>
 800a642:	bf00      	nop
 800a644:	0800c3dc 	.word	0x0800c3dc
 800a648:	0800c3e6 	.word	0x0800c3e6
 800a64c:	08008355 	.word	0x08008355
 800a650:	0800a3a1 	.word	0x0800a3a1
 800a654:	0800c3e2 	.word	0x0800c3e2

0800a658 <__sfputc_r>:
 800a658:	6893      	ldr	r3, [r2, #8]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	b410      	push	{r4}
 800a660:	6093      	str	r3, [r2, #8]
 800a662:	da08      	bge.n	800a676 <__sfputc_r+0x1e>
 800a664:	6994      	ldr	r4, [r2, #24]
 800a666:	42a3      	cmp	r3, r4
 800a668:	db01      	blt.n	800a66e <__sfputc_r+0x16>
 800a66a:	290a      	cmp	r1, #10
 800a66c:	d103      	bne.n	800a676 <__sfputc_r+0x1e>
 800a66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a672:	f000 b95d 	b.w	800a930 <__swbuf_r>
 800a676:	6813      	ldr	r3, [r2, #0]
 800a678:	1c58      	adds	r0, r3, #1
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	7019      	strb	r1, [r3, #0]
 800a67e:	4608      	mov	r0, r1
 800a680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <__sfputs_r>:
 800a686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a688:	4606      	mov	r6, r0
 800a68a:	460f      	mov	r7, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	18d5      	adds	r5, r2, r3
 800a690:	42ac      	cmp	r4, r5
 800a692:	d101      	bne.n	800a698 <__sfputs_r+0x12>
 800a694:	2000      	movs	r0, #0
 800a696:	e007      	b.n	800a6a8 <__sfputs_r+0x22>
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	463a      	mov	r2, r7
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff ffda 	bl	800a658 <__sfputc_r>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d1f3      	bne.n	800a690 <__sfputs_r+0xa>
 800a6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6ac <_vfiprintf_r>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	b09d      	sub	sp, #116	; 0x74
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	4698      	mov	r8, r3
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	b118      	cbz	r0, 800a6c4 <_vfiprintf_r+0x18>
 800a6bc:	6983      	ldr	r3, [r0, #24]
 800a6be:	b90b      	cbnz	r3, 800a6c4 <_vfiprintf_r+0x18>
 800a6c0:	f7fd fc38 	bl	8007f34 <__sinit>
 800a6c4:	4b89      	ldr	r3, [pc, #548]	; (800a8ec <_vfiprintf_r+0x240>)
 800a6c6:	429d      	cmp	r5, r3
 800a6c8:	d11b      	bne.n	800a702 <_vfiprintf_r+0x56>
 800a6ca:	6875      	ldr	r5, [r6, #4]
 800a6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ce:	07d9      	lsls	r1, r3, #31
 800a6d0:	d405      	bmi.n	800a6de <_vfiprintf_r+0x32>
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	059a      	lsls	r2, r3, #22
 800a6d6:	d402      	bmi.n	800a6de <_vfiprintf_r+0x32>
 800a6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6da:	f7fd fcee 	bl	80080ba <__retarget_lock_acquire_recursive>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	071b      	lsls	r3, r3, #28
 800a6e2:	d501      	bpl.n	800a6e8 <_vfiprintf_r+0x3c>
 800a6e4:	692b      	ldr	r3, [r5, #16]
 800a6e6:	b9eb      	cbnz	r3, 800a724 <_vfiprintf_r+0x78>
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f000 f972 	bl	800a9d4 <__swsetup_r>
 800a6f0:	b1c0      	cbz	r0, 800a724 <_vfiprintf_r+0x78>
 800a6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f4:	07dc      	lsls	r4, r3, #31
 800a6f6:	d50e      	bpl.n	800a716 <_vfiprintf_r+0x6a>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	b01d      	add	sp, #116	; 0x74
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a702:	4b7b      	ldr	r3, [pc, #492]	; (800a8f0 <_vfiprintf_r+0x244>)
 800a704:	429d      	cmp	r5, r3
 800a706:	d101      	bne.n	800a70c <_vfiprintf_r+0x60>
 800a708:	68b5      	ldr	r5, [r6, #8]
 800a70a:	e7df      	b.n	800a6cc <_vfiprintf_r+0x20>
 800a70c:	4b79      	ldr	r3, [pc, #484]	; (800a8f4 <_vfiprintf_r+0x248>)
 800a70e:	429d      	cmp	r5, r3
 800a710:	bf08      	it	eq
 800a712:	68f5      	ldreq	r5, [r6, #12]
 800a714:	e7da      	b.n	800a6cc <_vfiprintf_r+0x20>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	0598      	lsls	r0, r3, #22
 800a71a:	d4ed      	bmi.n	800a6f8 <_vfiprintf_r+0x4c>
 800a71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a71e:	f7fd fccd 	bl	80080bc <__retarget_lock_release_recursive>
 800a722:	e7e9      	b.n	800a6f8 <_vfiprintf_r+0x4c>
 800a724:	2300      	movs	r3, #0
 800a726:	9309      	str	r3, [sp, #36]	; 0x24
 800a728:	2320      	movs	r3, #32
 800a72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a732:	2330      	movs	r3, #48	; 0x30
 800a734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8f8 <_vfiprintf_r+0x24c>
 800a738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a73c:	f04f 0901 	mov.w	r9, #1
 800a740:	4623      	mov	r3, r4
 800a742:	469a      	mov	sl, r3
 800a744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a748:	b10a      	cbz	r2, 800a74e <_vfiprintf_r+0xa2>
 800a74a:	2a25      	cmp	r2, #37	; 0x25
 800a74c:	d1f9      	bne.n	800a742 <_vfiprintf_r+0x96>
 800a74e:	ebba 0b04 	subs.w	fp, sl, r4
 800a752:	d00b      	beq.n	800a76c <_vfiprintf_r+0xc0>
 800a754:	465b      	mov	r3, fp
 800a756:	4622      	mov	r2, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff ff93 	bl	800a686 <__sfputs_r>
 800a760:	3001      	adds	r0, #1
 800a762:	f000 80aa 	beq.w	800a8ba <_vfiprintf_r+0x20e>
 800a766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a768:	445a      	add	r2, fp
 800a76a:	9209      	str	r2, [sp, #36]	; 0x24
 800a76c:	f89a 3000 	ldrb.w	r3, [sl]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 80a2 	beq.w	800a8ba <_vfiprintf_r+0x20e>
 800a776:	2300      	movs	r3, #0
 800a778:	f04f 32ff 	mov.w	r2, #4294967295
 800a77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a780:	f10a 0a01 	add.w	sl, sl, #1
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a78c:	931a      	str	r3, [sp, #104]	; 0x68
 800a78e:	4654      	mov	r4, sl
 800a790:	2205      	movs	r2, #5
 800a792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a796:	4858      	ldr	r0, [pc, #352]	; (800a8f8 <_vfiprintf_r+0x24c>)
 800a798:	f7f5 fd42 	bl	8000220 <memchr>
 800a79c:	9a04      	ldr	r2, [sp, #16]
 800a79e:	b9d8      	cbnz	r0, 800a7d8 <_vfiprintf_r+0x12c>
 800a7a0:	06d1      	lsls	r1, r2, #27
 800a7a2:	bf44      	itt	mi
 800a7a4:	2320      	movmi	r3, #32
 800a7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7aa:	0713      	lsls	r3, r2, #28
 800a7ac:	bf44      	itt	mi
 800a7ae:	232b      	movmi	r3, #43	; 0x2b
 800a7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ba:	d015      	beq.n	800a7e8 <_vfiprintf_r+0x13c>
 800a7bc:	9a07      	ldr	r2, [sp, #28]
 800a7be:	4654      	mov	r4, sl
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f04f 0c0a 	mov.w	ip, #10
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7cc:	3b30      	subs	r3, #48	; 0x30
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d94e      	bls.n	800a870 <_vfiprintf_r+0x1c4>
 800a7d2:	b1b0      	cbz	r0, 800a802 <_vfiprintf_r+0x156>
 800a7d4:	9207      	str	r2, [sp, #28]
 800a7d6:	e014      	b.n	800a802 <_vfiprintf_r+0x156>
 800a7d8:	eba0 0308 	sub.w	r3, r0, r8
 800a7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	46a2      	mov	sl, r4
 800a7e6:	e7d2      	b.n	800a78e <_vfiprintf_r+0xe2>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	1d19      	adds	r1, r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	9103      	str	r1, [sp, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfbb      	ittet	lt
 800a7f4:	425b      	neglt	r3, r3
 800a7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7fa:	9307      	strge	r3, [sp, #28]
 800a7fc:	9307      	strlt	r3, [sp, #28]
 800a7fe:	bfb8      	it	lt
 800a800:	9204      	strlt	r2, [sp, #16]
 800a802:	7823      	ldrb	r3, [r4, #0]
 800a804:	2b2e      	cmp	r3, #46	; 0x2e
 800a806:	d10c      	bne.n	800a822 <_vfiprintf_r+0x176>
 800a808:	7863      	ldrb	r3, [r4, #1]
 800a80a:	2b2a      	cmp	r3, #42	; 0x2a
 800a80c:	d135      	bne.n	800a87a <_vfiprintf_r+0x1ce>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	1d1a      	adds	r2, r3, #4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	9203      	str	r2, [sp, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfb8      	it	lt
 800a81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a81e:	3402      	adds	r4, #2
 800a820:	9305      	str	r3, [sp, #20]
 800a822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a908 <_vfiprintf_r+0x25c>
 800a826:	7821      	ldrb	r1, [r4, #0]
 800a828:	2203      	movs	r2, #3
 800a82a:	4650      	mov	r0, sl
 800a82c:	f7f5 fcf8 	bl	8000220 <memchr>
 800a830:	b140      	cbz	r0, 800a844 <_vfiprintf_r+0x198>
 800a832:	2340      	movs	r3, #64	; 0x40
 800a834:	eba0 000a 	sub.w	r0, r0, sl
 800a838:	fa03 f000 	lsl.w	r0, r3, r0
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	4303      	orrs	r3, r0
 800a840:	3401      	adds	r4, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a848:	482c      	ldr	r0, [pc, #176]	; (800a8fc <_vfiprintf_r+0x250>)
 800a84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a84e:	2206      	movs	r2, #6
 800a850:	f7f5 fce6 	bl	8000220 <memchr>
 800a854:	2800      	cmp	r0, #0
 800a856:	d03f      	beq.n	800a8d8 <_vfiprintf_r+0x22c>
 800a858:	4b29      	ldr	r3, [pc, #164]	; (800a900 <_vfiprintf_r+0x254>)
 800a85a:	bb1b      	cbnz	r3, 800a8a4 <_vfiprintf_r+0x1f8>
 800a85c:	9b03      	ldr	r3, [sp, #12]
 800a85e:	3307      	adds	r3, #7
 800a860:	f023 0307 	bic.w	r3, r3, #7
 800a864:	3308      	adds	r3, #8
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86a:	443b      	add	r3, r7
 800a86c:	9309      	str	r3, [sp, #36]	; 0x24
 800a86e:	e767      	b.n	800a740 <_vfiprintf_r+0x94>
 800a870:	fb0c 3202 	mla	r2, ip, r2, r3
 800a874:	460c      	mov	r4, r1
 800a876:	2001      	movs	r0, #1
 800a878:	e7a5      	b.n	800a7c6 <_vfiprintf_r+0x11a>
 800a87a:	2300      	movs	r3, #0
 800a87c:	3401      	adds	r4, #1
 800a87e:	9305      	str	r3, [sp, #20]
 800a880:	4619      	mov	r1, r3
 800a882:	f04f 0c0a 	mov.w	ip, #10
 800a886:	4620      	mov	r0, r4
 800a888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a88c:	3a30      	subs	r2, #48	; 0x30
 800a88e:	2a09      	cmp	r2, #9
 800a890:	d903      	bls.n	800a89a <_vfiprintf_r+0x1ee>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0c5      	beq.n	800a822 <_vfiprintf_r+0x176>
 800a896:	9105      	str	r1, [sp, #20]
 800a898:	e7c3      	b.n	800a822 <_vfiprintf_r+0x176>
 800a89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a89e:	4604      	mov	r4, r0
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e7f0      	b.n	800a886 <_vfiprintf_r+0x1da>
 800a8a4:	ab03      	add	r3, sp, #12
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4b16      	ldr	r3, [pc, #88]	; (800a904 <_vfiprintf_r+0x258>)
 800a8ac:	a904      	add	r1, sp, #16
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7fd fd50 	bl	8008354 <_printf_float>
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	1c78      	adds	r0, r7, #1
 800a8b8:	d1d6      	bne.n	800a868 <_vfiprintf_r+0x1bc>
 800a8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8bc:	07d9      	lsls	r1, r3, #31
 800a8be:	d405      	bmi.n	800a8cc <_vfiprintf_r+0x220>
 800a8c0:	89ab      	ldrh	r3, [r5, #12]
 800a8c2:	059a      	lsls	r2, r3, #22
 800a8c4:	d402      	bmi.n	800a8cc <_vfiprintf_r+0x220>
 800a8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8c8:	f7fd fbf8 	bl	80080bc <__retarget_lock_release_recursive>
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	065b      	lsls	r3, r3, #25
 800a8d0:	f53f af12 	bmi.w	800a6f8 <_vfiprintf_r+0x4c>
 800a8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d6:	e711      	b.n	800a6fc <_vfiprintf_r+0x50>
 800a8d8:	ab03      	add	r3, sp, #12
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <_vfiprintf_r+0x258>)
 800a8e0:	a904      	add	r1, sp, #16
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7fd ffda 	bl	800889c <_printf_i>
 800a8e8:	e7e4      	b.n	800a8b4 <_vfiprintf_r+0x208>
 800a8ea:	bf00      	nop
 800a8ec:	0800c17c 	.word	0x0800c17c
 800a8f0:	0800c19c 	.word	0x0800c19c
 800a8f4:	0800c15c 	.word	0x0800c15c
 800a8f8:	0800c3dc 	.word	0x0800c3dc
 800a8fc:	0800c3e6 	.word	0x0800c3e6
 800a900:	08008355 	.word	0x08008355
 800a904:	0800a687 	.word	0x0800a687
 800a908:	0800c3e2 	.word	0x0800c3e2

0800a90c <_read_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	; (800a92c <_read_r+0x20>)
 800a910:	4604      	mov	r4, r0
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	2200      	movs	r2, #0
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f001 fb90 	bl	800c040 <_read>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_read_r+0x1e>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_read_r+0x1e>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	200066d4 	.word	0x200066d4

0800a930 <__swbuf_r>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	460e      	mov	r6, r1
 800a934:	4614      	mov	r4, r2
 800a936:	4605      	mov	r5, r0
 800a938:	b118      	cbz	r0, 800a942 <__swbuf_r+0x12>
 800a93a:	6983      	ldr	r3, [r0, #24]
 800a93c:	b90b      	cbnz	r3, 800a942 <__swbuf_r+0x12>
 800a93e:	f7fd faf9 	bl	8007f34 <__sinit>
 800a942:	4b21      	ldr	r3, [pc, #132]	; (800a9c8 <__swbuf_r+0x98>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d12b      	bne.n	800a9a0 <__swbuf_r+0x70>
 800a948:	686c      	ldr	r4, [r5, #4]
 800a94a:	69a3      	ldr	r3, [r4, #24]
 800a94c:	60a3      	str	r3, [r4, #8]
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	071a      	lsls	r2, r3, #28
 800a952:	d52f      	bpl.n	800a9b4 <__swbuf_r+0x84>
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	b36b      	cbz	r3, 800a9b4 <__swbuf_r+0x84>
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	1ac0      	subs	r0, r0, r3
 800a95e:	6963      	ldr	r3, [r4, #20]
 800a960:	b2f6      	uxtb	r6, r6
 800a962:	4283      	cmp	r3, r0
 800a964:	4637      	mov	r7, r6
 800a966:	dc04      	bgt.n	800a972 <__swbuf_r+0x42>
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f7ff f8cc 	bl	8009b08 <_fflush_r>
 800a970:	bb30      	cbnz	r0, 800a9c0 <__swbuf_r+0x90>
 800a972:	68a3      	ldr	r3, [r4, #8]
 800a974:	3b01      	subs	r3, #1
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	6022      	str	r2, [r4, #0]
 800a97e:	701e      	strb	r6, [r3, #0]
 800a980:	6963      	ldr	r3, [r4, #20]
 800a982:	3001      	adds	r0, #1
 800a984:	4283      	cmp	r3, r0
 800a986:	d004      	beq.n	800a992 <__swbuf_r+0x62>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	07db      	lsls	r3, r3, #31
 800a98c:	d506      	bpl.n	800a99c <__swbuf_r+0x6c>
 800a98e:	2e0a      	cmp	r6, #10
 800a990:	d104      	bne.n	800a99c <__swbuf_r+0x6c>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f7ff f8b7 	bl	8009b08 <_fflush_r>
 800a99a:	b988      	cbnz	r0, 800a9c0 <__swbuf_r+0x90>
 800a99c:	4638      	mov	r0, r7
 800a99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <__swbuf_r+0x9c>)
 800a9a2:	429c      	cmp	r4, r3
 800a9a4:	d101      	bne.n	800a9aa <__swbuf_r+0x7a>
 800a9a6:	68ac      	ldr	r4, [r5, #8]
 800a9a8:	e7cf      	b.n	800a94a <__swbuf_r+0x1a>
 800a9aa:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <__swbuf_r+0xa0>)
 800a9ac:	429c      	cmp	r4, r3
 800a9ae:	bf08      	it	eq
 800a9b0:	68ec      	ldreq	r4, [r5, #12]
 800a9b2:	e7ca      	b.n	800a94a <__swbuf_r+0x1a>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 f80c 	bl	800a9d4 <__swsetup_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0cb      	beq.n	800a958 <__swbuf_r+0x28>
 800a9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a9c4:	e7ea      	b.n	800a99c <__swbuf_r+0x6c>
 800a9c6:	bf00      	nop
 800a9c8:	0800c17c 	.word	0x0800c17c
 800a9cc:	0800c19c 	.word	0x0800c19c
 800a9d0:	0800c15c 	.word	0x0800c15c

0800a9d4 <__swsetup_r>:
 800a9d4:	4b32      	ldr	r3, [pc, #200]	; (800aaa0 <__swsetup_r+0xcc>)
 800a9d6:	b570      	push	{r4, r5, r6, lr}
 800a9d8:	681d      	ldr	r5, [r3, #0]
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	b125      	cbz	r5, 800a9ea <__swsetup_r+0x16>
 800a9e0:	69ab      	ldr	r3, [r5, #24]
 800a9e2:	b913      	cbnz	r3, 800a9ea <__swsetup_r+0x16>
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f7fd faa5 	bl	8007f34 <__sinit>
 800a9ea:	4b2e      	ldr	r3, [pc, #184]	; (800aaa4 <__swsetup_r+0xd0>)
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	d10f      	bne.n	800aa10 <__swsetup_r+0x3c>
 800a9f0:	686c      	ldr	r4, [r5, #4]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f8:	0719      	lsls	r1, r3, #28
 800a9fa:	d42c      	bmi.n	800aa56 <__swsetup_r+0x82>
 800a9fc:	06dd      	lsls	r5, r3, #27
 800a9fe:	d411      	bmi.n	800aa24 <__swsetup_r+0x50>
 800aa00:	2309      	movs	r3, #9
 800aa02:	6033      	str	r3, [r6, #0]
 800aa04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa08:	81a3      	strh	r3, [r4, #12]
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0e:	e03e      	b.n	800aa8e <__swsetup_r+0xba>
 800aa10:	4b25      	ldr	r3, [pc, #148]	; (800aaa8 <__swsetup_r+0xd4>)
 800aa12:	429c      	cmp	r4, r3
 800aa14:	d101      	bne.n	800aa1a <__swsetup_r+0x46>
 800aa16:	68ac      	ldr	r4, [r5, #8]
 800aa18:	e7eb      	b.n	800a9f2 <__swsetup_r+0x1e>
 800aa1a:	4b24      	ldr	r3, [pc, #144]	; (800aaac <__swsetup_r+0xd8>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	bf08      	it	eq
 800aa20:	68ec      	ldreq	r4, [r5, #12]
 800aa22:	e7e6      	b.n	800a9f2 <__swsetup_r+0x1e>
 800aa24:	0758      	lsls	r0, r3, #29
 800aa26:	d512      	bpl.n	800aa4e <__swsetup_r+0x7a>
 800aa28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2a:	b141      	cbz	r1, 800aa3e <__swsetup_r+0x6a>
 800aa2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa30:	4299      	cmp	r1, r3
 800aa32:	d002      	beq.n	800aa3a <__swsetup_r+0x66>
 800aa34:	4630      	mov	r0, r6
 800aa36:	f7ff fc67 	bl	800a308 <_free_r>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	6363      	str	r3, [r4, #52]	; 0x34
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	2300      	movs	r3, #0
 800aa48:	6063      	str	r3, [r4, #4]
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	f043 0308 	orr.w	r3, r3, #8
 800aa54:	81a3      	strh	r3, [r4, #12]
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	b94b      	cbnz	r3, 800aa6e <__swsetup_r+0x9a>
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa64:	d003      	beq.n	800aa6e <__swsetup_r+0x9a>
 800aa66:	4621      	mov	r1, r4
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f000 f877 	bl	800ab5c <__smakebuf_r>
 800aa6e:	89a0      	ldrh	r0, [r4, #12]
 800aa70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa74:	f010 0301 	ands.w	r3, r0, #1
 800aa78:	d00a      	beq.n	800aa90 <__swsetup_r+0xbc>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60a3      	str	r3, [r4, #8]
 800aa7e:	6963      	ldr	r3, [r4, #20]
 800aa80:	425b      	negs	r3, r3
 800aa82:	61a3      	str	r3, [r4, #24]
 800aa84:	6923      	ldr	r3, [r4, #16]
 800aa86:	b943      	cbnz	r3, 800aa9a <__swsetup_r+0xc6>
 800aa88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa8c:	d1ba      	bne.n	800aa04 <__swsetup_r+0x30>
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	0781      	lsls	r1, r0, #30
 800aa92:	bf58      	it	pl
 800aa94:	6963      	ldrpl	r3, [r4, #20]
 800aa96:	60a3      	str	r3, [r4, #8]
 800aa98:	e7f4      	b.n	800aa84 <__swsetup_r+0xb0>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e7f7      	b.n	800aa8e <__swsetup_r+0xba>
 800aa9e:	bf00      	nop
 800aaa0:	20000014 	.word	0x20000014
 800aaa4:	0800c17c 	.word	0x0800c17c
 800aaa8:	0800c19c 	.word	0x0800c19c
 800aaac:	0800c15c 	.word	0x0800c15c

0800aab0 <__assert_func>:
 800aab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aab2:	4614      	mov	r4, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <__assert_func+0x2c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4605      	mov	r5, r0
 800aabc:	68d8      	ldr	r0, [r3, #12]
 800aabe:	b14c      	cbz	r4, 800aad4 <__assert_func+0x24>
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <__assert_func+0x30>)
 800aac2:	9100      	str	r1, [sp, #0]
 800aac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aac8:	4906      	ldr	r1, [pc, #24]	; (800aae4 <__assert_func+0x34>)
 800aaca:	462b      	mov	r3, r5
 800aacc:	f000 f80e 	bl	800aaec <fiprintf>
 800aad0:	f000 f8ec 	bl	800acac <abort>
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <__assert_func+0x38>)
 800aad6:	461c      	mov	r4, r3
 800aad8:	e7f3      	b.n	800aac2 <__assert_func+0x12>
 800aada:	bf00      	nop
 800aadc:	20000014 	.word	0x20000014
 800aae0:	0800c3ed 	.word	0x0800c3ed
 800aae4:	0800c3fa 	.word	0x0800c3fa
 800aae8:	0800c428 	.word	0x0800c428

0800aaec <fiprintf>:
 800aaec:	b40e      	push	{r1, r2, r3}
 800aaee:	b503      	push	{r0, r1, lr}
 800aaf0:	4601      	mov	r1, r0
 800aaf2:	ab03      	add	r3, sp, #12
 800aaf4:	4805      	ldr	r0, [pc, #20]	; (800ab0c <fiprintf+0x20>)
 800aaf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	f7ff fdd5 	bl	800a6ac <_vfiprintf_r>
 800ab02:	b002      	add	sp, #8
 800ab04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab08:	b003      	add	sp, #12
 800ab0a:	4770      	bx	lr
 800ab0c:	20000014 	.word	0x20000014

0800ab10 <__swhatbuf_r>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	460e      	mov	r6, r1
 800ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab18:	2900      	cmp	r1, #0
 800ab1a:	b096      	sub	sp, #88	; 0x58
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	461d      	mov	r5, r3
 800ab20:	da08      	bge.n	800ab34 <__swhatbuf_r+0x24>
 800ab22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	061a      	lsls	r2, r3, #24
 800ab2c:	d410      	bmi.n	800ab50 <__swhatbuf_r+0x40>
 800ab2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab32:	e00e      	b.n	800ab52 <__swhatbuf_r+0x42>
 800ab34:	466a      	mov	r2, sp
 800ab36:	f000 f8c1 	bl	800acbc <_fstat_r>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	dbf1      	blt.n	800ab22 <__swhatbuf_r+0x12>
 800ab3e:	9a01      	ldr	r2, [sp, #4]
 800ab40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab48:	425a      	negs	r2, r3
 800ab4a:	415a      	adcs	r2, r3
 800ab4c:	602a      	str	r2, [r5, #0]
 800ab4e:	e7ee      	b.n	800ab2e <__swhatbuf_r+0x1e>
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	2000      	movs	r0, #0
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	b016      	add	sp, #88	; 0x58
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab5c <__smakebuf_r>:
 800ab5c:	898b      	ldrh	r3, [r1, #12]
 800ab5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab60:	079d      	lsls	r5, r3, #30
 800ab62:	4606      	mov	r6, r0
 800ab64:	460c      	mov	r4, r1
 800ab66:	d507      	bpl.n	800ab78 <__smakebuf_r+0x1c>
 800ab68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	6123      	str	r3, [r4, #16]
 800ab70:	2301      	movs	r3, #1
 800ab72:	6163      	str	r3, [r4, #20]
 800ab74:	b002      	add	sp, #8
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	ab01      	add	r3, sp, #4
 800ab7a:	466a      	mov	r2, sp
 800ab7c:	f7ff ffc8 	bl	800ab10 <__swhatbuf_r>
 800ab80:	9900      	ldr	r1, [sp, #0]
 800ab82:	4605      	mov	r5, r0
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7fd fad1 	bl	800812c <_malloc_r>
 800ab8a:	b948      	cbnz	r0, 800aba0 <__smakebuf_r+0x44>
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	059a      	lsls	r2, r3, #22
 800ab92:	d4ef      	bmi.n	800ab74 <__smakebuf_r+0x18>
 800ab94:	f023 0303 	bic.w	r3, r3, #3
 800ab98:	f043 0302 	orr.w	r3, r3, #2
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	e7e3      	b.n	800ab68 <__smakebuf_r+0xc>
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <__smakebuf_r+0x7c>)
 800aba2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	6020      	str	r0, [r4, #0]
 800aba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	6163      	str	r3, [r4, #20]
 800abb2:	9b01      	ldr	r3, [sp, #4]
 800abb4:	6120      	str	r0, [r4, #16]
 800abb6:	b15b      	cbz	r3, 800abd0 <__smakebuf_r+0x74>
 800abb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 f88f 	bl	800ace0 <_isatty_r>
 800abc2:	b128      	cbz	r0, 800abd0 <__smakebuf_r+0x74>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	89a0      	ldrh	r0, [r4, #12]
 800abd2:	4305      	orrs	r5, r0
 800abd4:	81a5      	strh	r5, [r4, #12]
 800abd6:	e7cd      	b.n	800ab74 <__smakebuf_r+0x18>
 800abd8:	08007ecd 	.word	0x08007ecd

0800abdc <__ascii_mbtowc>:
 800abdc:	b082      	sub	sp, #8
 800abde:	b901      	cbnz	r1, 800abe2 <__ascii_mbtowc+0x6>
 800abe0:	a901      	add	r1, sp, #4
 800abe2:	b142      	cbz	r2, 800abf6 <__ascii_mbtowc+0x1a>
 800abe4:	b14b      	cbz	r3, 800abfa <__ascii_mbtowc+0x1e>
 800abe6:	7813      	ldrb	r3, [r2, #0]
 800abe8:	600b      	str	r3, [r1, #0]
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	1e10      	subs	r0, r2, #0
 800abee:	bf18      	it	ne
 800abf0:	2001      	movne	r0, #1
 800abf2:	b002      	add	sp, #8
 800abf4:	4770      	bx	lr
 800abf6:	4610      	mov	r0, r2
 800abf8:	e7fb      	b.n	800abf2 <__ascii_mbtowc+0x16>
 800abfa:	f06f 0001 	mvn.w	r0, #1
 800abfe:	e7f8      	b.n	800abf2 <__ascii_mbtowc+0x16>

0800ac00 <memmove>:
 800ac00:	4288      	cmp	r0, r1
 800ac02:	b510      	push	{r4, lr}
 800ac04:	eb01 0402 	add.w	r4, r1, r2
 800ac08:	d902      	bls.n	800ac10 <memmove+0x10>
 800ac0a:	4284      	cmp	r4, r0
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	d807      	bhi.n	800ac20 <memmove+0x20>
 800ac10:	1e43      	subs	r3, r0, #1
 800ac12:	42a1      	cmp	r1, r4
 800ac14:	d008      	beq.n	800ac28 <memmove+0x28>
 800ac16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac1e:	e7f8      	b.n	800ac12 <memmove+0x12>
 800ac20:	4402      	add	r2, r0
 800ac22:	4601      	mov	r1, r0
 800ac24:	428a      	cmp	r2, r1
 800ac26:	d100      	bne.n	800ac2a <memmove+0x2a>
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac32:	e7f7      	b.n	800ac24 <memmove+0x24>

0800ac34 <_realloc_r>:
 800ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac38:	4680      	mov	r8, r0
 800ac3a:	4614      	mov	r4, r2
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	b921      	cbnz	r1, 800ac4a <_realloc_r+0x16>
 800ac40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	4611      	mov	r1, r2
 800ac46:	f7fd ba71 	b.w	800812c <_malloc_r>
 800ac4a:	b92a      	cbnz	r2, 800ac58 <_realloc_r+0x24>
 800ac4c:	f7ff fb5c 	bl	800a308 <_free_r>
 800ac50:	4625      	mov	r5, r4
 800ac52:	4628      	mov	r0, r5
 800ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac58:	f000 f852 	bl	800ad00 <_malloc_usable_size_r>
 800ac5c:	4284      	cmp	r4, r0
 800ac5e:	4607      	mov	r7, r0
 800ac60:	d802      	bhi.n	800ac68 <_realloc_r+0x34>
 800ac62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac66:	d812      	bhi.n	800ac8e <_realloc_r+0x5a>
 800ac68:	4621      	mov	r1, r4
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	f7fd fa5e 	bl	800812c <_malloc_r>
 800ac70:	4605      	mov	r5, r0
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d0ed      	beq.n	800ac52 <_realloc_r+0x1e>
 800ac76:	42bc      	cmp	r4, r7
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	bf28      	it	cs
 800ac7e:	463a      	movcs	r2, r7
 800ac80:	f7fd fa1d 	bl	80080be <memcpy>
 800ac84:	4631      	mov	r1, r6
 800ac86:	4640      	mov	r0, r8
 800ac88:	f7ff fb3e 	bl	800a308 <_free_r>
 800ac8c:	e7e1      	b.n	800ac52 <_realloc_r+0x1e>
 800ac8e:	4635      	mov	r5, r6
 800ac90:	e7df      	b.n	800ac52 <_realloc_r+0x1e>

0800ac92 <__ascii_wctomb>:
 800ac92:	b149      	cbz	r1, 800aca8 <__ascii_wctomb+0x16>
 800ac94:	2aff      	cmp	r2, #255	; 0xff
 800ac96:	bf85      	ittet	hi
 800ac98:	238a      	movhi	r3, #138	; 0x8a
 800ac9a:	6003      	strhi	r3, [r0, #0]
 800ac9c:	700a      	strbls	r2, [r1, #0]
 800ac9e:	f04f 30ff 	movhi.w	r0, #4294967295
 800aca2:	bf98      	it	ls
 800aca4:	2001      	movls	r0, #1
 800aca6:	4770      	bx	lr
 800aca8:	4608      	mov	r0, r1
 800acaa:	4770      	bx	lr

0800acac <abort>:
 800acac:	b508      	push	{r3, lr}
 800acae:	2006      	movs	r0, #6
 800acb0:	f000 f856 	bl	800ad60 <raise>
 800acb4:	2001      	movs	r0, #1
 800acb6:	f001 f9e1 	bl	800c07c <_exit>
	...

0800acbc <_fstat_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	; (800acdc <_fstat_r+0x20>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	f001 f991 	bl	800bff0 <_fstat>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d102      	bne.n	800acd8 <_fstat_r+0x1c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	b103      	cbz	r3, 800acd8 <_fstat_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	bf00      	nop
 800acdc:	200066d4 	.word	0x200066d4

0800ace0 <_isatty_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d06      	ldr	r5, [pc, #24]	; (800acfc <_isatty_r+0x1c>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f001 f990 	bl	800c010 <_isatty>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_isatty_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_isatty_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	200066d4 	.word	0x200066d4

0800ad00 <_malloc_usable_size_r>:
 800ad00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad04:	1f18      	subs	r0, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfbc      	itt	lt
 800ad0a:	580b      	ldrlt	r3, [r1, r0]
 800ad0c:	18c0      	addlt	r0, r0, r3
 800ad0e:	4770      	bx	lr

0800ad10 <_raise_r>:
 800ad10:	291f      	cmp	r1, #31
 800ad12:	b538      	push	{r3, r4, r5, lr}
 800ad14:	4604      	mov	r4, r0
 800ad16:	460d      	mov	r5, r1
 800ad18:	d904      	bls.n	800ad24 <_raise_r+0x14>
 800ad1a:	2316      	movs	r3, #22
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad26:	b112      	cbz	r2, 800ad2e <_raise_r+0x1e>
 800ad28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad2c:	b94b      	cbnz	r3, 800ad42 <_raise_r+0x32>
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f830 	bl	800ad94 <_getpid_r>
 800ad34:	462a      	mov	r2, r5
 800ad36:	4601      	mov	r1, r0
 800ad38:	4620      	mov	r0, r4
 800ad3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3e:	f000 b817 	b.w	800ad70 <_kill_r>
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d00a      	beq.n	800ad5c <_raise_r+0x4c>
 800ad46:	1c59      	adds	r1, r3, #1
 800ad48:	d103      	bne.n	800ad52 <_raise_r+0x42>
 800ad4a:	2316      	movs	r3, #22
 800ad4c:	6003      	str	r3, [r0, #0]
 800ad4e:	2001      	movs	r0, #1
 800ad50:	e7e7      	b.n	800ad22 <_raise_r+0x12>
 800ad52:	2400      	movs	r4, #0
 800ad54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad58:	4628      	mov	r0, r5
 800ad5a:	4798      	blx	r3
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e7e0      	b.n	800ad22 <_raise_r+0x12>

0800ad60 <raise>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <raise+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f7ff bfd3 	b.w	800ad10 <_raise_r>
 800ad6a:	bf00      	nop
 800ad6c:	20000014 	.word	0x20000014

0800ad70 <_kill_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_kill_r+0x20>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	f001 f94f 	bl	800c020 <_kill>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d102      	bne.n	800ad8c <_kill_r+0x1c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b103      	cbz	r3, 800ad8c <_kill_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop
 800ad90:	200066d4 	.word	0x200066d4

0800ad94 <_getpid_r>:
 800ad94:	f001 b934 	b.w	800c000 <_getpid>

0800ad98 <log>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	ed2d 8b02 	vpush	{d8}
 800ad9e:	ec55 4b10 	vmov	r4, r5, d0
 800ada2:	f000 f8a9 	bl	800aef8 <__ieee754_log>
 800ada6:	4622      	mov	r2, r4
 800ada8:	462b      	mov	r3, r5
 800adaa:	4620      	mov	r0, r4
 800adac:	4629      	mov	r1, r5
 800adae:	eeb0 8a40 	vmov.f32	s16, s0
 800adb2:	eef0 8a60 	vmov.f32	s17, s1
 800adb6:	f7f5 fed9 	bl	8000b6c <__aeabi_dcmpun>
 800adba:	b998      	cbnz	r0, 800ade4 <log+0x4c>
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	4620      	mov	r0, r4
 800adc2:	4629      	mov	r1, r5
 800adc4:	f7f5 fec8 	bl	8000b58 <__aeabi_dcmpgt>
 800adc8:	b960      	cbnz	r0, 800ade4 <log+0x4c>
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fe99 	bl	8000b08 <__aeabi_dcmpeq>
 800add6:	b160      	cbz	r0, 800adf2 <log+0x5a>
 800add8:	f001 f8fc 	bl	800bfd4 <__errno>
 800addc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800ae08 <log+0x70>
 800ade0:	2322      	movs	r3, #34	; 0x22
 800ade2:	6003      	str	r3, [r0, #0]
 800ade4:	eeb0 0a48 	vmov.f32	s0, s16
 800ade8:	eef0 0a68 	vmov.f32	s1, s17
 800adec:	ecbd 8b02 	vpop	{d8}
 800adf0:	bd38      	pop	{r3, r4, r5, pc}
 800adf2:	f001 f8ef 	bl	800bfd4 <__errno>
 800adf6:	ecbd 8b02 	vpop	{d8}
 800adfa:	2321      	movs	r3, #33	; 0x21
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae02:	4803      	ldr	r0, [pc, #12]	; (800ae10 <log+0x78>)
 800ae04:	f001 b858 	b.w	800beb8 <nan>
 800ae08:	00000000 	.word	0x00000000
 800ae0c:	fff00000 	.word	0xfff00000
 800ae10:	0800c428 	.word	0x0800c428

0800ae14 <pow>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	ed2d 8b02 	vpush	{d8}
 800ae1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ae1e:	eef0 8a60 	vmov.f32	s17, s1
 800ae22:	ec55 4b11 	vmov	r4, r5, d1
 800ae26:	f000 fa23 	bl	800b270 <__ieee754_pow>
 800ae2a:	4622      	mov	r2, r4
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	ec57 6b10 	vmov	r6, r7, d0
 800ae36:	f7f5 fe99 	bl	8000b6c <__aeabi_dcmpun>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d13b      	bne.n	800aeb6 <pow+0xa2>
 800ae3e:	ec51 0b18 	vmov	r0, r1, d8
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	f7f5 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 800ae4a:	b1b8      	cbz	r0, 800ae7c <pow+0x68>
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4620      	mov	r0, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	f7f5 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d146      	bne.n	800aeea <pow+0xd6>
 800ae5c:	ec45 4b10 	vmov	d0, r4, r5
 800ae60:	f001 f81f 	bl	800bea2 <finite>
 800ae64:	b338      	cbz	r0, 800aeb6 <pow+0xa2>
 800ae66:	2200      	movs	r2, #0
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 fe55 	bl	8000b1c <__aeabi_dcmplt>
 800ae72:	b300      	cbz	r0, 800aeb6 <pow+0xa2>
 800ae74:	f001 f8ae 	bl	800bfd4 <__errno>
 800ae78:	2322      	movs	r3, #34	; 0x22
 800ae7a:	e01b      	b.n	800aeb4 <pow+0xa0>
 800ae7c:	ec47 6b10 	vmov	d0, r6, r7
 800ae80:	f001 f80f 	bl	800bea2 <finite>
 800ae84:	b9e0      	cbnz	r0, 800aec0 <pow+0xac>
 800ae86:	eeb0 0a48 	vmov.f32	s0, s16
 800ae8a:	eef0 0a68 	vmov.f32	s1, s17
 800ae8e:	f001 f808 	bl	800bea2 <finite>
 800ae92:	b1a8      	cbz	r0, 800aec0 <pow+0xac>
 800ae94:	ec45 4b10 	vmov	d0, r4, r5
 800ae98:	f001 f803 	bl	800bea2 <finite>
 800ae9c:	b180      	cbz	r0, 800aec0 <pow+0xac>
 800ae9e:	4632      	mov	r2, r6
 800aea0:	463b      	mov	r3, r7
 800aea2:	4630      	mov	r0, r6
 800aea4:	4639      	mov	r1, r7
 800aea6:	f7f5 fe61 	bl	8000b6c <__aeabi_dcmpun>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0e2      	beq.n	800ae74 <pow+0x60>
 800aeae:	f001 f891 	bl	800bfd4 <__errno>
 800aeb2:	2321      	movs	r3, #33	; 0x21
 800aeb4:	6003      	str	r3, [r0, #0]
 800aeb6:	ecbd 8b02 	vpop	{d8}
 800aeba:	ec47 6b10 	vmov	d0, r6, r7
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	2200      	movs	r2, #0
 800aec2:	2300      	movs	r3, #0
 800aec4:	4630      	mov	r0, r6
 800aec6:	4639      	mov	r1, r7
 800aec8:	f7f5 fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d0f2      	beq.n	800aeb6 <pow+0xa2>
 800aed0:	eeb0 0a48 	vmov.f32	s0, s16
 800aed4:	eef0 0a68 	vmov.f32	s1, s17
 800aed8:	f000 ffe3 	bl	800bea2 <finite>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d0ea      	beq.n	800aeb6 <pow+0xa2>
 800aee0:	ec45 4b10 	vmov	d0, r4, r5
 800aee4:	f000 ffdd 	bl	800bea2 <finite>
 800aee8:	e7c3      	b.n	800ae72 <pow+0x5e>
 800aeea:	4f01      	ldr	r7, [pc, #4]	; (800aef0 <pow+0xdc>)
 800aeec:	2600      	movs	r6, #0
 800aeee:	e7e2      	b.n	800aeb6 <pow+0xa2>
 800aef0:	3ff00000 	.word	0x3ff00000
 800aef4:	00000000 	.word	0x00000000

0800aef8 <__ieee754_log>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	ec51 0b10 	vmov	r0, r1, d0
 800af00:	ed2d 8b04 	vpush	{d8-d9}
 800af04:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800af08:	b083      	sub	sp, #12
 800af0a:	460d      	mov	r5, r1
 800af0c:	da29      	bge.n	800af62 <__ieee754_log+0x6a>
 800af0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af12:	4303      	orrs	r3, r0
 800af14:	ee10 2a10 	vmov	r2, s0
 800af18:	d10c      	bne.n	800af34 <__ieee754_log+0x3c>
 800af1a:	49cf      	ldr	r1, [pc, #828]	; (800b258 <__ieee754_log+0x360>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	2300      	movs	r3, #0
 800af20:	2000      	movs	r0, #0
 800af22:	f7f5 fcb3 	bl	800088c <__aeabi_ddiv>
 800af26:	ec41 0b10 	vmov	d0, r0, r1
 800af2a:	b003      	add	sp, #12
 800af2c:	ecbd 8b04 	vpop	{d8-d9}
 800af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	2900      	cmp	r1, #0
 800af36:	da05      	bge.n	800af44 <__ieee754_log+0x4c>
 800af38:	460b      	mov	r3, r1
 800af3a:	f7f5 f9c5 	bl	80002c8 <__aeabi_dsub>
 800af3e:	2200      	movs	r2, #0
 800af40:	2300      	movs	r3, #0
 800af42:	e7ee      	b.n	800af22 <__ieee754_log+0x2a>
 800af44:	4bc5      	ldr	r3, [pc, #788]	; (800b25c <__ieee754_log+0x364>)
 800af46:	2200      	movs	r2, #0
 800af48:	f7f5 fb76 	bl	8000638 <__aeabi_dmul>
 800af4c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800af50:	460d      	mov	r5, r1
 800af52:	4ac3      	ldr	r2, [pc, #780]	; (800b260 <__ieee754_log+0x368>)
 800af54:	4295      	cmp	r5, r2
 800af56:	dd06      	ble.n	800af66 <__ieee754_log+0x6e>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	f7f5 f9b6 	bl	80002cc <__adddf3>
 800af60:	e7e1      	b.n	800af26 <__ieee754_log+0x2e>
 800af62:	2300      	movs	r3, #0
 800af64:	e7f5      	b.n	800af52 <__ieee754_log+0x5a>
 800af66:	152c      	asrs	r4, r5, #20
 800af68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800af6c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800af70:	441c      	add	r4, r3
 800af72:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800af76:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800af7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af7e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800af82:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800af86:	ea42 0105 	orr.w	r1, r2, r5
 800af8a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800af8e:	2200      	movs	r2, #0
 800af90:	4bb4      	ldr	r3, [pc, #720]	; (800b264 <__ieee754_log+0x36c>)
 800af92:	f7f5 f999 	bl	80002c8 <__aeabi_dsub>
 800af96:	1cab      	adds	r3, r5, #2
 800af98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	4682      	mov	sl, r0
 800afa0:	468b      	mov	fp, r1
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	dc53      	bgt.n	800b050 <__ieee754_log+0x158>
 800afa8:	2300      	movs	r3, #0
 800afaa:	f7f5 fdad 	bl	8000b08 <__aeabi_dcmpeq>
 800afae:	b1d0      	cbz	r0, 800afe6 <__ieee754_log+0xee>
 800afb0:	2c00      	cmp	r4, #0
 800afb2:	f000 8122 	beq.w	800b1fa <__ieee754_log+0x302>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7f5 fad4 	bl	8000564 <__aeabi_i2d>
 800afbc:	a390      	add	r3, pc, #576	; (adr r3, 800b200 <__ieee754_log+0x308>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	f7f5 fb37 	bl	8000638 <__aeabi_dmul>
 800afca:	a38f      	add	r3, pc, #572	; (adr r3, 800b208 <__ieee754_log+0x310>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	4604      	mov	r4, r0
 800afd2:	460d      	mov	r5, r1
 800afd4:	4630      	mov	r0, r6
 800afd6:	4639      	mov	r1, r7
 800afd8:	f7f5 fb2e 	bl	8000638 <__aeabi_dmul>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4620      	mov	r0, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	e7ba      	b.n	800af5c <__ieee754_log+0x64>
 800afe6:	a38a      	add	r3, pc, #552	; (adr r3, 800b210 <__ieee754_log+0x318>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	4650      	mov	r0, sl
 800afee:	4659      	mov	r1, fp
 800aff0:	f7f5 fb22 	bl	8000638 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	2000      	movs	r0, #0
 800affa:	499b      	ldr	r1, [pc, #620]	; (800b268 <__ieee754_log+0x370>)
 800affc:	f7f5 f964 	bl	80002c8 <__aeabi_dsub>
 800b000:	4652      	mov	r2, sl
 800b002:	4606      	mov	r6, r0
 800b004:	460f      	mov	r7, r1
 800b006:	465b      	mov	r3, fp
 800b008:	4650      	mov	r0, sl
 800b00a:	4659      	mov	r1, fp
 800b00c:	f7f5 fb14 	bl	8000638 <__aeabi_dmul>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4630      	mov	r0, r6
 800b016:	4639      	mov	r1, r7
 800b018:	f7f5 fb0e 	bl	8000638 <__aeabi_dmul>
 800b01c:	4606      	mov	r6, r0
 800b01e:	460f      	mov	r7, r1
 800b020:	b914      	cbnz	r4, 800b028 <__ieee754_log+0x130>
 800b022:	4632      	mov	r2, r6
 800b024:	463b      	mov	r3, r7
 800b026:	e0a2      	b.n	800b16e <__ieee754_log+0x276>
 800b028:	4620      	mov	r0, r4
 800b02a:	f7f5 fa9b 	bl	8000564 <__aeabi_i2d>
 800b02e:	a374      	add	r3, pc, #464	; (adr r3, 800b200 <__ieee754_log+0x308>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	4680      	mov	r8, r0
 800b036:	4689      	mov	r9, r1
 800b038:	f7f5 fafe 	bl	8000638 <__aeabi_dmul>
 800b03c:	a372      	add	r3, pc, #456	; (adr r3, 800b208 <__ieee754_log+0x310>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	4604      	mov	r4, r0
 800b044:	460d      	mov	r5, r1
 800b046:	4640      	mov	r0, r8
 800b048:	4649      	mov	r1, r9
 800b04a:	f7f5 faf5 	bl	8000638 <__aeabi_dmul>
 800b04e:	e0a7      	b.n	800b1a0 <__ieee754_log+0x2a8>
 800b050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b054:	f7f5 f93a 	bl	80002cc <__adddf3>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4650      	mov	r0, sl
 800b05e:	4659      	mov	r1, fp
 800b060:	f7f5 fc14 	bl	800088c <__aeabi_ddiv>
 800b064:	ec41 0b18 	vmov	d8, r0, r1
 800b068:	4620      	mov	r0, r4
 800b06a:	f7f5 fa7b 	bl	8000564 <__aeabi_i2d>
 800b06e:	ec53 2b18 	vmov	r2, r3, d8
 800b072:	ec41 0b19 	vmov	d9, r0, r1
 800b076:	ec51 0b18 	vmov	r0, r1, d8
 800b07a:	f7f5 fadd 	bl	8000638 <__aeabi_dmul>
 800b07e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b082:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	f7f5 fad2 	bl	8000638 <__aeabi_dmul>
 800b094:	a360      	add	r3, pc, #384	; (adr r3, 800b218 <__ieee754_log+0x320>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	f7f5 facb 	bl	8000638 <__aeabi_dmul>
 800b0a2:	a35f      	add	r3, pc, #380	; (adr r3, 800b220 <__ieee754_log+0x328>)
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f7f5 f910 	bl	80002cc <__adddf3>
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	f7f5 fac2 	bl	8000638 <__aeabi_dmul>
 800b0b4:	a35c      	add	r3, pc, #368	; (adr r3, 800b228 <__ieee754_log+0x330>)
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	f7f5 f907 	bl	80002cc <__adddf3>
 800b0be:	4632      	mov	r2, r6
 800b0c0:	463b      	mov	r3, r7
 800b0c2:	f7f5 fab9 	bl	8000638 <__aeabi_dmul>
 800b0c6:	a35a      	add	r3, pc, #360	; (adr r3, 800b230 <__ieee754_log+0x338>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 f8fe 	bl	80002cc <__adddf3>
 800b0d0:	4642      	mov	r2, r8
 800b0d2:	464b      	mov	r3, r9
 800b0d4:	f7f5 fab0 	bl	8000638 <__aeabi_dmul>
 800b0d8:	a357      	add	r3, pc, #348	; (adr r3, 800b238 <__ieee754_log+0x340>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4689      	mov	r9, r1
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 faa7 	bl	8000638 <__aeabi_dmul>
 800b0ea:	a355      	add	r3, pc, #340	; (adr r3, 800b240 <__ieee754_log+0x348>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 f8ec 	bl	80002cc <__adddf3>
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	463b      	mov	r3, r7
 800b0f8:	f7f5 fa9e 	bl	8000638 <__aeabi_dmul>
 800b0fc:	a352      	add	r3, pc, #328	; (adr r3, 800b248 <__ieee754_log+0x350>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	f7f5 f8e3 	bl	80002cc <__adddf3>
 800b106:	4632      	mov	r2, r6
 800b108:	463b      	mov	r3, r7
 800b10a:	f7f5 fa95 	bl	8000638 <__aeabi_dmul>
 800b10e:	460b      	mov	r3, r1
 800b110:	4602      	mov	r2, r0
 800b112:	4649      	mov	r1, r9
 800b114:	4640      	mov	r0, r8
 800b116:	f7f5 f8d9 	bl	80002cc <__adddf3>
 800b11a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	3551      	adds	r5, #81	; 0x51
 800b122:	431d      	orrs	r5, r3
 800b124:	2d00      	cmp	r5, #0
 800b126:	4680      	mov	r8, r0
 800b128:	4689      	mov	r9, r1
 800b12a:	dd48      	ble.n	800b1be <__ieee754_log+0x2c6>
 800b12c:	4b4e      	ldr	r3, [pc, #312]	; (800b268 <__ieee754_log+0x370>)
 800b12e:	2200      	movs	r2, #0
 800b130:	4650      	mov	r0, sl
 800b132:	4659      	mov	r1, fp
 800b134:	f7f5 fa80 	bl	8000638 <__aeabi_dmul>
 800b138:	4652      	mov	r2, sl
 800b13a:	465b      	mov	r3, fp
 800b13c:	f7f5 fa7c 	bl	8000638 <__aeabi_dmul>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4640      	mov	r0, r8
 800b14a:	4649      	mov	r1, r9
 800b14c:	f7f5 f8be 	bl	80002cc <__adddf3>
 800b150:	ec53 2b18 	vmov	r2, r3, d8
 800b154:	f7f5 fa70 	bl	8000638 <__aeabi_dmul>
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	b964      	cbnz	r4, 800b178 <__ieee754_log+0x280>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 f8af 	bl	80002c8 <__aeabi_dsub>
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4650      	mov	r0, sl
 800b170:	4659      	mov	r1, fp
 800b172:	f7f5 f8a9 	bl	80002c8 <__aeabi_dsub>
 800b176:	e6d6      	b.n	800af26 <__ieee754_log+0x2e>
 800b178:	a321      	add	r3, pc, #132	; (adr r3, 800b200 <__ieee754_log+0x308>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	ec51 0b19 	vmov	r0, r1, d9
 800b182:	f7f5 fa59 	bl	8000638 <__aeabi_dmul>
 800b186:	a320      	add	r3, pc, #128	; (adr r3, 800b208 <__ieee754_log+0x310>)
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	4604      	mov	r4, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	ec51 0b19 	vmov	r0, r1, d9
 800b194:	f7f5 fa50 	bl	8000638 <__aeabi_dmul>
 800b198:	4642      	mov	r2, r8
 800b19a:	464b      	mov	r3, r9
 800b19c:	f7f5 f896 	bl	80002cc <__adddf3>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	f7f5 f88e 	bl	80002c8 <__aeabi_dsub>
 800b1ac:	4652      	mov	r2, sl
 800b1ae:	465b      	mov	r3, fp
 800b1b0:	f7f5 f88a 	bl	80002c8 <__aeabi_dsub>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	e7d9      	b.n	800b172 <__ieee754_log+0x27a>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	f7f5 f87f 	bl	80002c8 <__aeabi_dsub>
 800b1ca:	ec53 2b18 	vmov	r2, r3, d8
 800b1ce:	f7f5 fa33 	bl	8000638 <__aeabi_dmul>
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	2c00      	cmp	r4, #0
 800b1d8:	f43f af23 	beq.w	800b022 <__ieee754_log+0x12a>
 800b1dc:	a308      	add	r3, pc, #32	; (adr r3, 800b200 <__ieee754_log+0x308>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	ec51 0b19 	vmov	r0, r1, d9
 800b1e6:	f7f5 fa27 	bl	8000638 <__aeabi_dmul>
 800b1ea:	a307      	add	r3, pc, #28	; (adr r3, 800b208 <__ieee754_log+0x310>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	ec51 0b19 	vmov	r0, r1, d9
 800b1f8:	e727      	b.n	800b04a <__ieee754_log+0x152>
 800b1fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b250 <__ieee754_log+0x358>
 800b1fe:	e694      	b.n	800af2a <__ieee754_log+0x32>
 800b200:	fee00000 	.word	0xfee00000
 800b204:	3fe62e42 	.word	0x3fe62e42
 800b208:	35793c76 	.word	0x35793c76
 800b20c:	3dea39ef 	.word	0x3dea39ef
 800b210:	55555555 	.word	0x55555555
 800b214:	3fd55555 	.word	0x3fd55555
 800b218:	df3e5244 	.word	0xdf3e5244
 800b21c:	3fc2f112 	.word	0x3fc2f112
 800b220:	96cb03de 	.word	0x96cb03de
 800b224:	3fc74664 	.word	0x3fc74664
 800b228:	94229359 	.word	0x94229359
 800b22c:	3fd24924 	.word	0x3fd24924
 800b230:	55555593 	.word	0x55555593
 800b234:	3fe55555 	.word	0x3fe55555
 800b238:	d078c69f 	.word	0xd078c69f
 800b23c:	3fc39a09 	.word	0x3fc39a09
 800b240:	1d8e78af 	.word	0x1d8e78af
 800b244:	3fcc71c5 	.word	0x3fcc71c5
 800b248:	9997fa04 	.word	0x9997fa04
 800b24c:	3fd99999 	.word	0x3fd99999
	...
 800b258:	c3500000 	.word	0xc3500000
 800b25c:	43500000 	.word	0x43500000
 800b260:	7fefffff 	.word	0x7fefffff
 800b264:	3ff00000 	.word	0x3ff00000
 800b268:	3fe00000 	.word	0x3fe00000
 800b26c:	00000000 	.word	0x00000000

0800b270 <__ieee754_pow>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	ed2d 8b06 	vpush	{d8-d10}
 800b278:	b089      	sub	sp, #36	; 0x24
 800b27a:	ed8d 1b00 	vstr	d1, [sp]
 800b27e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b282:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b286:	ea58 0102 	orrs.w	r1, r8, r2
 800b28a:	ec57 6b10 	vmov	r6, r7, d0
 800b28e:	d115      	bne.n	800b2bc <__ieee754_pow+0x4c>
 800b290:	19b3      	adds	r3, r6, r6
 800b292:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b296:	4152      	adcs	r2, r2
 800b298:	4299      	cmp	r1, r3
 800b29a:	4b89      	ldr	r3, [pc, #548]	; (800b4c0 <__ieee754_pow+0x250>)
 800b29c:	4193      	sbcs	r3, r2
 800b29e:	f080 84d2 	bcs.w	800bc46 <__ieee754_pow+0x9d6>
 800b2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	f7f5 f80f 	bl	80002cc <__adddf3>
 800b2ae:	ec41 0b10 	vmov	d0, r0, r1
 800b2b2:	b009      	add	sp, #36	; 0x24
 800b2b4:	ecbd 8b06 	vpop	{d8-d10}
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	4b81      	ldr	r3, [pc, #516]	; (800b4c4 <__ieee754_pow+0x254>)
 800b2be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	ee10 aa10 	vmov	sl, s0
 800b2c8:	463d      	mov	r5, r7
 800b2ca:	dc06      	bgt.n	800b2da <__ieee754_pow+0x6a>
 800b2cc:	d101      	bne.n	800b2d2 <__ieee754_pow+0x62>
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	d1e7      	bne.n	800b2a2 <__ieee754_pow+0x32>
 800b2d2:	4598      	cmp	r8, r3
 800b2d4:	dc01      	bgt.n	800b2da <__ieee754_pow+0x6a>
 800b2d6:	d10f      	bne.n	800b2f8 <__ieee754_pow+0x88>
 800b2d8:	b172      	cbz	r2, 800b2f8 <__ieee754_pow+0x88>
 800b2da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b2de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b2e2:	ea55 050a 	orrs.w	r5, r5, sl
 800b2e6:	d1dc      	bne.n	800b2a2 <__ieee754_pow+0x32>
 800b2e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2ec:	18db      	adds	r3, r3, r3
 800b2ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b2f2:	4152      	adcs	r2, r2
 800b2f4:	429d      	cmp	r5, r3
 800b2f6:	e7d0      	b.n	800b29a <__ieee754_pow+0x2a>
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	da3b      	bge.n	800b374 <__ieee754_pow+0x104>
 800b2fc:	4b72      	ldr	r3, [pc, #456]	; (800b4c8 <__ieee754_pow+0x258>)
 800b2fe:	4598      	cmp	r8, r3
 800b300:	dc51      	bgt.n	800b3a6 <__ieee754_pow+0x136>
 800b302:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b306:	4598      	cmp	r8, r3
 800b308:	f340 84ac 	ble.w	800bc64 <__ieee754_pow+0x9f4>
 800b30c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b310:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b314:	2b14      	cmp	r3, #20
 800b316:	dd0f      	ble.n	800b338 <__ieee754_pow+0xc8>
 800b318:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b31c:	fa22 f103 	lsr.w	r1, r2, r3
 800b320:	fa01 f303 	lsl.w	r3, r1, r3
 800b324:	4293      	cmp	r3, r2
 800b326:	f040 849d 	bne.w	800bc64 <__ieee754_pow+0x9f4>
 800b32a:	f001 0101 	and.w	r1, r1, #1
 800b32e:	f1c1 0302 	rsb	r3, r1, #2
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	b182      	cbz	r2, 800b358 <__ieee754_pow+0xe8>
 800b336:	e05f      	b.n	800b3f8 <__ieee754_pow+0x188>
 800b338:	2a00      	cmp	r2, #0
 800b33a:	d15b      	bne.n	800b3f4 <__ieee754_pow+0x184>
 800b33c:	f1c3 0314 	rsb	r3, r3, #20
 800b340:	fa48 f103 	asr.w	r1, r8, r3
 800b344:	fa01 f303 	lsl.w	r3, r1, r3
 800b348:	4543      	cmp	r3, r8
 800b34a:	f040 8488 	bne.w	800bc5e <__ieee754_pow+0x9ee>
 800b34e:	f001 0101 	and.w	r1, r1, #1
 800b352:	f1c1 0302 	rsb	r3, r1, #2
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	4b5c      	ldr	r3, [pc, #368]	; (800b4cc <__ieee754_pow+0x25c>)
 800b35a:	4598      	cmp	r8, r3
 800b35c:	d132      	bne.n	800b3c4 <__ieee754_pow+0x154>
 800b35e:	f1b9 0f00 	cmp.w	r9, #0
 800b362:	f280 8478 	bge.w	800bc56 <__ieee754_pow+0x9e6>
 800b366:	4959      	ldr	r1, [pc, #356]	; (800b4cc <__ieee754_pow+0x25c>)
 800b368:	4632      	mov	r2, r6
 800b36a:	463b      	mov	r3, r7
 800b36c:	2000      	movs	r0, #0
 800b36e:	f7f5 fa8d 	bl	800088c <__aeabi_ddiv>
 800b372:	e79c      	b.n	800b2ae <__ieee754_pow+0x3e>
 800b374:	2300      	movs	r3, #0
 800b376:	9304      	str	r3, [sp, #16]
 800b378:	2a00      	cmp	r2, #0
 800b37a:	d13d      	bne.n	800b3f8 <__ieee754_pow+0x188>
 800b37c:	4b51      	ldr	r3, [pc, #324]	; (800b4c4 <__ieee754_pow+0x254>)
 800b37e:	4598      	cmp	r8, r3
 800b380:	d1ea      	bne.n	800b358 <__ieee754_pow+0xe8>
 800b382:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b386:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b38a:	ea53 030a 	orrs.w	r3, r3, sl
 800b38e:	f000 845a 	beq.w	800bc46 <__ieee754_pow+0x9d6>
 800b392:	4b4f      	ldr	r3, [pc, #316]	; (800b4d0 <__ieee754_pow+0x260>)
 800b394:	429c      	cmp	r4, r3
 800b396:	dd08      	ble.n	800b3aa <__ieee754_pow+0x13a>
 800b398:	f1b9 0f00 	cmp.w	r9, #0
 800b39c:	f2c0 8457 	blt.w	800bc4e <__ieee754_pow+0x9de>
 800b3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3a4:	e783      	b.n	800b2ae <__ieee754_pow+0x3e>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	e7e5      	b.n	800b376 <__ieee754_pow+0x106>
 800b3aa:	f1b9 0f00 	cmp.w	r9, #0
 800b3ae:	f04f 0000 	mov.w	r0, #0
 800b3b2:	f04f 0100 	mov.w	r1, #0
 800b3b6:	f6bf af7a 	bge.w	800b2ae <__ieee754_pow+0x3e>
 800b3ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b3be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3c2:	e774      	b.n	800b2ae <__ieee754_pow+0x3e>
 800b3c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b3c8:	d106      	bne.n	800b3d8 <__ieee754_pow+0x168>
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	f7f5 f931 	bl	8000638 <__aeabi_dmul>
 800b3d6:	e76a      	b.n	800b2ae <__ieee754_pow+0x3e>
 800b3d8:	4b3e      	ldr	r3, [pc, #248]	; (800b4d4 <__ieee754_pow+0x264>)
 800b3da:	4599      	cmp	r9, r3
 800b3dc:	d10c      	bne.n	800b3f8 <__ieee754_pow+0x188>
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	db0a      	blt.n	800b3f8 <__ieee754_pow+0x188>
 800b3e2:	ec47 6b10 	vmov	d0, r6, r7
 800b3e6:	b009      	add	sp, #36	; 0x24
 800b3e8:	ecbd 8b06 	vpop	{d8-d10}
 800b3ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	f000 bc6c 	b.w	800bccc <__ieee754_sqrt>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9304      	str	r3, [sp, #16]
 800b3f8:	ec47 6b10 	vmov	d0, r6, r7
 800b3fc:	f000 fd48 	bl	800be90 <fabs>
 800b400:	ec51 0b10 	vmov	r0, r1, d0
 800b404:	f1ba 0f00 	cmp.w	sl, #0
 800b408:	d129      	bne.n	800b45e <__ieee754_pow+0x1ee>
 800b40a:	b124      	cbz	r4, 800b416 <__ieee754_pow+0x1a6>
 800b40c:	4b2f      	ldr	r3, [pc, #188]	; (800b4cc <__ieee754_pow+0x25c>)
 800b40e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b412:	429a      	cmp	r2, r3
 800b414:	d123      	bne.n	800b45e <__ieee754_pow+0x1ee>
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	da05      	bge.n	800b428 <__ieee754_pow+0x1b8>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	2000      	movs	r0, #0
 800b422:	492a      	ldr	r1, [pc, #168]	; (800b4cc <__ieee754_pow+0x25c>)
 800b424:	f7f5 fa32 	bl	800088c <__aeabi_ddiv>
 800b428:	2d00      	cmp	r5, #0
 800b42a:	f6bf af40 	bge.w	800b2ae <__ieee754_pow+0x3e>
 800b42e:	9b04      	ldr	r3, [sp, #16]
 800b430:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b434:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b438:	4323      	orrs	r3, r4
 800b43a:	d108      	bne.n	800b44e <__ieee754_pow+0x1de>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4610      	mov	r0, r2
 800b442:	4619      	mov	r1, r3
 800b444:	f7f4 ff40 	bl	80002c8 <__aeabi_dsub>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	e78f      	b.n	800b36e <__ieee754_pow+0xfe>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	2b01      	cmp	r3, #1
 800b452:	f47f af2c 	bne.w	800b2ae <__ieee754_pow+0x3e>
 800b456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b45a:	4619      	mov	r1, r3
 800b45c:	e727      	b.n	800b2ae <__ieee754_pow+0x3e>
 800b45e:	0feb      	lsrs	r3, r5, #31
 800b460:	3b01      	subs	r3, #1
 800b462:	9306      	str	r3, [sp, #24]
 800b464:	9a06      	ldr	r2, [sp, #24]
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	4313      	orrs	r3, r2
 800b46a:	d102      	bne.n	800b472 <__ieee754_pow+0x202>
 800b46c:	4632      	mov	r2, r6
 800b46e:	463b      	mov	r3, r7
 800b470:	e7e6      	b.n	800b440 <__ieee754_pow+0x1d0>
 800b472:	4b19      	ldr	r3, [pc, #100]	; (800b4d8 <__ieee754_pow+0x268>)
 800b474:	4598      	cmp	r8, r3
 800b476:	f340 80fb 	ble.w	800b670 <__ieee754_pow+0x400>
 800b47a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b47e:	4598      	cmp	r8, r3
 800b480:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <__ieee754_pow+0x260>)
 800b482:	dd0c      	ble.n	800b49e <__ieee754_pow+0x22e>
 800b484:	429c      	cmp	r4, r3
 800b486:	dc0f      	bgt.n	800b4a8 <__ieee754_pow+0x238>
 800b488:	f1b9 0f00 	cmp.w	r9, #0
 800b48c:	da0f      	bge.n	800b4ae <__ieee754_pow+0x23e>
 800b48e:	2000      	movs	r0, #0
 800b490:	b009      	add	sp, #36	; 0x24
 800b492:	ecbd 8b06 	vpop	{d8-d10}
 800b496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	f000 bcf0 	b.w	800be7e <__math_oflow>
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	dbf2      	blt.n	800b488 <__ieee754_pow+0x218>
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <__ieee754_pow+0x25c>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	dd19      	ble.n	800b4dc <__ieee754_pow+0x26c>
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	dcef      	bgt.n	800b48e <__ieee754_pow+0x21e>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	b009      	add	sp, #36	; 0x24
 800b4b2:	ecbd 8b06 	vpop	{d8-d10}
 800b4b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ba:	f000 bcd7 	b.w	800be6c <__math_uflow>
 800b4be:	bf00      	nop
 800b4c0:	fff00000 	.word	0xfff00000
 800b4c4:	7ff00000 	.word	0x7ff00000
 800b4c8:	433fffff 	.word	0x433fffff
 800b4cc:	3ff00000 	.word	0x3ff00000
 800b4d0:	3fefffff 	.word	0x3fefffff
 800b4d4:	3fe00000 	.word	0x3fe00000
 800b4d8:	41e00000 	.word	0x41e00000
 800b4dc:	4b60      	ldr	r3, [pc, #384]	; (800b660 <__ieee754_pow+0x3f0>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f7f4 fef2 	bl	80002c8 <__aeabi_dsub>
 800b4e4:	a354      	add	r3, pc, #336	; (adr r3, 800b638 <__ieee754_pow+0x3c8>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	f7f5 f8a3 	bl	8000638 <__aeabi_dmul>
 800b4f2:	a353      	add	r3, pc, #332	; (adr r3, 800b640 <__ieee754_pow+0x3d0>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	460f      	mov	r7, r1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f5 f89a 	bl	8000638 <__aeabi_dmul>
 800b504:	4b57      	ldr	r3, [pc, #348]	; (800b664 <__ieee754_pow+0x3f4>)
 800b506:	4682      	mov	sl, r0
 800b508:	468b      	mov	fp, r1
 800b50a:	2200      	movs	r2, #0
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	a14b      	add	r1, pc, #300	; (adr r1, 800b648 <__ieee754_pow+0x3d8>)
 800b51a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51e:	f7f4 fed3 	bl	80002c8 <__aeabi_dsub>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	f7f5 f887 	bl	8000638 <__aeabi_dmul>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	2000      	movs	r0, #0
 800b530:	494d      	ldr	r1, [pc, #308]	; (800b668 <__ieee754_pow+0x3f8>)
 800b532:	f7f4 fec9 	bl	80002c8 <__aeabi_dsub>
 800b536:	4622      	mov	r2, r4
 800b538:	4680      	mov	r8, r0
 800b53a:	4689      	mov	r9, r1
 800b53c:	462b      	mov	r3, r5
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f5 f879 	bl	8000638 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f5 f873 	bl	8000638 <__aeabi_dmul>
 800b552:	a33f      	add	r3, pc, #252	; (adr r3, 800b650 <__ieee754_pow+0x3e0>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f5 f86e 	bl	8000638 <__aeabi_dmul>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4650      	mov	r0, sl
 800b562:	4659      	mov	r1, fp
 800b564:	f7f4 feb0 	bl	80002c8 <__aeabi_dsub>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	4630      	mov	r0, r6
 800b572:	4639      	mov	r1, r7
 800b574:	f7f4 feaa 	bl	80002cc <__adddf3>
 800b578:	2000      	movs	r0, #0
 800b57a:	4632      	mov	r2, r6
 800b57c:	463b      	mov	r3, r7
 800b57e:	4604      	mov	r4, r0
 800b580:	460d      	mov	r5, r1
 800b582:	f7f4 fea1 	bl	80002c8 <__aeabi_dsub>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	9a06      	ldr	r2, [sp, #24]
 800b596:	3b01      	subs	r3, #1
 800b598:	4313      	orrs	r3, r2
 800b59a:	4682      	mov	sl, r0
 800b59c:	468b      	mov	fp, r1
 800b59e:	f040 81e7 	bne.w	800b970 <__ieee754_pow+0x700>
 800b5a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b658 <__ieee754_pow+0x3e8>
 800b5a6:	eeb0 8a47 	vmov.f32	s16, s14
 800b5aa:	eef0 8a67 	vmov.f32	s17, s15
 800b5ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5bc:	f7f4 fe84 	bl	80002c8 <__aeabi_dsub>
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	462b      	mov	r3, r5
 800b5c4:	f7f5 f838 	bl	8000638 <__aeabi_dmul>
 800b5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	4689      	mov	r9, r1
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	f7f5 f830 	bl	8000638 <__aeabi_dmul>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4640      	mov	r0, r8
 800b5de:	4649      	mov	r1, r9
 800b5e0:	f7f4 fe74 	bl	80002cc <__adddf3>
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f5 f822 	bl	8000638 <__aeabi_dmul>
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7f4 fe64 	bl	80002cc <__adddf3>
 800b604:	4b19      	ldr	r3, [pc, #100]	; (800b66c <__ieee754_pow+0x3fc>)
 800b606:	4299      	cmp	r1, r3
 800b608:	ec45 4b19 	vmov	d9, r4, r5
 800b60c:	4606      	mov	r6, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	468b      	mov	fp, r1
 800b612:	f340 82f1 	ble.w	800bbf8 <__ieee754_pow+0x988>
 800b616:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b61a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b61e:	4303      	orrs	r3, r0
 800b620:	f000 81e4 	beq.w	800b9ec <__ieee754_pow+0x77c>
 800b624:	ec51 0b18 	vmov	r0, r1, d8
 800b628:	2200      	movs	r2, #0
 800b62a:	2300      	movs	r3, #0
 800b62c:	f7f5 fa76 	bl	8000b1c <__aeabi_dcmplt>
 800b630:	3800      	subs	r0, #0
 800b632:	bf18      	it	ne
 800b634:	2001      	movne	r0, #1
 800b636:	e72b      	b.n	800b490 <__ieee754_pow+0x220>
 800b638:	60000000 	.word	0x60000000
 800b63c:	3ff71547 	.word	0x3ff71547
 800b640:	f85ddf44 	.word	0xf85ddf44
 800b644:	3e54ae0b 	.word	0x3e54ae0b
 800b648:	55555555 	.word	0x55555555
 800b64c:	3fd55555 	.word	0x3fd55555
 800b650:	652b82fe 	.word	0x652b82fe
 800b654:	3ff71547 	.word	0x3ff71547
 800b658:	00000000 	.word	0x00000000
 800b65c:	bff00000 	.word	0xbff00000
 800b660:	3ff00000 	.word	0x3ff00000
 800b664:	3fd00000 	.word	0x3fd00000
 800b668:	3fe00000 	.word	0x3fe00000
 800b66c:	408fffff 	.word	0x408fffff
 800b670:	4bd5      	ldr	r3, [pc, #852]	; (800b9c8 <__ieee754_pow+0x758>)
 800b672:	402b      	ands	r3, r5
 800b674:	2200      	movs	r2, #0
 800b676:	b92b      	cbnz	r3, 800b684 <__ieee754_pow+0x414>
 800b678:	4bd4      	ldr	r3, [pc, #848]	; (800b9cc <__ieee754_pow+0x75c>)
 800b67a:	f7f4 ffdd 	bl	8000638 <__aeabi_dmul>
 800b67e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b682:	460c      	mov	r4, r1
 800b684:	1523      	asrs	r3, r4, #20
 800b686:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b68a:	4413      	add	r3, r2
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	4bd0      	ldr	r3, [pc, #832]	; (800b9d0 <__ieee754_pow+0x760>)
 800b690:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b694:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b698:	429c      	cmp	r4, r3
 800b69a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b69e:	dd08      	ble.n	800b6b2 <__ieee754_pow+0x442>
 800b6a0:	4bcc      	ldr	r3, [pc, #816]	; (800b9d4 <__ieee754_pow+0x764>)
 800b6a2:	429c      	cmp	r4, r3
 800b6a4:	f340 8162 	ble.w	800b96c <__ieee754_pow+0x6fc>
 800b6a8:	9b05      	ldr	r3, [sp, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b6b2:	2400      	movs	r4, #0
 800b6b4:	00e3      	lsls	r3, r4, #3
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	4bc7      	ldr	r3, [pc, #796]	; (800b9d8 <__ieee754_pow+0x768>)
 800b6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6be:	ed93 7b00 	vldr	d7, [r3]
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	ec53 2b17 	vmov	r2, r3, d7
 800b6c8:	eeb0 9a47 	vmov.f32	s18, s14
 800b6cc:	eef0 9a67 	vmov.f32	s19, s15
 800b6d0:	4682      	mov	sl, r0
 800b6d2:	f7f4 fdf9 	bl	80002c8 <__aeabi_dsub>
 800b6d6:	4652      	mov	r2, sl
 800b6d8:	4606      	mov	r6, r0
 800b6da:	460f      	mov	r7, r1
 800b6dc:	462b      	mov	r3, r5
 800b6de:	ec51 0b19 	vmov	r0, r1, d9
 800b6e2:	f7f4 fdf3 	bl	80002cc <__adddf3>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	49bb      	ldr	r1, [pc, #748]	; (800b9dc <__ieee754_pow+0x76c>)
 800b6ee:	f7f5 f8cd 	bl	800088c <__aeabi_ddiv>
 800b6f2:	ec41 0b1a 	vmov	d10, r0, r1
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 ff9b 	bl	8000638 <__aeabi_dmul>
 800b702:	2300      	movs	r3, #0
 800b704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b708:	9302      	str	r3, [sp, #8]
 800b70a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b70e:	46ab      	mov	fp, r5
 800b710:	106d      	asrs	r5, r5, #1
 800b712:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b716:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b71a:	ec41 0b18 	vmov	d8, r0, r1
 800b71e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b722:	2200      	movs	r2, #0
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	4614      	mov	r4, r2
 800b72a:	461d      	mov	r5, r3
 800b72c:	f7f4 ff84 	bl	8000638 <__aeabi_dmul>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f4 fdc6 	bl	80002c8 <__aeabi_dsub>
 800b73c:	ec53 2b19 	vmov	r2, r3, d9
 800b740:	4606      	mov	r6, r0
 800b742:	460f      	mov	r7, r1
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f4 fdbe 	bl	80002c8 <__aeabi_dsub>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4650      	mov	r0, sl
 800b752:	4659      	mov	r1, fp
 800b754:	f7f4 fdb8 	bl	80002c8 <__aeabi_dsub>
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	f7f4 ff6c 	bl	8000638 <__aeabi_dmul>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4630      	mov	r0, r6
 800b766:	4639      	mov	r1, r7
 800b768:	f7f4 fdae 	bl	80002c8 <__aeabi_dsub>
 800b76c:	ec53 2b1a 	vmov	r2, r3, d10
 800b770:	f7f4 ff62 	bl	8000638 <__aeabi_dmul>
 800b774:	ec53 2b18 	vmov	r2, r3, d8
 800b778:	ec41 0b19 	vmov	d9, r0, r1
 800b77c:	ec51 0b18 	vmov	r0, r1, d8
 800b780:	f7f4 ff5a 	bl	8000638 <__aeabi_dmul>
 800b784:	a37c      	add	r3, pc, #496	; (adr r3, 800b978 <__ieee754_pow+0x708>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	4604      	mov	r4, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	f7f4 ff53 	bl	8000638 <__aeabi_dmul>
 800b792:	a37b      	add	r3, pc, #492	; (adr r3, 800b980 <__ieee754_pow+0x710>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 fd98 	bl	80002cc <__adddf3>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	f7f4 ff4a 	bl	8000638 <__aeabi_dmul>
 800b7a4:	a378      	add	r3, pc, #480	; (adr r3, 800b988 <__ieee754_pow+0x718>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 fd8f 	bl	80002cc <__adddf3>
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	f7f4 ff41 	bl	8000638 <__aeabi_dmul>
 800b7b6:	a376      	add	r3, pc, #472	; (adr r3, 800b990 <__ieee754_pow+0x720>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f4 fd86 	bl	80002cc <__adddf3>
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	f7f4 ff38 	bl	8000638 <__aeabi_dmul>
 800b7c8:	a373      	add	r3, pc, #460	; (adr r3, 800b998 <__ieee754_pow+0x728>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f4 fd7d 	bl	80002cc <__adddf3>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	f7f4 ff2f 	bl	8000638 <__aeabi_dmul>
 800b7da:	a371      	add	r3, pc, #452	; (adr r3, 800b9a0 <__ieee754_pow+0x730>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f7f4 fd74 	bl	80002cc <__adddf3>
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	f7f4 ff22 	bl	8000638 <__aeabi_dmul>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f4 ff1c 	bl	8000638 <__aeabi_dmul>
 800b800:	4642      	mov	r2, r8
 800b802:	4604      	mov	r4, r0
 800b804:	460d      	mov	r5, r1
 800b806:	464b      	mov	r3, r9
 800b808:	ec51 0b18 	vmov	r0, r1, d8
 800b80c:	f7f4 fd5e 	bl	80002cc <__adddf3>
 800b810:	ec53 2b19 	vmov	r2, r3, d9
 800b814:	f7f4 ff10 	bl	8000638 <__aeabi_dmul>
 800b818:	4622      	mov	r2, r4
 800b81a:	462b      	mov	r3, r5
 800b81c:	f7f4 fd56 	bl	80002cc <__adddf3>
 800b820:	4642      	mov	r2, r8
 800b822:	4682      	mov	sl, r0
 800b824:	468b      	mov	fp, r1
 800b826:	464b      	mov	r3, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	f7f4 ff04 	bl	8000638 <__aeabi_dmul>
 800b830:	4b6b      	ldr	r3, [pc, #428]	; (800b9e0 <__ieee754_pow+0x770>)
 800b832:	2200      	movs	r2, #0
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	f7f4 fd48 	bl	80002cc <__adddf3>
 800b83c:	4652      	mov	r2, sl
 800b83e:	465b      	mov	r3, fp
 800b840:	f7f4 fd44 	bl	80002cc <__adddf3>
 800b844:	2000      	movs	r0, #0
 800b846:	4604      	mov	r4, r0
 800b848:	460d      	mov	r5, r1
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f4 fef1 	bl	8000638 <__aeabi_dmul>
 800b856:	4b62      	ldr	r3, [pc, #392]	; (800b9e0 <__ieee754_pow+0x770>)
 800b858:	4680      	mov	r8, r0
 800b85a:	4689      	mov	r9, r1
 800b85c:	2200      	movs	r2, #0
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f4 fd31 	bl	80002c8 <__aeabi_dsub>
 800b866:	4632      	mov	r2, r6
 800b868:	463b      	mov	r3, r7
 800b86a:	f7f4 fd2d 	bl	80002c8 <__aeabi_dsub>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4650      	mov	r0, sl
 800b874:	4659      	mov	r1, fp
 800b876:	f7f4 fd27 	bl	80002c8 <__aeabi_dsub>
 800b87a:	ec53 2b18 	vmov	r2, r3, d8
 800b87e:	f7f4 fedb 	bl	8000638 <__aeabi_dmul>
 800b882:	4622      	mov	r2, r4
 800b884:	4606      	mov	r6, r0
 800b886:	460f      	mov	r7, r1
 800b888:	462b      	mov	r3, r5
 800b88a:	ec51 0b19 	vmov	r0, r1, d9
 800b88e:	f7f4 fed3 	bl	8000638 <__aeabi_dmul>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 fd17 	bl	80002cc <__adddf3>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	f7f4 fd0f 	bl	80002cc <__adddf3>
 800b8ae:	a33e      	add	r3, pc, #248	; (adr r3, 800b9a8 <__ieee754_pow+0x738>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	f7f4 febd 	bl	8000638 <__aeabi_dmul>
 800b8be:	4642      	mov	r2, r8
 800b8c0:	ec41 0b18 	vmov	d8, r0, r1
 800b8c4:	464b      	mov	r3, r9
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f4 fcfd 	bl	80002c8 <__aeabi_dsub>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fcf7 	bl	80002c8 <__aeabi_dsub>
 800b8da:	a335      	add	r3, pc, #212	; (adr r3, 800b9b0 <__ieee754_pow+0x740>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 feaa 	bl	8000638 <__aeabi_dmul>
 800b8e4:	a334      	add	r3, pc, #208	; (adr r3, 800b9b8 <__ieee754_pow+0x748>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460f      	mov	r7, r1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	f7f4 fea1 	bl	8000638 <__aeabi_dmul>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	f7f4 fce5 	bl	80002cc <__adddf3>
 800b902:	9a07      	ldr	r2, [sp, #28]
 800b904:	4b37      	ldr	r3, [pc, #220]	; (800b9e4 <__ieee754_pow+0x774>)
 800b906:	4413      	add	r3, r2
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fcde 	bl	80002cc <__adddf3>
 800b910:	4682      	mov	sl, r0
 800b912:	9805      	ldr	r0, [sp, #20]
 800b914:	468b      	mov	fp, r1
 800b916:	f7f4 fe25 	bl	8000564 <__aeabi_i2d>
 800b91a:	9a07      	ldr	r2, [sp, #28]
 800b91c:	4b32      	ldr	r3, [pc, #200]	; (800b9e8 <__ieee754_pow+0x778>)
 800b91e:	4413      	add	r3, r2
 800b920:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b924:	4606      	mov	r6, r0
 800b926:	460f      	mov	r7, r1
 800b928:	4652      	mov	r2, sl
 800b92a:	465b      	mov	r3, fp
 800b92c:	ec51 0b18 	vmov	r0, r1, d8
 800b930:	f7f4 fccc 	bl	80002cc <__adddf3>
 800b934:	4642      	mov	r2, r8
 800b936:	464b      	mov	r3, r9
 800b938:	f7f4 fcc8 	bl	80002cc <__adddf3>
 800b93c:	4632      	mov	r2, r6
 800b93e:	463b      	mov	r3, r7
 800b940:	f7f4 fcc4 	bl	80002cc <__adddf3>
 800b944:	2000      	movs	r0, #0
 800b946:	4632      	mov	r2, r6
 800b948:	463b      	mov	r3, r7
 800b94a:	4604      	mov	r4, r0
 800b94c:	460d      	mov	r5, r1
 800b94e:	f7f4 fcbb 	bl	80002c8 <__aeabi_dsub>
 800b952:	4642      	mov	r2, r8
 800b954:	464b      	mov	r3, r9
 800b956:	f7f4 fcb7 	bl	80002c8 <__aeabi_dsub>
 800b95a:	ec53 2b18 	vmov	r2, r3, d8
 800b95e:	f7f4 fcb3 	bl	80002c8 <__aeabi_dsub>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4650      	mov	r0, sl
 800b968:	4659      	mov	r1, fp
 800b96a:	e610      	b.n	800b58e <__ieee754_pow+0x31e>
 800b96c:	2401      	movs	r4, #1
 800b96e:	e6a1      	b.n	800b6b4 <__ieee754_pow+0x444>
 800b970:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b9c0 <__ieee754_pow+0x750>
 800b974:	e617      	b.n	800b5a6 <__ieee754_pow+0x336>
 800b976:	bf00      	nop
 800b978:	4a454eef 	.word	0x4a454eef
 800b97c:	3fca7e28 	.word	0x3fca7e28
 800b980:	93c9db65 	.word	0x93c9db65
 800b984:	3fcd864a 	.word	0x3fcd864a
 800b988:	a91d4101 	.word	0xa91d4101
 800b98c:	3fd17460 	.word	0x3fd17460
 800b990:	518f264d 	.word	0x518f264d
 800b994:	3fd55555 	.word	0x3fd55555
 800b998:	db6fabff 	.word	0xdb6fabff
 800b99c:	3fdb6db6 	.word	0x3fdb6db6
 800b9a0:	33333303 	.word	0x33333303
 800b9a4:	3fe33333 	.word	0x3fe33333
 800b9a8:	e0000000 	.word	0xe0000000
 800b9ac:	3feec709 	.word	0x3feec709
 800b9b0:	dc3a03fd 	.word	0xdc3a03fd
 800b9b4:	3feec709 	.word	0x3feec709
 800b9b8:	145b01f5 	.word	0x145b01f5
 800b9bc:	be3e2fe0 	.word	0xbe3e2fe0
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	3ff00000 	.word	0x3ff00000
 800b9c8:	7ff00000 	.word	0x7ff00000
 800b9cc:	43400000 	.word	0x43400000
 800b9d0:	0003988e 	.word	0x0003988e
 800b9d4:	000bb679 	.word	0x000bb679
 800b9d8:	0800c538 	.word	0x0800c538
 800b9dc:	3ff00000 	.word	0x3ff00000
 800b9e0:	40080000 	.word	0x40080000
 800b9e4:	0800c558 	.word	0x0800c558
 800b9e8:	0800c548 	.word	0x0800c548
 800b9ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800bcc4 <__ieee754_pow+0xa54>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	f7f4 fc69 	bl	80002cc <__adddf3>
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	ec41 0b1a 	vmov	d10, r0, r1
 800ba00:	462b      	mov	r3, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f4 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	ec51 0b1a 	vmov	r0, r1, d10
 800ba12:	f7f5 f8a1 	bl	8000b58 <__aeabi_dcmpgt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f47f ae04 	bne.w	800b624 <__ieee754_pow+0x3b4>
 800ba1c:	4aa4      	ldr	r2, [pc, #656]	; (800bcb0 <__ieee754_pow+0xa40>)
 800ba1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba22:	4293      	cmp	r3, r2
 800ba24:	f340 8108 	ble.w	800bc38 <__ieee754_pow+0x9c8>
 800ba28:	151b      	asrs	r3, r3, #20
 800ba2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ba2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ba32:	fa4a f303 	asr.w	r3, sl, r3
 800ba36:	445b      	add	r3, fp
 800ba38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ba3c:	4e9d      	ldr	r6, [pc, #628]	; (800bcb4 <__ieee754_pow+0xa44>)
 800ba3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ba42:	4116      	asrs	r6, r2
 800ba44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ba48:	2000      	movs	r0, #0
 800ba4a:	ea23 0106 	bic.w	r1, r3, r6
 800ba4e:	f1c2 0214 	rsb	r2, r2, #20
 800ba52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ba56:	fa4a fa02 	asr.w	sl, sl, r2
 800ba5a:	f1bb 0f00 	cmp.w	fp, #0
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	bfb8      	it	lt
 800ba68:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba6c:	f7f4 fc2c 	bl	80002c8 <__aeabi_dsub>
 800ba70:	ec41 0b19 	vmov	d9, r0, r1
 800ba74:	4642      	mov	r2, r8
 800ba76:	464b      	mov	r3, r9
 800ba78:	ec51 0b19 	vmov	r0, r1, d9
 800ba7c:	f7f4 fc26 	bl	80002cc <__adddf3>
 800ba80:	a37b      	add	r3, pc, #492	; (adr r3, 800bc70 <__ieee754_pow+0xa00>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	2000      	movs	r0, #0
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	f7f4 fdd4 	bl	8000638 <__aeabi_dmul>
 800ba90:	ec53 2b19 	vmov	r2, r3, d9
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	4620      	mov	r0, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	f7f4 fc14 	bl	80002c8 <__aeabi_dsub>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4640      	mov	r0, r8
 800baa6:	4649      	mov	r1, r9
 800baa8:	f7f4 fc0e 	bl	80002c8 <__aeabi_dsub>
 800baac:	a372      	add	r3, pc, #456	; (adr r3, 800bc78 <__ieee754_pow+0xa08>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fdc1 	bl	8000638 <__aeabi_dmul>
 800bab6:	a372      	add	r3, pc, #456	; (adr r3, 800bc80 <__ieee754_pow+0xa10>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	4620      	mov	r0, r4
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7f4 fdb8 	bl	8000638 <__aeabi_dmul>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4640      	mov	r0, r8
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f4 fbfc 	bl	80002cc <__adddf3>
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4630      	mov	r0, r6
 800bade:	4639      	mov	r1, r7
 800bae0:	f7f4 fbf4 	bl	80002cc <__adddf3>
 800bae4:	4632      	mov	r2, r6
 800bae6:	463b      	mov	r3, r7
 800bae8:	4680      	mov	r8, r0
 800baea:	4689      	mov	r9, r1
 800baec:	f7f4 fbec 	bl	80002c8 <__aeabi_dsub>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f4 fbe6 	bl	80002c8 <__aeabi_dsub>
 800bafc:	4642      	mov	r2, r8
 800bafe:	4606      	mov	r6, r0
 800bb00:	460f      	mov	r7, r1
 800bb02:	464b      	mov	r3, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	4649      	mov	r1, r9
 800bb08:	f7f4 fd96 	bl	8000638 <__aeabi_dmul>
 800bb0c:	a35e      	add	r3, pc, #376	; (adr r3, 800bc88 <__ieee754_pow+0xa18>)
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	4604      	mov	r4, r0
 800bb14:	460d      	mov	r5, r1
 800bb16:	f7f4 fd8f 	bl	8000638 <__aeabi_dmul>
 800bb1a:	a35d      	add	r3, pc, #372	; (adr r3, 800bc90 <__ieee754_pow+0xa20>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fbd2 	bl	80002c8 <__aeabi_dsub>
 800bb24:	4622      	mov	r2, r4
 800bb26:	462b      	mov	r3, r5
 800bb28:	f7f4 fd86 	bl	8000638 <__aeabi_dmul>
 800bb2c:	a35a      	add	r3, pc, #360	; (adr r3, 800bc98 <__ieee754_pow+0xa28>)
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f7f4 fbcb 	bl	80002cc <__adddf3>
 800bb36:	4622      	mov	r2, r4
 800bb38:	462b      	mov	r3, r5
 800bb3a:	f7f4 fd7d 	bl	8000638 <__aeabi_dmul>
 800bb3e:	a358      	add	r3, pc, #352	; (adr r3, 800bca0 <__ieee754_pow+0xa30>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fbc0 	bl	80002c8 <__aeabi_dsub>
 800bb48:	4622      	mov	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	f7f4 fd74 	bl	8000638 <__aeabi_dmul>
 800bb50:	a355      	add	r3, pc, #340	; (adr r3, 800bca8 <__ieee754_pow+0xa38>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f7f4 fbb9 	bl	80002cc <__adddf3>
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	462b      	mov	r3, r5
 800bb5e:	f7f4 fd6b 	bl	8000638 <__aeabi_dmul>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fbad 	bl	80002c8 <__aeabi_dsub>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	4640      	mov	r0, r8
 800bb78:	4649      	mov	r1, r9
 800bb7a:	f7f4 fd5d 	bl	8000638 <__aeabi_dmul>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	ec41 0b19 	vmov	d9, r0, r1
 800bb84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fb9c 	bl	80002c8 <__aeabi_dsub>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	ec51 0b19 	vmov	r0, r1, d9
 800bb98:	f7f4 fe78 	bl	800088c <__aeabi_ddiv>
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	463b      	mov	r3, r7
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 fd46 	bl	8000638 <__aeabi_dmul>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 fb8c 	bl	80002cc <__adddf3>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f7f4 fb84 	bl	80002c8 <__aeabi_dsub>
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	f7f4 fb80 	bl	80002c8 <__aeabi_dsub>
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4602      	mov	r2, r0
 800bbcc:	493a      	ldr	r1, [pc, #232]	; (800bcb8 <__ieee754_pow+0xa48>)
 800bbce:	2000      	movs	r0, #0
 800bbd0:	f7f4 fb7a 	bl	80002c8 <__aeabi_dsub>
 800bbd4:	ec41 0b10 	vmov	d0, r0, r1
 800bbd8:	ee10 3a90 	vmov	r3, s1
 800bbdc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bbe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe4:	da2b      	bge.n	800bc3e <__ieee754_pow+0x9ce>
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	f000 f96e 	bl	800bec8 <scalbn>
 800bbec:	ec51 0b10 	vmov	r0, r1, d0
 800bbf0:	ec53 2b18 	vmov	r2, r3, d8
 800bbf4:	f7ff bbed 	b.w	800b3d2 <__ieee754_pow+0x162>
 800bbf8:	4b30      	ldr	r3, [pc, #192]	; (800bcbc <__ieee754_pow+0xa4c>)
 800bbfa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bbfe:	429e      	cmp	r6, r3
 800bc00:	f77f af0c 	ble.w	800ba1c <__ieee754_pow+0x7ac>
 800bc04:	4b2e      	ldr	r3, [pc, #184]	; (800bcc0 <__ieee754_pow+0xa50>)
 800bc06:	440b      	add	r3, r1
 800bc08:	4303      	orrs	r3, r0
 800bc0a:	d009      	beq.n	800bc20 <__ieee754_pow+0x9b0>
 800bc0c:	ec51 0b18 	vmov	r0, r1, d8
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	f7f4 ff82 	bl	8000b1c <__aeabi_dcmplt>
 800bc18:	3800      	subs	r0, #0
 800bc1a:	bf18      	it	ne
 800bc1c:	2001      	movne	r0, #1
 800bc1e:	e447      	b.n	800b4b0 <__ieee754_pow+0x240>
 800bc20:	4622      	mov	r2, r4
 800bc22:	462b      	mov	r3, r5
 800bc24:	f7f4 fb50 	bl	80002c8 <__aeabi_dsub>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	f7f4 ff8a 	bl	8000b44 <__aeabi_dcmpge>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	f43f aef3 	beq.w	800ba1c <__ieee754_pow+0x7ac>
 800bc36:	e7e9      	b.n	800bc0c <__ieee754_pow+0x99c>
 800bc38:	f04f 0a00 	mov.w	sl, #0
 800bc3c:	e71a      	b.n	800ba74 <__ieee754_pow+0x804>
 800bc3e:	ec51 0b10 	vmov	r0, r1, d0
 800bc42:	4619      	mov	r1, r3
 800bc44:	e7d4      	b.n	800bbf0 <__ieee754_pow+0x980>
 800bc46:	491c      	ldr	r1, [pc, #112]	; (800bcb8 <__ieee754_pow+0xa48>)
 800bc48:	2000      	movs	r0, #0
 800bc4a:	f7ff bb30 	b.w	800b2ae <__ieee754_pow+0x3e>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	2100      	movs	r1, #0
 800bc52:	f7ff bb2c 	b.w	800b2ae <__ieee754_pow+0x3e>
 800bc56:	4630      	mov	r0, r6
 800bc58:	4639      	mov	r1, r7
 800bc5a:	f7ff bb28 	b.w	800b2ae <__ieee754_pow+0x3e>
 800bc5e:	9204      	str	r2, [sp, #16]
 800bc60:	f7ff bb7a 	b.w	800b358 <__ieee754_pow+0xe8>
 800bc64:	2300      	movs	r3, #0
 800bc66:	f7ff bb64 	b.w	800b332 <__ieee754_pow+0xc2>
 800bc6a:	bf00      	nop
 800bc6c:	f3af 8000 	nop.w
 800bc70:	00000000 	.word	0x00000000
 800bc74:	3fe62e43 	.word	0x3fe62e43
 800bc78:	fefa39ef 	.word	0xfefa39ef
 800bc7c:	3fe62e42 	.word	0x3fe62e42
 800bc80:	0ca86c39 	.word	0x0ca86c39
 800bc84:	be205c61 	.word	0xbe205c61
 800bc88:	72bea4d0 	.word	0x72bea4d0
 800bc8c:	3e663769 	.word	0x3e663769
 800bc90:	c5d26bf1 	.word	0xc5d26bf1
 800bc94:	3ebbbd41 	.word	0x3ebbbd41
 800bc98:	af25de2c 	.word	0xaf25de2c
 800bc9c:	3f11566a 	.word	0x3f11566a
 800bca0:	16bebd93 	.word	0x16bebd93
 800bca4:	3f66c16c 	.word	0x3f66c16c
 800bca8:	5555553e 	.word	0x5555553e
 800bcac:	3fc55555 	.word	0x3fc55555
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	000fffff 	.word	0x000fffff
 800bcb8:	3ff00000 	.word	0x3ff00000
 800bcbc:	4090cbff 	.word	0x4090cbff
 800bcc0:	3f6f3400 	.word	0x3f6f3400
 800bcc4:	652b82fe 	.word	0x652b82fe
 800bcc8:	3c971547 	.word	0x3c971547

0800bccc <__ieee754_sqrt>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	ec55 4b10 	vmov	r4, r5, d0
 800bcd4:	4e55      	ldr	r6, [pc, #340]	; (800be2c <__ieee754_sqrt+0x160>)
 800bcd6:	43ae      	bics	r6, r5
 800bcd8:	ee10 0a10 	vmov	r0, s0
 800bcdc:	ee10 3a10 	vmov	r3, s0
 800bce0:	462a      	mov	r2, r5
 800bce2:	4629      	mov	r1, r5
 800bce4:	d110      	bne.n	800bd08 <__ieee754_sqrt+0x3c>
 800bce6:	ee10 2a10 	vmov	r2, s0
 800bcea:	462b      	mov	r3, r5
 800bcec:	f7f4 fca4 	bl	8000638 <__aeabi_dmul>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 fae8 	bl	80002cc <__adddf3>
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	460d      	mov	r5, r1
 800bd00:	ec45 4b10 	vmov	d0, r4, r5
 800bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd08:	2d00      	cmp	r5, #0
 800bd0a:	dc10      	bgt.n	800bd2e <__ieee754_sqrt+0x62>
 800bd0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd10:	4330      	orrs	r0, r6
 800bd12:	d0f5      	beq.n	800bd00 <__ieee754_sqrt+0x34>
 800bd14:	b15d      	cbz	r5, 800bd2e <__ieee754_sqrt+0x62>
 800bd16:	ee10 2a10 	vmov	r2, s0
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	ee10 0a10 	vmov	r0, s0
 800bd20:	f7f4 fad2 	bl	80002c8 <__aeabi_dsub>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	f7f4 fdb0 	bl	800088c <__aeabi_ddiv>
 800bd2c:	e7e6      	b.n	800bcfc <__ieee754_sqrt+0x30>
 800bd2e:	1512      	asrs	r2, r2, #20
 800bd30:	d074      	beq.n	800be1c <__ieee754_sqrt+0x150>
 800bd32:	07d4      	lsls	r4, r2, #31
 800bd34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bd38:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bd3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bd40:	bf5e      	ittt	pl
 800bd42:	0fda      	lsrpl	r2, r3, #31
 800bd44:	005b      	lslpl	r3, r3, #1
 800bd46:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bd4a:	2400      	movs	r4, #0
 800bd4c:	0fda      	lsrs	r2, r3, #31
 800bd4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bd52:	107f      	asrs	r7, r7, #1
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	2516      	movs	r5, #22
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bd5e:	1886      	adds	r6, r0, r2
 800bd60:	428e      	cmp	r6, r1
 800bd62:	bfde      	ittt	le
 800bd64:	1b89      	suble	r1, r1, r6
 800bd66:	18b0      	addle	r0, r6, r2
 800bd68:	18a4      	addle	r4, r4, r2
 800bd6a:	0049      	lsls	r1, r1, #1
 800bd6c:	3d01      	subs	r5, #1
 800bd6e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bd72:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bd76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd7a:	d1f0      	bne.n	800bd5e <__ieee754_sqrt+0x92>
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	f04f 0e20 	mov.w	lr, #32
 800bd82:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bd86:	4281      	cmp	r1, r0
 800bd88:	eb06 0c05 	add.w	ip, r6, r5
 800bd8c:	dc02      	bgt.n	800bd94 <__ieee754_sqrt+0xc8>
 800bd8e:	d113      	bne.n	800bdb8 <__ieee754_sqrt+0xec>
 800bd90:	459c      	cmp	ip, r3
 800bd92:	d811      	bhi.n	800bdb8 <__ieee754_sqrt+0xec>
 800bd94:	f1bc 0f00 	cmp.w	ip, #0
 800bd98:	eb0c 0506 	add.w	r5, ip, r6
 800bd9c:	da43      	bge.n	800be26 <__ieee754_sqrt+0x15a>
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	db41      	blt.n	800be26 <__ieee754_sqrt+0x15a>
 800bda2:	f100 0801 	add.w	r8, r0, #1
 800bda6:	1a09      	subs	r1, r1, r0
 800bda8:	459c      	cmp	ip, r3
 800bdaa:	bf88      	it	hi
 800bdac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bdb0:	eba3 030c 	sub.w	r3, r3, ip
 800bdb4:	4432      	add	r2, r6
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bdbc:	f1be 0e01 	subs.w	lr, lr, #1
 800bdc0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bdc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bdcc:	d1db      	bne.n	800bd86 <__ieee754_sqrt+0xba>
 800bdce:	430b      	orrs	r3, r1
 800bdd0:	d006      	beq.n	800bde0 <__ieee754_sqrt+0x114>
 800bdd2:	1c50      	adds	r0, r2, #1
 800bdd4:	bf13      	iteet	ne
 800bdd6:	3201      	addne	r2, #1
 800bdd8:	3401      	addeq	r4, #1
 800bdda:	4672      	moveq	r2, lr
 800bddc:	f022 0201 	bicne.w	r2, r2, #1
 800bde0:	1063      	asrs	r3, r4, #1
 800bde2:	0852      	lsrs	r2, r2, #1
 800bde4:	07e1      	lsls	r1, r4, #31
 800bde6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bdea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bdee:	bf48      	it	mi
 800bdf0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bdf4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	e781      	b.n	800bd00 <__ieee754_sqrt+0x34>
 800bdfc:	0ad9      	lsrs	r1, r3, #11
 800bdfe:	3815      	subs	r0, #21
 800be00:	055b      	lsls	r3, r3, #21
 800be02:	2900      	cmp	r1, #0
 800be04:	d0fa      	beq.n	800bdfc <__ieee754_sqrt+0x130>
 800be06:	02cd      	lsls	r5, r1, #11
 800be08:	d50a      	bpl.n	800be20 <__ieee754_sqrt+0x154>
 800be0a:	f1c2 0420 	rsb	r4, r2, #32
 800be0e:	fa23 f404 	lsr.w	r4, r3, r4
 800be12:	1e55      	subs	r5, r2, #1
 800be14:	4093      	lsls	r3, r2
 800be16:	4321      	orrs	r1, r4
 800be18:	1b42      	subs	r2, r0, r5
 800be1a:	e78a      	b.n	800bd32 <__ieee754_sqrt+0x66>
 800be1c:	4610      	mov	r0, r2
 800be1e:	e7f0      	b.n	800be02 <__ieee754_sqrt+0x136>
 800be20:	0049      	lsls	r1, r1, #1
 800be22:	3201      	adds	r2, #1
 800be24:	e7ef      	b.n	800be06 <__ieee754_sqrt+0x13a>
 800be26:	4680      	mov	r8, r0
 800be28:	e7bd      	b.n	800bda6 <__ieee754_sqrt+0xda>
 800be2a:	bf00      	nop
 800be2c:	7ff00000 	.word	0x7ff00000

0800be30 <with_errno>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	4616      	mov	r6, r2
 800be38:	f000 f8cc 	bl	800bfd4 <__errno>
 800be3c:	4629      	mov	r1, r5
 800be3e:	6006      	str	r6, [r0, #0]
 800be40:	4620      	mov	r0, r4
 800be42:	bd70      	pop	{r4, r5, r6, pc}

0800be44 <xflow>:
 800be44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be46:	4614      	mov	r4, r2
 800be48:	461d      	mov	r5, r3
 800be4a:	b108      	cbz	r0, 800be50 <xflow+0xc>
 800be4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be50:	e9cd 2300 	strd	r2, r3, [sp]
 800be54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be58:	4620      	mov	r0, r4
 800be5a:	4629      	mov	r1, r5
 800be5c:	f7f4 fbec 	bl	8000638 <__aeabi_dmul>
 800be60:	2222      	movs	r2, #34	; 0x22
 800be62:	b003      	add	sp, #12
 800be64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be68:	f7ff bfe2 	b.w	800be30 <with_errno>

0800be6c <__math_uflow>:
 800be6c:	b508      	push	{r3, lr}
 800be6e:	2200      	movs	r2, #0
 800be70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be74:	f7ff ffe6 	bl	800be44 <xflow>
 800be78:	ec41 0b10 	vmov	d0, r0, r1
 800be7c:	bd08      	pop	{r3, pc}

0800be7e <__math_oflow>:
 800be7e:	b508      	push	{r3, lr}
 800be80:	2200      	movs	r2, #0
 800be82:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800be86:	f7ff ffdd 	bl	800be44 <xflow>
 800be8a:	ec41 0b10 	vmov	d0, r0, r1
 800be8e:	bd08      	pop	{r3, pc}

0800be90 <fabs>:
 800be90:	ec51 0b10 	vmov	r0, r1, d0
 800be94:	ee10 2a10 	vmov	r2, s0
 800be98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be9c:	ec43 2b10 	vmov	d0, r2, r3
 800bea0:	4770      	bx	lr

0800bea2 <finite>:
 800bea2:	b082      	sub	sp, #8
 800bea4:	ed8d 0b00 	vstr	d0, [sp]
 800bea8:	9801      	ldr	r0, [sp, #4]
 800beaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800beae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800beb2:	0fc0      	lsrs	r0, r0, #31
 800beb4:	b002      	add	sp, #8
 800beb6:	4770      	bx	lr

0800beb8 <nan>:
 800beb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bec0 <nan+0x8>
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	00000000 	.word	0x00000000
 800bec4:	7ff80000 	.word	0x7ff80000

0800bec8 <scalbn>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	ec55 4b10 	vmov	r4, r5, d0
 800bece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bed2:	4606      	mov	r6, r0
 800bed4:	462b      	mov	r3, r5
 800bed6:	b99a      	cbnz	r2, 800bf00 <scalbn+0x38>
 800bed8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bedc:	4323      	orrs	r3, r4
 800bede:	d036      	beq.n	800bf4e <scalbn+0x86>
 800bee0:	4b39      	ldr	r3, [pc, #228]	; (800bfc8 <scalbn+0x100>)
 800bee2:	4629      	mov	r1, r5
 800bee4:	ee10 0a10 	vmov	r0, s0
 800bee8:	2200      	movs	r2, #0
 800beea:	f7f4 fba5 	bl	8000638 <__aeabi_dmul>
 800beee:	4b37      	ldr	r3, [pc, #220]	; (800bfcc <scalbn+0x104>)
 800bef0:	429e      	cmp	r6, r3
 800bef2:	4604      	mov	r4, r0
 800bef4:	460d      	mov	r5, r1
 800bef6:	da10      	bge.n	800bf1a <scalbn+0x52>
 800bef8:	a32b      	add	r3, pc, #172	; (adr r3, 800bfa8 <scalbn+0xe0>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	e03a      	b.n	800bf76 <scalbn+0xae>
 800bf00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf04:	428a      	cmp	r2, r1
 800bf06:	d10c      	bne.n	800bf22 <scalbn+0x5a>
 800bf08:	ee10 2a10 	vmov	r2, s0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 f9dc 	bl	80002cc <__adddf3>
 800bf14:	4604      	mov	r4, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	e019      	b.n	800bf4e <scalbn+0x86>
 800bf1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf1e:	460b      	mov	r3, r1
 800bf20:	3a36      	subs	r2, #54	; 0x36
 800bf22:	4432      	add	r2, r6
 800bf24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf28:	428a      	cmp	r2, r1
 800bf2a:	dd08      	ble.n	800bf3e <scalbn+0x76>
 800bf2c:	2d00      	cmp	r5, #0
 800bf2e:	a120      	add	r1, pc, #128	; (adr r1, 800bfb0 <scalbn+0xe8>)
 800bf30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf34:	da1c      	bge.n	800bf70 <scalbn+0xa8>
 800bf36:	a120      	add	r1, pc, #128	; (adr r1, 800bfb8 <scalbn+0xf0>)
 800bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf3c:	e018      	b.n	800bf70 <scalbn+0xa8>
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	dd08      	ble.n	800bf54 <scalbn+0x8c>
 800bf42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf4e:	ec45 4b10 	vmov	d0, r4, r5
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf58:	da19      	bge.n	800bf8e <scalbn+0xc6>
 800bf5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf5e:	429e      	cmp	r6, r3
 800bf60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bf64:	dd0a      	ble.n	800bf7c <scalbn+0xb4>
 800bf66:	a112      	add	r1, pc, #72	; (adr r1, 800bfb0 <scalbn+0xe8>)
 800bf68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e2      	bne.n	800bf36 <scalbn+0x6e>
 800bf70:	a30f      	add	r3, pc, #60	; (adr r3, 800bfb0 <scalbn+0xe8>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 fb5f 	bl	8000638 <__aeabi_dmul>
 800bf7a:	e7cb      	b.n	800bf14 <scalbn+0x4c>
 800bf7c:	a10a      	add	r1, pc, #40	; (adr r1, 800bfa8 <scalbn+0xe0>)
 800bf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0b8      	beq.n	800bef8 <scalbn+0x30>
 800bf86:	a10e      	add	r1, pc, #56	; (adr r1, 800bfc0 <scalbn+0xf8>)
 800bf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf8c:	e7b4      	b.n	800bef8 <scalbn+0x30>
 800bf8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf92:	3236      	adds	r2, #54	; 0x36
 800bf94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <scalbn+0x108>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	e7e8      	b.n	800bf76 <scalbn+0xae>
 800bfa4:	f3af 8000 	nop.w
 800bfa8:	c2f8f359 	.word	0xc2f8f359
 800bfac:	01a56e1f 	.word	0x01a56e1f
 800bfb0:	8800759c 	.word	0x8800759c
 800bfb4:	7e37e43c 	.word	0x7e37e43c
 800bfb8:	8800759c 	.word	0x8800759c
 800bfbc:	fe37e43c 	.word	0xfe37e43c
 800bfc0:	c2f8f359 	.word	0xc2f8f359
 800bfc4:	81a56e1f 	.word	0x81a56e1f
 800bfc8:	43500000 	.word	0x43500000
 800bfcc:	ffff3cb0 	.word	0xffff3cb0
 800bfd0:	3c900000 	.word	0x3c900000

0800bfd4 <__errno>:
 800bfd4:	4b01      	ldr	r3, [pc, #4]	; (800bfdc <__errno+0x8>)
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20000014 	.word	0x20000014

0800bfe0 <_close>:
 800bfe0:	4b02      	ldr	r3, [pc, #8]	; (800bfec <_close+0xc>)
 800bfe2:	2258      	movs	r2, #88	; 0x58
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfea:	4770      	bx	lr
 800bfec:	200066d4 	.word	0x200066d4

0800bff0 <_fstat>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	; (800bffc <_fstat+0xc>)
 800bff2:	2258      	movs	r2, #88	; 0x58
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f04f 30ff 	mov.w	r0, #4294967295
 800bffa:	4770      	bx	lr
 800bffc:	200066d4 	.word	0x200066d4

0800c000 <_getpid>:
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <_getpid+0xc>)
 800c002:	2258      	movs	r2, #88	; 0x58
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	f04f 30ff 	mov.w	r0, #4294967295
 800c00a:	4770      	bx	lr
 800c00c:	200066d4 	.word	0x200066d4

0800c010 <_isatty>:
 800c010:	4b02      	ldr	r3, [pc, #8]	; (800c01c <_isatty+0xc>)
 800c012:	2258      	movs	r2, #88	; 0x58
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	2000      	movs	r0, #0
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	200066d4 	.word	0x200066d4

0800c020 <_kill>:
 800c020:	4b02      	ldr	r3, [pc, #8]	; (800c02c <_kill+0xc>)
 800c022:	2258      	movs	r2, #88	; 0x58
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	4770      	bx	lr
 800c02c:	200066d4 	.word	0x200066d4

0800c030 <_lseek>:
 800c030:	4b02      	ldr	r3, [pc, #8]	; (800c03c <_lseek+0xc>)
 800c032:	2258      	movs	r2, #88	; 0x58
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	4770      	bx	lr
 800c03c:	200066d4 	.word	0x200066d4

0800c040 <_read>:
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <_read+0xc>)
 800c042:	2258      	movs	r2, #88	; 0x58
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	f04f 30ff 	mov.w	r0, #4294967295
 800c04a:	4770      	bx	lr
 800c04c:	200066d4 	.word	0x200066d4

0800c050 <_sbrk>:
 800c050:	4a04      	ldr	r2, [pc, #16]	; (800c064 <_sbrk+0x14>)
 800c052:	6811      	ldr	r1, [r2, #0]
 800c054:	4603      	mov	r3, r0
 800c056:	b909      	cbnz	r1, 800c05c <_sbrk+0xc>
 800c058:	4903      	ldr	r1, [pc, #12]	; (800c068 <_sbrk+0x18>)
 800c05a:	6011      	str	r1, [r2, #0]
 800c05c:	6810      	ldr	r0, [r2, #0]
 800c05e:	4403      	add	r3, r0
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	4770      	bx	lr
 800c064:	200066d8 	.word	0x200066d8
 800c068:	200066e0 	.word	0x200066e0

0800c06c <_write>:
 800c06c:	4b02      	ldr	r3, [pc, #8]	; (800c078 <_write+0xc>)
 800c06e:	2258      	movs	r2, #88	; 0x58
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	f04f 30ff 	mov.w	r0, #4294967295
 800c076:	4770      	bx	lr
 800c078:	200066d4 	.word	0x200066d4

0800c07c <_exit>:
 800c07c:	e7fe      	b.n	800c07c <_exit>
	...

0800c080 <_init>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr

0800c08c <_fini>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	bf00      	nop
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr
